
STM32U575ZIT6Q-gpio-dac-dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b150  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000557  0800b388  0800b388  0000c388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b8e0  0800b8e0  0000c8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b8e8  0800b8e8  0000c8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b8ec  0800b8ec  0000c8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000124  20000000  0800b8f0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008a90  20000124  0800ba14  0000d124  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20008bb4  0800ba14  0000dbb4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000d124  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001eeb7  00000000  00000000  0000d15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003bd3  00000000  00000000  0002c011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001910  00000000  00000000  0002fbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001371  00000000  00000000  000314f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035455  00000000  00000000  00032869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000203ca  00000000  00000000  00067cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149340  00000000  00000000  00088088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d13c8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007234  00000000  00000000  001d140c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  001d8640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000124 	.word	0x20000124
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b370 	.word	0x0800b370

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000128 	.word	0x20000128
 8000274:	0800b370 	.word	0x0800b370

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIOQueue_Config>:
  * @brief  DMA Linked-list GPIOQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_GPIOQueue_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b09c      	sub	sp, #112	@ 0x70
 8000594:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 8000596:	2300      	movs	r3, #0
 8000598:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800059c:	2321      	movs	r3, #33	@ 0x21
 800059e:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_TIM2_UP;
 80005a0:	233c      	movs	r3, #60	@ 0x3c
 80005a2:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ac:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 80005ae:	2308      	movs	r3, #8
 80005b0:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80005ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80005be:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	627b      	str	r3, [r7, #36]	@ 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 80005cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80005d0:	633b      	str	r3, [r7, #48]	@ 0x30
  pNodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 80005d2:	2300      	movs	r3, #0
 80005d4:	643b      	str	r3, [r7, #64]	@ 0x40
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80005d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80005da:	647b      	str	r3, [r7, #68]	@ 0x44
  pNodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM2_TRGO;
 80005dc:	232a      	movs	r3, #42	@ 0x2a
 80005de:	64bb      	str	r3, [r7, #72]	@ 0x48
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pNodeConfig.SrcAddress = (uint32_t) GPIOVals; //stGPIOVals
 80005e8:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <MX_GPIOQueue_Config+0xb4>)
 80005ea:	663b      	str	r3, [r7, #96]	@ 0x60
		break;
	case PORTD:
		pNodeConfig.DstAddress = (uint32_t)&(GPIOD->ODR);
		break;
	case PORTE:
		pNodeConfig.DstAddress = (uint32_t)&(GPIOE->ODR);
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <MX_GPIOQueue_Config+0xb8>)
 80005ee:	667b      	str	r3, [r7, #100]	@ 0x64
		break;
 80005f0:	bf00      	nop
	default:
		pNodeConfig.DstAddress = (uint32_t)&(GPIOE->ODR);
		break;
}

  pNodeConfig.DataSize = NVALS * sizeof(uint32_t); // NV
 80005f2:	2340      	movs	r3, #64	@ 0x40
 80005f4:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Build GPIOENode Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &stGPIONode);
 80005f6:	463b      	mov	r3, r7
 80005f8:	4914      	ldr	r1, [pc, #80]	@ (800064c <MX_GPIOQueue_Config+0xbc>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 f972 	bl	80038e4 <HAL_DMAEx_List_BuildNode>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000608:	4313      	orrs	r3, r2
 800060a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  /* Insert GPIOENode to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&stGPIOQueue, &stGPIONode);
 800060e:	490f      	ldr	r1, [pc, #60]	@ (800064c <MX_GPIOQueue_Config+0xbc>)
 8000610:	480f      	ldr	r0, [pc, #60]	@ (8000650 <MX_GPIOQueue_Config+0xc0>)
 8000612:	f003 f993 	bl	800393c <HAL_DMAEx_List_InsertNode_Tail>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800061e:	4313      	orrs	r3, r2
 8000620:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  ret |= HAL_DMAEx_List_SetCircularMode(&stGPIOQueue);
 8000624:	480a      	ldr	r0, [pc, #40]	@ (8000650 <MX_GPIOQueue_Config+0xc0>)
 8000626:	f003 fa01 	bl	8003a2c <HAL_DMAEx_List_SetCircularMode>
 800062a:	4603      	mov	r3, r0
 800062c:	461a      	mov	r2, r3
 800062e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000632:	4313      	orrs	r3, r2
 8000634:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

   return ret;
 8000638:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800063c:	4618      	mov	r0, r3
 800063e:	3770      	adds	r7, #112	@ 0x70
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000060 	.word	0x20000060
 8000648:	42021014 	.word	0x42021014
 800064c:	20000140 	.word	0x20000140
 8000650:	20000164 	.word	0x20000164

08000654 <MX_DACQueue_Config>:
  * @brief  DMA Linked-list DACQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_DACQueue_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09c      	sub	sp, #112	@ 0x70
 8000658:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 800065a:	2300      	movs	r3, #0
 800065c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8000660:	2321      	movs	r3, #33	@ 0x21
 8000662:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_DAC1_CH1;
 8000664:	2302      	movs	r3, #2
 8000666:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000670:	2308      	movs	r3, #8
 8000672:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8000678:	2302      	movs	r3, #2
 800067a:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800067c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000680:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	62bb      	str	r3, [r7, #40]	@ 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800068a:	2300      	movs	r3, #0
 800068c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800068e:	2300      	movs	r3, #0
 8000690:	633b      	str	r3, [r7, #48]	@ 0x30
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8000692:	2300      	movs	r3, #0
 8000694:	647b      	str	r3, [r7, #68]	@ 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8000696:	2300      	movs	r3, #0
 8000698:	63bb      	str	r3, [r7, #56]	@ 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800069a:	2300      	movs	r3, #0
 800069c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pNodeConfig.SrcAddress = (uint32_t)DACVals; //stDACVals
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <MX_DACQueue_Config+0xa4>)
 80006a0:	663b      	str	r3, [r7, #96]	@ 0x60
  pNodeConfig.DstAddress = (uint32_t)&(DAC1->DOR1);
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <MX_DACQueue_Config+0xa8>)
 80006a4:	667b      	str	r3, [r7, #100]	@ 0x64
  pNodeConfig.DataSize = NVALS * sizeof(uint32_t); // NV
 80006a6:	2340      	movs	r3, #64	@ 0x40
 80006a8:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Build DACNode Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &stDACNode);
 80006aa:	463b      	mov	r3, r7
 80006ac:	4914      	ldr	r1, [pc, #80]	@ (8000700 <MX_DACQueue_Config+0xac>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 f918 	bl	80038e4 <HAL_DMAEx_List_BuildNode>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80006bc:	4313      	orrs	r3, r2
 80006be:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  /* Insert DACNode to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&stDACQueue, &stDACNode);
 80006c2:	490f      	ldr	r1, [pc, #60]	@ (8000700 <MX_DACQueue_Config+0xac>)
 80006c4:	480f      	ldr	r0, [pc, #60]	@ (8000704 <MX_DACQueue_Config+0xb0>)
 80006c6:	f003 f939 	bl	800393c <HAL_DMAEx_List_InsertNode_Tail>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80006d2:	4313      	orrs	r3, r2
 80006d4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  ret |= HAL_DMAEx_List_SetCircularMode(&stDACQueue);
 80006d8:	480a      	ldr	r0, [pc, #40]	@ (8000704 <MX_DACQueue_Config+0xb0>)
 80006da:	f003 f9a7 	bl	8003a2c <HAL_DMAEx_List_SetCircularMode>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80006e6:	4313      	orrs	r3, r2
 80006e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

   return ret;
 80006ec:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3770      	adds	r7, #112	@ 0x70
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000020 	.word	0x20000020
 80006fc:	4602182c 	.word	0x4602182c
 8000700:	2000017c 	.word	0x2000017c
 8000704:	200001a0 	.word	0x200001a0

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070e:	f001 fb91 	bl	8001e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000712:	f000 f8b4 	bl	800087e <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 f85f 	bl	80007d8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b2b      	ldr	r3, [pc, #172]	@ (80007c8 <main+0xc0>)
 800071c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000720:	4a29      	ldr	r2, [pc, #164]	@ (80007c8 <main+0xc0>)
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800072a:	4b27      	ldr	r3, [pc, #156]	@ (80007c8 <main+0xc0>)
 800072c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 // HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &DACVals[0], 16, DAC_ALIGN_12B_R);
 // HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)DACVals, 16, DAC_ALIGN_12B_R);

 // HAL_TIM_Base_Start(&htim1);

  stInitilize();
 8000738:	f000 fb2e 	bl	8000d98 <stInitilize>
  stStartStimulation();
 800073c:	f000 fb3a 	bl	8000db4 <stStartStimulation>
//  state = st_disabled;
//  stGetGlobalState(&state);
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000740:	2000      	movs	r0, #0
 8000742:	f001 f925 	bl	8001990 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000746:	2001      	movs	r0, #1
 8000748:	f001 f922 	bl	8001990 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800074c:	2002      	movs	r0, #2
 800074e:	f001 f91f 	bl	8001990 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000752:	2101      	movs	r1, #1
 8000754:	2000      	movs	r0, #0
 8000756:	f001 f9ff 	bl	8001b58 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800075a:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <main+0xc4>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000760:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000762:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <main+0xc4>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000768:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <main+0xc4>)
 800076a:	2200      	movs	r2, #0
 800076c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800076e:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <main+0xc4>)
 8000770:	2200      	movs	r2, #0
 8000772:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000774:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <main+0xc4>)
 8000776:	2200      	movs	r2, #0
 8000778:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800077a:	4914      	ldr	r1, [pc, #80]	@ (80007cc <main+0xc4>)
 800077c:	2000      	movs	r0, #0
 800077e:	f001 fa79 	bl	8001c74 <BSP_COM_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <main+0x84>
  {
    Error_Handler();
 8000788:	f000 f8b6 	bl	80008f8 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 800078c:	4810      	ldr	r0, [pc, #64]	@ (80007d0 <main+0xc8>)
 800078e:	f009 ff5b 	bl	800a648 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000792:	2000      	movs	r0, #0
 8000794:	f001 f98c 	bl	8001ab0 <BSP_LED_On>
  BSP_LED_On(LED_BLUE);
 8000798:	2001      	movs	r0, #1
 800079a:	f001 f989 	bl	8001ab0 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 800079e:	2002      	movs	r0, #2
 80007a0:	f001 f986 	bl	8001ab0 <BSP_LED_On>

  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 80007a4:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <main+0xcc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d1fb      	bne.n	80007a4 <main+0x9c>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <main+0xcc>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f001 f9a6 	bl	8001b04 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_BLUE);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f001 f9a3 	bl	8001b04 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 80007be:	2002      	movs	r0, #2
 80007c0:	f001 f9a0 	bl	8001b04 <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED)
 80007c4:	e7ee      	b.n	80007a4 <main+0x9c>
 80007c6:	bf00      	nop
 80007c8:	46020c00 	.word	0x46020c00
 80007cc:	200001b8 	.word	0x200001b8
 80007d0:	0800b388 	.word	0x0800b388
 80007d4:	200001c8 	.word	0x200001c8

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09e      	sub	sp, #120	@ 0x78
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0318 	add.w	r3, r7, #24
 80007e2:	2260      	movs	r2, #96	@ 0x60
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f009 ff83 	bl	800a6f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
 80007fa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80007fc:	2000      	movs	r0, #0
 80007fe:	f004 fa81 	bl	8004d04 <HAL_PWREx_ControlVoltageScaling>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000808:	f000 f876 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800080c:	231a      	movs	r3, #26
 800080e:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000816:	2310      	movs	r3, #16
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800081a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800081e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000824:	2310      	movs	r3, #16
 8000826:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000828:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800082c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000832:	2300      	movs	r3, #0
 8000834:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0318 	add.w	r3, r7, #24
 800083a:	4618      	mov	r0, r3
 800083c:	f004 fb5e 	bl	8004efc <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000846:	f000 f857 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	231f      	movs	r3, #31
 800084c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f005 fa24 	bl	8005cb4 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000872:	f000 f841 	bl	80008f8 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3778      	adds	r7, #120	@ 0x78
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000882:	f004 fb2b 	bl	8004edc <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000886:	2002      	movs	r0, #2
 8000888:	f004 fac8 	bl	8004e1c <HAL_PWREx_ConfigSupply>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000892:	f000 f831 	bl	80008f8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d101      	bne.n	80008b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ae:	f001 faf1 	bl	8001e94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2) {
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008ba:	d102      	bne.n	80008c2 <HAL_TIM_PeriodElapsedCallback+0x26>
	  BSP_LED_Toggle(LED_BLUE);
 80008bc:	2001      	movs	r0, #1
 80008be:	f001 f921 	bl	8001b04 <BSP_LED_Toggle>
  }
  /* USER CODE END Callback 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40014800 	.word	0x40014800

080008d0 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80008e0:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <BSP_PB_Callback+0x24>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	601a      	str	r2, [r3, #0]
  }
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	200001c8 	.word	0x200001c8

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <st_HALIinitilize>:
// Private function declaration
void st_DACDMAConfig();
void stError_Handler();
// Function implementations

void st_HALIinitilize(){
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

	st_GPIO_Init();
 8000908:	f000 f84c 	bl	80009a4 <st_GPIO_Init>
	st_GPDMA_Init();
 800090c:	f000 f8ba 	bl	8000a84 <st_GPDMA_Init>
	st_ICACHE_Init();
 8000910:	f000 f934 	bl	8000b7c <st_ICACHE_Init>
	st_DAC_Init();
 8000914:	f000 f93e 	bl	8000b94 <st_DAC_Init>
	st_TIM_Init();
 8000918:	f000 f990 	bl	8000c3c <st_TIM_Init>

	if (MX_GPIOQueue_Config() != HAL_OK)
 800091c:	f7ff fe38 	bl	8000590 <MX_GPIOQueue_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <st_HALIinitilize+0x26>
		stError_Handler();
 8000926:	f000 fa31 	bl	8000d8c <stError_Handler>
	HAL_DMAEx_List_LinkQ(&hGPDMA1_GPIO, &stGPIOQueue);
 800092a:	490d      	ldr	r1, [pc, #52]	@ (8000960 <st_HALIinitilize+0x5c>)
 800092c:	480d      	ldr	r0, [pc, #52]	@ (8000964 <st_HALIinitilize+0x60>)
 800092e:	f003 f8dd 	bl	8003aec <HAL_DMAEx_List_LinkQ>
	HAL_DMAEx_List_Start(&hGPDMA1_GPIO);
 8000932:	480c      	ldr	r0, [pc, #48]	@ (8000964 <st_HALIinitilize+0x60>)
 8000934:	f002 fece 	bl	80036d4 <HAL_DMAEx_List_Start>


	if (MX_DACQueue_Config() != HAL_OK)
 8000938:	f7ff fe8c 	bl	8000654 <MX_DACQueue_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <st_HALIinitilize+0x42>
		stError_Handler();
 8000942:	f000 fa23 	bl	8000d8c <stError_Handler>
	HAL_DMAEx_List_LinkQ(&hGPDMA1_DAC, &stDACQueue);
 8000946:	4908      	ldr	r1, [pc, #32]	@ (8000968 <st_HALIinitilize+0x64>)
 8000948:	4808      	ldr	r0, [pc, #32]	@ (800096c <st_HALIinitilize+0x68>)
 800094a:	f003 f8cf 	bl	8003aec <HAL_DMAEx_List_LinkQ>
	__HAL_LINKDMA(&hdac, DMA_Handle1, hGPDMA1_DAC);
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <st_HALIinitilize+0x6c>)
 8000950:	4a06      	ldr	r2, [pc, #24]	@ (800096c <st_HALIinitilize+0x68>)
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <st_HALIinitilize+0x68>)
 8000956:	4a06      	ldr	r2, [pc, #24]	@ (8000970 <st_HALIinitilize+0x6c>)
 8000958:	65da      	str	r2, [r3, #92]	@ 0x5c

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000164 	.word	0x20000164
 8000964:	20000334 	.word	0x20000334
 8000968:	200001a0 	.word	0x200001a0
 800096c:	200003ac 	.word	0x200003ac
 8000970:	200002f8 	.word	0x200002f8

08000974 <st_DMA_Start>:

void st_DMA_Start(){
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start(&htim);
 8000978:	4809      	ldr	r0, [pc, #36]	@ (80009a0 <st_DMA_Start+0x2c>)
 800097a:	f008 fa93 	bl	8008ea4 <HAL_TIM_Base_Start>
	// GPIOS and DAC output


	switch (TIM) {
		case T2:
			TIM2->DIER |= (TIM_DIER_UDE) |  TIM_DIER_CC1DE;
 800097e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000988:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800098c:	60d3      	str	r3, [r2, #12]
			break;
 800098e:	bf00      	nop
	//HAL_DMA_Start(&handle_GPDMA1_Channel10,  (uint32_t *)DACVals, (uint32_t)&(DAC1->DOR1), 16);
	// HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)DACVals, NVALS, DAC_ALIGN_12B_R);
	/*  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel10, &DACQueue);
	HAL_DMAEx_List_Start(&handle_GPDMA1_Channel10);*/

	st_DACDMAConfig();
 8000990:	f000 f9a2 	bl	8000cd8 <st_DACDMAConfig>
	HAL_TIM_Base_Start_IT(&htim);//(&htim1, TIM_CHANNEL_1);
 8000994:	4802      	ldr	r0, [pc, #8]	@ (80009a0 <st_DMA_Start+0x2c>)
 8000996:	f008 fb1d 	bl	8008fd4 <HAL_TIM_Base_Start_IT>

	/* Enable DAC selected channel and associated DMA */// &stDACVals[0] and GPIO_DAC_SIZE

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000424 	.word	0x20000424

080009a4 <st_GPIO_Init>:

void st_DMA_Stop(){
	HAL_TIM_Base_Stop(&htim);
}

void st_GPIO_Init(void){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	@ 0x38
 80009a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = CH0_Pin|CH1_Pin|CH2_Pin|CH3_Pin
 80009ba:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 80009be:	623b      	str	r3, [r7, #32]
			  |CH4_Pin|CH5_Pin|CH6_Pin|CH7_Pin|TRIGGER_Pin|DIR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
			__HAL_RCC_GPIOD_CLK_ENABLE();
			HAL_GPIO_WritePin(GPIOD, GPIO_InitStruct.Pin, GPIO_PIN_RESET);
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
			break;
		case PORTE:
			__HAL_RCC_GPIOE_CLK_ENABLE();
 80009cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000a78 <st_GPIO_Init+0xd4>)
 80009ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d2:	4a29      	ldr	r2, [pc, #164]	@ (8000a78 <st_GPIO_Init+0xd4>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009dc:	4b26      	ldr	r3, [pc, #152]	@ (8000a78 <st_GPIO_Init+0xd4>)
 80009de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
			HAL_GPIO_WritePin(GPIOE, GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	2200      	movs	r2, #0
 80009f0:	4619      	mov	r1, r3
 80009f2:	4822      	ldr	r0, [pc, #136]	@ (8000a7c <st_GPIO_Init+0xd8>)
 80009f4:	f004 f944 	bl	8004c80 <HAL_GPIO_WritePin>
			HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	4619      	mov	r1, r3
 80009fe:	481f      	ldr	r0, [pc, #124]	@ (8000a7c <st_GPIO_Init+0xd8>)
 8000a00:	f003 fe88 	bl	8004714 <HAL_GPIO_Init>
			break;
 8000a04:	bf00      	nop
			__HAL_RCC_GPIOE_CLK_ENABLE();
			HAL_GPIO_WritePin(GPIOF, GPIO_InitStruct.Pin, GPIO_PIN_RESET);
			HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
			break;
	}
	uint8_t iter = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	//uint16_t pins[] = {CH0_Pin, CH1_Pin, CH2_Pin, CH3_Pin, CH4_Pin,CH5_Pin, CH6_Pin,
		//	CH7_Pin, TRIGGER_Pin, DIR_Pin};
	for (iter = 0; iter < MAX_PIN_CNT;iter++){
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000a12:	e00f      	b.n	8000a34 <st_GPIO_Init+0x90>
		HAL_GPIO_WritePin(GPIOE, pins[iter], GPIO_PIN_SET);
 8000a14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a18:	4a19      	ldr	r2, [pc, #100]	@ (8000a80 <st_GPIO_Init+0xdc>)
 8000a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	2201      	movs	r2, #1
 8000a22:	4619      	mov	r1, r3
 8000a24:	4815      	ldr	r0, [pc, #84]	@ (8000a7c <st_GPIO_Init+0xd8>)
 8000a26:	f004 f92b 	bl	8004c80 <HAL_GPIO_WritePin>
	for (iter = 0; iter < MAX_PIN_CNT;iter++){
 8000a2a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a2e:	3301      	adds	r3, #1
 8000a30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000a34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a38:	2b09      	cmp	r3, #9
 8000a3a:	d9eb      	bls.n	8000a14 <st_GPIO_Init+0x70>
	}
	for (iter = 0; iter < MAX_PIN_CNT;iter++){
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000a42:	e00f      	b.n	8000a64 <st_GPIO_Init+0xc0>
		HAL_GPIO_WritePin(GPIOE, pins[iter], GPIO_PIN_RESET);
 8000a44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a48:	4a0d      	ldr	r2, [pc, #52]	@ (8000a80 <st_GPIO_Init+0xdc>)
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	2200      	movs	r2, #0
 8000a52:	4619      	mov	r1, r3
 8000a54:	4809      	ldr	r0, [pc, #36]	@ (8000a7c <st_GPIO_Init+0xd8>)
 8000a56:	f004 f913 	bl	8004c80 <HAL_GPIO_WritePin>
	for (iter = 0; iter < MAX_PIN_CNT;iter++){
 8000a5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a5e:	3301      	adds	r3, #1
 8000a60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000a64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a68:	2b09      	cmp	r3, #9
 8000a6a:	d9eb      	bls.n	8000a44 <st_GPIO_Init+0xa0>
	}




}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3738      	adds	r7, #56	@ 0x38
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	46020c00 	.word	0x46020c00
 8000a7c:	42021000 	.word	0x42021000
 8000a80:	20000000 	.word	0x20000000

08000a84 <st_GPDMA_Init>:

void st_GPDMA_Init(void){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN GPDMA1_Init 0 */

	/* USER CODE END GPDMA1_Init 0 */

	/* Peripheral clock enable */
	__HAL_RCC_GPDMA1_CLK_ENABLE();
 8000a8a:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <st_GPDMA_Init+0xe4>)
 8000a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a90:	4a35      	ldr	r2, [pc, #212]	@ (8000b68 <st_GPDMA_Init+0xe4>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000a9a:	4b33      	ldr	r3, [pc, #204]	@ (8000b68 <st_GPDMA_Init+0xe4>)
 8000a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]

	/* GPDMA1 interrupt Init */
	switch (GPIO_GPDMA) {
		case st_ch11:
			HAL_NVIC_SetPriority(GPDMA1_Channel11_IRQn, 0, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2053      	movs	r0, #83	@ 0x53
 8000aae:	f001 fb11 	bl	80020d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(GPDMA1_Channel11_IRQn);
 8000ab2:	2053      	movs	r0, #83	@ 0x53
 8000ab4:	f001 fb28 	bl	8002108 <HAL_NVIC_EnableIRQ>
			hGPDMA1_GPIO.Instance = GPDMA1_Channel11;
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <st_GPDMA_Init+0xe8>)
 8000aba:	4a2d      	ldr	r2, [pc, #180]	@ (8000b70 <st_GPDMA_Init+0xec>)
 8000abc:	601a      	str	r2, [r3, #0]
			break;
 8000abe:	bf00      	nop
			HAL_NVIC_SetPriority(GPDMA1_Channel11_IRQn, 0, 0);
			HAL_NVIC_EnableIRQ(GPDMA1_Channel11_IRQn);
			hGPDMA1_DAC.Instance = GPDMA1_Channel11;
			break;
		case st_ch10:
			HAL_NVIC_SetPriority(GPDMA1_Channel10_IRQn, 0, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2052      	movs	r0, #82	@ 0x52
 8000ac6:	f001 fb05 	bl	80020d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(GPDMA1_Channel10_IRQn);
 8000aca:	2052      	movs	r0, #82	@ 0x52
 8000acc:	f001 fb1c 	bl	8002108 <HAL_NVIC_EnableIRQ>
			hGPDMA1_DAC.Instance = GPDMA1_Channel10;
 8000ad0:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <st_GPDMA_Init+0xf0>)
 8000ad2:	4a29      	ldr	r2, [pc, #164]	@ (8000b78 <st_GPDMA_Init+0xf4>)
 8000ad4:	601a      	str	r2, [r3, #0]
		default:
			break;
 8000ad6:	bf00      	nop

	/* USER CODE BEGIN GPDMA1_Init 1 */

	/* USER CODE END GPDMA1_Init 1 */

	hGPDMA1_GPIO.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 8000ad8:	4b24      	ldr	r3, [pc, #144]	@ (8000b6c <st_GPDMA_Init+0xe8>)
 8000ada:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000ade:	639a      	str	r2, [r3, #56]	@ 0x38
	hGPDMA1_GPIO.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	@ (8000b6c <st_GPDMA_Init+0xe8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	63da      	str	r2, [r3, #60]	@ 0x3c
	hGPDMA1_GPIO.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <st_GPDMA_Init+0xe8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	641a      	str	r2, [r3, #64]	@ 0x40
	hGPDMA1_GPIO.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <st_GPDMA_Init+0xe8>)
 8000aee:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000af2:	645a      	str	r2, [r3, #68]	@ 0x44
	hGPDMA1_GPIO.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <st_GPDMA_Init+0xe8>)
 8000af6:	2281      	movs	r2, #129	@ 0x81
 8000af8:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_DMAEx_List_Init(&hGPDMA1_GPIO) != HAL_OK)
 8000afa:	481c      	ldr	r0, [pc, #112]	@ (8000b6c <st_GPDMA_Init+0xe8>)
 8000afc:	f002 fcbe 	bl	800347c <HAL_DMAEx_List_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <st_GPDMA_Init+0x86>
	{
		stError_Handler();
 8000b06:	f000 f941 	bl	8000d8c <stError_Handler>
	}
	if (HAL_DMA_ConfigChannelAttributes(&hGPDMA1_GPIO, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	4817      	ldr	r0, [pc, #92]	@ (8000b6c <st_GPDMA_Init+0xe8>)
 8000b0e:	f002 fc53 	bl	80033b8 <HAL_DMA_ConfigChannelAttributes>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <st_GPDMA_Init+0x98>
	{
		stError_Handler();
 8000b18:	f000 f938 	bl	8000d8c <stError_Handler>
	}

	hGPDMA1_DAC.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <st_GPDMA_Init+0xf0>)
 8000b1e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000b22:	639a      	str	r2, [r3, #56]	@ 0x38
	hGPDMA1_DAC.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <st_GPDMA_Init+0xf0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	63da      	str	r2, [r3, #60]	@ 0x3c
	hGPDMA1_DAC.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000b2a:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <st_GPDMA_Init+0xf0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	641a      	str	r2, [r3, #64]	@ 0x40
	hGPDMA1_DAC.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8000b30:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <st_GPDMA_Init+0xf0>)
 8000b32:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000b36:	645a      	str	r2, [r3, #68]	@ 0x44
	hGPDMA1_DAC.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000b38:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <st_GPDMA_Init+0xf0>)
 8000b3a:	2281      	movs	r2, #129	@ 0x81
 8000b3c:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_DMAEx_List_Init(&hGPDMA1_DAC) != HAL_OK)
 8000b3e:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <st_GPDMA_Init+0xf0>)
 8000b40:	f002 fc9c 	bl	800347c <HAL_DMAEx_List_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <st_GPDMA_Init+0xca>
	{
		stError_Handler();
 8000b4a:	f000 f91f 	bl	8000d8c <stError_Handler>
	}
	if (HAL_DMA_ConfigChannelAttributes(&hGPDMA1_DAC, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b4e:	2110      	movs	r1, #16
 8000b50:	4808      	ldr	r0, [pc, #32]	@ (8000b74 <st_GPDMA_Init+0xf0>)
 8000b52:	f002 fc31 	bl	80033b8 <HAL_DMA_ConfigChannelAttributes>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <st_GPDMA_Init+0xdc>
	{
		stError_Handler();
 8000b5c:	f000 f916 	bl	8000d8c <stError_Handler>
	}
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	46020c00 	.word	0x46020c00
 8000b6c:	20000334 	.word	0x20000334
 8000b70:	400205d0 	.word	0x400205d0
 8000b74:	200003ac 	.word	0x200003ac
 8000b78:	40020550 	.word	0x40020550

08000b7c <st_ICACHE_Init>:

void st_ICACHE_Init(void){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	if (HAL_ICACHE_Enable() != HAL_OK)
 8000b80:	f004 f8b0 	bl	8004ce4 <HAL_ICACHE_Enable>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <st_ICACHE_Init+0x12>
	{
		stError_Handler();
 8000b8a:	f000 f8ff 	bl	8000d8c <stError_Handler>
	}
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <st_DAC_Init>:

void st_DAC_Init(void){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	@ 0x38
 8000b98:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	2230      	movs	r2, #48	@ 0x30
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f009 fda5 	bl	800a6f2 <memset>
	DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]

	/** DAC Initialization
	*/
	hdac.Instance = DAC1;
 8000bac:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <st_DAC_Init+0xa0>)
 8000bae:	4a22      	ldr	r2, [pc, #136]	@ (8000c38 <st_DAC_Init+0xa4>)
 8000bb0:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000bb2:	4820      	ldr	r0, [pc, #128]	@ (8000c34 <st_DAC_Init+0xa0>)
 8000bb4:	f001 fb1c 	bl	80021f0 <HAL_DAC_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <st_DAC_Init+0x2e>
	{
		stError_Handler();
 8000bbe:	f000 f8e5 	bl	8000d8c <stError_Handler>
	}

	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	743b      	strb	r3, [r7, #16]
	sConfig.DAC_SignedFormat = DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	747b      	strb	r3, [r7, #17]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bd2:	230a      	movs	r3, #10
 8000bd4:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	2200      	movs	r2, #0
 8000be8:	4619      	mov	r1, r3
 8000bea:	4812      	ldr	r0, [pc, #72]	@ (8000c34 <st_DAC_Init+0xa0>)
 8000bec:	f001 fe04 	bl	80027f8 <HAL_DAC_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <st_DAC_Init+0x66>
	{
		stError_Handler();
 8000bf6:	f000 f8c9 	bl	8000d8c <stError_Handler>
	}

	/** Configure Autonomous Mode
	*/
	sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
	if (HAL_DACEx_SetConfigAutonomousMode(&hdac, &sAutonomousMode) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <st_DAC_Init+0xa0>)
 8000c04:	f002 f92a 	bl	8002e5c <HAL_DACEx_SetConfigAutonomousMode>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <st_DAC_Init+0x7e>
	{
		stError_Handler();
 8000c0e:	f000 f8bd 	bl	8000d8c <stError_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	if( HAL_DACEx_SelfCalibrate(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	2200      	movs	r2, #0
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	@ (8000c34 <st_DAC_Init+0xa0>)
 8000c1c:	f001 ffee 	bl	8002bfc <HAL_DACEx_SelfCalibrate>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <st_DAC_Init+0x96>
	{
		stError_Handler();
 8000c26:	f000 f8b1 	bl	8000d8c <stError_Handler>
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	3738      	adds	r7, #56	@ 0x38
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200002f8 	.word	0x200002f8
 8000c38:	46021800 	.word	0x46021800

08000c3c <st_TIM_Init>:

void st_TIM_Init(void){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
	// uint32_t clkfreq2 = HAL_RCC_GetPCLK2Freq();

	/* USER CODE END TIM_Init 1 */
	switch (TIM) {
		case T2:
			htim.Instance = TIM2;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <st_TIM_Init+0x98>)
 8000c5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c60:	601a      	str	r2, [r3, #0]
			break;
 8000c62:	bf00      	nop
		default:
			break;
	}

	htim.Init.Prescaler = PSK;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <st_TIM_Init+0x98>)
 8000c66:	229f      	movs	r2, #159	@ 0x9f
 8000c68:	605a      	str	r2, [r3, #4]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <st_TIM_Init+0x98>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
	htim.Init.Period = PERIOD;
 8000c70:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <st_TIM_Init+0x98>)
 8000c72:	220a      	movs	r2, #10
 8000c74:	60da      	str	r2, [r3, #12]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c76:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <st_TIM_Init+0x98>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <st_TIM_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim) != HAL_OK)
 8000c82:	4814      	ldr	r0, [pc, #80]	@ (8000cd4 <st_TIM_Init+0x98>)
 8000c84:	f008 f8b6 	bl	8008df4 <HAL_TIM_Base_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <st_TIM_Init+0x56>
	{
		stError_Handler();
 8000c8e:	f000 f87d 	bl	8000d8c <stError_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c96:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig) != HAL_OK)
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	@ (8000cd4 <st_TIM_Init+0x98>)
 8000ca0:	f008 fb88 	bl	80093b4 <HAL_TIM_ConfigClockSource>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <st_TIM_Init+0x72>
	{
		stError_Handler();
 8000caa:	f000 f86f 	bl	8000d8c <stError_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	@ (8000cd4 <st_TIM_Init+0x98>)
 8000cbc:	f008 fe40 	bl	8009940 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <st_TIM_Init+0x8e>
	{
		stError_Handler();
 8000cc6:	f000 f861 	bl	8000d8c <stError_Handler>
	}
}
 8000cca:	bf00      	nop
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000424 	.word	0x20000424

08000cd8 <st_DACDMAConfig>:


void st_DACDMAConfig(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	@ 0x38
 8000cdc:	af02      	add	r7, sp, #8
	/* Stop DMA transfer */
	if(HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1) != HAL_OK)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4827      	ldr	r0, [pc, #156]	@ (8000d80 <st_DACDMAConfig+0xa8>)
 8000ce2:	f001 fcbb 	bl	800265c <HAL_DAC_Stop_DMA>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <st_DACDMAConfig+0x18>
	{
		Error_Handler();
 8000cec:	f7ff fe04 	bl	80008f8 <Error_Handler>
	}

	/* Deinitialize the DAC peripheral */
	if(HAL_DAC_DeInit(&hdac) != HAL_OK)
 8000cf0:	4823      	ldr	r0, [pc, #140]	@ (8000d80 <st_DACDMAConfig+0xa8>)
 8000cf2:	f001 fad1 	bl	8002298 <HAL_DAC_DeInit>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <st_DACDMAConfig+0x28>
	{
		stError_Handler();
 8000cfc:	f000 f846 	bl	8000d8c <stError_Handler>
	}
	DAC_ChannelConfTypeDef sConfig = {0};
 8000d00:	463b      	mov	r3, r7
 8000d02:	2230      	movs	r2, #48	@ 0x30
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f009 fcf3 	bl	800a6f2 <memset>

	/* Set DAC instance */
	hdac.Instance = DAC1;
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <st_DACDMAConfig+0xa8>)
 8000d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8000d84 <st_DACDMAConfig+0xac>)
 8000d10:	601a      	str	r2, [r3, #0]

	/* Initialize DAC */
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d12:	481b      	ldr	r0, [pc, #108]	@ (8000d80 <st_DACDMAConfig+0xa8>)
 8000d14:	f001 fa6c 	bl	80021f0 <HAL_DAC_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <st_DACDMAConfig+0x4a>
	{
	/* Initialization Error */
		stError_Handler();
 8000d1e:	f000 f835 	bl	8000d8c <stError_Handler>
	}

	/* Config Channel */
	sConfig.DAC_Trigger                 = DAC_TRIGGER_T2_TRGO;
 8000d22:	230a      	movs	r3, #10
 8000d24:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer            = DAC_OUTPUTBUFFER_ENABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
	sConfig.DAC_SampleAndHold           = DAC_SAMPLEANDHOLD_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61bb      	str	r3, [r7, #24]

	/* DAC Channel configuration */
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d32:	463b      	mov	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	4811      	ldr	r0, [pc, #68]	@ (8000d80 <st_DACDMAConfig+0xa8>)
 8000d3a:	f001 fd5d 	bl	80027f8 <HAL_DAC_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <st_DACDMAConfig+0x70>
	{
		/* Channel configuration Error */
		stError_Handler();
 8000d44:	f000 f822 	bl	8000d8c <stError_Handler>
	}

	/* DAC calibration */
	if (HAL_DACEx_SelfCalibrate(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <st_DACDMAConfig+0xa8>)
 8000d50:	f001 ff54 	bl	8002bfc <HAL_DACEx_SelfCalibrate>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <st_DACDMAConfig+0x86>
	{
		stError_Handler();
 8000d5a:	f000 f817 	bl	8000d8c <stError_Handler>
	}
	if (HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &DACVals[0], NVALS, DAC_ALIGN_12B_R) != HAL_OK)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2310      	movs	r3, #16
 8000d64:	4a08      	ldr	r2, [pc, #32]	@ (8000d88 <st_DACDMAConfig+0xb0>)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <st_DACDMAConfig+0xa8>)
 8000d6a:	f001 fabd 	bl	80022e8 <HAL_DAC_Start_DMA>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <st_DACDMAConfig+0xa0>
		{
			/* Start DMA Error */
			stError_Handler();
 8000d74:	f000 f80a 	bl	8000d8c <stError_Handler>
	/**
	 * ToDo: align frequency with the GPIO_DAC_SIZE values here.
	 *
	 */

}
 8000d78:	bf00      	nop
 8000d7a:	3730      	adds	r7, #48	@ 0x30
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200002f8 	.word	0x200002f8
 8000d84:	46021800 	.word	0x46021800
 8000d88:	20000020 	.word	0x20000020

08000d8c <stError_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void stError_Handler()
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <stError_Handler+0x8>

08000d98 <stInitilize>:

void stConfigure(){

}

void stInitilize(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	st_HALIinitilize();
 8000d9c:	f7ff fdb2 	bl	8000904 <st_HALIinitilize>
	stConfigureDefault(st_ramp);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f000 fa3d 	bl	8001220 <stConfigureDefault>
	stSetEnableAllChannels(st_enabled);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f000 f906 	bl	8000fb8 <stSetEnableAllChannels>
	stUpdateVectors();
 8000dac:	f000 f80c 	bl	8000dc8 <stUpdateVectors>


}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <stStartStimulation>:

void stStartStimulation(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	stSetGlobalState(st_enabled);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f000 f8e9 	bl	8000f90 <stSetGlobalState>
	st_DMA_Start();
 8000dbe:	f7ff fdd9 	bl	8000974 <st_DMA_Start>
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <stUpdateVectors>:
void stStopStimulation(){
	stSetGlobalState(st_disabled);
	st_DMA_Stop();
}

void stUpdateVectors(){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8000dce:	af00      	add	r7, sp, #0
	uint32_t pos = 0, it2,it =0, len  = 0, actCh=0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
	uint32_t gpios_vals[MAX_SIGNAL_LENGTH];
	for(it = 0 ; it < N_CHAN ; it++){
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8000dee:	e0b6      	b.n	8000f5e <stUpdateVectors+0x196>
		if(stimulator.channels[it].stActiveState == st_enabled){
 8000df0:	4a64      	ldr	r2, [pc, #400]	@ (8000f84 <stUpdateVectors+0x1bc>)
 8000df2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000df6:	f640 014c 	movw	r1, #2124	@ 0x84c
 8000dfa:	fb01 f303 	mul.w	r3, r1, r3
 8000dfe:	4413      	add	r3, r2
 8000e00:	f603 0344 	addw	r3, r3, #2116	@ 0x844
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	f040 80a4 	bne.w	8000f54 <stUpdateVectors+0x18c>
			for(it2 = 0; it2< SEP_SIZE; it2++){
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 8000e12:	e016      	b.n	8000e42 <stUpdateVectors+0x7a>
				stDACVals[pos + it2] = 0;
 8000e14:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8000e18:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a5a      	ldr	r2, [pc, #360]	@ (8000f88 <stUpdateVectors+0x1c0>)
 8000e20:	2100      	movs	r1, #0
 8000e22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				stGPIOVals[pos + it2] = 0;
 8000e26:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8000e2a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a56      	ldr	r2, [pc, #344]	@ (8000f8c <stUpdateVectors+0x1c4>)
 8000e32:	2100      	movs	r1, #0
 8000e34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(it2 = 0; it2< SEP_SIZE; it2++){
 8000e38:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 8000e42:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000e46:	2b09      	cmp	r3, #9
 8000e48:	d9e4      	bls.n	8000e14 <stUpdateVectors+0x4c>
			}
			actCh = stimulator.stStimSequence[it];
 8000e4a:	4a4e      	ldr	r2, [pc, #312]	@ (8000f84 <stUpdateVectors+0x1bc>)
 8000e4c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000e50:	4413      	add	r3, r2
 8000e52:	f503 4384 	add.w	r3, r3, #16896	@ 0x4200
 8000e56:	3364      	adds	r3, #100	@ 0x64
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
			len = stimulator.channels[actCh].stimulus.lastVal;
 8000e5e:	4a49      	ldr	r2, [pc, #292]	@ (8000f84 <stUpdateVectors+0x1bc>)
 8000e60:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8000e64:	f640 014c 	movw	r1, #2124	@ 0x84c
 8000e68:	fb01 f303 	mul.w	r3, r1, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408

			for(it2 = 0 ; it2 < len ; it2++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 8000e7e:	e03a      	b.n	8000ef6 <stUpdateVectors+0x12e>
				gpios_vals[it2] = ( (uint32_t) (stimulator.channels[actCh].stimulus.sign[it2]>0) * stimulator.stSignPin)  |  stimulator.stTriggerPin | stimulator.channels[actCh].stPin;
 8000e80:	4940      	ldr	r1, [pc, #256]	@ (8000f84 <stUpdateVectors+0x1bc>)
 8000e82:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8000e86:	f240 2213 	movw	r2, #531	@ 0x213
 8000e8a:	fb03 f202 	mul.w	r2, r3, r2
 8000e8e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000e92:	4413      	add	r3, r2
 8000e94:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000e98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf14      	ite	ne
 8000ea0:	2301      	movne	r3, #1
 8000ea2:	2300      	moveq	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b36      	ldr	r3, [pc, #216]	@ (8000f84 <stUpdateVectors+0x1bc>)
 8000eaa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000eae:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000eb2:	fb03 f202 	mul.w	r2, r3, r2
 8000eb6:	4b33      	ldr	r3, [pc, #204]	@ (8000f84 <stUpdateVectors+0x1bc>)
 8000eb8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000ebc:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	4930      	ldr	r1, [pc, #192]	@ (8000f84 <stUpdateVectors+0x1bc>)
 8000ec4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8000ec8:	f640 004c 	movw	r0, #2124	@ 0x84c
 8000ecc:	fb00 f303 	mul.w	r3, r0, r3
 8000ed0:	440b      	add	r3, r1
 8000ed2:	f603 0348 	addw	r3, r3, #2120	@ 0x848
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	ea42 0103 	orr.w	r1, r2, r3
 8000edc:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000ee0:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8000ee4:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(it2 = 0 ; it2 < len ; it2++)
 8000eec:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 8000ef6:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8000efa:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d3be      	bcc.n	8000e80 <stUpdateVectors+0xb8>

			memcpy(&stDACVals[pos+SEP_SIZE] , stimulator.channels[actCh].stimulus.intensity , len*sizeof(uint32_t));
 8000f02:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8000f06:	330a      	adds	r3, #10
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f88 <stUpdateVectors+0x1c0>)
 8000f0c:	1898      	adds	r0, r3, r2
 8000f0e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8000f12:	f640 024c 	movw	r2, #2124	@ 0x84c
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000f84 <stUpdateVectors+0x1bc>)
 8000f1c:	1899      	adds	r1, r3, r2
 8000f1e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	461a      	mov	r2, r3
 8000f26:	f009 fc68 	bl	800a7fa <memcpy>
			memcpy(&stGPIOVals[pos+SEP_SIZE], gpios_vals									, len*sizeof(uint32_t));
 8000f2a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8000f2e:	330a      	adds	r3, #10
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4a16      	ldr	r2, [pc, #88]	@ (8000f8c <stUpdateVectors+0x1c4>)
 8000f34:	1898      	adds	r0, r3, r2
 8000f36:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000f3a:	009a      	lsls	r2, r3, #2
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f009 fc5b 	bl	800a7fa <memcpy>
			pos += SEP_SIZE + len;
 8000f44:	f8d7 2408 	ldr.w	r2, [r7, #1032]	@ 0x408
 8000f48:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8000f4c:	4413      	add	r3, r2
 8000f4e:	330a      	adds	r3, #10
 8000f50:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
	for(it = 0 ; it < N_CHAN ; it++){
 8000f54:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000f58:	3301      	adds	r3, #1
 8000f5a:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8000f5e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	f67f af44 	bls.w	8000df0 <stUpdateVectors+0x28>
		}
	}
	stimulator.stStimSize = pos;
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <stUpdateVectors+0x1bc>)
 8000f6a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8000f74:	f8c2 327c 	str.w	r3, [r2, #636]	@ 0x27c
}
 8000f78:	bf00      	nop
 8000f7a:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000470 	.word	0x20000470
 8000f88:	200046f0 	.word	0x200046f0
 8000f8c:	20006830 	.word	0x20006830

08000f90 <stSetGlobalState>:

void stSetGlobalState(st_active_t state){
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]

	stimulator.stGlobalState = state;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <stSetGlobalState+0x24>)
 8000f9c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f882 3278 	strb.w	r3, [r2, #632]	@ 0x278

}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	20000470 	.word	0x20000470

08000fb8 <stSetEnableAllChannels>:

void stGetGlobalState(st_active_t *state){
	*state = stimulator.stGlobalState;
}

void stSetEnableAllChannels(st_active_t state){
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint32_t it;
	for(it = 0; it < N_CHAN; it++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	e00d      	b.n	8000fe4 <stSetEnableAllChannels+0x2c>
		stimulator.channels[it].stActiveState = state;
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <stSetEnableAllChannels+0x40>)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f640 014c 	movw	r1, #2124	@ 0x84c
 8000fd0:	fb01 f303 	mul.w	r3, r1, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	f603 0344 	addw	r3, r3, #2116	@ 0x844
 8000fda:	79fa      	ldrb	r2, [r7, #7]
 8000fdc:	701a      	strb	r2, [r3, #0]
	for(it = 0; it < N_CHAN; it++)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b07      	cmp	r3, #7
 8000fe8:	d9ee      	bls.n	8000fc8 <stSetEnableAllChannels+0x10>
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	20000470 	.word	0x20000470

08000ffc <stSetChannelState>:

uint8_t stSetChannelState(uint8_t channel, st_active_t state){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
	if(channel < N_CHAN){
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b07      	cmp	r3, #7
 8001014:	d80b      	bhi.n	800102e <stSetChannelState+0x32>
		stimulator.channels[channel].stActiveState = state;
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <stSetChannelState+0x48>)
 800101a:	f640 014c 	movw	r1, #2124	@ 0x84c
 800101e:	fb01 f303 	mul.w	r3, r1, r3
 8001022:	4413      	add	r3, r2
 8001024:	f603 0344 	addw	r3, r3, #2116	@ 0x844
 8001028:	79ba      	ldrb	r2, [r7, #6]
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	e002      	b.n	8001034 <stSetChannelState+0x38>
	}
	else
		res--;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	3b01      	subs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
	return res;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000470 	.word	0x20000470

08001048 <stSetPeriod>:
		}
	return res;
}


uint8_t stSetPeriod(uint32_t period){
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	uint8_t res = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]
	if ((period < MAX_PERIOD) && (period >= MIN_PERIOD) )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800105a:	d20a      	bcs.n	8001072 <stSetPeriod+0x2a>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <stSetPeriod+0x2a>
		stimulator.stPeriod = period;
 8001062:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <stSetPeriod+0x4c>)
 8001064:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001068:	461a      	mov	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f8c2 3260 	str.w	r3, [r2, #608]	@ 0x260
 8001070:	e008      	b.n	8001084 <stSetPeriod+0x3c>
	else
	{
		res--;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	3b01      	subs	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
		stimulator.stGlobalState = st_undefined;
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <stSetPeriod+0x4c>)
 800107a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800107e:	2202      	movs	r2, #2
 8001080:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278
	}
	return res;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000470 	.word	0x20000470

08001098 <stSetPort>:
		res--;
	return 0;
}

uint8_t stSetPort(uint32_t port)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	uint8_t res = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
	if (port < MAX_PORT)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b09      	cmp	r3, #9
 80010a8:	d807      	bhi.n	80010ba <stSetPort+0x22>
		stimulator.stPort = port;
 80010aa:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <stSetPort+0x44>)
 80010ac:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80010b0:	461a      	mov	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f8c2 326c 	str.w	r3, [r2, #620]	@ 0x26c
 80010b8:	e008      	b.n	80010cc <stSetPort+0x34>
	else
	{
		res--;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	3b01      	subs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
		stimulator.stGlobalState = st_undefined;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <stSetPort+0x44>)
 80010c2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80010c6:	2202      	movs	r2, #2
 80010c8:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278
	}
	return res;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000470 	.word	0x20000470

080010e0 <stSetChannelPin>:
		res--;
	return res;
}


uint8_t stSetChannelPin(uint8_t chan,uint32_t pin){
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
	if (chan < N_CHAN){
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b07      	cmp	r3, #7
 80010f4:	d81e      	bhi.n	8001134 <stSetChannelPin+0x54>
		if(pin < MAX_PIN)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010fc:	d20b      	bcs.n	8001116 <stSetChannelPin+0x36>
			stimulator.channels[chan].stPin = pin;
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <stSetChannelPin+0x80>)
 8001102:	f640 014c 	movw	r1, #2124	@ 0x84c
 8001106:	fb01 f303 	mul.w	r3, r1, r3
 800110a:	4413      	add	r3, r2
 800110c:	f603 0348 	addw	r3, r3, #2120	@ 0x848
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	e01c      	b.n	8001150 <stSetChannelPin+0x70>
		else
		{
			res-=2;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	3b02      	subs	r3, #2
 800111a:	73fb      	strb	r3, [r7, #15]
			stimulator.channels[chan].stActiveState = st_undefined;
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	4a10      	ldr	r2, [pc, #64]	@ (8001160 <stSetChannelPin+0x80>)
 8001120:	f640 014c 	movw	r1, #2124	@ 0x84c
 8001124:	fb01 f303 	mul.w	r3, r1, r3
 8001128:	4413      	add	r3, r2
 800112a:	f603 0344 	addw	r3, r3, #2116	@ 0x844
 800112e:	2202      	movs	r2, #2
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e00d      	b.n	8001150 <stSetChannelPin+0x70>
		}
	}
	else{
		stimulator.channels[chan].stActiveState = st_undefined;
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <stSetChannelPin+0x80>)
 8001138:	f640 014c 	movw	r1, #2124	@ 0x84c
 800113c:	fb01 f303 	mul.w	r3, r1, r3
 8001140:	4413      	add	r3, r2
 8001142:	f603 0344 	addw	r3, r3, #2116	@ 0x844
 8001146:	2202      	movs	r2, #2
 8001148:	701a      	strb	r2, [r3, #0]
		res--;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	3b01      	subs	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8001150:	7bfb      	ldrb	r3, [r7, #15]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000470 	.word	0x20000470

08001164 <stSetChannelSignal>:
		res--;
	}

	return res;
}
uint8_t stSetChannelSignal(uint8_t ch, uint32_t sz, uint32_t *values, uint32_t *signs ){
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
	uint8_t res = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	75fb      	strb	r3, [r7, #23]
	if (ch < N_CHAN){
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2b07      	cmp	r3, #7
 800117c:	d83a      	bhi.n	80011f4 <stSetChannelSignal+0x90>
		if(sz <= MAX_SIGNAL_LENGTH){
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001184:	d827      	bhi.n	80011d6 <stSetChannelSignal+0x72>
			memcpy(stimulator.channels[ch].stimulus.intensity,values,sz* sizeof(uint32_t));
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	f640 024c 	movw	r2, #2124	@ 0x84c
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	4a22      	ldr	r2, [pc, #136]	@ (800121c <stSetChannelSignal+0xb8>)
 8001192:	1898      	adds	r0, r3, r2
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	461a      	mov	r2, r3
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f009 fb2d 	bl	800a7fa <memcpy>
			memcpy(stimulator.channels[ch].stimulus.sign,signs,sz* sizeof(uint32_t));
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	f640 024c 	movw	r2, #2124	@ 0x84c
 80011a6:	fb02 f303 	mul.w	r3, r2, r3
 80011aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80011ae:	4a1b      	ldr	r2, [pc, #108]	@ (800121c <stSetChannelSignal+0xb8>)
 80011b0:	1898      	adds	r0, r3, r2
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	461a      	mov	r2, r3
 80011b8:	6839      	ldr	r1, [r7, #0]
 80011ba:	f009 fb1e 	bl	800a7fa <memcpy>
			stimulator.channels[ch].stimulus.lastVal = sz;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	4a16      	ldr	r2, [pc, #88]	@ (800121c <stSetChannelSignal+0xb8>)
 80011c2:	f640 014c 	movw	r1, #2124	@ 0x84c
 80011c6:	fb01 f303 	mul.w	r3, r1, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	e01c      	b.n	8001210 <stSetChannelSignal+0xac>
		}
		else{
			res-=2;
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	3b02      	subs	r3, #2
 80011da:	75fb      	strb	r3, [r7, #23]
			stimulator.channels[ch].stActiveState = st_undefined;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	4a0f      	ldr	r2, [pc, #60]	@ (800121c <stSetChannelSignal+0xb8>)
 80011e0:	f640 014c 	movw	r1, #2124	@ 0x84c
 80011e4:	fb01 f303 	mul.w	r3, r1, r3
 80011e8:	4413      	add	r3, r2
 80011ea:	f603 0344 	addw	r3, r3, #2116	@ 0x844
 80011ee:	2202      	movs	r2, #2
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	e00d      	b.n	8001210 <stSetChannelSignal+0xac>
		}
	}
	else{
		res--;
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	75fb      	strb	r3, [r7, #23]
		stimulator.channels[ch].stActiveState = st_undefined;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	4a07      	ldr	r2, [pc, #28]	@ (800121c <stSetChannelSignal+0xb8>)
 80011fe:	f640 014c 	movw	r1, #2124	@ 0x84c
 8001202:	fb01 f303 	mul.w	r3, r1, r3
 8001206:	4413      	add	r3, r2
 8001208:	f603 0344 	addw	r3, r3, #2116	@ 0x844
 800120c:	2202      	movs	r2, #2
 800120e:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8001210:	7dfb      	ldrb	r3, [r7, #23]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000470 	.word	0x20000470

08001220 <stConfigureDefault>:

uint8_t stConfigureDefault(st_signal_type type){
 8001220:	b580      	push	{r7, lr}
 8001222:	f5ad 6d05 	sub.w	sp, sp, #2128	@ 0x850
 8001226:	af00      	add	r7, sp, #0
 8001228:	4602      	mov	r2, r0
 800122a:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 800122e:	f6a3 0349 	subw	r3, r3, #2121	@ 0x849
 8001232:	701a      	strb	r2, [r3, #0]
	uint8_t ch_it,res = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	f887 384e 	strb.w	r3, [r7, #2126]	@ 0x84e

	uint32_t signal[MAX_SIGNAL_LENGTH];
	uint32_t sign[MAX_SIGNAL_LENGTH] = {[0 ... (MAX_SIGNAL_LENGTH-1)] = 1};
 800123a:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 800123e:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 8001242:	4a79      	ldr	r2, [pc, #484]	@ (8001428 <stConfigureDefault+0x208>)
 8001244:	4618      	mov	r0, r3
 8001246:	4611      	mov	r1, r2
 8001248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800124c:	461a      	mov	r2, r3
 800124e:	f009 fad4 	bl	800a7fa <memcpy>
	char label[MAX_LABEL];

	// Trigger and direction pin
	stimulator.stTriggerPin = TRIGGER_Pin;
 8001252:	4b76      	ldr	r3, [pc, #472]	@ (800142c <stConfigureDefault+0x20c>)
 8001254:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001258:	461a      	mov	r2, r3
 800125a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800125e:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274
	stimulator.stSignPin = DIR_Pin;
 8001262:	4b72      	ldr	r3, [pc, #456]	@ (800142c <stConfigureDefault+0x20c>)
 8001264:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001268:	461a      	mov	r2, r3
 800126a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800126e:	f8c2 3270 	str.w	r3, [r2, #624]	@ 0x270

	res += stSetPort(DEFAULT_PORT);
 8001272:	2004      	movs	r0, #4
 8001274:	f7ff ff10 	bl	8001098 <stSetPort>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	f897 384e 	ldrb.w	r3, [r7, #2126]	@ 0x84e
 8001280:	4413      	add	r3, r2
 8001282:	f887 384e 	strb.w	r3, [r7, #2126]	@ 0x84e
	res += stSetPeriod(MAX_PERIOD-1);
 8001286:	f240 102b 	movw	r0, #299	@ 0x12b
 800128a:	f7ff fedd 	bl	8001048 <stSetPeriod>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	f897 384e 	ldrb.w	r3, [r7, #2126]	@ 0x84e
 8001296:	4413      	add	r3, r2
 8001298:	f887 384e 	strb.w	r3, [r7, #2126]	@ 0x84e
	stSetGlobalState(st_disabled);
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fe77 	bl	8000f90 <stSetGlobalState>


	memset(sign, 0, (MAX_SIGNAL_LENGTH* sizeof(uint32_t)/2));
 80012a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f009 fa20 	bl	800a6f2 <memset>
	memset(signal, 0, (uint32_t) sizeof(signal));
 80012b2:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80012b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f009 fa18 	bl	800a6f2 <memset>



	switch (type) {
 80012c2:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 80012c6:	f6a3 0349 	subw	r3, r3, #2121	@ 0x849
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <stConfigureDefault+0xb6>
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d012      	beq.n	80012fa <stConfigureDefault+0xda>
		for(uint32_t it = 0; it < MAX_SIGNAL_LENGTH; it++){
			signal[it] = (2*it*4096/MAX_SIGNAL_LENGTH & 0x0FFF);
			}
		break;
	default:
		break;
 80012d4:	e02d      	b.n	8001332 <stConfigureDefault+0x112>
		memset(signal,0xFFAA,(uint32_t) sizeof(signal)*sizeof(uint32_t)/4);
 80012d6:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80012da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012de:	f64f 71aa 	movw	r1, #65450	@ 0xffaa
 80012e2:	4618      	mov	r0, r3
 80012e4:	f009 fa05 	bl	800a6f2 <memset>
		memset(&signal[(uint32_t) MAX_SIGNAL_LENGTH/2],0xFFAA,(uint32_t) (N_CHAN* sizeof(uint16_t)/4));
 80012e8:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 80012ec:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80012f0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80012f4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
		break;
 80012f8:	e01b      	b.n	8001332 <stConfigureDefault+0x112>
		for(uint32_t it = 0; it < MAX_SIGNAL_LENGTH; it++){
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 8001300:	e012      	b.n	8001328 <stConfigureDefault+0x108>
			signal[it] = (2*it*4096/MAX_SIGNAL_LENGTH & 0x0FFF);
 8001302:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 8001306:	035b      	lsls	r3, r3, #13
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800130e:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8001312:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001316:	f8d7 2848 	ldr.w	r2, [r7, #2120]	@ 0x848
 800131a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(uint32_t it = 0; it < MAX_SIGNAL_LENGTH; it++){
 800131e:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 8001322:	3301      	adds	r3, #1
 8001324:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 8001328:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800132c:	2bff      	cmp	r3, #255	@ 0xff
 800132e:	d9e8      	bls.n	8001302 <stConfigureDefault+0xe2>
		break;
 8001330:	bf00      	nop
	}

	strcpy(label,"Channel ");
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	4a3e      	ldr	r2, [pc, #248]	@ (8001430 <stConfigureDefault+0x210>)
 8001338:	ca07      	ldmia	r2, {r0, r1, r2}
 800133a:	c303      	stmia	r3!, {r0, r1}
 800133c:	701a      	strb	r2, [r3, #0]
	for (ch_it = 0; ch_it < N_CHAN; ch_it++){
 800133e:	2300      	movs	r3, #0
 8001340:	f887 384f 	strb.w	r3, [r7, #2127]	@ 0x84f
 8001344:	e065      	b.n	8001412 <stConfigureDefault+0x1f2>
		stimulator.stStimSequence[ch_it] = ch_it;
 8001346:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 800134a:	4a38      	ldr	r2, [pc, #224]	@ (800142c <stConfigureDefault+0x20c>)
 800134c:	4413      	add	r3, r2
 800134e:	f503 4384 	add.w	r3, r3, #16896	@ 0x4200
 8001352:	3364      	adds	r3, #100	@ 0x64
 8001354:	f897 284f 	ldrb.w	r2, [r7, #2127]	@ 0x84f
 8001358:	701a      	strb	r2, [r3, #0]

		res += stSetChannelSignal(ch_it, (MAX_SIGNAL_LENGTH), signal, sign);
 800135a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800135e:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 8001362:	f897 084f 	ldrb.w	r0, [r7, #2127]	@ 0x84f
 8001366:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800136a:	f7ff fefb 	bl	8001164 <stSetChannelSignal>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	f897 384e 	ldrb.w	r3, [r7, #2126]	@ 0x84e
 8001376:	4413      	add	r3, r2
 8001378:	f887 384e 	strb.w	r3, [r7, #2126]	@ 0x84e
		label[8] = (ch_it+48);
 800137c:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 8001380:	3330      	adds	r3, #48	@ 0x30
 8001382:	b2da      	uxtb	r2, r3
 8001384:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8001388:	f6a3 0348 	subw	r3, r3, #2120	@ 0x848
 800138c:	721a      	strb	r2, [r3, #8]
		strcpy(stimulator.channels[ch_it].stLabel , label); // possibly copying garbage
 800138e:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 8001392:	f640 024c 	movw	r2, #2124	@ 0x84c
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800139e:	4a23      	ldr	r2, [pc, #140]	@ (800142c <stConfigureDefault+0x20c>)
 80013a0:	4413      	add	r3, r2
 80013a2:	3304      	adds	r3, #4
 80013a4:	f107 0208 	add.w	r2, r7, #8
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f009 fa1d 	bl	800a7ea <strcpy>
		res += stSetChannelPin(ch_it,pins[ch_it]);
 80013b0:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 80013b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001434 <stConfigureDefault+0x214>)
 80013b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013ba:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fe8d 	bl	80010e0 <stSetChannelPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	f897 384e 	ldrb.w	r3, [r7, #2126]	@ 0x84e
 80013ce:	4413      	add	r3, r2
 80013d0:	f887 384e 	strb.w	r3, [r7, #2126]	@ 0x84e
		res += stSetChannelState(ch_it, st_disabled);
 80013d4:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fe0e 	bl	8000ffc <stSetChannelState>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	f897 384e 	ldrb.w	r3, [r7, #2126]	@ 0x84e
 80013e8:	4413      	add	r3, r2
 80013ea:	f887 384e 	strb.w	r3, [r7, #2126]	@ 0x84e
		stimulator.channels[ch_it].stimulus.lastVal = MAX_SIGNAL_LENGTH;
 80013ee:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 80013f2:	4a0e      	ldr	r2, [pc, #56]	@ (800142c <stConfigureDefault+0x20c>)
 80013f4:	f640 014c 	movw	r1, #2124	@ 0x84c
 80013f8:	fb01 f303 	mul.w	r3, r1, r3
 80013fc:	4413      	add	r3, r2
 80013fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001402:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001406:	601a      	str	r2, [r3, #0]
	for (ch_it = 0; ch_it < N_CHAN; ch_it++){
 8001408:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 800140c:	3301      	adds	r3, #1
 800140e:	f887 384f 	strb.w	r3, [r7, #2127]	@ 0x84f
 8001412:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 8001416:	2b07      	cmp	r3, #7
 8001418:	d995      	bls.n	8001346 <stConfigureDefault+0x126>
	}
	return res;
 800141a:	f897 384e 	ldrb.w	r3, [r7, #2126]	@ 0x84e
}
 800141e:	4618      	mov	r0, r3
 8001420:	f507 6705 	add.w	r7, r7, #2128	@ 0x850
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	0800b3b0 	.word	0x0800b3b0
 800142c:	20000470 	.word	0x20000470
 8001430:	0800b3a4 	.word	0x0800b3a4
 8001434:	20000000 	.word	0x20000000

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <HAL_MspInit+0x34>)
 8001440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001444:	4a09      	ldr	r2, [pc, #36]	@ (800146c <HAL_MspInit+0x34>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800144e:	4b07      	ldr	r3, [pc, #28]	@ (800146c <HAL_MspInit+0x34>)
 8001450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800145c:	2004      	movs	r0, #4
 800145e:	f000 fe2e 	bl	80020be <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	46020c00 	.word	0x46020c00

08001470 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0ba      	sub	sp, #232	@ 0xe8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	22c0      	movs	r2, #192	@ 0xc0
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f009 f92e 	bl	800a6f2 <memset>
  if(hdac->Instance==DAC1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a29      	ldr	r2, [pc, #164]	@ (8001540 <HAL_DAC_MspInit+0xd0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d14b      	bne.n	8001538 <HAL_DAC_MspInit+0xc8>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC|RCC_PERIPHCLK_DAC1;
 80014a0:	4a28      	ldr	r2, [pc, #160]	@ (8001544 <HAL_DAC_MspInit+0xd4>)
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80014aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 80014b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 f800 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_DAC_MspInit+0x5e>
    {
      Error_Handler();
 80014ca:	f7ff fa15 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <HAL_DAC_MspInit+0xd8>)
 80014d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <HAL_DAC_MspInit+0xd8>)
 80014d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_DAC_MspInit+0xd8>)
 80014e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <HAL_DAC_MspInit+0xd8>)
 80014ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f2:	4a15      	ldr	r2, [pc, #84]	@ (8001548 <HAL_DAC_MspInit+0xd8>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_DAC_MspInit+0xd8>)
 80014fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800150a:	2310      	movs	r3, #16
 800150c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001510:	2303      	movs	r3, #3
 8001512:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001520:	4619      	mov	r1, r3
 8001522:	480a      	ldr	r0, [pc, #40]	@ (800154c <HAL_DAC_MspInit+0xdc>)
 8001524:	f003 f8f6 	bl	8004714 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(DAC1_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	2026      	movs	r0, #38	@ 0x26
 800152e:	f000 fdd1 	bl	80020d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DAC1_IRQn);
 8001532:	2026      	movs	r0, #38	@ 0x26
 8001534:	f000 fde8 	bl	8002108 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001538:	bf00      	nop
 800153a:	37e8      	adds	r7, #232	@ 0xe8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	46021800 	.word	0x46021800
 8001544:	10008000 	.word	0x10008000
 8001548:	46020c00 	.word	0x46020c00
 800154c:	42020000 	.word	0x42020000

08001550 <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <HAL_DAC_MspDeInit+0x38>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d10e      	bne.n	8001580 <HAL_DAC_MspDeInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspDeInit 0 */

  /* USER CODE END DAC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC1_CLK_DISABLE();
 8001562:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <HAL_DAC_MspDeInit+0x3c>)
 8001564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001568:	4a08      	ldr	r2, [pc, #32]	@ (800158c <HAL_DAC_MspDeInit+0x3c>)
 800156a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800156e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8001572:	2110      	movs	r1, #16
 8001574:	4806      	ldr	r0, [pc, #24]	@ (8001590 <HAL_DAC_MspDeInit+0x40>)
 8001576:	f003 faa5 	bl	8004ac4 <HAL_GPIO_DeInit>

    /* DAC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(DAC1_IRQn);
 800157a:	2026      	movs	r0, #38	@ 0x26
 800157c:	f000 fdd2 	bl	8002124 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DAC1_MspDeInit 1 */

  /* USER CODE END DAC1_MspDeInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	46021800 	.word	0x46021800
 800158c:	46020c00 	.word	0x46020c00
 8001590:	42020000 	.word	0x42020000

08001594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015a4:	d10e      	bne.n	80015c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a6:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <HAL_TIM_Base_MspInit+0x3c>)
 80015a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015ac:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_TIM_Base_MspInit+0x3c>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_TIM_Base_MspInit+0x3c>)
 80015b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	46020c00 	.word	0x46020c00

080015d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08e      	sub	sp, #56	@ 0x38
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80015e4:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <HAL_InitTick+0xcc>)
 80015e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015ea:	4a2d      	ldr	r2, [pc, #180]	@ (80016a0 <HAL_InitTick+0xcc>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015f0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80015f4:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <HAL_InitTick+0xcc>)
 80015f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001602:	f107 0210 	add.w	r2, r7, #16
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f004 fe9b 	bl	8006348 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001612:	f004 fe71 	bl	80062f8 <HAL_RCC_GetPCLK2Freq>
 8001616:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800161a:	4a22      	ldr	r2, [pc, #136]	@ (80016a4 <HAL_InitTick+0xd0>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9b      	lsrs	r3, r3, #18
 8001622:	3b01      	subs	r3, #1
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001626:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <HAL_InitTick+0xd4>)
 8001628:	4a20      	ldr	r2, [pc, #128]	@ (80016ac <HAL_InitTick+0xd8>)
 800162a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800162c:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <HAL_InitTick+0xd4>)
 800162e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001632:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001634:	4a1c      	ldr	r2, [pc, #112]	@ (80016a8 <HAL_InitTick+0xd4>)
 8001636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001638:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800163a:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <HAL_InitTick+0xd4>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <HAL_InitTick+0xd4>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8001646:	4818      	ldr	r0, [pc, #96]	@ (80016a8 <HAL_InitTick+0xd4>)
 8001648:	f007 fbd4 	bl	8008df4 <HAL_TIM_Base_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001652:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001656:	2b00      	cmp	r3, #0
 8001658:	d118      	bne.n	800168c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800165a:	4813      	ldr	r0, [pc, #76]	@ (80016a8 <HAL_InitTick+0xd4>)
 800165c:	f007 fcba 	bl	8008fd4 <HAL_TIM_Base_Start_IT>
 8001660:	4603      	mov	r3, r0
 8001662:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001666:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10e      	bne.n	800168c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d808      	bhi.n	8001686 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	2047      	movs	r0, #71	@ 0x47
 800167a:	f000 fd2b 	bl	80020d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800167e:	4a0c      	ldr	r2, [pc, #48]	@ (80016b0 <HAL_InitTick+0xdc>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	e002      	b.n	800168c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800168c:	2047      	movs	r0, #71	@ 0x47
 800168e:	f000 fd3b 	bl	8002108 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001692:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001696:	4618      	mov	r0, r3
 8001698:	3738      	adds	r7, #56	@ 0x38
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	46020c00 	.word	0x46020c00
 80016a4:	431bde83 	.word	0x431bde83
 80016a8:	20008970 	.word	0x20008970
 80016ac:	40014800 	.word	0x40014800
 80016b0:	200000c0 	.word	0x200000c0

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <NMI_Handler+0x4>

080016bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80016c0:	2200      	movs	r2, #0
 80016c2:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 80016c6:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <HardFault_Handler+0x14>)
 80016c8:	f003 fada 	bl	8004c80 <HAL_GPIO_WritePin>
//  while (1)
//  {
//    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
//    /* USER CODE END W1_HardFault_IRQn 0 */
//  }
	return;
 80016cc:	bf00      	nop
}
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	42021000 	.word	0x42021000

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <MemManage_Handler+0x4>

080016dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001728:	2000      	movs	r0, #0
 800172a:	f000 fa8d 	bl	8001c48 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <DAC1_IRQHandler>:

/**
  * @brief This function handles DAC1 interrupt.
  */
void DAC1_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DAC1_IRQn 0 */

  /* USER CODE END DAC1_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <DAC1_IRQHandler+0x10>)
 800173a:	f000 ffdc 	bl	80026f6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN DAC1_IRQn 1 */

  /* USER CODE END DAC1_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200001cc 	.word	0x200001cc

08001748 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <TIM17_IRQHandler+0x10>)
 800174e:	f007 fce1 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20008970 	.word	0x20008970

0800175c <GPDMA1_Channel10_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 10 global interrupt.
  */
void GPDMA1_Channel10_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 0 */

  /* USER CODE END GPDMA1_Channel10_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel10);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <GPDMA1_Channel10_IRQHandler+0x10>)
 8001762:	f001 fcc8 	bl	80030f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 1 */

  /* USER CODE END GPDMA1_Channel10_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000280 	.word	0x20000280

08001770 <GPDMA1_Channel11_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 11 global interrupt.
  */
void GPDMA1_Channel11_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 0 */

  /* USER CODE END GPDMA1_Channel11_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel11);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <GPDMA1_Channel11_IRQHandler+0x10>)
 8001776:	f001 fcbe 	bl	80030f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 1 */

  /* USER CODE END GPDMA1_Channel11_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000208 	.word	0x20000208

08001784 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e00a      	b.n	80017ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001796:	f3af 8000 	nop.w
 800179a:	4601      	mov	r1, r0
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60ba      	str	r2, [r7, #8]
 80017a2:	b2ca      	uxtb	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbf0      	blt.n	8001796 <_read+0x12>
  }

  return len;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e009      	b.n	80017e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 faaf 	bl	8001d3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbf1      	blt.n	80017d0 <_write+0x12>
  }
  return len;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_close>:

int _close(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800181e:	605a      	str	r2, [r3, #4]
  return 0;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_isatty>:

int _isatty(int file)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001868:	4a14      	ldr	r2, [pc, #80]	@ (80018bc <_sbrk+0x5c>)
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <_sbrk+0x60>)
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001874:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <_sbrk+0x64>)
 800187e:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <_sbrk+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d207      	bcs.n	80018a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001890:	f008 ff7e 	bl	800a790 <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	220c      	movs	r2, #12
 8001898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	e009      	b.n	80018b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a0:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a6:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <_sbrk+0x64>)
 80018b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200c0000 	.word	0x200c0000
 80018c0:	00000400 	.word	0x00000400
 80018c4:	200089bc 	.word	0x200089bc
 80018c8:	20008bb8 	.word	0x20008bb8

080018cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018d0:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <SystemInit+0x68>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d6:	4a17      	ldr	r2, [pc, #92]	@ (8001934 <SystemInit+0x68>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80018e0:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <SystemInit+0x6c>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <SystemInit+0x6c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <SystemInit+0x6c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <SystemInit+0x6c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <SystemInit+0x6c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001938 <SystemInit+0x6c>)
 80018fe:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001902:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001906:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001908:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <SystemInit+0x6c>)
 800190a:	2200      	movs	r2, #0
 800190c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <SystemInit+0x6c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <SystemInit+0x6c>)
 8001914:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001918:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800191a:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <SystemInit+0x6c>)
 800191c:	2200      	movs	r2, #0
 800191e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001920:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <SystemInit+0x68>)
 8001922:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001926:	609a      	str	r2, [r3, #8]
  #endif
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00
 8001938:	46020c00 	.word	0x46020c00

0800193c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800193c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001974 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001940:	f7ff ffc4 	bl	80018cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001944:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001946:	e003      	b.n	8001950 <LoopCopyDataInit>

08001948 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800194a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800194c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800194e:	3104      	adds	r1, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001950:	480a      	ldr	r0, [pc, #40]	@ (800197c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001952:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001954:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001956:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001958:	d3f6      	bcc.n	8001948 <CopyDataInit>
	ldr	r2, =_sbss
 800195a:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <LoopForever+0x12>)
	b	LoopFillZerobss
 800195c:	e002      	b.n	8001964 <LoopFillZerobss>

0800195e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800195e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001960:	f842 3b04 	str.w	r3, [r2], #4

08001964 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <LoopForever+0x16>)
	cmp	r2, r3
 8001966:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001968:	d3f9      	bcc.n	800195e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196a:	f008 ff17 	bl	800a79c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800196e:	f7fe fecb 	bl	8000708 <main>

08001972 <LoopForever>:

LoopForever:
    b LoopForever
 8001972:	e7fe      	b.n	8001972 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001974:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001978:	0800b8f0 	.word	0x0800b8f0
	ldr	r0, =_sdata
 800197c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001980:	20000124 	.word	0x20000124
	ldr	r2, =_sbss
 8001984:	20000124 	.word	0x20000124
	ldr	r3, = _ebss
 8001988:	20008bb4 	.word	0x20008bb4

0800198c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC1_IRQHandler>
	...

08001990 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08e      	sub	sp, #56	@ 0x38
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d009      	beq.n	80019bc <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <BSP_LED_Init+0x2c>
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d003      	beq.n	80019bc <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019b4:	f06f 0301 	mvn.w	r3, #1
 80019b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ba:	e06e      	b.n	8001a9a <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d10f      	bne.n	80019e2 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 80019c2:	4b38      	ldr	r3, [pc, #224]	@ (8001aa4 <BSP_LED_Init+0x114>)
 80019c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019c8:	4a36      	ldr	r2, [pc, #216]	@ (8001aa4 <BSP_LED_Init+0x114>)
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019d2:	4b34      	ldr	r3, [pc, #208]	@ (8001aa4 <BSP_LED_Init+0x114>)
 80019d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	e046      	b.n	8001a70 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10f      	bne.n	8001a08 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 80019e8:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa4 <BSP_LED_Init+0x114>)
 80019ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019ee:	4a2d      	ldr	r2, [pc, #180]	@ (8001aa4 <BSP_LED_Init+0x114>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019f8:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa4 <BSP_LED_Init+0x114>)
 80019fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	e033      	b.n	8001a70 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a08:	4b26      	ldr	r3, [pc, #152]	@ (8001aa4 <BSP_LED_Init+0x114>)
 8001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d110      	bne.n	8001a38 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b23      	ldr	r3, [pc, #140]	@ (8001aa4 <BSP_LED_Init+0x114>)
 8001a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a1c:	4a21      	ldr	r2, [pc, #132]	@ (8001aa4 <BSP_LED_Init+0x114>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001a26:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <BSP_LED_Init+0x114>)
 8001a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8001a34:	2301      	movs	r3, #1
 8001a36:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8001a38:	f003 fa40 	bl	8004ebc <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8001a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a42:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <BSP_LED_Init+0x114>)
 8001a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a48:	4a16      	ldr	r2, [pc, #88]	@ (8001aa4 <BSP_LED_Init+0x114>)
 8001a4a:	f023 0304 	bic.w	r3, r3, #4
 8001a4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8001a52:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <BSP_LED_Init+0x114>)
 8001a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a58:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <BSP_LED_Init+0x114>)
 8001a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <BSP_LED_Init+0x114>)
 8001a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <BSP_LED_Init+0x118>)
 8001a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a78:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	4a08      	ldr	r2, [pc, #32]	@ (8001aac <BSP_LED_Init+0x11c>)
 8001a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8e:	f107 021c 	add.w	r2, r7, #28
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f002 fe3d 	bl	8004714 <HAL_GPIO_Init>
  }

  return ret;
 8001a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3738      	adds	r7, #56	@ 0x38
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	46020c00 	.word	0x46020c00
 8001aa8:	0800b808 	.word	0x0800b808
 8001aac:	200000a8 	.word	0x200000a8

08001ab0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d009      	beq.n	8001ad8 <BSP_LED_On+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d006      	beq.n	8001ad8 <BSP_LED_On+0x28>
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d003      	beq.n	8001ad8 <BSP_LED_On+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ad0:	f06f 0301 	mvn.w	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e00b      	b.n	8001af0 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	4a08      	ldr	r2, [pc, #32]	@ (8001afc <BSP_LED_On+0x4c>)
 8001adc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	4a07      	ldr	r2, [pc, #28]	@ (8001b00 <BSP_LED_On+0x50>)
 8001ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4619      	mov	r1, r3
 8001aec:	f003 f8c8 	bl	8004c80 <HAL_GPIO_WritePin>
  }

  return ret;
 8001af0:	68fb      	ldr	r3, [r7, #12]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200000a8 	.word	0x200000a8
 8001b00:	0800b808 	.word	0x0800b808

08001b04 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d009      	beq.n	8001b2c <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <BSP_LED_Toggle+0x28>
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d003      	beq.n	8001b2c <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b24:	f06f 0301 	mvn.w	r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	e00b      	b.n	8001b44 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <BSP_LED_Toggle+0x4c>)
 8001b30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	4907      	ldr	r1, [pc, #28]	@ (8001b54 <BSP_LED_Toggle+0x50>)
 8001b38:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f003 f8b6 	bl	8004cb0 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001b44:	68fb      	ldr	r3, [r7, #12]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200000a8 	.word	0x200000a8
 8001b54:	0800b808 	.word	0x0800b808

08001b58 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	460a      	mov	r2, r1
 8001b62:	71fb      	strb	r3, [r7, #7]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001b68:	4b30      	ldr	r3, [pc, #192]	@ (8001c2c <BSP_PB_Init+0xd4>)
 8001b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c2c <BSP_PB_Init+0xd4>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b78:	4b2c      	ldr	r3, [pc, #176]	@ (8001c2c <BSP_PB_Init+0xd4>)
 8001b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001b86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b8a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001b94:	79bb      	ldrb	r3, [r7, #6]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10c      	bne.n	8001bb4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	4a23      	ldr	r2, [pc, #140]	@ (8001c30 <BSP_PB_Init+0xd8>)
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	f107 020c 	add.w	r2, r7, #12
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 fdb1 	bl	8004714 <HAL_GPIO_Init>
 8001bb2:	e036      	b.n	8001c22 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c34 <BSP_PB_Init+0xdc>)
 8001bb6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	4a1d      	ldr	r2, [pc, #116]	@ (8001c30 <BSP_PB_Init+0xd8>)
 8001bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc0:	f107 020c 	add.w	r2, r7, #12
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f002 fda4 	bl	8004714 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001bcc:	79fa      	ldrb	r2, [r7, #7]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4a18      	ldr	r2, [pc, #96]	@ (8001c38 <BSP_PB_Init+0xe0>)
 8001bd8:	441a      	add	r2, r3
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	4917      	ldr	r1, [pc, #92]	@ (8001c3c <BSP_PB_Init+0xe4>)
 8001bde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001be2:	4619      	mov	r1, r3
 8001be4:	4610      	mov	r0, r2
 8001be6:	f002 fd38 	bl	800465a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001bea:	79fa      	ldrb	r2, [r7, #7]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4a10      	ldr	r2, [pc, #64]	@ (8001c38 <BSP_PB_Init+0xe0>)
 8001bf6:	1898      	adds	r0, r3, r2
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	4a11      	ldr	r2, [pc, #68]	@ (8001c40 <BSP_PB_Init+0xe8>)
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	461a      	mov	r2, r3
 8001c02:	2100      	movs	r1, #0
 8001c04:	f002 fcfd 	bl	8004602 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001c08:	2018      	movs	r0, #24
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <BSP_PB_Init+0xec>)
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	2200      	movs	r2, #0
 8001c14:	4619      	mov	r1, r3
 8001c16:	f000 fa5d 	bl	80020d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001c1a:	2318      	movs	r3, #24
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 fa73 	bl	8002108 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3720      	adds	r7, #32
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	46020c00 	.word	0x46020c00
 8001c30:	200000b4 	.word	0x200000b4
 8001c34:	10110000 	.word	0x10110000
 8001c38:	200089c0 	.word	0x200089c0
 8001c3c:	0800b810 	.word	0x0800b810
 8001c40:	200000b8 	.word	0x200000b8
 8001c44:	200000bc 	.word	0x200000bc

08001c48 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001c52:	79fa      	ldrb	r2, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4a04      	ldr	r2, [pc, #16]	@ (8001c70 <BSP_PB_IRQHandler+0x28>)
 8001c5e:	4413      	add	r3, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 fd0f 	bl	8004684 <HAL_EXTI_IRQHandler>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200089c0 	.word	0x200089c0

08001c74 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c8a:	f06f 0301 	mvn.w	r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	e018      	b.n	8001cc4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	2294      	movs	r2, #148	@ 0x94
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <BSP_COM_Init+0x5c>)
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f870 	bl	8001d84 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	2294      	movs	r2, #148	@ 0x94
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	4a08      	ldr	r2, [pc, #32]	@ (8001cd0 <BSP_COM_Init+0x5c>)
 8001cae:	4413      	add	r3, r2
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f80e 	bl	8001cd4 <MX_USART1_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001cbe:	f06f 0303 	mvn.w	r3, #3
 8001cc2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200089cc 	.word	0x200089cc

08001cd4 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001cde:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <MX_USART1_Init+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	220c      	movs	r2, #12
 8001cf2:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	895b      	ldrh	r3, [r3, #10]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	891b      	ldrh	r3, [r3, #8]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	899b      	ldrh	r3, [r3, #12]
 8001d14:	461a      	mov	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d20:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f007 ff11 	bl	8009b50 <HAL_UART_Init>
 8001d2e:	4603      	mov	r3, r0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200000a4 	.word	0x200000a4

08001d3c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <__io_putchar+0x30>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2394      	movs	r3, #148	@ 0x94
 8001d4c:	fb02 f303 	mul.w	r3, r2, r3
 8001d50:	4a07      	ldr	r2, [pc, #28]	@ (8001d70 <__io_putchar+0x34>)
 8001d52:	1898      	adds	r0, r3, r2
 8001d54:	1d39      	adds	r1, r7, #4
 8001d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f007 ff52 	bl	8009c04 <HAL_UART_Transmit>
  return ch;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20008a60 	.word	0x20008a60
 8001d70:	200089cc 	.word	0x200089cc

08001d74 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7fe fda9 	bl	80008d0 <BSP_PB_Callback>
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	@ 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001d8c:	4b27      	ldr	r3, [pc, #156]	@ (8001e2c <COM1_MspInit+0xa8>)
 8001d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d92:	4a26      	ldr	r2, [pc, #152]	@ (8001e2c <COM1_MspInit+0xa8>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d9c:	4b23      	ldr	r3, [pc, #140]	@ (8001e2c <COM1_MspInit+0xa8>)
 8001d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001daa:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <COM1_MspInit+0xa8>)
 8001dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e2c <COM1_MspInit+0xa8>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dba:	4b1c      	ldr	r3, [pc, #112]	@ (8001e2c <COM1_MspInit+0xa8>)
 8001dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001dc8:	4b18      	ldr	r3, [pc, #96]	@ (8001e2c <COM1_MspInit+0xa8>)
 8001dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001dce:	4a17      	ldr	r2, [pc, #92]	@ (8001e2c <COM1_MspInit+0xa8>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001dd8:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <COM1_MspInit+0xa8>)
 8001dda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001de6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001df0:	2302      	movs	r3, #2
 8001df2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001df8:	2307      	movs	r3, #7
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	480b      	ldr	r0, [pc, #44]	@ (8001e30 <COM1_MspInit+0xac>)
 8001e04:	f002 fc86 	bl	8004714 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001e08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e0c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001e12:	2307      	movs	r3, #7
 8001e14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4804      	ldr	r0, [pc, #16]	@ (8001e30 <COM1_MspInit+0xac>)
 8001e1e:	f002 fc79 	bl	8004714 <HAL_GPIO_Init>
}
 8001e22:	bf00      	nop
 8001e24:	3728      	adds	r7, #40	@ 0x28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	46020c00 	.word	0x46020c00
 8001e30:	42020000 	.word	0x42020000

08001e34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_Init+0x50>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a11      	ldr	r2, [pc, #68]	@ (8001e84 <HAL_Init+0x50>)
 8001e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e44:	2003      	movs	r0, #3
 8001e46:	f000 f93a 	bl	80020be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001e4a:	f004 f925 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <HAL_Init+0x54>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	490c      	ldr	r1, [pc, #48]	@ (8001e8c <HAL_Init+0x58>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e60:	4a0b      	ldr	r2, [pc, #44]	@ (8001e90 <HAL_Init+0x5c>)
 8001e62:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e64:	2004      	movs	r0, #4
 8001e66:	f000 f96b 	bl	8002140 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e6a:	2007      	movs	r0, #7
 8001e6c:	f7ff fbb2 	bl	80015d4 <HAL_InitTick>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e002      	b.n	8001e80 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e7a:	f7ff fadd 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40022000 	.word	0x40022000
 8001e88:	46020c00 	.word	0x46020c00
 8001e8c:	0800b7b0 	.word	0x0800b7b0
 8001e90:	200000a0 	.word	0x200000a0

08001e94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_IncTick+0x20>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_IncTick+0x24>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <HAL_IncTick+0x24>)
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	200000c4 	.word	0x200000c4
 8001eb8:	20008a64 	.word	0x20008a64

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_GetTick+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20008a64 	.word	0x20008a64

08001ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff ffee 	bl	8001ebc <HAL_GetTick>
 8001ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d005      	beq.n	8001efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <HAL_Delay+0x44>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001efa:	bf00      	nop
 8001efc:	f7ff ffde 	bl	8001ebc <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8f7      	bhi.n	8001efc <HAL_Delay+0x28>
  {
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200000c4 	.word	0x200000c4

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4907      	ldr	r1, [pc, #28]	@ (8001fb8 <__NVIC_EnableIRQ+0x38>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db12      	blt.n	8001ff4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	490a      	ldr	r1, [pc, #40]	@ (8002000 <__NVIC_DisableIRQ+0x44>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2001      	movs	r0, #1
 8001fde:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe2:	3320      	adds	r3, #32
 8001fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fe8:	f3bf 8f4f 	dsb	sy
}
 8001fec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fee:	f3bf 8f6f 	isb	sy
}
 8001ff2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	@ (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	@ (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	@ 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2b04      	cmp	r3, #4
 8002074:	bf28      	it	cs
 8002076:	2304      	movcs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	2b06      	cmp	r3, #6
 8002080:	d902      	bls.n	8002088 <NVIC_EncodePriority+0x30>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3b03      	subs	r3, #3
 8002086:	e000      	b.n	800208a <NVIC_EncodePriority+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	401a      	ands	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	4313      	orrs	r3, r2
         );
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	@ 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ff28 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020e2:	f7ff ff3f 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80020e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	6978      	ldr	r0, [r7, #20]
 80020ee:	f7ff ffb3 	bl	8002058 <NVIC_EncodePriority>
 80020f2:	4602      	mov	r2, r0
 80020f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff82 	bl	8002004 <__NVIC_SetPriority>
}
 8002100:	bf00      	nop
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff32 	bl	8001f80 <__NVIC_EnableIRQ>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff42 	bl	8001fbc <__NVIC_DisableIRQ>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b04      	cmp	r3, #4
 800214c:	d844      	bhi.n	80021d8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800214e:	a201      	add	r2, pc, #4	@ (adr r2, 8002154 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002154:	08002177 	.word	0x08002177
 8002158:	08002195 	.word	0x08002195
 800215c:	080021b7 	.word	0x080021b7
 8002160:	080021d9 	.word	0x080021d9
 8002164:	08002169 	.word	0x08002169
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002168:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1e      	ldr	r2, [pc, #120]	@ (80021e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	6013      	str	r3, [r2, #0]
      break;
 8002174:	e031      	b.n	80021da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002176:	4b1c      	ldr	r3, [pc, #112]	@ (80021e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1b      	ldr	r2, [pc, #108]	@ (80021e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002182:	4b1a      	ldr	r3, [pc, #104]	@ (80021ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002188:	4a18      	ldr	r2, [pc, #96]	@ (80021ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800218a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800218e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002192:	e022      	b.n	80021da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002194:	4b14      	ldr	r3, [pc, #80]	@ (80021e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a13      	ldr	r2, [pc, #76]	@ (80021e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800219a:	f023 0304 	bic.w	r3, r3, #4
 800219e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80021a0:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80021aa:	4a10      	ldr	r2, [pc, #64]	@ (80021ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80021b4:	e011      	b.n	80021da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80021b6:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a0b      	ldr	r2, [pc, #44]	@ (80021e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80021c2:	4b0a      	ldr	r3, [pc, #40]	@ (80021ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80021cc:	4a07      	ldr	r2, [pc, #28]	@ (80021ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80021d6:	e000      	b.n	80021da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80021d8:	bf00      	nop
  }
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e010 	.word	0xe000e010
 80021ec:	46020c00 	.word	0x46020c00

080021f0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e034      	b.n	800226c <HAL_DAC_Init+0x7c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	791b      	ldrb	r3, [r3, #4]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d125      	bne.n	8002258 <HAL_DAC_Init+0x68>
  {
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the DAC Callback settings */
    hdac->ConvCpltCallbackCh1           = HAL_DAC_ConvCpltCallbackCh1;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a19      	ldr	r2, [pc, #100]	@ (8002274 <HAL_DAC_Init+0x84>)
 8002210:	615a      	str	r2, [r3, #20]
    hdac->ConvHalfCpltCallbackCh1       = HAL_DAC_ConvHalfCpltCallbackCh1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a18      	ldr	r2, [pc, #96]	@ (8002278 <HAL_DAC_Init+0x88>)
 8002216:	619a      	str	r2, [r3, #24]
    hdac->ErrorCallbackCh1              = HAL_DAC_ErrorCallbackCh1;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a18      	ldr	r2, [pc, #96]	@ (800227c <HAL_DAC_Init+0x8c>)
 800221c:	61da      	str	r2, [r3, #28]
    hdac->DMAUnderrunCallbackCh1        = HAL_DAC_DMAUnderrunCallbackCh1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a17      	ldr	r2, [pc, #92]	@ (8002280 <HAL_DAC_Init+0x90>)
 8002222:	621a      	str	r2, [r3, #32]

    hdac->ConvCpltCallbackCh2           = HAL_DACEx_ConvCpltCallbackCh2;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a17      	ldr	r2, [pc, #92]	@ (8002284 <HAL_DAC_Init+0x94>)
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24
    hdac->ConvHalfCpltCallbackCh2       = HAL_DACEx_ConvHalfCpltCallbackCh2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a16      	ldr	r2, [pc, #88]	@ (8002288 <HAL_DAC_Init+0x98>)
 800222e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdac->ErrorCallbackCh2              = HAL_DACEx_ErrorCallbackCh2;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a16      	ldr	r2, [pc, #88]	@ (800228c <HAL_DAC_Init+0x9c>)
 8002234:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdac->DMAUnderrunCallbackCh2        = HAL_DACEx_DMAUnderrunCallbackCh2;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a15      	ldr	r2, [pc, #84]	@ (8002290 <HAL_DAC_Init+0xa0>)
 800223a:	631a      	str	r2, [r3, #48]	@ 0x30

    if (hdac->MspInitCallback == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <HAL_DAC_Init+0x5a>
    {
      hdac->MspInitCallback             = HAL_DAC_MspInit;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a13      	ldr	r2, [pc, #76]	@ (8002294 <HAL_DAC_Init+0xa4>)
 8002248:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	715a      	strb	r2, [r3, #5]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	4798      	blx	r3
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	080027a7 	.word	0x080027a7
 8002278:	080027bb 	.word	0x080027bb
 800227c:	080027cf 	.word	0x080027cf
 8002280:	080027e3 	.word	0x080027e3
 8002284:	08002bab 	.word	0x08002bab
 8002288:	08002bbf 	.word	0x08002bbf
 800228c:	08002bd3 	.word	0x08002bd3
 8002290:	08002be7 	.word	0x08002be7
 8002294:	08001471 	.word	0x08001471

08002298 <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e017      	b.n	80022da <HAL_DAC_DeInit+0x42>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2202      	movs	r2, #2
 80022ae:	711a      	strb	r2, [r3, #4]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  if (hdac->MspDeInitCallback == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d102      	bne.n	80022be <HAL_DAC_DeInit+0x26>
  {
    hdac->MspDeInitCallback = HAL_DAC_MspDeInit;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <HAL_DAC_DeInit+0x4c>)
 80022bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	08001551 	.word	0x08001551

080022e8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b0a4      	sub	sp, #144	@ 0x90
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	603b      	str	r3, [r7, #0]
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e1a4      	b.n	800264a <HAL_DAC_Start_DMA+0x362>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	795b      	ldrb	r3, [r3, #5]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_DAC_Start_DMA+0x24>
 8002308:	2302      	movs	r3, #2
 800230a:	e19e      	b.n	800264a <HAL_DAC_Start_DMA+0x362>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2201      	movs	r2, #1
 8002310:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2202      	movs	r2, #2
 8002316:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d12e      	bne.n	800237c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	4a8b      	ldr	r2, [pc, #556]	@ (8002550 <HAL_DAC_Start_DMA+0x268>)
 8002324:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	4a8a      	ldr	r2, [pc, #552]	@ (8002554 <HAL_DAC_Start_DMA+0x26c>)
 800232c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4a89      	ldr	r2, [pc, #548]	@ (8002558 <HAL_DAC_Start_DMA+0x270>)
 8002334:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002344:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002346:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_DAC_Start_DMA+0x70>
 800234e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002352:	2b04      	cmp	r3, #4
 8002354:	d006      	beq.n	8002364 <HAL_DAC_Start_DMA+0x7c>
 8002356:	e00b      	b.n	8002370 <HAL_DAC_Start_DMA+0x88>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3308      	adds	r3, #8
 800235e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 8002362:	e03a      	b.n	80023da <HAL_DAC_Start_DMA+0xf2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	330c      	adds	r3, #12
 800236a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 800236e:	e034      	b.n	80023da <HAL_DAC_Start_DMA+0xf2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3310      	adds	r3, #16
 8002376:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 800237a:	e02e      	b.n	80023da <HAL_DAC_Start_DMA+0xf2>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a76      	ldr	r2, [pc, #472]	@ (800255c <HAL_DAC_Start_DMA+0x274>)
 8002382:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a75      	ldr	r2, [pc, #468]	@ (8002560 <HAL_DAC_Start_DMA+0x278>)
 800238a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a74      	ldr	r2, [pc, #464]	@ (8002564 <HAL_DAC_Start_DMA+0x27c>)
 8002392:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80023a2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80023a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <HAL_DAC_Start_DMA+0xce>
 80023ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d006      	beq.n	80023c2 <HAL_DAC_Start_DMA+0xda>
 80023b4:	e00b      	b.n	80023ce <HAL_DAC_Start_DMA+0xe6>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	3314      	adds	r3, #20
 80023bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 80023c0:	e00b      	b.n	80023da <HAL_DAC_Start_DMA+0xf2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	3318      	adds	r3, #24
 80023c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 80023cc:	e005      	b.n	80023da <HAL_DAC_Start_DMA+0xf2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	331c      	adds	r3, #28
 80023d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 80023d8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d17e      	bne.n	80024de <HAL_DAC_Start_DMA+0x1f6>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    /* Check linkedlist mode */
    if ((hdac->DMA_Handle1->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d04b      	beq.n	8002496 <HAL_DAC_Start_DMA+0x1ae>
    {
      if ((hdac->DMA_Handle1->LinkedListQueue != NULL) && (hdac->DMA_Handle1->LinkedListQueue->Head != NULL))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002404:	2b00      	cmp	r3, #0
 8002406:	d044      	beq.n	8002492 <HAL_DAC_Start_DMA+0x1aa>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d03e      	beq.n	8002492 <HAL_DAC_Start_DMA+0x1aa>
      {
        /* Length should be converted to number of bytes */
        if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hdac->DMA_Handle1->LinkedListQueue->Head) != HAL_OK)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	f107 0318 	add.w	r3, r7, #24
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f001 fa74 	bl	8003910 <HAL_DMAEx_List_GetNodeConfig>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_DAC_Start_DMA+0x14a>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e10b      	b.n	800264a <HAL_DAC_Start_DMA+0x362>
        }

        /* Length should be converted to number of bytes */
        if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002434:	2b02      	cmp	r3, #2
 8002436:	d104      	bne.n	8002442 <HAL_DAC_Start_DMA+0x15a>
        {
          /* Word -> Bytes */
          LengthInBytes = Length * 4U;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002440:	e00a      	b.n	8002458 <HAL_DAC_Start_DMA+0x170>
        }
        else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8002442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002444:	2b01      	cmp	r3, #1
 8002446:	d104      	bne.n	8002452 <HAL_DAC_Start_DMA+0x16a>
        {
          /* Halfword -> Bytes */
          LengthInBytes = Length * 2U;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002450:	e002      	b.n	8002458 <HAL_DAC_Start_DMA+0x170>
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          LengthInBytes = Length;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        }

        /* Set DMA data size */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = LengthInBytes;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002464:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = tmpreg;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800247e:	611a      	str	r2, [r3, #16]

        /* Enable the DMA channel */
        status = HAL_DMAEx_List_Start_IT(hdac->DMA_Handle1);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4618      	mov	r0, r3
 8002486:	f001 f999 	bl	80037bc <HAL_DMAEx_List_Start_IT>
 800248a:	4603      	mov	r3, r0
 800248c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002490:	e0af      	b.n	80025f2 <HAL_DAC_Start_DMA+0x30a>
      }
      else
      {
        /* Return error status */
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0d9      	b.n	800264a <HAL_DAC_Start_DMA+0x362>
      }
    }
    else
    {
      /* Length should be converted to number of bytes */
      if (hdac->DMA_Handle1->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d104      	bne.n	80024aa <HAL_DAC_Start_DMA+0x1c2>
      {
        /* Word -> Bytes */
        LengthInBytes = Length * 4U;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024a8:	e00c      	b.n	80024c4 <HAL_DAC_Start_DMA+0x1dc>
      }
      else if (hdac->DMA_Handle1->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d104      	bne.n	80024be <HAL_DAC_Start_DMA+0x1d6>
      {
        /* Halfword -> Bytes */
        LengthInBytes = Length * 2U;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024bc:	e002      	b.n	80024c4 <HAL_DAC_Start_DMA+0x1dc>
      }
      else /* Bytes */
      {
        /* Same size already expressed in Bytes */
        LengthInBytes = Length;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }

      /* Enable the DMA channel */
      status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, LengthInBytes);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6898      	ldr	r0, [r3, #8]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80024d2:	f000 fd34 	bl	8002f3e <HAL_DMA_Start_IT>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80024dc:	e089      	b.n	80025f2 <HAL_DAC_Start_DMA+0x30a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80024ec:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    /* Check linkedlist mode */
    if ((hdac->DMA_Handle2->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d057      	beq.n	80025ac <HAL_DAC_Start_DMA+0x2c4>
    {
      if ((hdac->DMA_Handle2->LinkedListQueue != NULL) && (hdac->DMA_Handle2->LinkedListQueue->Head != NULL))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002502:	2b00      	cmp	r3, #0
 8002504:	d050      	beq.n	80025a8 <HAL_DAC_Start_DMA+0x2c0>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d04a      	beq.n	80025a8 <HAL_DAC_Start_DMA+0x2c0>
      {
        /* Length should be converted to number of bytes */
        if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hdac->DMA_Handle2->LinkedListQueue->Head) != HAL_OK)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	f107 0318 	add.w	r3, r7, #24
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f001 f9f5 	bl	8003910 <HAL_DMAEx_List_GetNodeConfig>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_DAC_Start_DMA+0x248>
        {
          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e08c      	b.n	800264a <HAL_DAC_Start_DMA+0x362>
        }

        /* Length should be converted to number of bytes */
        if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002532:	2b02      	cmp	r3, #2
 8002534:	d104      	bne.n	8002540 <HAL_DAC_Start_DMA+0x258>
        {
          /* Word -> Bytes */
          LengthInBytes = Length * 4U;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800253e:	e016      	b.n	800256e <HAL_DAC_Start_DMA+0x286>
        }
        else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8002540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002542:	2b01      	cmp	r3, #1
 8002544:	d110      	bne.n	8002568 <HAL_DAC_Start_DMA+0x280>
        {
          /* Halfword -> Bytes */
          LengthInBytes = Length * 2U;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800254e:	e00e      	b.n	800256e <HAL_DAC_Start_DMA+0x286>
 8002550:	08002b39 	.word	0x08002b39
 8002554:	08002b5d 	.word	0x08002b5d
 8002558:	08002b7b 	.word	0x08002b7b
 800255c:	08002ecd 	.word	0x08002ecd
 8002560:	08002ef1 	.word	0x08002ef1
 8002564:	08002f0f 	.word	0x08002f0f
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          LengthInBytes = Length;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        }

        /* Set DMA data size */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = LengthInBytes;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800257a:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = tmpreg;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002594:	611a      	str	r2, [r3, #16]

        /* Enable the DMA channel */
        status = HAL_DMAEx_List_Start_IT(hdac->DMA_Handle2);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	4618      	mov	r0, r3
 800259c:	f001 f90e 	bl	80037bc <HAL_DMAEx_List_Start_IT>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80025a6:	e024      	b.n	80025f2 <HAL_DAC_Start_DMA+0x30a>
      }
      else
      {
        /* Return error status */
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e04e      	b.n	800264a <HAL_DAC_Start_DMA+0x362>
      }
    }
    else
    {
      /* Length should be converted to number of bytes */
      if (hdac->DMA_Handle2->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d104      	bne.n	80025c0 <HAL_DAC_Start_DMA+0x2d8>
      {
        /* Word -> Bytes */
        LengthInBytes = Length * 4U;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025be:	e00c      	b.n	80025da <HAL_DAC_Start_DMA+0x2f2>
      }
      else if (hdac->DMA_Handle2->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d104      	bne.n	80025d4 <HAL_DAC_Start_DMA+0x2ec>
      {
        /* Halfword -> Bytes */
        LengthInBytes = Length * 2U;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025d2:	e002      	b.n	80025da <HAL_DAC_Start_DMA+0x2f2>
      }
      else /* Bytes */
      {
        /* Same size already expressed in Bytes */
        LengthInBytes = Length;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }

      /* Enable the DMA channel */
      status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, LengthInBytes);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	68d8      	ldr	r0, [r3, #12]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80025e8:	f000 fca9 	bl	8002f3e <HAL_DMA_Start_IT>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80025f8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d11c      	bne.n	800263a <HAL_DAC_Start_DMA+0x352>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6819      	ldr	r1, [r3, #0]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2201      	movs	r2, #1
 800260e:	409a      	lsls	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002618:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <HAL_DAC_Start_DMA+0x36c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	099b      	lsrs	r3, r3, #6
 800261e:	4a0e      	ldr	r2, [pc, #56]	@ (8002658 <HAL_DAC_Start_DMA+0x370>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	099b      	lsrs	r3, r3, #6
 8002626:	3301      	adds	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 800262a:	e002      	b.n	8002632 <HAL_DAC_Start_DMA+0x34a>
    {
      wait_loop_index--;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3b01      	subs	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f9      	bne.n	800262c <HAL_DAC_Start_DMA+0x344>
 8002638:	e005      	b.n	8002646 <HAL_DAC_Start_DMA+0x35e>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f043 0204 	orr.w	r2, r3, #4
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002646:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800264a:	4618      	mov	r0, r3
 800264c:	3790      	adds	r7, #144	@ 0x90
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200000a0 	.word	0x200000a0
 8002658:	053e2d63 	.word	0x053e2d63

0800265c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e03e      	b.n	80026ee <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43da      	mvns	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	400a      	ands	r2, r1
 800268c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2201      	movs	r2, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43da      	mvns	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	400a      	ands	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10d      	bne.n	80026cc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fca2 	bl	8002ffe <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e00c      	b.n	80026e6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fc94 	bl	8002ffe <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80026e4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01e      	beq.n	8002756 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d019      	beq.n	8002756 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2204      	movs	r2, #4
 8002726:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800273c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800274c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	4798      	blx	r3
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01e      	beq.n	800279e <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d019      	beq.n	800279e <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2204      	movs	r2, #4
 800276e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f043 0202 	orr.w	r2, r3, #2
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002784:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002794:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	@ 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_DAC_ConfigChannel+0x1c>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e187      	b.n	8002b28 <HAL_DAC_ConfigChannel+0x330>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	795b      	ldrb	r3, [r3, #5]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_DAC_ConfigChannel+0x32>
 8002826:	2302      	movs	r3, #2
 8002828:	e17e      	b.n	8002b28 <HAL_DAC_ConfigChannel+0x330>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2201      	movs	r2, #1
 800282e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2202      	movs	r2, #2
 8002834:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b04      	cmp	r3, #4
 800283c:	d17a      	bne.n	8002934 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800283e:	f7ff fb3d 	bl	8001ebc <HAL_GetTick>
 8002842:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d13d      	bne.n	80028c6 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800284a:	e018      	b.n	800287e <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800284c:	f7ff fb36 	bl	8001ebc <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d911      	bls.n	800287e <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f043 0208 	orr.w	r2, r3, #8
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2203      	movs	r2, #3
 8002878:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e154      	b.n	8002b28 <HAL_DAC_ConfigChannel+0x330>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1df      	bne.n	800284c <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002894:	641a      	str	r2, [r3, #64]	@ 0x40
 8002896:	e020      	b.n	80028da <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002898:	f7ff fb10 	bl	8001ebc <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d90f      	bls.n	80028c6 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	da0a      	bge.n	80028c6 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f043 0208 	orr.w	r2, r3, #8
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2203      	movs	r2, #3
 80028c0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e130      	b.n	8002b28 <HAL_DAC_ConfigChannel+0x330>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	dbe3      	blt.n	8002898 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	ea02 0103 	and.w	r1, r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	409a      	lsls	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	21ff      	movs	r1, #255	@ 0xff
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	ea02 0103 	and.w	r1, r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	409a      	lsls	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293a:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	655a      	str	r2, [r3, #84]	@ 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d11d      	bne.n	800298e <HAL_DAC_ConfigChannel+0x196>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002958:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	221f      	movs	r2, #31
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296a:	4013      	ands	r3, r2
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002982:	4313      	orrs	r3, r2
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800298c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2207      	movs	r2, #7
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a6:	4013      	ands	r3, r2
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d102      	bne.n	80029b8 <HAL_DAC_ConfigChannel+0x1c0>
  {
    connectOnChip = 0x00000000UL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	623b      	str	r3, [r7, #32]
 80029b6:	e00f      	b.n	80029d8 <HAL_DAC_ConfigChannel+0x1e0>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d102      	bne.n	80029c6 <HAL_DAC_ConfigChannel+0x1ce>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80029c0:	2301      	movs	r3, #1
 80029c2:	623b      	str	r3, [r7, #32]
 80029c4:	e008      	b.n	80029d8 <HAL_DAC_ConfigChannel+0x1e0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <HAL_DAC_ConfigChannel+0x1dc>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80029ce:	2301      	movs	r3, #1
 80029d0:	623b      	str	r3, [r7, #32]
 80029d2:	e001      	b.n	80029d8 <HAL_DAC_ConfigChannel+0x1e0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	6a3a      	ldr	r2, [r7, #32]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fa:	4013      	ands	r3, r2
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	7a1b      	ldrb	r3, [r3, #8]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d102      	bne.n	8002a0c <HAL_DAC_ConfigChannel+0x214>
 8002a06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a0a:	e000      	b.n	8002a0e <HAL_DAC_ConfigChannel+0x216>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a26:	4013      	ands	r3, r2
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	7a5b      	ldrb	r3, [r3, #9]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d102      	bne.n	8002a38 <HAL_DAC_ConfigChannel+0x240>
 8002a32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a36:	e000      	b.n	8002a3a <HAL_DAC_ConfigChannel+0x242>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a46:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d114      	bne.n	8002a7a <HAL_DAC_ConfigChannel+0x282>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002a50:	f003 fc24 	bl	800629c <HAL_RCC_GetHCLKFreq>
 8002a54:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4a35      	ldr	r2, [pc, #212]	@ (8002b30 <HAL_DAC_ConfigChannel+0x338>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d904      	bls.n	8002a68 <HAL_DAC_ConfigChannel+0x270>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a66:	e00f      	b.n	8002a88 <HAL_DAC_ConfigChannel+0x290>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4a32      	ldr	r2, [pc, #200]	@ (8002b34 <HAL_DAC_ConfigChannel+0x33c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d90a      	bls.n	8002a86 <HAL_DAC_ConfigChannel+0x28e>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a78:	e006      	b.n	8002a88 <HAL_DAC_ConfigChannel+0x290>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a80:	4313      	orrs	r3, r2
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a84:	e000      	b.n	8002a88 <HAL_DAC_ConfigChannel+0x290>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002a86:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a96:	4313      	orrs	r3, r2
 8002a98:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6819      	ldr	r1, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	400a      	ands	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ada:	4013      	ands	r3, r2
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af2:	4313      	orrs	r3, r2
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002afc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	22c0      	movs	r2, #192	@ 0xc0
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43da      	mvns	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	400a      	ands	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002b26:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3728      	adds	r7, #40	@ 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	09896800 	.word	0x09896800
 8002b34:	04c4b400 	.word	0x04c4b400

08002b38 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b44:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	4798      	blx	r3
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	711a      	strb	r2, [r3, #4]
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b68:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	4798      	blx	r3
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f043 0204 	orr.w	r2, r3, #4
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	4798      	blx	r3
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	711a      	strb	r2, [r3, #4]
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_DACEx_SelfCalibrate>:
  * @retval Updates DAC_TrimmingValue. , DAC_UserTrimming set to DAC_UserTrimming
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */
HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	@ 0x28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Check the DAC handle allocation */
  /* Check if DAC running */
  if ((hdac == NULL) || (sConfig == NULL))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_DACEx_SelfCalibrate+0x1e>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d103      	bne.n	8002c22 <HAL_DACEx_SelfCalibrate+0x26>
  {
    status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002c20:	e111      	b.n	8002e46 <HAL_DACEx_SelfCalibrate+0x24a>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	791b      	ldrb	r3, [r3, #4]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d103      	bne.n	8002c34 <HAL_DACEx_SelfCalibrate+0x38>
  {
    status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002c32:	e108      	b.n	8002e46 <HAL_DACEx_SelfCalibrate+0x24a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	795b      	ldrb	r3, [r3, #5]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_DACEx_SelfCalibrate+0x44>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e104      	b.n	8002e4a <HAL_DACEx_SelfCalibrate+0x24e>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2107      	movs	r1, #7
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2201      	movs	r2, #1
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	400a      	ands	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]
    /* Wait for ready bit to be de-asserted */
    HAL_Delay(1);
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f7ff f92b 	bl	8001ed4 <HAL_Delay>

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2207      	movs	r2, #7
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	400a      	ands	r2, r1
 8002c98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6819      	ldr	r1, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002caa:	409a      	lsls	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 0x10UL;
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	623b      	str	r3, [r7, #32]
    delta = 0x08UL;
 8002cb8:	2308      	movs	r3, #8
 8002cba:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 8002cbc:	e047      	b.n	8002d4e <HAL_DACEx_SelfCalibrate+0x152>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	211f      	movs	r1, #31
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	ea02 0103 	and.w	r1, r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	6a3a      	ldr	r2, [r7, #32]
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Wait minimum time needed between two calibration steps (OTRIM) */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed */
      /*       32 bits register capacity and handle low frequency. */
      wait_loop_index = ((DAC_DELAY_TRIM_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8002e54 <HAL_DACEx_SelfCalibrate+0x258>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	099b      	lsrs	r3, r3, #6
 8002cee:	4a5a      	ldr	r2, [pc, #360]	@ (8002e58 <HAL_DACEx_SelfCalibrate+0x25c>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002d00:	e002      	b.n	8002d08 <HAL_DACEx_SelfCalibrate+0x10c>
      {
        wait_loop_index--;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f9      	bne.n	8002d02 <HAL_DACEx_SelfCalibrate+0x106>
      }

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	401a      	ands	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d104      	bne.n	8002d40 <HAL_DACEx_SelfCalibrate+0x144>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 8002d36:	6a3a      	ldr	r2, [r7, #32]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	623b      	str	r3, [r7, #32]
 8002d3e:	e003      	b.n	8002d48 <HAL_DACEx_SelfCalibrate+0x14c>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8002d40:	6a3a      	ldr	r2, [r7, #32]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1UL;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1b4      	bne.n	8002cbe <HAL_DACEx_SelfCalibrate+0xc2>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	211f      	movs	r1, #31
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	ea02 0103 	and.w	r1, r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	6a3a      	ldr	r2, [r7, #32]
 8002d74:	409a      	lsls	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Wait minimum time needed between two calibration steps (OTRIM) */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed */
    /*       32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_TRIM_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d7e:	4b35      	ldr	r3, [pc, #212]	@ (8002e54 <HAL_DACEx_SelfCalibrate+0x258>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	099b      	lsrs	r3, r3, #6
 8002d84:	4a34      	ldr	r2, [pc, #208]	@ (8002e58 <HAL_DACEx_SelfCalibrate+0x25c>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	099b      	lsrs	r3, r3, #6
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002d96:	e002      	b.n	8002d9e <HAL_DACEx_SelfCalibrate+0x1a2>
    {
      wait_loop_index--;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f9      	bne.n	8002d98 <HAL_DACEx_SelfCalibrate+0x19c>
    }

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d11a      	bne.n	8002df4 <HAL_DACEx_SelfCalibrate+0x1f8>
    {
      /* Check trimming value below maximum */
      if (trimmingvalue < 0x1FU)
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	2b1e      	cmp	r3, #30
 8002dc2:	d802      	bhi.n	8002dca <HAL_DACEx_SelfCalibrate+0x1ce>
      {
        /* Trimming is actually one value more */
        trimmingvalue++;
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	623b      	str	r3, [r7, #32]
      }
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	211f      	movs	r1, #31
 8002dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	ea02 0103 	and.w	r1, r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	6a3a      	ldr	r2, [r7, #32]
 8002dea:	409a      	lsls	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6819      	ldr	r1, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	400a      	ands	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	621a      	str	r2, [r3, #32]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	61da      	str	r2, [r3, #28]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2107      	movs	r1, #7
 8002e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	ea02 0103 	and.w	r1, r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	715a      	strb	r2, [r3, #5]
  }

  return status;
 8002e46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3728      	adds	r7, #40	@ 0x28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200000a0 	.word	0x200000a0
 8002e58:	053e2d63 	.word	0x053e2d63

08002e5c <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle and autonomous mode configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <HAL_DACEx_SetConfigAutonomousMode+0x16>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_DACEx_SetConfigAutonomousMode+0x1a>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e024      	b.n	8002ec0 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }

  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	791b      	ldrb	r3, [r3, #4]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d11e      	bne.n	8002ebe <HAL_DACEx_SetConfigAutonomousMode+0x62>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	795b      	ldrb	r3, [r3, #5]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_DACEx_SetConfigAutonomousMode+0x30>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e019      	b.n	8002ec0 <HAL_DACEx_SetConfigAutonomousMode+0x64>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2202      	movs	r2, #2
 8002e96:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9e:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }
  else
  {
    return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
  }
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	4798      	blx	r3
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	711a      	strb	r2, [r3, #4]
}
 8002ee8:	bf00      	nop
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	4798      	blx	r3
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f043 0204 	orr.w	r2, r3, #4
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	4798      	blx	r3
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2201      	movs	r2, #1
 8002f34:	711a      	strb	r2, [r3, #4]
}
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e04f      	b.n	8002ff6 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_DMA_Start_IT+0x26>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e048      	b.n	8002ff6 <HAL_DMA_Start_IT+0xb8>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d136      	bne.n	8002fe6 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fa4f 	bl	8003430 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002fa0:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb8:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fd0:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e007      	b.n	8002ff6 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2240      	movs	r2, #64	@ 0x40
 8002fea:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003006:	f7fe ff59 	bl	8001ebc <HAL_GetTick>
 800300a:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e06b      	b.n	80030ee <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d008      	beq.n	8003034 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e05c      	b.n	80030ee <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0204 	orr.w	r2, r2, #4
 8003042:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2205      	movs	r2, #5
 8003048:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800304c:	e020      	b.n	8003090 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800304e:	f7fe ff35 	bl	8001ebc <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b05      	cmp	r3, #5
 800305a:	d919      	bls.n	8003090 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003060:	f043 0210 	orr.w	r2, r3, #16
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2203      	movs	r2, #3
 800306c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003080:	2201      	movs	r2, #1
 8003082:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e02e      	b.n	80030ee <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0d7      	beq.n	800304e <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0202 	orr.w	r2, r2, #2
 80030ac:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2204      	movs	r2, #4
 80030b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80030be:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d007      	beq.n	80030e4 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d8:	2201      	movs	r2, #1
 80030da:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2200      	movs	r2, #0
 80030e2:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003106:	f023 030f 	bic.w	r3, r3, #15
 800310a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	3b50      	subs	r3, #80	@ 0x50
 8003116:	09db      	lsrs	r3, r3, #7
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	2201      	movs	r2, #1
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 813b 	beq.w	80033ac <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d011      	beq.n	8003168 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800315a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003160:	f043 0201 	orr.w	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003172:	2b00      	cmp	r3, #0
 8003174:	d011      	beq.n	800319a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800318c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003192:	f043 0202 	orr.w	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d011      	beq.n	80031cc <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031be:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c4:	f043 0204 	orr.w	r2, r3, #4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d011      	beq.n	80031fe <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00a      	beq.n	80031fe <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031f0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f6:	f043 0208 	orr.w	r2, r3, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003208:	2b00      	cmp	r3, #0
 800320a:	d013      	beq.n	8003234 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00c      	beq.n	8003234 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003222:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d04c      	beq.n	80032dc <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d045      	beq.n	80032dc <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003258:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b04      	cmp	r3, #4
 8003264:	d12e      	bne.n	80032c4 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003274:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0202 	orr.w	r2, r2, #2
 8003284:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800329e:	2201      	movs	r2, #1
 80032a0:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d07a      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
        }

        return;
 80032c2:	e075      	b.n	80033b0 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2205      	movs	r2, #5
 80032c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d039      	beq.n	800335e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d032      	beq.n	800335e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d116      	bne.n	800333c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003314:	2b00      	cmp	r3, #0
 8003316:	d111      	bne.n	800333c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003324:	2201      	movs	r2, #1
 8003326:	731a      	strb	r2, [r3, #12]
 8003328:	e008      	b.n	800333c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003344:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	2b00      	cmp	r3, #0
 8003364:	d025      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695a      	ldr	r2, [r3, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0202 	orr.w	r2, r2, #2
 8003374:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338e:	2201      	movs	r2, #1
 8003390:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
 80033aa:	e002      	b.n	80033b2 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80033ac:	bf00      	nop
 80033ae:	e000      	b.n	80033b2 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80033b0:	bf00      	nop
    }
  }
}
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e02b      	b.n	8003424 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80033d4:	f023 030f 	bic.w	r3, r3, #15
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e2:	3b50      	subs	r3, #80	@ 0x50
 80033e4:	09db      	lsrs	r3, r3, #7
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	2201      	movs	r2, #1
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d012      	beq.n	8003422 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f003 0311 	and.w	r3, r3, #17
 8003402:	2b11      	cmp	r3, #17
 8003404:	d106      	bne.n	8003414 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	431a      	orrs	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	e006      	b.n	8003422 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	43db      	mvns	r3, r3
 800341c:	401a      	ands	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	041b      	lsls	r3, r3, #16
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	b291      	uxth	r1, r2
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	430b      	orrs	r3, r1
 8003452:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800345c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003484:	f7fe fd1a 	bl	8001ebc <HAL_GetTick>
 8003488:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0db      	b.n	800364c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a6e      	ldr	r2, [pc, #440]	@ (8003654 <HAL_DMAEx_List_Init+0x1d8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	f000 809f 	beq.w	80035de <HAL_DMAEx_List_Init+0x162>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a6c      	ldr	r2, [pc, #432]	@ (8003658 <HAL_DMAEx_List_Init+0x1dc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	f000 8099 	beq.w	80035de <HAL_DMAEx_List_Init+0x162>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a6a      	ldr	r2, [pc, #424]	@ (800365c <HAL_DMAEx_List_Init+0x1e0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	f000 8093 	beq.w	80035de <HAL_DMAEx_List_Init+0x162>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a68      	ldr	r2, [pc, #416]	@ (8003660 <HAL_DMAEx_List_Init+0x1e4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	f000 808d 	beq.w	80035de <HAL_DMAEx_List_Init+0x162>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a66      	ldr	r2, [pc, #408]	@ (8003664 <HAL_DMAEx_List_Init+0x1e8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	f000 8087 	beq.w	80035de <HAL_DMAEx_List_Init+0x162>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a64      	ldr	r2, [pc, #400]	@ (8003668 <HAL_DMAEx_List_Init+0x1ec>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	f000 8081 	beq.w	80035de <HAL_DMAEx_List_Init+0x162>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a62      	ldr	r2, [pc, #392]	@ (800366c <HAL_DMAEx_List_Init+0x1f0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d07b      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a61      	ldr	r2, [pc, #388]	@ (8003670 <HAL_DMAEx_List_Init+0x1f4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d076      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a5f      	ldr	r2, [pc, #380]	@ (8003674 <HAL_DMAEx_List_Init+0x1f8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d071      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a5e      	ldr	r2, [pc, #376]	@ (8003678 <HAL_DMAEx_List_Init+0x1fc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d06c      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a5c      	ldr	r2, [pc, #368]	@ (800367c <HAL_DMAEx_List_Init+0x200>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d067      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a5b      	ldr	r2, [pc, #364]	@ (8003680 <HAL_DMAEx_List_Init+0x204>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d062      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a59      	ldr	r2, [pc, #356]	@ (8003684 <HAL_DMAEx_List_Init+0x208>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d05d      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a58      	ldr	r2, [pc, #352]	@ (8003688 <HAL_DMAEx_List_Init+0x20c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d058      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a56      	ldr	r2, [pc, #344]	@ (800368c <HAL_DMAEx_List_Init+0x210>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d053      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a55      	ldr	r2, [pc, #340]	@ (8003690 <HAL_DMAEx_List_Init+0x214>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d04e      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a53      	ldr	r2, [pc, #332]	@ (8003694 <HAL_DMAEx_List_Init+0x218>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d049      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a52      	ldr	r2, [pc, #328]	@ (8003698 <HAL_DMAEx_List_Init+0x21c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d044      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a50      	ldr	r2, [pc, #320]	@ (800369c <HAL_DMAEx_List_Init+0x220>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d03f      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a4f      	ldr	r2, [pc, #316]	@ (80036a0 <HAL_DMAEx_List_Init+0x224>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d03a      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a4d      	ldr	r2, [pc, #308]	@ (80036a4 <HAL_DMAEx_List_Init+0x228>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d035      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a4c      	ldr	r2, [pc, #304]	@ (80036a8 <HAL_DMAEx_List_Init+0x22c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d030      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a4a      	ldr	r2, [pc, #296]	@ (80036ac <HAL_DMAEx_List_Init+0x230>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d02b      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a49      	ldr	r2, [pc, #292]	@ (80036b0 <HAL_DMAEx_List_Init+0x234>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d026      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a47      	ldr	r2, [pc, #284]	@ (80036b4 <HAL_DMAEx_List_Init+0x238>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d021      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a46      	ldr	r2, [pc, #280]	@ (80036b8 <HAL_DMAEx_List_Init+0x23c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d01c      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a44      	ldr	r2, [pc, #272]	@ (80036bc <HAL_DMAEx_List_Init+0x240>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d017      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a43      	ldr	r2, [pc, #268]	@ (80036c0 <HAL_DMAEx_List_Init+0x244>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d012      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a41      	ldr	r2, [pc, #260]	@ (80036c4 <HAL_DMAEx_List_Init+0x248>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00d      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a40      	ldr	r2, [pc, #256]	@ (80036c8 <HAL_DMAEx_List_Init+0x24c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d008      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a3e      	ldr	r2, [pc, #248]	@ (80036cc <HAL_DMAEx_List_Init+0x250>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <HAL_DMAEx_List_Init+0x162>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a3d      	ldr	r2, [pc, #244]	@ (80036d0 <HAL_DMAEx_List_Init+0x254>)
 80035dc:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0206 	orr.w	r2, r2, #6
 80035fc:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80035fe:	e00f      	b.n	8003620 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003600:	f7fe fc5c 	bl	8001ebc <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b05      	cmp	r3, #5
 800360c:	d908      	bls.n	8003620 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2210      	movs	r2, #16
 8003612:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2203      	movs	r2, #3
 8003618:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e015      	b.n	800364c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e8      	bne.n	8003600 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 faf2 	bl	8003c18 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40020050 	.word	0x40020050
 8003658:	50020050 	.word	0x50020050
 800365c:	400200d0 	.word	0x400200d0
 8003660:	500200d0 	.word	0x500200d0
 8003664:	40020150 	.word	0x40020150
 8003668:	50020150 	.word	0x50020150
 800366c:	400201d0 	.word	0x400201d0
 8003670:	500201d0 	.word	0x500201d0
 8003674:	40020250 	.word	0x40020250
 8003678:	50020250 	.word	0x50020250
 800367c:	400202d0 	.word	0x400202d0
 8003680:	500202d0 	.word	0x500202d0
 8003684:	40020350 	.word	0x40020350
 8003688:	50020350 	.word	0x50020350
 800368c:	400203d0 	.word	0x400203d0
 8003690:	500203d0 	.word	0x500203d0
 8003694:	40020450 	.word	0x40020450
 8003698:	50020450 	.word	0x50020450
 800369c:	400204d0 	.word	0x400204d0
 80036a0:	500204d0 	.word	0x500204d0
 80036a4:	40020550 	.word	0x40020550
 80036a8:	50020550 	.word	0x50020550
 80036ac:	400205d0 	.word	0x400205d0
 80036b0:	500205d0 	.word	0x500205d0
 80036b4:	40020650 	.word	0x40020650
 80036b8:	50020650 	.word	0x50020650
 80036bc:	400206d0 	.word	0x400206d0
 80036c0:	500206d0 	.word	0x500206d0
 80036c4:	40020750 	.word	0x40020750
 80036c8:	50020750 	.word	0x50020750
 80036cc:	400207d0 	.word	0x400207d0
 80036d0:	500207d0 	.word	0x500207d0

080036d4 <HAL_DMAEx_List_Start>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start(DMA_HandleTypeDef *const hdma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_DMAEx_List_Start+0x16>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_DMAEx_List_Start+0x1a>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e062      	b.n	80037b4 <HAL_DMAEx_List_Start+0xe0>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80036f4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003700:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8003702:	7dfb      	ldrb	r3, [r7, #23]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d005      	beq.n	8003714 <HAL_DMAEx_List_Start+0x40>
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d14a      	bne.n	80037a4 <HAL_DMAEx_List_Start+0xd0>
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d047      	beq.n	80037a4 <HAL_DMAEx_List_Start+0xd0>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d137      	bne.n	8003790 <HAL_DMAEx_List_Start+0xbc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_DMAEx_List_Start+0x5a>
 800372a:	2302      	movs	r3, #2
 800372c:	e042      	b.n	80037b4 <HAL_DMAEx_List_Start+0xe0>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003742:	2202      	movs	r2, #2
 8003744:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003750:	2200      	movs	r2, #0
 8003752:	611a      	str	r2, [r3, #16]

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f107 010c 	add.w	r1, r7, #12
 800375e:	2200      	movs	r2, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fe7f 	bl	8004464 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4619      	mov	r1, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	0c0b      	lsrs	r3, r1, #16
 8003774:	041b      	lsls	r3, r3, #16
 8003776:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003784:	4013      	ands	r3, r2
 8003786:	68f9      	ldr	r1, [r7, #12]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	430b      	orrs	r3, r1
 800378e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e007      	b.n	80037b4 <HAL_DMAEx_List_Start+0xe0>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2240      	movs	r2, #64	@ 0x40
 80037a8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_DMAEx_List_Start_IT+0x16>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e082      	b.n	80038dc <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037dc:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e8:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d005      	beq.n	80037fc <HAL_DMAEx_List_Start_IT+0x40>
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d16a      	bne.n	80038cc <HAL_DMAEx_List_Start_IT+0x110>
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d067      	beq.n	80038cc <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d157      	bne.n	80038b8 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_DMAEx_List_Start_IT+0x5a>
 8003812:	2302      	movs	r3, #2
 8003814:	e062      	b.n	80038dc <HAL_DMAEx_List_Start_IT+0x120>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382a:	2202      	movs	r2, #2
 800382c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003838:	2200      	movs	r2, #0
 800383a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800384a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003862:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695a      	ldr	r2, [r3, #20]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800387a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f107 010c 	add.w	r1, r7, #12
 8003886:	2200      	movs	r2, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fdeb 	bl	8004464 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4619      	mov	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	0c0b      	lsrs	r3, r1, #16
 800389c:	041b      	lsls	r3, r3, #16
 800389e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80038ac:	4013      	ands	r3, r2
 80038ae:	68f9      	ldr	r1, [r7, #12]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	430b      	orrs	r3, r1
 80038b6:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e007      	b.n	80038dc <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2240      	movs	r2, #64	@ 0x40
 80038d0:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_DMAEx_List_BuildNode+0x16>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e004      	b.n	8003908 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80038fe:	6839      	ldr	r1, [r7, #0]
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fae1 	bl	8003ec8 <DMA_List_BuildNode>

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_DMAEx_List_GetNodeConfig+0x16>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e004      	b.n	8003934 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 800392a:	6839      	ldr	r1, [r7, #0]
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fc23 	bl	8004178 <DMA_List_GetNodeConfig>

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	@ 0x28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e066      	b.n	8003a24 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d104      	bne.n	8003968 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2204      	movs	r2, #4
 8003962:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e05d      	b.n	8003a24 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2200      	movs	r2, #0
 800396e:	6839      	ldr	r1, [r7, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fd0b 	bl	800438c <DMA_List_CheckNodesBaseAddresses>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2205      	movs	r2, #5
 8003980:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e04e      	b.n	8003a24 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2200      	movs	r2, #0
 800398c:	6839      	ldr	r1, [r7, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fd2c 	bl	80043ec <DMA_List_CheckNodesTypes>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2204      	movs	r2, #4
 800399e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e03f      	b.n	8003a24 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d103      	bne.n	80039b4 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	e02b      	b.n	8003a0c <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80039b4:	f107 0220 	add.w	r2, r7, #32
 80039b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039bc:	4619      	mov	r1, r3
 80039be:	6838      	ldr	r0, [r7, #0]
 80039c0:	f000 fd50 	bl	8004464 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80039c8:	f107 030c 	add.w	r3, r7, #12
 80039cc:	461a      	mov	r2, r3
 80039ce:	2100      	movs	r1, #0
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fd77 	bl	80044c4 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80039e8:	4013      	ands	r3, r2
 80039ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039ec:	6a3a      	ldr	r2, [r7, #32]
 80039ee:	4319      	orrs	r1, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80039fc:	4013      	ands	r3, r2
 80039fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4610      	mov	r0, r2
 8003a04:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003a06:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8003a08:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3728      	adds	r7, #40	@ 0x28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	@ 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e052      	b.n	8003ae4 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d104      	bne.n	8003a50 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e049      	b.n	8003ae4 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00c      	beq.n	8003a72 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d101      	bne.n	8003a68 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e03d      	b.n	8003ae4 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e038      	b.n	8003ae4 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d104      	bne.n	8003a84 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e02f      	b.n	8003ae4 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f107 0220 	add.w	r2, r7, #32
 8003a98:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fce1 	bl	8004464 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003aa6:	f107 030c 	add.w	r3, r7, #12
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2100      	movs	r1, #0
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fd08 	bl	80044c4 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003abe:	4013      	ands	r3, r2
 8003ac0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003ac8:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003aca:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3728      	adds	r7, #40	@ 0x28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_DMAEx_List_LinkQ+0x16>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e072      	b.n	8003bec <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b0c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d002      	beq.n	8003b20 <HAL_DMAEx_List_LinkQ+0x34>
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b05      	cmp	r3, #5
 8003b1e:	d108      	bne.n	8003b32 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2240      	movs	r2, #64	@ 0x40
 8003b24:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e05c      	b.n	8003bec <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	7b1b      	ldrb	r3, [r3, #12]
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d104      	bne.n	8003b46 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e052      	b.n	8003bec <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf8 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d022      	beq.n	8003b96 <HAL_DMAEx_List_LinkQ+0xaa>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a29      	ldr	r2, [pc, #164]	@ (8003bfc <HAL_DMAEx_List_LinkQ+0x110>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01d      	beq.n	8003b96 <HAL_DMAEx_List_LinkQ+0xaa>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a28      	ldr	r2, [pc, #160]	@ (8003c00 <HAL_DMAEx_List_LinkQ+0x114>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d018      	beq.n	8003b96 <HAL_DMAEx_List_LinkQ+0xaa>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a26      	ldr	r2, [pc, #152]	@ (8003c04 <HAL_DMAEx_List_LinkQ+0x118>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_DMAEx_List_LinkQ+0xaa>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a25      	ldr	r2, [pc, #148]	@ (8003c08 <HAL_DMAEx_List_LinkQ+0x11c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00e      	beq.n	8003b96 <HAL_DMAEx_List_LinkQ+0xaa>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a23      	ldr	r2, [pc, #140]	@ (8003c0c <HAL_DMAEx_List_LinkQ+0x120>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d009      	beq.n	8003b96 <HAL_DMAEx_List_LinkQ+0xaa>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a22      	ldr	r2, [pc, #136]	@ (8003c10 <HAL_DMAEx_List_LinkQ+0x124>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <HAL_DMAEx_List_LinkQ+0xaa>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a20      	ldr	r2, [pc, #128]	@ (8003c14 <HAL_DMAEx_List_LinkQ+0x128>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <HAL_DMAEx_List_LinkQ+0xae>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_DMAEx_List_LinkQ+0xb0>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d004      	beq.n	8003bb8 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e019      	b.n	8003bec <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bbc:	2b81      	cmp	r3, #129	@ 0x81
 8003bbe:	d108      	bne.n	8003bd2 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10d      	bne.n	8003be4 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2204      	movs	r2, #4
 8003bcc:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e00c      	b.n	8003bec <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d004      	beq.n	8003be4 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2204      	movs	r2, #4
 8003bde:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e003      	b.n	8003bec <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	40020650 	.word	0x40020650
 8003bfc:	50020650 	.word	0x50020650
 8003c00:	400206d0 	.word	0x400206d0
 8003c04:	500206d0 	.word	0x500206d0
 8003c08:	40020750 	.word	0x40020750
 8003c0c:	50020750 	.word	0x50020750
 8003c10:	400207d0 	.word	0x400207d0
 8003c14:	500207d0 	.word	0x500207d0

08003c18 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a85      	ldr	r2, [pc, #532]	@ (8003e48 <DMA_List_Init+0x230>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	f000 80a0 	beq.w	8003d78 <DMA_List_Init+0x160>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a83      	ldr	r2, [pc, #524]	@ (8003e4c <DMA_List_Init+0x234>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	f000 809a 	beq.w	8003d78 <DMA_List_Init+0x160>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a81      	ldr	r2, [pc, #516]	@ (8003e50 <DMA_List_Init+0x238>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	f000 8094 	beq.w	8003d78 <DMA_List_Init+0x160>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a7f      	ldr	r2, [pc, #508]	@ (8003e54 <DMA_List_Init+0x23c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	f000 808e 	beq.w	8003d78 <DMA_List_Init+0x160>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a7d      	ldr	r2, [pc, #500]	@ (8003e58 <DMA_List_Init+0x240>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	f000 8088 	beq.w	8003d78 <DMA_List_Init+0x160>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a7b      	ldr	r2, [pc, #492]	@ (8003e5c <DMA_List_Init+0x244>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	f000 8082 	beq.w	8003d78 <DMA_List_Init+0x160>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a79      	ldr	r2, [pc, #484]	@ (8003e60 <DMA_List_Init+0x248>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d07c      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a78      	ldr	r2, [pc, #480]	@ (8003e64 <DMA_List_Init+0x24c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d077      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a76      	ldr	r2, [pc, #472]	@ (8003e68 <DMA_List_Init+0x250>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d072      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a75      	ldr	r2, [pc, #468]	@ (8003e6c <DMA_List_Init+0x254>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d06d      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a73      	ldr	r2, [pc, #460]	@ (8003e70 <DMA_List_Init+0x258>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d068      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a72      	ldr	r2, [pc, #456]	@ (8003e74 <DMA_List_Init+0x25c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d063      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a70      	ldr	r2, [pc, #448]	@ (8003e78 <DMA_List_Init+0x260>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d05e      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a6f      	ldr	r2, [pc, #444]	@ (8003e7c <DMA_List_Init+0x264>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d059      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a6d      	ldr	r2, [pc, #436]	@ (8003e80 <DMA_List_Init+0x268>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d054      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a6c      	ldr	r2, [pc, #432]	@ (8003e84 <DMA_List_Init+0x26c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d04f      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a6a      	ldr	r2, [pc, #424]	@ (8003e88 <DMA_List_Init+0x270>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d04a      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a69      	ldr	r2, [pc, #420]	@ (8003e8c <DMA_List_Init+0x274>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d045      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a67      	ldr	r2, [pc, #412]	@ (8003e90 <DMA_List_Init+0x278>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d040      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a66      	ldr	r2, [pc, #408]	@ (8003e94 <DMA_List_Init+0x27c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d03b      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a64      	ldr	r2, [pc, #400]	@ (8003e98 <DMA_List_Init+0x280>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d036      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a63      	ldr	r2, [pc, #396]	@ (8003e9c <DMA_List_Init+0x284>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d031      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a61      	ldr	r2, [pc, #388]	@ (8003ea0 <DMA_List_Init+0x288>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d02c      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a60      	ldr	r2, [pc, #384]	@ (8003ea4 <DMA_List_Init+0x28c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d027      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ea8 <DMA_List_Init+0x290>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d022      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a5d      	ldr	r2, [pc, #372]	@ (8003eac <DMA_List_Init+0x294>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d01d      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a5b      	ldr	r2, [pc, #364]	@ (8003eb0 <DMA_List_Init+0x298>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d018      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a5a      	ldr	r2, [pc, #360]	@ (8003eb4 <DMA_List_Init+0x29c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d013      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a58      	ldr	r2, [pc, #352]	@ (8003eb8 <DMA_List_Init+0x2a0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00e      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a57      	ldr	r2, [pc, #348]	@ (8003ebc <DMA_List_Init+0x2a4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d009      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a55      	ldr	r2, [pc, #340]	@ (8003ec0 <DMA_List_Init+0x2a8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d004      	beq.n	8003d78 <DMA_List_Init+0x160>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a54      	ldr	r2, [pc, #336]	@ (8003ec4 <DMA_List_Init+0x2ac>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d101      	bne.n	8003d7c <DMA_List_Init+0x164>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <DMA_List_Init+0x166>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d004      	beq.n	8003d8c <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2200      	movs	r2, #0
 8003da6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003db0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a36      	ldr	r2, [pc, #216]	@ (8003ea8 <DMA_List_Init+0x290>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <DMA_List_Init+0x202>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a34      	ldr	r2, [pc, #208]	@ (8003eac <DMA_List_Init+0x294>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <DMA_List_Init+0x202>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a33      	ldr	r2, [pc, #204]	@ (8003eb0 <DMA_List_Init+0x298>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <DMA_List_Init+0x202>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a31      	ldr	r2, [pc, #196]	@ (8003eb4 <DMA_List_Init+0x29c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <DMA_List_Init+0x202>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a30      	ldr	r2, [pc, #192]	@ (8003eb8 <DMA_List_Init+0x2a0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <DMA_List_Init+0x202>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2e      	ldr	r2, [pc, #184]	@ (8003ebc <DMA_List_Init+0x2a4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <DMA_List_Init+0x202>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ec0 <DMA_List_Init+0x2a8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <DMA_List_Init+0x202>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a2b      	ldr	r2, [pc, #172]	@ (8003ec4 <DMA_List_Init+0x2ac>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d101      	bne.n	8003e1e <DMA_List_Init+0x206>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <DMA_List_Init+0x208>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2200      	movs	r2, #0
 8003e32:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003e3c:	bf00      	nop
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	40020050 	.word	0x40020050
 8003e4c:	50020050 	.word	0x50020050
 8003e50:	400200d0 	.word	0x400200d0
 8003e54:	500200d0 	.word	0x500200d0
 8003e58:	40020150 	.word	0x40020150
 8003e5c:	50020150 	.word	0x50020150
 8003e60:	400201d0 	.word	0x400201d0
 8003e64:	500201d0 	.word	0x500201d0
 8003e68:	40020250 	.word	0x40020250
 8003e6c:	50020250 	.word	0x50020250
 8003e70:	400202d0 	.word	0x400202d0
 8003e74:	500202d0 	.word	0x500202d0
 8003e78:	40020350 	.word	0x40020350
 8003e7c:	50020350 	.word	0x50020350
 8003e80:	400203d0 	.word	0x400203d0
 8003e84:	500203d0 	.word	0x500203d0
 8003e88:	40020450 	.word	0x40020450
 8003e8c:	50020450 	.word	0x50020450
 8003e90:	400204d0 	.word	0x400204d0
 8003e94:	500204d0 	.word	0x500204d0
 8003e98:	40020550 	.word	0x40020550
 8003e9c:	50020550 	.word	0x50020550
 8003ea0:	400205d0 	.word	0x400205d0
 8003ea4:	500205d0 	.word	0x500205d0
 8003ea8:	40020650 	.word	0x40020650
 8003eac:	50020650 	.word	0x50020650
 8003eb0:	400206d0 	.word	0x400206d0
 8003eb4:	500206d0 	.word	0x500206d0
 8003eb8:	40020750 	.word	0x40020750
 8003ebc:	50020750 	.word	0x50020750
 8003ec0:	400207d0 	.word	0x400207d0
 8003ec4:	500207d0 	.word	0x500207d0

08003ec8 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003eda:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8003ee0:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003ee6:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8003eec:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d017      	beq.n	8003f2e <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0a:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f10:	3b01      	subs	r3, #1
 8003f12:	051b      	lsls	r3, r3, #20
 8003f14:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003f18:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003f26:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6859      	ldr	r1, [r3, #4]
 8003f36:	f240 237f 	movw	r3, #639	@ 0x27f
 8003f3a:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4a:	d10c      	bne.n	8003f66 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d011      	beq.n	8003f7c <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	e00a      	b.n	8003f7c <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f6e:	d105      	bne.n	8003f7c <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00f      	beq.n	8003fa4 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f90:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003f9c:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04e      	beq.n	8004058 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	0419      	lsls	r1, r3, #16
 8003fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004170 <DMA_List_BuildNode+0x2a8>)
 8003fc8:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	da06      	bge.n	8003fe6 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	e005      	b.n	8003ff2 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	da06      	bge.n	8004008 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	609a      	str	r2, [r3, #8]
 8004006:	e005      	b.n	8004014 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004018:	2b00      	cmp	r3, #0
 800401a:	da06      	bge.n	800402a <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	e005      	b.n	8004036 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403a:	2b00      	cmp	r3, #0
 800403c:	da06      	bge.n	800404c <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	609a      	str	r2, [r3, #8]
 800404a:	e005      	b.n	8004058 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d05d      	beq.n	8004130 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004078:	2b00      	cmp	r3, #0
 800407a:	da09      	bge.n	8004090 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004080:	425b      	negs	r3, r3
 8004082:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	615a      	str	r2, [r3, #20]
 800408e:	e005      	b.n	800409c <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004094:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	da0d      	bge.n	80040c0 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a8:	425b      	negs	r3, r3
 80040aa:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	0419      	lsls	r1, r3, #16
 80040b4:	4b2f      	ldr	r3, [pc, #188]	@ (8004174 <DMA_List_BuildNode+0x2ac>)
 80040b6:	400b      	ands	r3, r1
 80040b8:	431a      	orrs	r2, r3
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	615a      	str	r2, [r3, #20]
 80040be:	e009      	b.n	80040d4 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c8:	0419      	lsls	r1, r3, #16
 80040ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004174 <DMA_List_BuildNode+0x2ac>)
 80040cc:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80040ce:	431a      	orrs	r2, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	2b00      	cmp	r3, #0
 80040da:	da08      	bge.n	80040ee <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e0:	425b      	negs	r3, r3
 80040e2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	619a      	str	r2, [r3, #24]
 80040ec:	e004      	b.n	80040f8 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f2:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	da0b      	bge.n	8004118 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004104:	425b      	negs	r3, r3
 8004106:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004110:	431a      	orrs	r2, r3
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	619a      	str	r2, [r3, #24]
 8004116:	e007      	b.n	8004128 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004120:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004122:	431a      	orrs	r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2200      	movs	r2, #0
 800412c:	61da      	str	r2, [r3, #28]
 800412e:	e002      	b.n	8004136 <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d006      	beq.n	8004158 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8004156:	e005      	b.n	8004164 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	621a      	str	r2, [r3, #32]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	07ff0000 	.word	0x07ff0000
 8004174:	1fff0000 	.word	0x1fff0000

08004178 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0208 	and.w	r2, r3, #8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0203 	and.w	r2, r3, #3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041c6:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80041d0:	0d1b      	lsrs	r3, r3, #20
 80041d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041d6:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b66      	ldr	r3, [pc, #408]	@ (8004388 <DMA_List_GetNodeConfig+0x210>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004212:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800421a:	60da      	str	r2, [r3, #12]
 800421c:	e013      	b.n	8004246 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004232:	2b00      	cmp	r3, #0
 8004234:	d004      	beq.n	8004240 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800423c:	60da      	str	r2, [r3, #12]
 800423e:	e002      	b.n	8004246 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	b29a      	uxth	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	0c1b      	lsrs	r3, r3, #16
 80042a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042a4:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80042aa:	e002      	b.n	80042b2 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d04a      	beq.n	8004364 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042d8:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80042da:	89fa      	ldrh	r2, [r7, #14]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042ec:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 80042ee:	89fa      	ldrh	r2, [r7, #14]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d004      	beq.n	800430a <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004304:	425a      	negs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d004      	beq.n	8004320 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800431a:	425a      	negs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8004326:	89fa      	ldrh	r2, [r7, #14]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8004334:	89fa      	ldrh	r2, [r7, #14]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d004      	beq.n	8004350 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434a:	425a      	negs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	da11      	bge.n	800437c <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800435c:	425a      	negs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8004362:	e00b      	b.n	800437c <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800437c:	bf00      	nop
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	0c002000 	.word	0x0c002000

0800438c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	0c1b      	lsrs	r3, r3, #16
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	e00a      	b.n	80043ce <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e004      	b.n	80043ce <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d001      	beq.n	80043de <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d004      	beq.n	800440c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	e00e      	b.n	800442a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d004      	beq.n	800441c <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	e006      	b.n	800442a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 800443c:	2302      	movs	r3, #2
 800443e:	e00b      	b.n	8004458 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	429a      	cmp	r2, r3
 8004450:	d001      	beq.n	8004456 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8004452:	2303      	movs	r3, #3
 8004454:	e000      	b.n	8004458 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00c      	beq.n	8004496 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4a0d      	ldr	r2, [pc, #52]	@ (80044bc <DMA_List_GetCLLRNodeInfo+0x58>)
 8004486:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00f      	beq.n	80044ae <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2207      	movs	r2, #7
 8004492:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004494:	e00b      	b.n	80044ae <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4a08      	ldr	r2, [pc, #32]	@ (80044c0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80044a0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2205      	movs	r2, #5
 80044ac:	601a      	str	r2, [r3, #0]
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	fe010000 	.word	0xfe010000
 80044c0:	f8010000 	.word	0xf8010000

080044c4 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	@ 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d142      	bne.n	800456e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80044e8:	e01d      	b.n	8004526 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d107      	bne.n	8004500 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	e00f      	b.n	8004520 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4413      	add	r3, r2
 8004510:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004518:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800451c:	4013      	ands	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	3301      	adds	r3, #1
 8004524:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	429a      	cmp	r2, r3
 800452e:	d3dc      	bcc.n	80044ea <DMA_List_FindNode+0x26>
 8004530:	e029      	b.n	8004586 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d107      	bne.n	8004548 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004542:	4013      	ands	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	e00f      	b.n	8004568 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	0c1b      	lsrs	r3, r3, #16
 8004552:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4413      	add	r3, r2
 8004558:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004560:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	3301      	adds	r3, #1
 800456c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	429a      	cmp	r2, r3
 8004576:	d206      	bcs.n	8004586 <DMA_List_FindNode+0xc2>
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800457e:	4013      	ands	r3, r2
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	429a      	cmp	r2, r3
 8004584:	d1d5      	bne.n	8004532 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004592:	4013      	ands	r3, r2
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	429a      	cmp	r2, r3
 8004598:	d001      	beq.n	800459e <DMA_List_FindNode+0xda>
    {
      return 1U;
 800459a:	2301      	movs	r3, #1
 800459c:	e02b      	b.n	80045f6 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	041b      	lsls	r3, r3, #16
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	461a      	mov	r2, r3
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00f      	beq.n	80045f4 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	461a      	mov	r2, r3
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80045e4:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	0c1b      	lsrs	r3, r3, #16
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3724      	adds	r7, #36	@ 0x24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8004602:	b480      	push	{r7}
 8004604:	b087      	sub	sp, #28
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	460b      	mov	r3, r1
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004614:	7afb      	ldrb	r3, [r7, #11]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d011      	beq.n	800463e <HAL_EXTI_RegisterCallback+0x3c>
 800461a:	2b02      	cmp	r3, #2
 800461c:	dc13      	bgt.n	8004646 <HAL_EXTI_RegisterCallback+0x44>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_EXTI_RegisterCallback+0x26>
 8004622:	2b01      	cmp	r3, #1
 8004624:	d007      	beq.n	8004636 <HAL_EXTI_RegisterCallback+0x34>
 8004626:	e00e      	b.n	8004646 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	609a      	str	r2, [r3, #8]
      break;
 8004634:	e00a      	b.n	800464c <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	605a      	str	r2, [r3, #4]
      break;
 800463c:	e006      	b.n	800464c <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	609a      	str	r2, [r3, #8]
      break;
 8004644:	e002      	b.n	800464c <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	75fb      	strb	r3, [r7, #23]
      break;
 800464a:	bf00      	nop
  }

  return status;
 800464c:	7dfb      	ldrb	r3, [r7, #23]
}
 800464e:	4618      	mov	r0, r3
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e003      	b.n	8004676 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004674:	2300      	movs	r3, #0
  }
}
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	2201      	movs	r2, #1
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	4b17      	ldr	r3, [pc, #92]	@ (800470c <HAL_EXTI_IRQHandler+0x88>)
 80046ae:	4413      	add	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4013      	ands	r3, r2
 80046ba:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	4b0d      	ldr	r3, [pc, #52]	@ (8004710 <HAL_EXTI_IRQHandler+0x8c>)
 80046dc:	4413      	add	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4013      	ands	r3, r2
 80046e8:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d009      	beq.n	8004704 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	4798      	blx	r3
    }
  }
}
 8004704:	bf00      	nop
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	4602200c 	.word	0x4602200c
 8004710:	46022010 	.word	0x46022010

08004714 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	@ 0x24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004726:	e1ba      	b.n	8004a9e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	2101      	movs	r1, #1
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	fa01 f303 	lsl.w	r3, r1, r3
 8004734:	4013      	ands	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 81aa 	beq.w	8004a98 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a55      	ldr	r2, [pc, #340]	@ (800489c <HAL_GPIO_Init+0x188>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d15d      	bne.n	8004808 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004752:	2201      	movs	r2, #1
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	4013      	ands	r3, r2
 8004760:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f003 0201 	and.w	r2, r3, #1
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	4313      	orrs	r3, r2
 8004774:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69fa      	ldr	r2, [r7, #28]
 800477a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800477c:	4a48      	ldr	r2, [pc, #288]	@ (80048a0 <HAL_GPIO_Init+0x18c>)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004784:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004786:	4a46      	ldr	r2, [pc, #280]	@ (80048a0 <HAL_GPIO_Init+0x18c>)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	08da      	lsrs	r2, r3, #3
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	3208      	adds	r2, #8
 800479a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	220f      	movs	r2, #15
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	220b      	movs	r2, #11
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	08da      	lsrs	r2, r3, #3
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	3208      	adds	r2, #8
 80047d2:	69f9      	ldr	r1, [r7, #28]
 80047d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	2203      	movs	r2, #3
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	2202      	movs	r2, #2
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	e067      	b.n	80048d8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b02      	cmp	r3, #2
 800480e:	d003      	beq.n	8004818 <HAL_GPIO_Init+0x104>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b12      	cmp	r3, #18
 8004816:	d145      	bne.n	80048a4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	08da      	lsrs	r2, r3, #3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3208      	adds	r2, #8
 8004820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004824:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	220f      	movs	r2, #15
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	43db      	mvns	r3, r3
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	4013      	ands	r3, r2
 800483a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f003 020f 	and.w	r2, r3, #15
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	4313      	orrs	r3, r2
 8004854:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	08da      	lsrs	r2, r3, #3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3208      	adds	r2, #8
 800485e:	69f9      	ldr	r1, [r7, #28]
 8004860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	2203      	movs	r2, #3
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	4013      	ands	r3, r2
 800487a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 0203 	and.w	r2, r3, #3
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	4313      	orrs	r3, r2
 8004890:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	e01e      	b.n	80048d8 <HAL_GPIO_Init+0x1c4>
 800489a:	bf00      	nop
 800489c:	46020000 	.word	0x46020000
 80048a0:	0800b814 	.word	0x0800b814
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	2203      	movs	r2, #3
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0203 	and.w	r2, r3, #3
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d00b      	beq.n	80048f8 <HAL_GPIO_Init+0x1e4>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d007      	beq.n	80048f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048ec:	2b11      	cmp	r3, #17
 80048ee:	d003      	beq.n	80048f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b12      	cmp	r3, #18
 80048f6:	d130      	bne.n	800495a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2203      	movs	r2, #3
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	4013      	ands	r3, r2
 800490e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	4313      	orrs	r3, r2
 8004920:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800492e:	2201      	movs	r2, #1
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43db      	mvns	r3, r3
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	4013      	ands	r3, r2
 800493c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	f003 0201 	and.w	r2, r3, #1
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	4313      	orrs	r3, r2
 8004952:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d017      	beq.n	8004992 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	2203      	movs	r2, #3
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	4013      	ands	r3, r2
 8004978:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	4313      	orrs	r3, r2
 800498a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d07c      	beq.n	8004a98 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800499e:	4a47      	ldr	r2, [pc, #284]	@ (8004abc <HAL_GPIO_Init+0x3a8>)
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	3318      	adds	r3, #24
 80049a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	220f      	movs	r2, #15
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	4013      	ands	r3, r2
 80049c0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0a9a      	lsrs	r2, r3, #10
 80049c6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ac0 <HAL_GPIO_Init+0x3ac>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	f002 0203 	and.w	r2, r2, #3
 80049d0:	00d2      	lsls	r2, r2, #3
 80049d2:	4093      	lsls	r3, r2
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80049da:	4938      	ldr	r1, [pc, #224]	@ (8004abc <HAL_GPIO_Init+0x3a8>)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	089b      	lsrs	r3, r3, #2
 80049e0:	3318      	adds	r3, #24
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80049e8:	4b34      	ldr	r3, [pc, #208]	@ (8004abc <HAL_GPIO_Init+0x3a8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	4013      	ands	r3, r2
 80049f6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004abc <HAL_GPIO_Init+0x3a8>)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004a12:	4b2a      	ldr	r3, [pc, #168]	@ (8004abc <HAL_GPIO_Init+0x3a8>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004a36:	4a21      	ldr	r2, [pc, #132]	@ (8004abc <HAL_GPIO_Init+0x3a8>)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004abc <HAL_GPIO_Init+0x3a8>)
 8004a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a42:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	43db      	mvns	r3, r3
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004a62:	4a16      	ldr	r2, [pc, #88]	@ (8004abc <HAL_GPIO_Init+0x3a8>)
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004a6a:	4b14      	ldr	r3, [pc, #80]	@ (8004abc <HAL_GPIO_Init+0x3a8>)
 8004a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a70:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004a90:	4a0a      	ldr	r2, [pc, #40]	@ (8004abc <HAL_GPIO_Init+0x3a8>)
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f47f ae3d 	bne.w	8004728 <HAL_GPIO_Init+0x14>
  }
}
 8004aae:	bf00      	nop
 8004ab0:	bf00      	nop
 8004ab2:	3724      	adds	r7, #36	@ 0x24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	46022000 	.word	0x46022000
 8004ac0:	002f7f7f 	.word	0x002f7f7f

08004ac4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b089      	sub	sp, #36	@ 0x24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004ad6:	e0bc      	b.n	8004c52 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004ad8:	2201      	movs	r2, #1
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80ad 	beq.w	8004c4c <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a5e      	ldr	r2, [pc, #376]	@ (8004c70 <HAL_GPIO_DeInit+0x1ac>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d115      	bne.n	8004b26 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8004afa:	4a5e      	ldr	r2, [pc, #376]	@ (8004c74 <HAL_GPIO_DeInit+0x1b0>)
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b02:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004b04:	4a5b      	ldr	r2, [pc, #364]	@ (8004c74 <HAL_GPIO_DeInit+0x1b0>)
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8004b10:	4b57      	ldr	r3, [pc, #348]	@ (8004c70 <HAL_GPIO_DeInit+0x1ac>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	2101      	movs	r1, #1
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	4954      	ldr	r1, [pc, #336]	@ (8004c70 <HAL_GPIO_DeInit+0x1ac>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	600b      	str	r3, [r1, #0]
 8004b24:	e053      	b.n	8004bce <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8004b26:	4a54      	ldr	r2, [pc, #336]	@ (8004c78 <HAL_GPIO_DeInit+0x1b4>)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	089b      	lsrs	r3, r3, #2
 8004b2c:	3318      	adds	r3, #24
 8004b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b32:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	220f      	movs	r2, #15
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4013      	ands	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	0a9a      	lsrs	r2, r3, #10
 8004b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8004c7c <HAL_GPIO_DeInit+0x1b8>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	f002 0203 	and.w	r2, r2, #3
 8004b56:	00d2      	lsls	r2, r2, #3
 8004b58:	4093      	lsls	r3, r2
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d136      	bne.n	8004bce <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8004b60:	4b45      	ldr	r3, [pc, #276]	@ (8004c78 <HAL_GPIO_DeInit+0x1b4>)
 8004b62:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	4943      	ldr	r1, [pc, #268]	@ (8004c78 <HAL_GPIO_DeInit+0x1b4>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8004b72:	4b41      	ldr	r3, [pc, #260]	@ (8004c78 <HAL_GPIO_DeInit+0x1b4>)
 8004b74:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	493e      	ldr	r1, [pc, #248]	@ (8004c78 <HAL_GPIO_DeInit+0x1b4>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8004b84:	4b3c      	ldr	r3, [pc, #240]	@ (8004c78 <HAL_GPIO_DeInit+0x1b4>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	493a      	ldr	r1, [pc, #232]	@ (8004c78 <HAL_GPIO_DeInit+0x1b4>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8004b92:	4b39      	ldr	r3, [pc, #228]	@ (8004c78 <HAL_GPIO_DeInit+0x1b4>)
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	4937      	ldr	r1, [pc, #220]	@ (8004c78 <HAL_GPIO_DeInit+0x1b4>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	220f      	movs	r2, #15
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8004bb0:	4a31      	ldr	r2, [pc, #196]	@ (8004c78 <HAL_GPIO_DeInit+0x1b4>)
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	089b      	lsrs	r3, r3, #2
 8004bb6:	3318      	adds	r3, #24
 8004bb8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	43da      	mvns	r2, r3
 8004bc0:	482d      	ldr	r0, [pc, #180]	@ (8004c78 <HAL_GPIO_DeInit+0x1b4>)
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	089b      	lsrs	r3, r3, #2
 8004bc6:	400a      	ands	r2, r1
 8004bc8:	3318      	adds	r3, #24
 8004bca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	2103      	movs	r1, #3
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	08da      	lsrs	r2, r3, #3
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	3208      	adds	r2, #8
 8004bea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	220f      	movs	r2, #15
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	69fa      	ldr	r2, [r7, #28]
 8004c00:	08d2      	lsrs	r2, r2, #3
 8004c02:	4019      	ands	r1, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	3208      	adds	r2, #8
 8004c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	2103      	movs	r1, #3
 8004c16:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1a:	43db      	mvns	r3, r3
 8004c1c:	401a      	ands	r2, r3
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	2101      	movs	r1, #1
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	401a      	ands	r2, r3
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	2103      	movs	r1, #3
 8004c40:	fa01 f303 	lsl.w	r3, r1, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	401a      	ands	r2, r3
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f47f af3c 	bne.w	8004ad8 <HAL_GPIO_DeInit+0x14>
  }
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	3724      	adds	r7, #36	@ 0x24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	46020000 	.word	0x46020000
 8004c74:	0800b814 	.word	0x0800b814
 8004c78:	46022000 	.word	0x46022000
 8004c7c:	002f7f7f 	.word	0x002f7f7f

08004c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	807b      	strh	r3, [r7, #2]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c90:	787b      	ldrb	r3, [r7, #1]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c96:	887a      	ldrh	r2, [r7, #2]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004c9c:	e002      	b.n	8004ca4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004c9e:	887a      	ldrh	r2, [r7, #2]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	041a      	lsls	r2, r3, #16
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	43d9      	mvns	r1, r3
 8004cce:	887b      	ldrh	r3, [r7, #2]
 8004cd0:	400b      	ands	r3, r1
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	619a      	str	r2, [r3, #24]
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004ce8:	4b05      	ldr	r3, [pc, #20]	@ (8004d00 <HAL_ICACHE_Enable+0x1c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a04      	ldr	r2, [pc, #16]	@ (8004d00 <HAL_ICACHE_Enable+0x1c>)
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40030400 	.word	0x40030400

08004d04 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004d0c:	4b39      	ldr	r3, [pc, #228]	@ (8004df4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d14:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d10b      	bne.n	8004d36 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d24:	d905      	bls.n	8004d32 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004d26:	4b33      	ldr	r3, [pc, #204]	@ (8004df4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	4a32      	ldr	r2, [pc, #200]	@ (8004df4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d30:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	e057      	b.n	8004de6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d3c:	d90a      	bls.n	8004d54 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8004df4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004df4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d50:	60d3      	str	r3, [r2, #12]
 8004d52:	e007      	b.n	8004d64 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004d54:	4b27      	ldr	r3, [pc, #156]	@ (8004df4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004d5c:	4925      	ldr	r1, [pc, #148]	@ (8004df4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004d64:	4b24      	ldr	r3, [pc, #144]	@ (8004df8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a24      	ldr	r2, [pc, #144]	@ (8004dfc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	099b      	lsrs	r3, r3, #6
 8004d70:	2232      	movs	r2, #50	@ 0x32
 8004d72:	fb02 f303 	mul.w	r3, r2, r3
 8004d76:	4a21      	ldr	r2, [pc, #132]	@ (8004dfc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	099b      	lsrs	r3, r3, #6
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004d82:	e002      	b.n	8004d8a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004df4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d102      	bne.n	8004d9c <HAL_PWREx_ControlVoltageScaling+0x98>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1f3      	bne.n	8004d84 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d01b      	beq.n	8004dda <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004da2:	4b15      	ldr	r3, [pc, #84]	@ (8004df8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a15      	ldr	r2, [pc, #84]	@ (8004dfc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004da8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dac:	099b      	lsrs	r3, r3, #6
 8004dae:	2232      	movs	r2, #50	@ 0x32
 8004db0:	fb02 f303 	mul.w	r3, r2, r3
 8004db4:	4a11      	ldr	r2, [pc, #68]	@ (8004dfc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	099b      	lsrs	r3, r3, #6
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004dc0:	e002      	b.n	8004dc8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004df4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f3      	bne.n	8004dc2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e000      	b.n	8004de6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	46020800 	.word	0x46020800
 8004df8:	200000a0 	.word	0x200000a0
 8004dfc:	10624dd3 	.word	0x10624dd3

08004e00 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004e04:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	46020800 	.word	0x46020800

08004e1c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004e24:	4b22      	ldr	r3, [pc, #136]	@ (8004eb0 <HAL_PWREx_ConfigSupply+0x94>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a22      	ldr	r2, [pc, #136]	@ (8004eb4 <HAL_PWREx_ConfigSupply+0x98>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	099b      	lsrs	r3, r3, #6
 8004e30:	2232      	movs	r2, #50	@ 0x32
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb4 <HAL_PWREx_ConfigSupply+0x98>)
 8004e38:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3c:	099b      	lsrs	r3, r3, #6
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d113      	bne.n	8004e70 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004e48:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e4e:	f023 0302 	bic.w	r3, r3, #2
 8004e52:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004e54:	e002      	b.n	8004e5c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004e5c:	4b16      	ldr	r3, [pc, #88]	@ (8004eb8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d116      	bne.n	8004e96 <HAL_PWREx_ConfigSupply+0x7a>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f3      	bne.n	8004e56 <HAL_PWREx_ConfigSupply+0x3a>
 8004e6e:	e012      	b.n	8004e96 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004e70:	4b11      	ldr	r3, [pc, #68]	@ (8004eb8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	4a10      	ldr	r2, [pc, #64]	@ (8004eb8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e76:	f043 0302 	orr.w	r3, r3, #2
 8004e7a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004e7c:	e002      	b.n	8004e84 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004e84:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <HAL_PWREx_ConfigSupply+0x7a>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f3      	bne.n	8004e7e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e000      	b.n	8004ea2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	200000a0 	.word	0x200000a0
 8004eb4:	10624dd3 	.word	0x10624dd3
 8004eb8:	46020800 	.word	0x46020800

08004ebc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	4a04      	ldr	r2, [pc, #16]	@ (8004ed8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004ec6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004eca:	6113      	str	r3, [r2, #16]
}
 8004ecc:	bf00      	nop
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	46020800 	.word	0x46020800

08004edc <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004ee0:	4b05      	ldr	r3, [pc, #20]	@ (8004ef8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee4:	4a04      	ldr	r2, [pc, #16]	@ (8004ef8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	46020800 	.word	0x46020800

08004efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08e      	sub	sp, #56	@ 0x38
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004f04:	2300      	movs	r3, #0
 8004f06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d102      	bne.n	8004f16 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	f000 bec8 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f16:	4b99      	ldr	r3, [pc, #612]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f20:	4b96      	ldr	r3, [pc, #600]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8004f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0310 	and.w	r3, r3, #16
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 816c 	beq.w	8005210 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <HAL_RCC_OscConfig+0x52>
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f40:	2b0c      	cmp	r3, #12
 8004f42:	f040 80de 	bne.w	8005102 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	f040 80da 	bne.w	8005102 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f000 bea5 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f60:	4b86      	ldr	r3, [pc, #536]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d004      	beq.n	8004f76 <HAL_RCC_OscConfig+0x7a>
 8004f6c:	4b83      	ldr	r3, [pc, #524]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004f74:	e005      	b.n	8004f82 <HAL_RCC_OscConfig+0x86>
 8004f76:	4b81      	ldr	r3, [pc, #516]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8004f78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f7c:	041b      	lsls	r3, r3, #16
 8004f7e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d255      	bcs.n	8005032 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	4618      	mov	r0, r3
 8004f92:	f001 fa11 	bl	80063b8 <RCC_SetFlashLatencyFromMSIRange>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f000 be82 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004fa2:	4b76      	ldr	r3, [pc, #472]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	4a75      	ldr	r2, [pc, #468]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8004fa8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004fac:	6093      	str	r3, [r2, #8]
 8004fae:	4b73      	ldr	r3, [pc, #460]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	4970      	ldr	r1, [pc, #448]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004fc8:	d309      	bcc.n	8004fde <HAL_RCC_OscConfig+0xe2>
 8004fca:	4b6c      	ldr	r3, [pc, #432]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f023 021f 	bic.w	r2, r3, #31
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	4969      	ldr	r1, [pc, #420]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60cb      	str	r3, [r1, #12]
 8004fdc:	e07e      	b.n	80050dc <HAL_RCC_OscConfig+0x1e0>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	da0a      	bge.n	8004ffc <HAL_RCC_OscConfig+0x100>
 8004fe6:	4b65      	ldr	r3, [pc, #404]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	015b      	lsls	r3, r3, #5
 8004ff4:	4961      	ldr	r1, [pc, #388]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60cb      	str	r3, [r1, #12]
 8004ffa:	e06f      	b.n	80050dc <HAL_RCC_OscConfig+0x1e0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005004:	d30a      	bcc.n	800501c <HAL_RCC_OscConfig+0x120>
 8005006:	4b5d      	ldr	r3, [pc, #372]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	029b      	lsls	r3, r3, #10
 8005014:	4959      	ldr	r1, [pc, #356]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005016:	4313      	orrs	r3, r2
 8005018:	60cb      	str	r3, [r1, #12]
 800501a:	e05f      	b.n	80050dc <HAL_RCC_OscConfig+0x1e0>
 800501c:	4b57      	ldr	r3, [pc, #348]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	03db      	lsls	r3, r3, #15
 800502a:	4954      	ldr	r1, [pc, #336]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 800502c:	4313      	orrs	r3, r2
 800502e:	60cb      	str	r3, [r1, #12]
 8005030:	e054      	b.n	80050dc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005032:	4b52      	ldr	r3, [pc, #328]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	4a51      	ldr	r2, [pc, #324]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005038:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800503c:	6093      	str	r3, [r2, #8]
 800503e:	4b4f      	ldr	r3, [pc, #316]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	494c      	ldr	r1, [pc, #304]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 800504c:	4313      	orrs	r3, r2
 800504e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005054:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005058:	d309      	bcc.n	800506e <HAL_RCC_OscConfig+0x172>
 800505a:	4b48      	ldr	r3, [pc, #288]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f023 021f 	bic.w	r2, r3, #31
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	4945      	ldr	r1, [pc, #276]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005068:	4313      	orrs	r3, r2
 800506a:	60cb      	str	r3, [r1, #12]
 800506c:	e028      	b.n	80050c0 <HAL_RCC_OscConfig+0x1c4>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005072:	2b00      	cmp	r3, #0
 8005074:	da0a      	bge.n	800508c <HAL_RCC_OscConfig+0x190>
 8005076:	4b41      	ldr	r3, [pc, #260]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	015b      	lsls	r3, r3, #5
 8005084:	493d      	ldr	r1, [pc, #244]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005086:	4313      	orrs	r3, r2
 8005088:	60cb      	str	r3, [r1, #12]
 800508a:	e019      	b.n	80050c0 <HAL_RCC_OscConfig+0x1c4>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005094:	d30a      	bcc.n	80050ac <HAL_RCC_OscConfig+0x1b0>
 8005096:	4b39      	ldr	r3, [pc, #228]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	029b      	lsls	r3, r3, #10
 80050a4:	4935      	ldr	r1, [pc, #212]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60cb      	str	r3, [r1, #12]
 80050aa:	e009      	b.n	80050c0 <HAL_RCC_OscConfig+0x1c4>
 80050ac:	4b33      	ldr	r3, [pc, #204]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	03db      	lsls	r3, r3, #15
 80050ba:	4930      	ldr	r1, [pc, #192]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80050c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f001 f974 	bl	80063b8 <RCC_SetFlashLatencyFromMSIRange>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f000 bde5 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80050dc:	f001 f8de 	bl	800629c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80050e0:	4b27      	ldr	r3, [pc, #156]	@ (8005180 <HAL_RCC_OscConfig+0x284>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fc fa75 	bl	80015d4 <HAL_InitTick>
 80050ea:	4603      	mov	r3, r0
 80050ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80050f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 808a 	beq.w	800520e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80050fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050fe:	f000 bdd2 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d066      	beq.n	80051d8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800510a:	4b1c      	ldr	r3, [pc, #112]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1b      	ldr	r2, [pc, #108]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005116:	f7fc fed1 	bl	8001ebc <HAL_GetTick>
 800511a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800511c:	e009      	b.n	8005132 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800511e:	f7fc fecd 	bl	8001ebc <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d902      	bls.n	8005132 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	f000 bdba 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005132:	4b12      	ldr	r3, [pc, #72]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0ef      	beq.n	800511e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800513e:	4b0f      	ldr	r3, [pc, #60]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	4a0e      	ldr	r2, [pc, #56]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005144:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005148:	6093      	str	r3, [r2, #8]
 800514a:	4b0c      	ldr	r3, [pc, #48]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005156:	4909      	ldr	r1, [pc, #36]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005158:	4313      	orrs	r3, r2
 800515a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005160:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005164:	d30e      	bcc.n	8005184 <HAL_RCC_OscConfig+0x288>
 8005166:	4b05      	ldr	r3, [pc, #20]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f023 021f 	bic.w	r2, r3, #31
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	4902      	ldr	r1, [pc, #8]	@ (800517c <HAL_RCC_OscConfig+0x280>)
 8005174:	4313      	orrs	r3, r2
 8005176:	60cb      	str	r3, [r1, #12]
 8005178:	e04a      	b.n	8005210 <HAL_RCC_OscConfig+0x314>
 800517a:	bf00      	nop
 800517c:	46020c00 	.word	0x46020c00
 8005180:	200000c0 	.word	0x200000c0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	da0a      	bge.n	80051a2 <HAL_RCC_OscConfig+0x2a6>
 800518c:	4b98      	ldr	r3, [pc, #608]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	015b      	lsls	r3, r3, #5
 800519a:	4995      	ldr	r1, [pc, #596]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800519c:	4313      	orrs	r3, r2
 800519e:	60cb      	str	r3, [r1, #12]
 80051a0:	e036      	b.n	8005210 <HAL_RCC_OscConfig+0x314>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051aa:	d30a      	bcc.n	80051c2 <HAL_RCC_OscConfig+0x2c6>
 80051ac:	4b90      	ldr	r3, [pc, #576]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	029b      	lsls	r3, r3, #10
 80051ba:	498d      	ldr	r1, [pc, #564]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	60cb      	str	r3, [r1, #12]
 80051c0:	e026      	b.n	8005210 <HAL_RCC_OscConfig+0x314>
 80051c2:	4b8b      	ldr	r3, [pc, #556]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	03db      	lsls	r3, r3, #15
 80051d0:	4987      	ldr	r1, [pc, #540]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60cb      	str	r3, [r1, #12]
 80051d6:	e01b      	b.n	8005210 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80051d8:	4b85      	ldr	r3, [pc, #532]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a84      	ldr	r2, [pc, #528]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80051de:	f023 0301 	bic.w	r3, r3, #1
 80051e2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051e4:	f7fc fe6a 	bl	8001ebc <HAL_GetTick>
 80051e8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80051ea:	e009      	b.n	8005200 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051ec:	f7fc fe66 	bl	8001ebc <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d902      	bls.n	8005200 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	f000 bd53 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005200:	4b7b      	ldr	r3, [pc, #492]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1ef      	bne.n	80051ec <HAL_RCC_OscConfig+0x2f0>
 800520c:	e000      	b.n	8005210 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800520e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 808b 	beq.w	8005334 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	2b08      	cmp	r3, #8
 8005222:	d005      	beq.n	8005230 <HAL_RCC_OscConfig+0x334>
 8005224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005226:	2b0c      	cmp	r3, #12
 8005228:	d109      	bne.n	800523e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800522a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522c:	2b03      	cmp	r3, #3
 800522e:	d106      	bne.n	800523e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d17d      	bne.n	8005334 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f000 bd34 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005246:	d106      	bne.n	8005256 <HAL_RCC_OscConfig+0x35a>
 8005248:	4b69      	ldr	r3, [pc, #420]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a68      	ldr	r2, [pc, #416]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800524e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	e041      	b.n	80052da <HAL_RCC_OscConfig+0x3de>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800525e:	d112      	bne.n	8005286 <HAL_RCC_OscConfig+0x38a>
 8005260:	4b63      	ldr	r3, [pc, #396]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a62      	ldr	r2, [pc, #392]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005266:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	4b60      	ldr	r3, [pc, #384]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a5f      	ldr	r2, [pc, #380]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005272:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	4b5d      	ldr	r3, [pc, #372]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a5c      	ldr	r2, [pc, #368]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800527e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	e029      	b.n	80052da <HAL_RCC_OscConfig+0x3de>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800528e:	d112      	bne.n	80052b6 <HAL_RCC_OscConfig+0x3ba>
 8005290:	4b57      	ldr	r3, [pc, #348]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a56      	ldr	r2, [pc, #344]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005296:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	4b54      	ldr	r3, [pc, #336]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a53      	ldr	r2, [pc, #332]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	4b51      	ldr	r3, [pc, #324]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a50      	ldr	r2, [pc, #320]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	e011      	b.n	80052da <HAL_RCC_OscConfig+0x3de>
 80052b6:	4b4e      	ldr	r3, [pc, #312]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a4d      	ldr	r2, [pc, #308]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	4b4b      	ldr	r3, [pc, #300]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a4a      	ldr	r2, [pc, #296]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	4b48      	ldr	r3, [pc, #288]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a47      	ldr	r2, [pc, #284]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80052d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d014      	beq.n	800530c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80052e2:	f7fc fdeb 	bl	8001ebc <HAL_GetTick>
 80052e6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052e8:	e009      	b.n	80052fe <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052ea:	f7fc fde7 	bl	8001ebc <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b64      	cmp	r3, #100	@ 0x64
 80052f6:	d902      	bls.n	80052fe <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	f000 bcd4 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052fe:	4b3c      	ldr	r3, [pc, #240]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0ef      	beq.n	80052ea <HAL_RCC_OscConfig+0x3ee>
 800530a:	e013      	b.n	8005334 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800530c:	f7fc fdd6 	bl	8001ebc <HAL_GetTick>
 8005310:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005312:	e009      	b.n	8005328 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005314:	f7fc fdd2 	bl	8001ebc <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b64      	cmp	r3, #100	@ 0x64
 8005320:	d902      	bls.n	8005328 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	f000 bcbf 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005328:	4b31      	ldr	r3, [pc, #196]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ef      	bne.n	8005314 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d05f      	beq.n	8005400 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005342:	2b04      	cmp	r3, #4
 8005344:	d005      	beq.n	8005352 <HAL_RCC_OscConfig+0x456>
 8005346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005348:	2b0c      	cmp	r3, #12
 800534a:	d114      	bne.n	8005376 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800534c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534e:	2b02      	cmp	r3, #2
 8005350:	d111      	bne.n	8005376 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d102      	bne.n	8005360 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f000 bca3 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005360:	4b23      	ldr	r3, [pc, #140]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	041b      	lsls	r3, r3, #16
 800536e:	4920      	ldr	r1, [pc, #128]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005370:	4313      	orrs	r3, r2
 8005372:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005374:	e044      	b.n	8005400 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d024      	beq.n	80053c8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800537e:	4b1c      	ldr	r3, [pc, #112]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1b      	ldr	r2, [pc, #108]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005388:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800538a:	f7fc fd97 	bl	8001ebc <HAL_GetTick>
 800538e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005390:	e009      	b.n	80053a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005392:	f7fc fd93 	bl	8001ebc <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d902      	bls.n	80053a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	f000 bc80 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053a6:	4b12      	ldr	r3, [pc, #72]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0ef      	beq.n	8005392 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80053b2:	4b0f      	ldr	r3, [pc, #60]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	041b      	lsls	r3, r3, #16
 80053c0:	490b      	ldr	r1, [pc, #44]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	610b      	str	r3, [r1, #16]
 80053c6:	e01b      	b.n	8005400 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80053c8:	4b09      	ldr	r3, [pc, #36]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a08      	ldr	r2, [pc, #32]	@ (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80053ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053d2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80053d4:	f7fc fd72 	bl	8001ebc <HAL_GetTick>
 80053d8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053da:	e00b      	b.n	80053f4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053dc:	f7fc fd6e 	bl	8001ebc <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d904      	bls.n	80053f4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	f000 bc5b 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
 80053f0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053f4:	4baf      	ldr	r3, [pc, #700]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ed      	bne.n	80053dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80c8 	beq.w	800559e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800540e:	2300      	movs	r3, #0
 8005410:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005414:	4ba7      	ldr	r3, [pc, #668]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	d111      	bne.n	8005446 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005422:	4ba4      	ldr	r3, [pc, #656]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005428:	4aa2      	ldr	r2, [pc, #648]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 800542a:	f043 0304 	orr.w	r3, r3, #4
 800542e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005432:	4ba0      	ldr	r3, [pc, #640]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005440:	2301      	movs	r3, #1
 8005442:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005446:	4b9c      	ldr	r3, [pc, #624]	@ (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 8005448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d119      	bne.n	8005486 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005452:	4b99      	ldr	r3, [pc, #612]	@ (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	4a98      	ldr	r2, [pc, #608]	@ (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800545e:	f7fc fd2d 	bl	8001ebc <HAL_GetTick>
 8005462:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005464:	e009      	b.n	800547a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005466:	f7fc fd29 	bl	8001ebc <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d902      	bls.n	800547a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	f000 bc16 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800547a:	4b8f      	ldr	r3, [pc, #572]	@ (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0ef      	beq.n	8005466 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d05f      	beq.n	800554e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800548e:	4b89      	ldr	r3, [pc, #548]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005494:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d037      	beq.n	8005514 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d006      	beq.n	80054bc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e3f4      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01b      	beq.n	80054fe <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80054c6:	4b7b      	ldr	r3, [pc, #492]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80054c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054cc:	4a79      	ldr	r2, [pc, #484]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80054ce:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80054d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80054d6:	f7fc fcf1 	bl	8001ebc <HAL_GetTick>
 80054da:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054de:	f7fc fced 	bl	8001ebc <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b05      	cmp	r3, #5
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e3da      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80054f0:	4b70      	ldr	r3, [pc, #448]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80054f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1ef      	bne.n	80054de <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80054fe:	4b6d      	ldr	r3, [pc, #436]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005504:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	4969      	ldr	r1, [pc, #420]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005514:	4b67      	ldr	r3, [pc, #412]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800551a:	4a66      	ldr	r2, [pc, #408]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 800551c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005520:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005524:	f7fc fcca 	bl	8001ebc <HAL_GetTick>
 8005528:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552c:	f7fc fcc6 	bl	8001ebc <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b05      	cmp	r3, #5
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e3b3      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800553e:	4b5d      	ldr	r3, [pc, #372]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0ef      	beq.n	800552c <HAL_RCC_OscConfig+0x630>
 800554c:	e01b      	b.n	8005586 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800554e:	4b59      	ldr	r3, [pc, #356]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005554:	4a57      	ldr	r2, [pc, #348]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005556:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800555a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800555e:	f7fc fcad 	bl	8001ebc <HAL_GetTick>
 8005562:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005566:	f7fc fca9 	bl	8001ebc <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b05      	cmp	r3, #5
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e396      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005578:	4b4e      	ldr	r3, [pc, #312]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 800557a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800557e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1ef      	bne.n	8005566 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005586:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800558a:	2b01      	cmp	r3, #1
 800558c:	d107      	bne.n	800559e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558e:	4b49      	ldr	r3, [pc, #292]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005594:	4a47      	ldr	r2, [pc, #284]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005596:	f023 0304 	bic.w	r3, r3, #4
 800559a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 8111 	beq.w	80057ce <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055b2:	4b40      	ldr	r3, [pc, #256]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80055b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d111      	bne.n	80055e4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c0:	4b3c      	ldr	r3, [pc, #240]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80055c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055c6:	4a3b      	ldr	r2, [pc, #236]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80055c8:	f043 0304 	orr.w	r3, r3, #4
 80055cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80055d0:	4b38      	ldr	r3, [pc, #224]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80055d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80055de:	2301      	movs	r3, #1
 80055e0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055e4:	4b34      	ldr	r3, [pc, #208]	@ (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 80055e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d118      	bne.n	8005622 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80055f0:	4b31      	ldr	r3, [pc, #196]	@ (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 80055f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f4:	4a30      	ldr	r2, [pc, #192]	@ (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055fc:	f7fc fc5e 	bl	8001ebc <HAL_GetTick>
 8005600:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005604:	f7fc fc5a 	bl	8001ebc <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e347      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005616:	4b28      	ldr	r3, [pc, #160]	@ (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 8005618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f0      	beq.n	8005604 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01f      	beq.n	800566e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b00      	cmp	r3, #0
 8005638:	d010      	beq.n	800565c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800563a:	4b1e      	ldr	r3, [pc, #120]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 800563c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005640:	4a1c      	ldr	r2, [pc, #112]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005642:	f043 0304 	orr.w	r3, r3, #4
 8005646:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800564a:	4b1a      	ldr	r3, [pc, #104]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 800564c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005650:	4a18      	ldr	r2, [pc, #96]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800565a:	e018      	b.n	800568e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800565c:	4b15      	ldr	r3, [pc, #84]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 800565e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005662:	4a14      	ldr	r2, [pc, #80]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005664:	f043 0301 	orr.w	r3, r3, #1
 8005668:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800566c:	e00f      	b.n	800568e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800566e:	4b11      	ldr	r3, [pc, #68]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005674:	4a0f      	ldr	r2, [pc, #60]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800567e:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005684:	4a0b      	ldr	r2, [pc, #44]	@ (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005686:	f023 0304 	bic.w	r3, r3, #4
 800568a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d057      	beq.n	8005746 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005696:	f7fc fc11 	bl	8001ebc <HAL_GetTick>
 800569a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800569c:	e00e      	b.n	80056bc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800569e:	f7fc fc0d 	bl	8001ebc <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d905      	bls.n	80056bc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e2f8      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
 80056b4:	46020c00 	.word	0x46020c00
 80056b8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056bc:	4b9c      	ldr	r3, [pc, #624]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 80056be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0e9      	beq.n	800569e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d01b      	beq.n	800570e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056d6:	4b96      	ldr	r3, [pc, #600]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 80056d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056dc:	4a94      	ldr	r2, [pc, #592]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 80056de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056e6:	e00a      	b.n	80056fe <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e8:	f7fc fbe8 	bl	8001ebc <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e2d3      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056fe:	4b8c      	ldr	r3, [pc, #560]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0ed      	beq.n	80056e8 <HAL_RCC_OscConfig+0x7ec>
 800570c:	e053      	b.n	80057b6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800570e:	4b88      	ldr	r3, [pc, #544]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005714:	4a86      	ldr	r2, [pc, #536]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800571a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800571e:	e00a      	b.n	8005736 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005720:	f7fc fbcc 	bl	8001ebc <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800572e:	4293      	cmp	r3, r2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e2b7      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005736:	4b7e      	ldr	r3, [pc, #504]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800573c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1ed      	bne.n	8005720 <HAL_RCC_OscConfig+0x824>
 8005744:	e037      	b.n	80057b6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005746:	f7fc fbb9 	bl	8001ebc <HAL_GetTick>
 800574a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800574c:	e00a      	b.n	8005764 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574e:	f7fc fbb5 	bl	8001ebc <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575c:	4293      	cmp	r3, r2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e2a0      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005764:	4b72      	ldr	r3, [pc, #456]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1ed      	bne.n	800574e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005772:	4b6f      	ldr	r3, [pc, #444]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01a      	beq.n	80057b6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005780:	4b6b      	ldr	r3, [pc, #428]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005786:	4a6a      	ldr	r2, [pc, #424]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005788:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800578c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005790:	e00a      	b.n	80057a8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005792:	f7fc fb93 	bl	8001ebc <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e27e      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057a8:	4b61      	ldr	r3, [pc, #388]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 80057aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1ed      	bne.n	8005792 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057b6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d107      	bne.n	80057ce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057be:	4b5c      	ldr	r3, [pc, #368]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 80057c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057c4:	4a5a      	ldr	r2, [pc, #360]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 80057c6:	f023 0304 	bic.w	r3, r3, #4
 80057ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d036      	beq.n	8005848 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d019      	beq.n	8005816 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80057e2:	4b53      	ldr	r3, [pc, #332]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a52      	ldr	r2, [pc, #328]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 80057e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80057ec:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80057ee:	f7fc fb65 	bl	8001ebc <HAL_GetTick>
 80057f2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057f6:	f7fc fb61 	bl	8001ebc <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e24e      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005808:	4b49      	ldr	r3, [pc, #292]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_OscConfig+0x8fa>
 8005814:	e018      	b.n	8005848 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005816:	4b46      	ldr	r3, [pc, #280]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a45      	ldr	r2, [pc, #276]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 800581c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005820:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005822:	f7fc fb4b 	bl	8001ebc <HAL_GetTick>
 8005826:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800582a:	f7fc fb47 	bl	8001ebc <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e234      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800583c:	4b3c      	ldr	r3, [pc, #240]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f0      	bne.n	800582a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005850:	2b00      	cmp	r3, #0
 8005852:	d036      	beq.n	80058c2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005858:	2b00      	cmp	r3, #0
 800585a:	d019      	beq.n	8005890 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800585c:	4b34      	ldr	r3, [pc, #208]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a33      	ldr	r2, [pc, #204]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005862:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005866:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005868:	f7fc fb28 	bl	8001ebc <HAL_GetTick>
 800586c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005870:	f7fc fb24 	bl	8001ebc <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e211      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005882:	4b2b      	ldr	r3, [pc, #172]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0x974>
 800588e:	e018      	b.n	80058c2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005890:	4b27      	ldr	r3, [pc, #156]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a26      	ldr	r2, [pc, #152]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005896:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800589a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800589c:	f7fc fb0e 	bl	8001ebc <HAL_GetTick>
 80058a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80058a4:	f7fc fb0a 	bl	8001ebc <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e1f7      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80058b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d07f      	beq.n	80059ce <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d062      	beq.n	800599c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80058d6:	4b16      	ldr	r3, [pc, #88]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	4a15      	ldr	r2, [pc, #84]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 80058dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80058e0:	6093      	str	r3, [r2, #8]
 80058e2:	4b13      	ldr	r3, [pc, #76]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ee:	4910      	ldr	r1, [pc, #64]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80058fc:	d309      	bcc.n	8005912 <HAL_RCC_OscConfig+0xa16>
 80058fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f023 021f 	bic.w	r2, r3, #31
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	4909      	ldr	r1, [pc, #36]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 800590c:	4313      	orrs	r3, r2
 800590e:	60cb      	str	r3, [r1, #12]
 8005910:	e02a      	b.n	8005968 <HAL_RCC_OscConfig+0xa6c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005916:	2b00      	cmp	r3, #0
 8005918:	da0c      	bge.n	8005934 <HAL_RCC_OscConfig+0xa38>
 800591a:	4b05      	ldr	r3, [pc, #20]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	015b      	lsls	r3, r3, #5
 8005928:	4901      	ldr	r1, [pc, #4]	@ (8005930 <HAL_RCC_OscConfig+0xa34>)
 800592a:	4313      	orrs	r3, r2
 800592c:	60cb      	str	r3, [r1, #12]
 800592e:	e01b      	b.n	8005968 <HAL_RCC_OscConfig+0xa6c>
 8005930:	46020c00 	.word	0x46020c00
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800593c:	d30a      	bcc.n	8005954 <HAL_RCC_OscConfig+0xa58>
 800593e:	4ba1      	ldr	r3, [pc, #644]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	029b      	lsls	r3, r3, #10
 800594c:	499d      	ldr	r1, [pc, #628]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 800594e:	4313      	orrs	r3, r2
 8005950:	60cb      	str	r3, [r1, #12]
 8005952:	e009      	b.n	8005968 <HAL_RCC_OscConfig+0xa6c>
 8005954:	4b9b      	ldr	r3, [pc, #620]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	03db      	lsls	r3, r3, #15
 8005962:	4998      	ldr	r1, [pc, #608]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005964:	4313      	orrs	r3, r2
 8005966:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005968:	4b96      	ldr	r3, [pc, #600]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a95      	ldr	r2, [pc, #596]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 800596e:	f043 0310 	orr.w	r3, r3, #16
 8005972:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005974:	f7fc faa2 	bl	8001ebc <HAL_GetTick>
 8005978:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800597c:	f7fc fa9e 	bl	8001ebc <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e18b      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800598e:	4b8d      	ldr	r3, [pc, #564]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0f0      	beq.n	800597c <HAL_RCC_OscConfig+0xa80>
 800599a:	e018      	b.n	80059ce <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800599c:	4b89      	ldr	r3, [pc, #548]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a88      	ldr	r2, [pc, #544]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 80059a2:	f023 0310 	bic.w	r3, r3, #16
 80059a6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80059a8:	f7fc fa88 	bl	8001ebc <HAL_GetTick>
 80059ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80059b0:	f7fc fa84 	bl	8001ebc <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e171      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80059c2:	4b80      	ldr	r3, [pc, #512]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 8166 	beq.w	8005ca4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059de:	4b79      	ldr	r3, [pc, #484]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b0c      	cmp	r3, #12
 80059e8:	f000 80f2 	beq.w	8005bd0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	f040 80c5 	bne.w	8005b80 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80059f6:	4b73      	ldr	r3, [pc, #460]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a72      	ldr	r2, [pc, #456]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 80059fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a00:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005a02:	f7fc fa5b 	bl	8001ebc <HAL_GetTick>
 8005a06:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a0a:	f7fc fa57 	bl	8001ebc <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e144      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a1c:	4b69      	ldr	r3, [pc, #420]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f0      	bne.n	8005a0a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a28:	4b66      	ldr	r3, [pc, #408]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d111      	bne.n	8005a5a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005a36:	4b63      	ldr	r3, [pc, #396]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a3c:	4a61      	ldr	r2, [pc, #388]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005a3e:	f043 0304 	orr.w	r3, r3, #4
 8005a42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005a46:	4b5f      	ldr	r3, [pc, #380]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8005bc8 <HAL_RCC_OscConfig+0xccc>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a66:	d102      	bne.n	8005a6e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005a6e:	4b56      	ldr	r3, [pc, #344]	@ (8005bc8 <HAL_RCC_OscConfig+0xccc>)
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	4a55      	ldr	r2, [pc, #340]	@ (8005bc8 <HAL_RCC_OscConfig+0xccc>)
 8005a74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a78:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005a7a:	4b52      	ldr	r3, [pc, #328]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a82:	f023 0303 	bic.w	r3, r3, #3
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a8e:	3a01      	subs	r2, #1
 8005a90:	0212      	lsls	r2, r2, #8
 8005a92:	4311      	orrs	r1, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	494a      	ldr	r1, [pc, #296]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005aa0:	4b48      	ldr	r3, [pc, #288]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005aa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aa4:	4b49      	ldr	r3, [pc, #292]	@ (8005bcc <HAL_RCC_OscConfig+0xcd0>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005aac:	3a01      	subs	r2, #1
 8005aae:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005ab6:	3a01      	subs	r2, #1
 8005ab8:	0252      	lsls	r2, r2, #9
 8005aba:	b292      	uxth	r2, r2
 8005abc:	4311      	orrs	r1, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ac2:	3a01      	subs	r2, #1
 8005ac4:	0412      	lsls	r2, r2, #16
 8005ac6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005aca:	4311      	orrs	r1, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005ad0:	3a01      	subs	r2, #1
 8005ad2:	0612      	lsls	r2, r2, #24
 8005ad4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	493a      	ldr	r1, [pc, #232]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005ae0:	4b38      	ldr	r3, [pc, #224]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae4:	4a37      	ldr	r2, [pc, #220]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005ae6:	f023 0310 	bic.w	r3, r3, #16
 8005aea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af0:	4a34      	ldr	r2, [pc, #208]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005af6:	4b33      	ldr	r3, [pc, #204]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afa:	4a32      	ldr	r2, [pc, #200]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005afc:	f043 0310 	orr.w	r3, r3, #16
 8005b00:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005b02:	4b30      	ldr	r3, [pc, #192]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b06:	f023 020c 	bic.w	r2, r3, #12
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b0e:	492d      	ldr	r1, [pc, #180]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005b14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d105      	bne.n	8005b28 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc8 <HAL_RCC_OscConfig+0xccc>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4a29      	ldr	r2, [pc, #164]	@ (8005bc8 <HAL_RCC_OscConfig+0xccc>)
 8005b22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b26:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005b28:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d107      	bne.n	8005b40 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005b30:	4b24      	ldr	r3, [pc, #144]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b36:	4a23      	ldr	r2, [pc, #140]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b38:	f023 0304 	bic.w	r3, r3, #4
 8005b3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005b40:	4b20      	ldr	r3, [pc, #128]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b4a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b4c:	f7fc f9b6 	bl	8001ebc <HAL_GetTick>
 8005b50:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b54:	f7fc f9b2 	bl	8001ebc <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e09f      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b66:	4b17      	ldr	r3, [pc, #92]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0f0      	beq.n	8005b54 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b72:	4b14      	ldr	r3, [pc, #80]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b76:	4a13      	ldr	r2, [pc, #76]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b7c:	6293      	str	r3, [r2, #40]	@ 0x28
 8005b7e:	e091      	b.n	8005ca4 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005b80:	4b10      	ldr	r3, [pc, #64]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a0f      	ldr	r2, [pc, #60]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b8a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b8c:	f7fc f996 	bl	8001ebc <HAL_GetTick>
 8005b90:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b94:	f7fc f992 	bl	8001ebc <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e07f      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005ba6:	4b07      	ldr	r3, [pc, #28]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1f0      	bne.n	8005b94 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005bb2:	4b04      	ldr	r3, [pc, #16]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb6:	4a03      	ldr	r2, [pc, #12]	@ (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005bb8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005bbc:	f023 0303 	bic.w	r3, r3, #3
 8005bc0:	6293      	str	r3, [r2, #40]	@ 0x28
 8005bc2:	e06f      	b.n	8005ca4 <HAL_RCC_OscConfig+0xda8>
 8005bc4:	46020c00 	.word	0x46020c00
 8005bc8:	46020800 	.word	0x46020800
 8005bcc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005bd0:	4b37      	ldr	r3, [pc, #220]	@ (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005bd6:	4b36      	ldr	r3, [pc, #216]	@ (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bda:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d039      	beq.n	8005c58 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f003 0203 	and.w	r2, r3, #3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d132      	bne.n	8005c58 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	0a1b      	lsrs	r3, r3, #8
 8005bf6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d129      	bne.n	8005c58 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d122      	bne.n	8005c58 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c1c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d11a      	bne.n	8005c58 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	0a5b      	lsrs	r3, r3, #9
 8005c26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d111      	bne.n	8005c58 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c40:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d108      	bne.n	8005c58 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	0e1b      	lsrs	r3, r3, #24
 8005c4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c52:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d001      	beq.n	8005c5c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e024      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c5c:	4b14      	ldr	r3, [pc, #80]	@ (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	08db      	lsrs	r3, r3, #3
 8005c62:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d01a      	beq.n	8005ca4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005c6e:	4b10      	ldr	r3, [pc, #64]	@ (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c72:	4a0f      	ldr	r2, [pc, #60]	@ (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005c74:	f023 0310 	bic.w	r3, r3, #16
 8005c78:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7a:	f7fc f91f 	bl	8001ebc <HAL_GetTick>
 8005c7e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005c80:	bf00      	nop
 8005c82:	f7fc f91b 	bl	8001ebc <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d0f9      	beq.n	8005c82 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c92:	4a07      	ldr	r2, [pc, #28]	@ (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005c98:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9c:	4a04      	ldr	r2, [pc, #16]	@ (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005c9e:	f043 0310 	orr.w	r3, r3, #16
 8005ca2:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3738      	adds	r7, #56	@ 0x38
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	46020c00 	.word	0x46020c00

08005cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e1d9      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cc8:	4b9b      	ldr	r3, [pc, #620]	@ (8005f38 <HAL_RCC_ClockConfig+0x284>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d910      	bls.n	8005cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd6:	4b98      	ldr	r3, [pc, #608]	@ (8005f38 <HAL_RCC_ClockConfig+0x284>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f023 020f 	bic.w	r2, r3, #15
 8005cde:	4996      	ldr	r1, [pc, #600]	@ (8005f38 <HAL_RCC_ClockConfig+0x284>)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce6:	4b94      	ldr	r3, [pc, #592]	@ (8005f38 <HAL_RCC_ClockConfig+0x284>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d001      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e1c1      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d010      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	4b8c      	ldr	r3, [pc, #560]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d908      	bls.n	8005d26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005d14:	4b89      	ldr	r3, [pc, #548]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	4986      	ldr	r1, [pc, #536]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d012      	beq.n	8005d58 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691a      	ldr	r2, [r3, #16]
 8005d36:	4b81      	ldr	r3, [pc, #516]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d909      	bls.n	8005d58 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005d44:	4b7d      	ldr	r3, [pc, #500]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	497a      	ldr	r1, [pc, #488]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d010      	beq.n	8005d86 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	4b74      	ldr	r3, [pc, #464]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d908      	bls.n	8005d86 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005d74:	4b71      	ldr	r3, [pc, #452]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	496e      	ldr	r1, [pc, #440]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d010      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	4b69      	ldr	r3, [pc, #420]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d908      	bls.n	8005db4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005da2:	4b66      	ldr	r3, [pc, #408]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f023 020f 	bic.w	r2, r3, #15
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	4963      	ldr	r1, [pc, #396]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 80d2 	beq.w	8005f66 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d143      	bne.n	8005e56 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dce:	4b5b      	ldr	r3, [pc, #364]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d110      	bne.n	8005dfe <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005ddc:	4b57      	ldr	r3, [pc, #348]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005de2:	4a56      	ldr	r2, [pc, #344]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005de4:	f043 0304 	orr.w	r3, r3, #4
 8005de8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005dec:	4b53      	ldr	r3, [pc, #332]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005df2:	f003 0304 	and.w	r3, r3, #4
 8005df6:	60bb      	str	r3, [r7, #8]
 8005df8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005dfe:	f7fc f85d 	bl	8001ebc <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005e04:	4b4e      	ldr	r3, [pc, #312]	@ (8005f40 <HAL_RCC_ClockConfig+0x28c>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00f      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005e12:	f7fc f853 	bl	8001ebc <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e12b      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005e24:	4b46      	ldr	r3, [pc, #280]	@ (8005f40 <HAL_RCC_ClockConfig+0x28c>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d107      	bne.n	8005e46 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005e36:	4b41      	ldr	r3, [pc, #260]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e3c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005e3e:	f023 0304 	bic.w	r3, r3, #4
 8005e42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005e46:	4b3d      	ldr	r3, [pc, #244]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d121      	bne.n	8005e96 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e112      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d107      	bne.n	8005e6e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e5e:	4b37      	ldr	r3, [pc, #220]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d115      	bne.n	8005e96 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e106      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d107      	bne.n	8005e86 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005e76:	4b31      	ldr	r3, [pc, #196]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d109      	bne.n	8005e96 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e0fa      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e86:	4b2d      	ldr	r3, [pc, #180]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e0f2      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005e96:	4b29      	ldr	r3, [pc, #164]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f023 0203 	bic.w	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	4926      	ldr	r1, [pc, #152]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005ea8:	f7fc f808 	bl	8001ebc <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d112      	bne.n	8005edc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eb6:	e00a      	b.n	8005ece <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eb8:	f7fc f800 	bl	8001ebc <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e0d6      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ece:	4b1b      	ldr	r3, [pc, #108]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
 8005ed6:	2b0c      	cmp	r3, #12
 8005ed8:	d1ee      	bne.n	8005eb8 <HAL_RCC_ClockConfig+0x204>
 8005eda:	e044      	b.n	8005f66 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d112      	bne.n	8005f0a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ee4:	e00a      	b.n	8005efc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee6:	f7fb ffe9 	bl	8001ebc <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d901      	bls.n	8005efc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e0bf      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005efc:	4b0f      	ldr	r3, [pc, #60]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f003 030c 	and.w	r3, r3, #12
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d1ee      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0x232>
 8005f08:	e02d      	b.n	8005f66 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d123      	bne.n	8005f5a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f12:	e00a      	b.n	8005f2a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f14:	f7fb ffd2 	bl	8001ebc <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e0a8      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f2a:	4b04      	ldr	r3, [pc, #16]	@ (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f003 030c 	and.w	r3, r3, #12
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1ee      	bne.n	8005f14 <HAL_RCC_ClockConfig+0x260>
 8005f36:	e016      	b.n	8005f66 <HAL_RCC_ClockConfig+0x2b2>
 8005f38:	40022000 	.word	0x40022000
 8005f3c:	46020c00 	.word	0x46020c00
 8005f40:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f44:	f7fb ffba 	bl	8001ebc <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e090      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f003 030c 	and.w	r3, r3, #12
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d1ee      	bne.n	8005f44 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d010      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	4b43      	ldr	r3, [pc, #268]	@ (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d208      	bcs.n	8005f94 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005f82:	4b40      	ldr	r3, [pc, #256]	@ (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f023 020f 	bic.w	r2, r3, #15
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	493d      	ldr	r1, [pc, #244]	@ (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f94:	4b3c      	ldr	r3, [pc, #240]	@ (8006088 <HAL_RCC_ClockConfig+0x3d4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 030f 	and.w	r3, r3, #15
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d210      	bcs.n	8005fc4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa2:	4b39      	ldr	r3, [pc, #228]	@ (8006088 <HAL_RCC_ClockConfig+0x3d4>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f023 020f 	bic.w	r2, r3, #15
 8005faa:	4937      	ldr	r1, [pc, #220]	@ (8006088 <HAL_RCC_ClockConfig+0x3d4>)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fb2:	4b35      	ldr	r3, [pc, #212]	@ (8006088 <HAL_RCC_ClockConfig+0x3d4>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d001      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e05b      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d010      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d208      	bcs.n	8005ff2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005fe0:	4b28      	ldr	r3, [pc, #160]	@ (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4925      	ldr	r1, [pc, #148]	@ (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d012      	beq.n	8006024 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	4b20      	ldr	r3, [pc, #128]	@ (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	091b      	lsrs	r3, r3, #4
 8006008:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800600c:	429a      	cmp	r2, r3
 800600e:	d209      	bcs.n	8006024 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006010:	4b1c      	ldr	r3, [pc, #112]	@ (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	4919      	ldr	r1, [pc, #100]	@ (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8006020:	4313      	orrs	r3, r2
 8006022:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	2b00      	cmp	r3, #0
 800602e:	d010      	beq.n	8006052 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695a      	ldr	r2, [r3, #20]
 8006034:	4b13      	ldr	r3, [pc, #76]	@ (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8006036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006038:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800603c:	429a      	cmp	r2, r3
 800603e:	d208      	bcs.n	8006052 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006040:	4b10      	ldr	r3, [pc, #64]	@ (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8006042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006044:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	490d      	ldr	r1, [pc, #52]	@ (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 800604e:	4313      	orrs	r3, r2
 8006050:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006052:	f000 f821 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8006056:	4602      	mov	r2, r0
 8006058:	4b0a      	ldr	r3, [pc, #40]	@ (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	490a      	ldr	r1, [pc, #40]	@ (800608c <HAL_RCC_ClockConfig+0x3d8>)
 8006062:	5ccb      	ldrb	r3, [r1, r3]
 8006064:	fa22 f303 	lsr.w	r3, r2, r3
 8006068:	4a09      	ldr	r2, [pc, #36]	@ (8006090 <HAL_RCC_ClockConfig+0x3dc>)
 800606a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800606c:	4b09      	ldr	r3, [pc, #36]	@ (8006094 <HAL_RCC_ClockConfig+0x3e0>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f7fb faaf 	bl	80015d4 <HAL_InitTick>
 8006076:	4603      	mov	r3, r0
 8006078:	73fb      	strb	r3, [r7, #15]

  return status;
 800607a:	7bfb      	ldrb	r3, [r7, #15]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	46020c00 	.word	0x46020c00
 8006088:	40022000 	.word	0x40022000
 800608c:	0800b7b0 	.word	0x0800b7b0
 8006090:	200000a0 	.word	0x200000a0
 8006094:	200000c0 	.word	0x200000c0

08006098 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006098:	b480      	push	{r7}
 800609a:	b08b      	sub	sp, #44	@ 0x2c
 800609c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060a6:	4b78      	ldr	r3, [pc, #480]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060b0:	4b75      	ldr	r3, [pc, #468]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <HAL_RCC_GetSysClockFreq+0x34>
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	2b0c      	cmp	r3, #12
 80060c4:	d121      	bne.n	800610a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d11e      	bne.n	800610a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80060cc:	4b6e      	ldr	r3, [pc, #440]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d107      	bne.n	80060e8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80060d8:	4b6b      	ldr	r3, [pc, #428]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80060de:	0b1b      	lsrs	r3, r3, #12
 80060e0:	f003 030f 	and.w	r3, r3, #15
 80060e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e6:	e005      	b.n	80060f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80060e8:	4b67      	ldr	r3, [pc, #412]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	0f1b      	lsrs	r3, r3, #28
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80060f4:	4a65      	ldr	r2, [pc, #404]	@ (800628c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d110      	bne.n	8006126 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006108:	e00d      	b.n	8006126 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800610a:	4b5f      	ldr	r3, [pc, #380]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	f003 030c 	and.w	r3, r3, #12
 8006112:	2b04      	cmp	r3, #4
 8006114:	d102      	bne.n	800611c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006116:	4b5e      	ldr	r3, [pc, #376]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006118:	623b      	str	r3, [r7, #32]
 800611a:	e004      	b.n	8006126 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2b08      	cmp	r3, #8
 8006120:	d101      	bne.n	8006126 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006122:	4b5b      	ldr	r3, [pc, #364]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006124:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b0c      	cmp	r3, #12
 800612a:	f040 80a5 	bne.w	8006278 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800612e:	4b56      	ldr	r3, [pc, #344]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006138:	4b53      	ldr	r3, [pc, #332]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800613a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613c:	0a1b      	lsrs	r3, r3, #8
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	3301      	adds	r3, #1
 8006144:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006146:	4b50      	ldr	r3, [pc, #320]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614a:	091b      	lsrs	r3, r3, #4
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006152:	4b4d      	ldr	r3, [pc, #308]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	08db      	lsrs	r3, r3, #3
 8006158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	fb02 f303 	mul.w	r3, r2, r3
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d003      	beq.n	800617c <HAL_RCC_GetSysClockFreq+0xe4>
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	2b03      	cmp	r3, #3
 8006178:	d022      	beq.n	80061c0 <HAL_RCC_GetSysClockFreq+0x128>
 800617a:	e043      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006186:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006294 <HAL_RCC_GetSysClockFreq+0x1fc>
 800618a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800618e:	4b3e      	ldr	r3, [pc, #248]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800619e:	ed97 6a01 	vldr	s12, [r7, #4]
 80061a2:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8006298 <HAL_RCC_GetSysClockFreq+0x200>
 80061a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061be:	e046      	b.n	800624e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ca:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8006294 <HAL_RCC_GetSysClockFreq+0x1fc>
 80061ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80061d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061e2:	ed97 6a01 	vldr	s12, [r7, #4]
 80061e6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006298 <HAL_RCC_GetSysClockFreq+0x200>
 80061ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006202:	e024      	b.n	800624e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	ee07 3a90 	vmov	s15, r3
 8006214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800621c:	4b1a      	ldr	r3, [pc, #104]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800621e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006224:	ee07 3a90 	vmov	s15, r3
 8006228:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800622c:	ed97 6a01 	vldr	s12, [r7, #4]
 8006230:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8006298 <HAL_RCC_GetSysClockFreq+0x200>
 8006234:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006238:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800623c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006240:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006248:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800624c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800624e:	4b0e      	ldr	r3, [pc, #56]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006252:	0e1b      	lsrs	r3, r3, #24
 8006254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006258:	3301      	adds	r3, #1
 800625a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006266:	edd7 6a07 	vldr	s13, [r7, #28]
 800626a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800626e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006272:	ee17 3a90 	vmov	r3, s15
 8006276:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006278:	6a3b      	ldr	r3, [r7, #32]
}
 800627a:	4618      	mov	r0, r3
 800627c:	372c      	adds	r7, #44	@ 0x2c
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	46020c00 	.word	0x46020c00
 800628c:	0800b7c8 	.word	0x0800b7c8
 8006290:	00f42400 	.word	0x00f42400
 8006294:	4b742400 	.word	0x4b742400
 8006298:	46000000 	.word	0x46000000

0800629c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80062a0:	f7ff fefa 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 80062a4:	4602      	mov	r2, r0
 80062a6:	4b07      	ldr	r3, [pc, #28]	@ (80062c4 <HAL_RCC_GetHCLKFreq+0x28>)
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f003 030f 	and.w	r3, r3, #15
 80062ae:	4906      	ldr	r1, [pc, #24]	@ (80062c8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80062b0:	5ccb      	ldrb	r3, [r1, r3]
 80062b2:	fa22 f303 	lsr.w	r3, r2, r3
 80062b6:	4a05      	ldr	r2, [pc, #20]	@ (80062cc <HAL_RCC_GetHCLKFreq+0x30>)
 80062b8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80062ba:	4b04      	ldr	r3, [pc, #16]	@ (80062cc <HAL_RCC_GetHCLKFreq+0x30>)
 80062bc:	681b      	ldr	r3, [r3, #0]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	46020c00 	.word	0x46020c00
 80062c8:	0800b7b0 	.word	0x0800b7b0
 80062cc:	200000a0 	.word	0x200000a0

080062d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80062d4:	f7ff ffe2 	bl	800629c <HAL_RCC_GetHCLKFreq>
 80062d8:	4602      	mov	r2, r0
 80062da:	4b05      	ldr	r3, [pc, #20]	@ (80062f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	091b      	lsrs	r3, r3, #4
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	4903      	ldr	r1, [pc, #12]	@ (80062f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062e6:	5ccb      	ldrb	r3, [r1, r3]
 80062e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	46020c00 	.word	0x46020c00
 80062f4:	0800b7c0 	.word	0x0800b7c0

080062f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80062fc:	f7ff ffce 	bl	800629c <HAL_RCC_GetHCLKFreq>
 8006300:	4602      	mov	r2, r0
 8006302:	4b05      	ldr	r3, [pc, #20]	@ (8006318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	0a1b      	lsrs	r3, r3, #8
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	4903      	ldr	r1, [pc, #12]	@ (800631c <HAL_RCC_GetPCLK2Freq+0x24>)
 800630e:	5ccb      	ldrb	r3, [r1, r3]
 8006310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd80      	pop	{r7, pc}
 8006318:	46020c00 	.word	0x46020c00
 800631c:	0800b7c0 	.word	0x0800b7c0

08006320 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006324:	f7ff ffba 	bl	800629c <HAL_RCC_GetHCLKFreq>
 8006328:	4602      	mov	r2, r0
 800632a:	4b05      	ldr	r3, [pc, #20]	@ (8006340 <HAL_RCC_GetPCLK3Freq+0x20>)
 800632c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632e:	091b      	lsrs	r3, r3, #4
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	4903      	ldr	r1, [pc, #12]	@ (8006344 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006336:	5ccb      	ldrb	r3, [r1, r3]
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800633c:	4618      	mov	r0, r3
 800633e:	bd80      	pop	{r7, pc}
 8006340:	46020c00 	.word	0x46020c00
 8006344:	0800b7c0 	.word	0x0800b7c0

08006348 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	221f      	movs	r2, #31
 8006356:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006358:	4b15      	ldr	r3, [pc, #84]	@ (80063b0 <HAL_RCC_GetClockConfig+0x68>)
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	f003 0203 	and.w	r2, r3, #3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006364:	4b12      	ldr	r3, [pc, #72]	@ (80063b0 <HAL_RCC_GetClockConfig+0x68>)
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	f003 020f 	and.w	r2, r3, #15
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8006370:	4b0f      	ldr	r3, [pc, #60]	@ (80063b0 <HAL_RCC_GetClockConfig+0x68>)
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800637c:	4b0c      	ldr	r3, [pc, #48]	@ (80063b0 <HAL_RCC_GetClockConfig+0x68>)
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	091b      	lsrs	r3, r3, #4
 8006382:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800638a:	4b09      	ldr	r3, [pc, #36]	@ (80063b0 <HAL_RCC_GetClockConfig+0x68>)
 800638c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006396:	4b07      	ldr	r3, [pc, #28]	@ (80063b4 <HAL_RCC_GetClockConfig+0x6c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 020f 	and.w	r2, r3, #15
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	601a      	str	r2, [r3, #0]
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	46020c00 	.word	0x46020c00
 80063b4:	40022000 	.word	0x40022000

080063b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80063c0:	4b3e      	ldr	r3, [pc, #248]	@ (80064bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063ce:	f7fe fd17 	bl	8004e00 <HAL_PWREx_GetVoltageRange>
 80063d2:	6178      	str	r0, [r7, #20]
 80063d4:	e019      	b.n	800640a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063d6:	4b39      	ldr	r3, [pc, #228]	@ (80064bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063dc:	4a37      	ldr	r2, [pc, #220]	@ (80064bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063de:	f043 0304 	orr.w	r3, r3, #4
 80063e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80063e6:	4b35      	ldr	r3, [pc, #212]	@ (80064bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063f4:	f7fe fd04 	bl	8004e00 <HAL_PWREx_GetVoltageRange>
 80063f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063fa:	4b30      	ldr	r3, [pc, #192]	@ (80064bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006400:	4a2e      	ldr	r2, [pc, #184]	@ (80064bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006402:	f023 0304 	bic.w	r3, r3, #4
 8006406:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006410:	d003      	beq.n	800641a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006418:	d109      	bne.n	800642e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006420:	d202      	bcs.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006422:	2301      	movs	r3, #1
 8006424:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006426:	e033      	b.n	8006490 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006428:	2300      	movs	r3, #0
 800642a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800642c:	e030      	b.n	8006490 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006434:	d208      	bcs.n	8006448 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800643c:	d102      	bne.n	8006444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800643e:	2303      	movs	r3, #3
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	e025      	b.n	8006490 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e035      	b.n	80064b4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800644e:	d90f      	bls.n	8006470 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800645c:	d902      	bls.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800645e:	2300      	movs	r3, #0
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	e015      	b.n	8006490 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006464:	2301      	movs	r3, #1
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	e012      	b.n	8006490 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800646a:	2300      	movs	r3, #0
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	e00f      	b.n	8006490 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006476:	d109      	bne.n	800648c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800647e:	d102      	bne.n	8006486 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006480:	2301      	movs	r3, #1
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	e004      	b.n	8006490 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006486:	2302      	movs	r3, #2
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	e001      	b.n	8006490 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800648c:	2301      	movs	r3, #1
 800648e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006490:	4b0b      	ldr	r3, [pc, #44]	@ (80064c0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f023 020f 	bic.w	r2, r3, #15
 8006498:	4909      	ldr	r1, [pc, #36]	@ (80064c0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4313      	orrs	r3, r2
 800649e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80064a0:	4b07      	ldr	r3, [pc, #28]	@ (80064c0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d001      	beq.n	80064b2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	46020c00 	.word	0x46020c00
 80064c0:	40022000 	.word	0x40022000

080064c4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80064c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064c8:	b0b8      	sub	sp, #224	@ 0xe0
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064d0:	2300      	movs	r3, #0
 80064d2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064d6:	2300      	movs	r3, #0
 80064d8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f002 0401 	and.w	r4, r2, #1
 80064e8:	2500      	movs	r5, #0
 80064ea:	ea54 0305 	orrs.w	r3, r4, r5
 80064ee:	d00b      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80064f0:	4bca      	ldr	r3, [pc, #808]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064f6:	f023 0103 	bic.w	r1, r3, #3
 80064fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006500:	4ac6      	ldr	r2, [pc, #792]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006502:	430b      	orrs	r3, r1
 8006504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f002 0802 	and.w	r8, r2, #2
 8006514:	f04f 0900 	mov.w	r9, #0
 8006518:	ea58 0309 	orrs.w	r3, r8, r9
 800651c:	d00b      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800651e:	4bbf      	ldr	r3, [pc, #764]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006524:	f023 010c 	bic.w	r1, r3, #12
 8006528:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800652c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652e:	4abb      	ldr	r2, [pc, #748]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006530:	430b      	orrs	r3, r1
 8006532:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006536:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	f002 0a04 	and.w	sl, r2, #4
 8006542:	f04f 0b00 	mov.w	fp, #0
 8006546:	ea5a 030b 	orrs.w	r3, sl, fp
 800654a:	d00b      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800654c:	4bb3      	ldr	r3, [pc, #716]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800654e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006552:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006556:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800655a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655c:	4aaf      	ldr	r2, [pc, #700]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800655e:	430b      	orrs	r3, r1
 8006560:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006564:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	f002 0308 	and.w	r3, r2, #8
 8006570:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006574:	2300      	movs	r3, #0
 8006576:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800657a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800657e:	460b      	mov	r3, r1
 8006580:	4313      	orrs	r3, r2
 8006582:	d00b      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006584:	4ba5      	ldr	r3, [pc, #660]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800658a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800658e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006594:	4aa1      	ldr	r2, [pc, #644]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006596:	430b      	orrs	r3, r1
 8006598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800659c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f002 0310 	and.w	r3, r2, #16
 80065a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065ac:	2300      	movs	r3, #0
 80065ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80065b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80065b6:	460b      	mov	r3, r1
 80065b8:	4313      	orrs	r3, r2
 80065ba:	d00b      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80065bc:	4b97      	ldr	r3, [pc, #604]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065cc:	4a93      	ldr	r2, [pc, #588]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065ce:	430b      	orrs	r3, r1
 80065d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	f002 0320 	and.w	r3, r2, #32
 80065e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065e4:	2300      	movs	r3, #0
 80065e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4313      	orrs	r3, r2
 80065f2:	d00b      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80065f4:	4b89      	ldr	r3, [pc, #548]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065fa:	f023 0107 	bic.w	r1, r3, #7
 80065fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006604:	4a85      	ldr	r2, [pc, #532]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006606:	430b      	orrs	r3, r1
 8006608:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800660c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006618:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800661c:	2300      	movs	r3, #0
 800661e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006622:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006626:	460b      	mov	r3, r1
 8006628:	4313      	orrs	r3, r2
 800662a:	d00b      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800662c:	4b7b      	ldr	r3, [pc, #492]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800662e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006632:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006636:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800663a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800663c:	4a77      	ldr	r2, [pc, #476]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800663e:	430b      	orrs	r3, r1
 8006640:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006644:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006650:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006654:	2300      	movs	r3, #0
 8006656:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800665a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800665e:	460b      	mov	r3, r1
 8006660:	4313      	orrs	r3, r2
 8006662:	d00b      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006664:	4b6d      	ldr	r3, [pc, #436]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800666a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800666e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006674:	4a69      	ldr	r2, [pc, #420]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006676:	430b      	orrs	r3, r1
 8006678:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800667c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800668c:	2300      	movs	r3, #0
 800668e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006692:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006696:	460b      	mov	r3, r1
 8006698:	4313      	orrs	r3, r2
 800669a:	d00b      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800669c:	4b5f      	ldr	r3, [pc, #380]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800669e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80066a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ac:	4a5b      	ldr	r2, [pc, #364]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066ae:	430b      	orrs	r3, r1
 80066b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80066c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066c4:	2300      	movs	r3, #0
 80066c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80066ce:	460b      	mov	r3, r1
 80066d0:	4313      	orrs	r3, r2
 80066d2:	d00b      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80066d4:	4b51      	ldr	r3, [pc, #324]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066da:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80066de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e4:	4a4d      	ldr	r2, [pc, #308]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066e6:	430b      	orrs	r3, r1
 80066e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80066f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066fc:	2300      	movs	r3, #0
 80066fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006702:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006706:	460b      	mov	r3, r1
 8006708:	4313      	orrs	r3, r2
 800670a:	d00b      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800670c:	4b43      	ldr	r3, [pc, #268]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800670e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006712:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006716:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800671a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800671c:	4a3f      	ldr	r2, [pc, #252]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800671e:	430b      	orrs	r3, r1
 8006720:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006730:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006734:	2300      	movs	r3, #0
 8006736:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800673a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800673e:	460b      	mov	r3, r1
 8006740:	4313      	orrs	r3, r2
 8006742:	d00b      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006744:	4b35      	ldr	r3, [pc, #212]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800674a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800674e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006752:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006754:	4a31      	ldr	r2, [pc, #196]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006756:	430b      	orrs	r3, r1
 8006758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800675c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006768:	67bb      	str	r3, [r7, #120]	@ 0x78
 800676a:	2300      	movs	r3, #0
 800676c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800676e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006772:	460b      	mov	r3, r1
 8006774:	4313      	orrs	r3, r2
 8006776:	d00c      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006778:	4b28      	ldr	r3, [pc, #160]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800677a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800677e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006782:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800678a:	4a24      	ldr	r2, [pc, #144]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800678c:	430b      	orrs	r3, r1
 800678e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006792:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800679e:	673b      	str	r3, [r7, #112]	@ 0x70
 80067a0:	2300      	movs	r3, #0
 80067a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80067a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80067a8:	460b      	mov	r3, r1
 80067aa:	4313      	orrs	r3, r2
 80067ac:	d04f      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80067ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b6:	2b80      	cmp	r3, #128	@ 0x80
 80067b8:	d02d      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80067ba:	2b80      	cmp	r3, #128	@ 0x80
 80067bc:	d827      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80067be:	2b60      	cmp	r3, #96	@ 0x60
 80067c0:	d02e      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80067c2:	2b60      	cmp	r3, #96	@ 0x60
 80067c4:	d823      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80067c6:	2b40      	cmp	r3, #64	@ 0x40
 80067c8:	d006      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80067ca:	2b40      	cmp	r3, #64	@ 0x40
 80067cc:	d81f      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d009      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	d011      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x336>
 80067d6:	e01a      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067d8:	4b10      	ldr	r3, [pc, #64]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80067da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067dc:	4a0f      	ldr	r2, [pc, #60]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80067de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067e2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067e4:	e01d      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067ea:	3308      	adds	r3, #8
 80067ec:	4618      	mov	r0, r3
 80067ee:	f002 f9d1 	bl	8008b94 <RCCEx_PLL2_Config>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067f8:	e013      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067fe:	332c      	adds	r3, #44	@ 0x2c
 8006800:	4618      	mov	r0, r3
 8006802:	f002 fa5f 	bl	8008cc4 <RCCEx_PLL3_Config>
 8006806:	4603      	mov	r3, r0
 8006808:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800680c:	e009      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006814:	e005      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8006816:	bf00      	nop
 8006818:	e003      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800681a:	bf00      	nop
 800681c:	46020c00 	.word	0x46020c00
        break;
 8006820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006822:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10d      	bne.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800682a:	4bb6      	ldr	r3, [pc, #728]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800682c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006830:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8006834:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800683c:	4ab1      	ldr	r2, [pc, #708]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800683e:	430b      	orrs	r3, r1
 8006840:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006844:	e003      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006846:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800684a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800684e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800685a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800685c:	2300      	movs	r3, #0
 800685e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006860:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006864:	460b      	mov	r3, r1
 8006866:	4313      	orrs	r3, r2
 8006868:	d053      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800686a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800686e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006876:	d033      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800687c:	d82c      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800687e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006882:	d02f      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006884:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006888:	d826      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800688a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800688e:	d008      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006894:	d820      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800689a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800689e:	d011      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80068a0:	e01a      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068a2:	4b98      	ldr	r3, [pc, #608]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80068a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a6:	4a97      	ldr	r2, [pc, #604]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80068a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80068ae:	e01a      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068b4:	3308      	adds	r3, #8
 80068b6:	4618      	mov	r0, r3
 80068b8:	f002 f96c 	bl	8008b94 <RCCEx_PLL2_Config>
 80068bc:	4603      	mov	r3, r0
 80068be:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80068c2:	e010      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068c8:	332c      	adds	r3, #44	@ 0x2c
 80068ca:	4618      	mov	r0, r3
 80068cc:	f002 f9fa 	bl	8008cc4 <RCCEx_PLL3_Config>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80068d6:	e006      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80068de:	e002      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80068e0:	bf00      	nop
 80068e2:	e000      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80068e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10d      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80068ee:	4b85      	ldr	r3, [pc, #532]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80068f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068f4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80068f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006900:	4a80      	ldr	r2, [pc, #512]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006902:	430b      	orrs	r3, r1
 8006904:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006908:	e003      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800690e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006912:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800691e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006920:	2300      	movs	r3, #0
 8006922:	667b      	str	r3, [r7, #100]	@ 0x64
 8006924:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006928:	460b      	mov	r3, r1
 800692a:	4313      	orrs	r3, r2
 800692c:	d046      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800692e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006932:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006936:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800693a:	d028      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800693c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006940:	d821      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006942:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006946:	d022      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006948:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800694c:	d81b      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800694e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006952:	d01c      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006954:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006958:	d815      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800695a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800695e:	d008      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006964:	d80f      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006966:	2b00      	cmp	r3, #0
 8006968:	d011      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800696a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800696e:	d00e      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006970:	e009      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006972:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006976:	3308      	adds	r3, #8
 8006978:	4618      	mov	r0, r3
 800697a:	f002 f90b 	bl	8008b94 <RCCEx_PLL2_Config>
 800697e:	4603      	mov	r3, r0
 8006980:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006984:	e004      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800698c:	e000      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800698e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006990:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10d      	bne.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006998:	4b5a      	ldr	r3, [pc, #360]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800699a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800699e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80069a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80069aa:	4a56      	ldr	r2, [pc, #344]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80069ac:	430b      	orrs	r3, r1
 80069ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80069b2:	e003      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80069b8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80069bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069ca:	2300      	movs	r3, #0
 80069cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80069d2:	460b      	mov	r3, r1
 80069d4:	4313      	orrs	r3, r2
 80069d6:	d03f      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80069d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d81e      	bhi.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80069e4:	a201      	add	r2, pc, #4	@ (adr r2, 80069ec <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80069e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ea:	bf00      	nop
 80069ec:	08006a2b 	.word	0x08006a2b
 80069f0:	08006a01 	.word	0x08006a01
 80069f4:	08006a0f 	.word	0x08006a0f
 80069f8:	08006a2b 	.word	0x08006a2b
 80069fc:	08006a2b 	.word	0x08006a2b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a00:	4b40      	ldr	r3, [pc, #256]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a04:	4a3f      	ldr	r2, [pc, #252]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a0a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006a0c:	e00e      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a12:	332c      	adds	r3, #44	@ 0x2c
 8006a14:	4618      	mov	r0, r3
 8006a16:	f002 f955 	bl	8008cc4 <RCCEx_PLL3_Config>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006a20:	e004      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006a28:	e000      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8006a2a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a2c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10d      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006a34:	4b33      	ldr	r3, [pc, #204]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a3a:	f023 0107 	bic.w	r1, r3, #7
 8006a3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a46:	4a2f      	ldr	r2, [pc, #188]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006a4e:	e003      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a50:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a54:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006a58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a64:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a66:	2300      	movs	r3, #0
 8006a68:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4313      	orrs	r3, r2
 8006a72:	d04d      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a80:	d028      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8006a82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a86:	d821      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006a88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a8c:	d024      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006a8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a92:	d81b      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006a94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a98:	d00e      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8006a9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a9e:	d815      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01b      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aa8:	d110      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006aaa:	4b16      	ldr	r3, [pc, #88]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aae:	4a15      	ldr	r2, [pc, #84]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ab4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006ab6:	e012      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006abc:	332c      	adds	r3, #44	@ 0x2c
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f002 f900 	bl	8008cc4 <RCCEx_PLL3_Config>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006aca:	e008      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006ad2:	e004      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006ad4:	bf00      	nop
 8006ad6:	e002      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006ad8:	bf00      	nop
 8006ada:	e000      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006adc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ade:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d110      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006ae6:	4b07      	ldr	r3, [pc, #28]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006ae8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006aec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006af0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006af8:	4a02      	ldr	r2, [pc, #8]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006afa:	430b      	orrs	r3, r1
 8006afc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006b00:	e006      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006b02:	bf00      	nop
 8006b04:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b08:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006b0c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b1e:	2300      	movs	r3, #0
 8006b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b22:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b26:	460b      	mov	r3, r1
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	f000 80b5 	beq.w	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b34:	4b9d      	ldr	r3, [pc, #628]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b3a:	f003 0304 	and.w	r3, r3, #4
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d113      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b42:	4b9a      	ldr	r3, [pc, #616]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b48:	4a98      	ldr	r2, [pc, #608]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b4a:	f043 0304 	orr.w	r3, r3, #4
 8006b4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006b52:	4b96      	ldr	r3, [pc, #600]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006b6a:	4b91      	ldr	r3, [pc, #580]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6e:	4a90      	ldr	r2, [pc, #576]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b70:	f043 0301 	orr.w	r3, r3, #1
 8006b74:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b76:	f7fb f9a1 	bl	8001ebc <HAL_GetTick>
 8006b7a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b7e:	e00b      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b80:	f7fb f99c 	bl	8001ebc <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d903      	bls.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006b96:	e005      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b98:	4b85      	ldr	r3, [pc, #532]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0ed      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8006ba4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d165      	bne.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006bac:	4b7f      	ldr	r3, [pc, #508]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d023      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x746>
 8006bc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bc6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d01b      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006bd2:	4b76      	ldr	r3, [pc, #472]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006be0:	4b72      	ldr	r3, [pc, #456]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006be2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006be6:	4a71      	ldr	r2, [pc, #452]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bf0:	4b6e      	ldr	r3, [pc, #440]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bf6:	4a6d      	ldr	r2, [pc, #436]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bfc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c00:	4a6a      	ldr	r2, [pc, #424]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d019      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c16:	f7fb f951 	bl	8001ebc <HAL_GetTick>
 8006c1a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c1e:	e00d      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c20:	f7fb f94c 	bl	8001ebc <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c2a:	1ad2      	subs	r2, r2, r3
 8006c2c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d903      	bls.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8006c3a:	e006      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c3c:	4b5b      	ldr	r3, [pc, #364]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0ea      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8006c4a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10d      	bne.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006c52:	4b56      	ldr	r3, [pc, #344]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c60:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c64:	4a51      	ldr	r2, [pc, #324]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c66:	430b      	orrs	r3, r1
 8006c68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006c6c:	e008      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c6e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c72:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8006c76:	e003      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c78:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c7c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c80:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d107      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c88:	4b48      	ldr	r3, [pc, #288]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c8e:	4a47      	ldr	r2, [pc, #284]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c90:	f023 0304 	bic.w	r3, r3, #4
 8006c94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006ca4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006caa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	d042      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006cb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cbc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006cc0:	d022      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8006cc2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006cc6:	d81b      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006cc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ccc:	d011      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8006cce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cd2:	d815      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d019      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006cd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cdc:	d110      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f001 ff55 	bl	8008b94 <RCCEx_PLL2_Config>
 8006cea:	4603      	mov	r3, r0
 8006cec:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006cf0:	e00d      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cfc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006cfe:	e006      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006d06:	e002      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006d08:	bf00      	nop
 8006d0a:	e000      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006d0c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d0e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10d      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006d16:	4b25      	ldr	r3, [pc, #148]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d1c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006d20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d28:	4a20      	ldr	r2, [pc, #128]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d2a:	430b      	orrs	r3, r1
 8006d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006d30:	e003      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d32:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006d36:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006d46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d48:	2300      	movs	r3, #0
 8006d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d4c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006d50:	460b      	mov	r3, r1
 8006d52:	4313      	orrs	r3, r2
 8006d54:	d032      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d62:	d00b      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d68:	d804      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d008      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d72:	d007      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006d7a:	e004      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006d7c:	bf00      	nop
 8006d7e:	e002      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006d80:	bf00      	nop
 8006d82:	e000      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006d84:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d86:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d112      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006d8e:	4b07      	ldr	r3, [pc, #28]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d94:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006da0:	4a02      	ldr	r2, [pc, #8]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006da2:	430b      	orrs	r3, r1
 8006da4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006da8:	e008      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006daa:	bf00      	nop
 8006dac:	46020c00 	.word	0x46020c00
 8006db0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006db8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006dbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dca:	2300      	movs	r3, #0
 8006dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	d019      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ddc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006de0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006de4:	d105      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006de6:	4b88      	ldr	r3, [pc, #544]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dea:	4a87      	ldr	r2, [pc, #540]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006df0:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006df2:	4b85      	ldr	r3, [pc, #532]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006df4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006df8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006dfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e04:	4a80      	ldr	r2, [pc, #512]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e06:	430b      	orrs	r3, r1
 8006e08:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e1e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006e22:	460b      	mov	r3, r1
 8006e24:	4313      	orrs	r3, r2
 8006e26:	d00c      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006e28:	4b77      	ldr	r3, [pc, #476]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e3a:	4973      	ldr	r1, [pc, #460]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006e42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006e4e:	623b      	str	r3, [r7, #32]
 8006e50:	2300      	movs	r3, #0
 8006e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e54:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	d00c      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006e68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e70:	4965      	ldr	r1, [pc, #404]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006e78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006e84:	61bb      	str	r3, [r7, #24]
 8006e86:	2300      	movs	r3, #0
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4313      	orrs	r3, r2
 8006e92:	d00c      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006e94:	4b5c      	ldr	r3, [pc, #368]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e9a:	f023 0218 	bic.w	r2, r3, #24
 8006e9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ea2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006ea6:	4958      	ldr	r1, [pc, #352]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006eae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006eba:	613b      	str	r3, [r7, #16]
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	d032      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006eca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ece:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ed2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ed6:	d105      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed8:	4b4b      	ldr	r3, [pc, #300]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006edc:	4a4a      	ldr	r2, [pc, #296]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ee2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006ee4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ee8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006eec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ef0:	d108      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ef2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 fe4b 	bl	8008b94 <RCCEx_PLL2_Config>
 8006efe:	4603      	mov	r3, r0
 8006f00:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8006f04:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10d      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f1e:	493a      	ldr	r1, [pc, #232]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006f26:	e003      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f28:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006f2c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006f3c:	60bb      	str	r3, [r7, #8]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f46:	460b      	mov	r3, r1
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	d03a      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006f4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f58:	d00e      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006f5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f5e:	d815      	bhi.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d017      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8006f64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f68:	d110      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6a:	4b27      	ldr	r3, [pc, #156]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6e:	4a26      	ldr	r2, [pc, #152]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f74:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006f76:	e00e      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 fe08 	bl	8008b94 <RCCEx_PLL2_Config>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006f8a:	e004      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006f92:	e000      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8006f94:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006f96:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10d      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fa4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fb0:	4915      	ldr	r1, [pc, #84]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006fb8:	e003      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006fbe:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006fc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fca:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	607b      	str	r3, [r7, #4]
 8006fd4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	d00c      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006fde:	4b0a      	ldr	r3, [pc, #40]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fe4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006fe8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006fec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006ff0:	4905      	ldr	r1, [pc, #20]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006ff8:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	37e0      	adds	r7, #224	@ 0xe0
 8007000:	46bd      	mov	sp, r7
 8007002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007006:	bf00      	nop
 8007008:	46020c00 	.word	0x46020c00

0800700c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800700c:	b480      	push	{r7}
 800700e:	b089      	sub	sp, #36	@ 0x24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007014:	4ba6      	ldr	r3, [pc, #664]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800701e:	4ba4      	ldr	r3, [pc, #656]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007022:	f003 0303 	and.w	r3, r3, #3
 8007026:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007028:	4ba1      	ldr	r3, [pc, #644]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800702a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702c:	0a1b      	lsrs	r3, r3, #8
 800702e:	f003 030f 	and.w	r3, r3, #15
 8007032:	3301      	adds	r3, #1
 8007034:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007036:	4b9e      	ldr	r3, [pc, #632]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703a:	091b      	lsrs	r3, r3, #4
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007042:	4b9b      	ldr	r3, [pc, #620]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007046:	08db      	lsrs	r3, r3, #3
 8007048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	fb02 f303 	mul.w	r3, r2, r3
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b03      	cmp	r3, #3
 8007062:	d062      	beq.n	800712a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	2b03      	cmp	r3, #3
 8007068:	f200 8081 	bhi.w	800716e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d024      	beq.n	80070bc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b02      	cmp	r3, #2
 8007076:	d17a      	bne.n	800716e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007082:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80072b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708a:	4b89      	ldr	r3, [pc, #548]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800708c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800708e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800709a:	ed97 6a02 	vldr	s12, [r7, #8]
 800709e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80072b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80070a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80070aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070ba:	e08f      	b.n	80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80070bc:	4b7c      	ldr	r3, [pc, #496]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80070c8:	4b79      	ldr	r3, [pc, #484]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	0f1b      	lsrs	r3, r3, #28
 80070ce:	f003 030f 	and.w	r3, r3, #15
 80070d2:	e006      	b.n	80070e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80070d4:	4b76      	ldr	r3, [pc, #472]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070da:	041b      	lsls	r3, r3, #16
 80070dc:	0f1b      	lsrs	r3, r3, #28
 80070de:	f003 030f 	and.w	r3, r3, #15
 80070e2:	4a76      	ldr	r2, [pc, #472]	@ (80072bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80070e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070e8:	ee07 3a90 	vmov	s15, r3
 80070ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	ee07 3a90 	vmov	s15, r3
 8007104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007108:	ed97 6a02 	vldr	s12, [r7, #8]
 800710c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80072b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007110:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007114:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007118:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800711c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007124:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007128:	e058      	b.n	80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	ee07 3a90 	vmov	s15, r3
 8007130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007134:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80072b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713c:	4b5c      	ldr	r3, [pc, #368]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800713e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007144:	ee07 3a90 	vmov	s15, r3
 8007148:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800714c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007150:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80072b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007154:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007158:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800715c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007160:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007168:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800716c:	e036      	b.n	80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800716e:	4b50      	ldr	r3, [pc, #320]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d005      	beq.n	8007186 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800717a:	4b4d      	ldr	r3, [pc, #308]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	0f1b      	lsrs	r3, r3, #28
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	e006      	b.n	8007194 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8007186:	4b4a      	ldr	r3, [pc, #296]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007188:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800718c:	041b      	lsls	r3, r3, #16
 800718e:	0f1b      	lsrs	r3, r3, #28
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	4a49      	ldr	r2, [pc, #292]	@ (80072bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	ee07 3a90 	vmov	s15, r3
 80071a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80071be:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80072b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80071c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80071d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071da:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80071dc:	4b34      	ldr	r3, [pc, #208]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80071de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d017      	beq.n	8007218 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80071e8:	4b31      	ldr	r3, [pc, #196]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80071ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ec:	0a5b      	lsrs	r3, r3, #9
 80071ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80071fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071fe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007202:	edd7 6a07 	vldr	s13, [r7, #28]
 8007206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800720a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800720e:	ee17 2a90 	vmov	r2, s15
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	e002      	b.n	800721e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800721e:	4b24      	ldr	r3, [pc, #144]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d017      	beq.n	800725a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800722a:	4b21      	ldr	r3, [pc, #132]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800722c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800722e:	0c1b      	lsrs	r3, r3, #16
 8007230:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007234:	ee07 3a90 	vmov	s15, r3
 8007238:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800723c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007240:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007244:	edd7 6a07 	vldr	s13, [r7, #28]
 8007248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800724c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007250:	ee17 2a90 	vmov	r2, s15
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	605a      	str	r2, [r3, #4]
 8007258:	e002      	b.n	8007260 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007260:	4b13      	ldr	r3, [pc, #76]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007264:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d017      	beq.n	800729c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800726c:	4b10      	ldr	r3, [pc, #64]	@ (80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800726e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007270:	0e1b      	lsrs	r3, r3, #24
 8007272:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800727e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007282:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007286:	edd7 6a07 	vldr	s13, [r7, #28]
 800728a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800728e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007292:	ee17 2a90 	vmov	r2, s15
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800729a:	e002      	b.n	80072a2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	609a      	str	r2, [r3, #8]
}
 80072a2:	bf00      	nop
 80072a4:	3724      	adds	r7, #36	@ 0x24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	46020c00 	.word	0x46020c00
 80072b4:	4b742400 	.word	0x4b742400
 80072b8:	46000000 	.word	0x46000000
 80072bc:	0800b7c8 	.word	0x0800b7c8

080072c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b089      	sub	sp, #36	@ 0x24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80072c8:	4ba6      	ldr	r3, [pc, #664]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80072d2:	4ba4      	ldr	r3, [pc, #656]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80072dc:	4ba1      	ldr	r3, [pc, #644]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e0:	0a1b      	lsrs	r3, r3, #8
 80072e2:	f003 030f 	and.w	r3, r3, #15
 80072e6:	3301      	adds	r3, #1
 80072e8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80072ea:	4b9e      	ldr	r3, [pc, #632]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ee:	091b      	lsrs	r3, r3, #4
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80072f6:	4b9b      	ldr	r3, [pc, #620]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fa:	08db      	lsrs	r3, r3, #3
 80072fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	fb02 f303 	mul.w	r3, r2, r3
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b03      	cmp	r3, #3
 8007316:	d062      	beq.n	80073de <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2b03      	cmp	r3, #3
 800731c:	f200 8081 	bhi.w	8007422 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d024      	beq.n	8007370 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2b02      	cmp	r3, #2
 800732a:	d17a      	bne.n	8007422 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800733a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733e:	4b89      	ldr	r3, [pc, #548]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800734e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007352:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800756c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007356:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800735a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800735e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007362:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800736e:	e08f      	b.n	8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007370:	4b7c      	ldr	r3, [pc, #496]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d005      	beq.n	8007388 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800737c:	4b79      	ldr	r3, [pc, #484]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	0f1b      	lsrs	r3, r3, #28
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	e006      	b.n	8007396 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8007388:	4b76      	ldr	r3, [pc, #472]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800738a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800738e:	041b      	lsls	r3, r3, #16
 8007390:	0f1b      	lsrs	r3, r3, #28
 8007392:	f003 030f 	and.w	r3, r3, #15
 8007396:	4a76      	ldr	r2, [pc, #472]	@ (8007570 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800739c:	ee07 3a90 	vmov	s15, r3
 80073a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	ee07 3a90 	vmov	s15, r3
 80073b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80073c0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800756c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80073c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80073d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073dc:	e058      	b.n	8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	ee07 3a90 	vmov	s15, r3
 80073e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80073ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f0:	4b5c      	ldr	r3, [pc, #368]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f8:	ee07 3a90 	vmov	s15, r3
 80073fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007400:	ed97 6a02 	vldr	s12, [r7, #8]
 8007404:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800756c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007408:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800740c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007410:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007414:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007420:	e036      	b.n	8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007422:	4b50      	ldr	r3, [pc, #320]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800742e:	4b4d      	ldr	r3, [pc, #308]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	0f1b      	lsrs	r3, r3, #28
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	e006      	b.n	8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800743a:	4b4a      	ldr	r3, [pc, #296]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800743c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007440:	041b      	lsls	r3, r3, #16
 8007442:	0f1b      	lsrs	r3, r3, #28
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	4a49      	ldr	r2, [pc, #292]	@ (8007570 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800744a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	ee07 3a90 	vmov	s15, r3
 800745c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007472:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800756c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800747a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800747e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007482:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800748a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800748e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007490:	4b34      	ldr	r3, [pc, #208]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d017      	beq.n	80074cc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800749c:	4b31      	ldr	r3, [pc, #196]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800749e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a0:	0a5b      	lsrs	r3, r3, #9
 80074a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80074ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074b2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80074b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c2:	ee17 2a90 	vmov	r2, s15
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	e002      	b.n	80074d2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80074d2:	4b24      	ldr	r3, [pc, #144]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d017      	beq.n	800750e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80074de:	4b21      	ldr	r3, [pc, #132]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074e8:	ee07 3a90 	vmov	s15, r3
 80074ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80074f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074f4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80074f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80074fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007504:	ee17 2a90 	vmov	r2, s15
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	605a      	str	r2, [r3, #4]
 800750c:	e002      	b.n	8007514 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007514:	4b13      	ldr	r3, [pc, #76]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007518:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d017      	beq.n	8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007520:	4b10      	ldr	r3, [pc, #64]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007524:	0e1b      	lsrs	r3, r3, #24
 8007526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8007532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007536:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800753a:	edd7 6a07 	vldr	s13, [r7, #28]
 800753e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007546:	ee17 2a90 	vmov	r2, s15
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800754e:	e002      	b.n	8007556 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	609a      	str	r2, [r3, #8]
}
 8007556:	bf00      	nop
 8007558:	3724      	adds	r7, #36	@ 0x24
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	46020c00 	.word	0x46020c00
 8007568:	4b742400 	.word	0x4b742400
 800756c:	46000000 	.word	0x46000000
 8007570:	0800b7c8 	.word	0x0800b7c8

08007574 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007574:	b480      	push	{r7}
 8007576:	b089      	sub	sp, #36	@ 0x24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800757c:	4ba6      	ldr	r3, [pc, #664]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800757e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007584:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007586:	4ba4      	ldr	r3, [pc, #656]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007590:	4ba1      	ldr	r3, [pc, #644]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007594:	0a1b      	lsrs	r3, r3, #8
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	3301      	adds	r3, #1
 800759c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800759e:	4b9e      	ldr	r3, [pc, #632]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a2:	091b      	lsrs	r3, r3, #4
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80075aa:	4b9b      	ldr	r3, [pc, #620]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80075ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ae:	08db      	lsrs	r3, r3, #3
 80075b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	fb02 f303 	mul.w	r3, r2, r3
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d062      	beq.n	8007692 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	f200 8081 	bhi.w	80076d6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d024      	beq.n	8007624 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d17a      	bne.n	80076d6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ea:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800781c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80075ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075f2:	4b89      	ldr	r3, [pc, #548]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80075f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007602:	ed97 6a02 	vldr	s12, [r7, #8]
 8007606:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800760a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800760e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007616:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800761a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8007622:	e08f      	b.n	8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007624:	4b7c      	ldr	r3, [pc, #496]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d005      	beq.n	800763c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007630:	4b79      	ldr	r3, [pc, #484]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	0f1b      	lsrs	r3, r3, #28
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	e006      	b.n	800764a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800763c:	4b76      	ldr	r3, [pc, #472]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800763e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007642:	041b      	lsls	r3, r3, #16
 8007644:	0f1b      	lsrs	r3, r3, #28
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	4a76      	ldr	r2, [pc, #472]	@ (8007824 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800764c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007650:	ee07 3a90 	vmov	s15, r3
 8007654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	ee07 3a90 	vmov	s15, r3
 800766c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007670:	ed97 6a02 	vldr	s12, [r7, #8]
 8007674:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800767c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007680:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007684:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007690:	e058      	b.n	8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	ee07 3a90 	vmov	s15, r3
 8007698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800781c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80076a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a4:	4b5c      	ldr	r3, [pc, #368]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ac:	ee07 3a90 	vmov	s15, r3
 80076b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80076b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80076b8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80076bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80076c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80076c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80076cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076d4:	e036      	b.n	8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80076d6:	4b50      	ldr	r3, [pc, #320]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80076e2:	4b4d      	ldr	r3, [pc, #308]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	0f1b      	lsrs	r3, r3, #28
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	e006      	b.n	80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80076ee:	4b4a      	ldr	r3, [pc, #296]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076f4:	041b      	lsls	r3, r3, #16
 80076f6:	0f1b      	lsrs	r3, r3, #28
 80076f8:	f003 030f 	and.w	r3, r3, #15
 80076fc:	4a49      	ldr	r2, [pc, #292]	@ (8007824 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80076fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	ee07 3a90 	vmov	s15, r3
 8007710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007722:	ed97 6a02 	vldr	s12, [r7, #8]
 8007726:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800772a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007736:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800773a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007742:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007744:	4b34      	ldr	r3, [pc, #208]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d017      	beq.n	8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007750:	4b31      	ldr	r3, [pc, #196]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007754:	0a5b      	lsrs	r3, r3, #9
 8007756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007762:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007766:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800776a:	edd7 6a07 	vldr	s13, [r7, #28]
 800776e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007776:	ee17 2a90 	vmov	r2, s15
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	e002      	b.n	8007786 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007786:	4b24      	ldr	r3, [pc, #144]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800778a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d017      	beq.n	80077c2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007792:	4b21      	ldr	r3, [pc, #132]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007796:	0c1b      	lsrs	r3, r3, #16
 8007798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800779c:	ee07 3a90 	vmov	s15, r3
 80077a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80077a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077a8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80077b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077b8:	ee17 2a90 	vmov	r2, s15
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	605a      	str	r2, [r3, #4]
 80077c0:	e002      	b.n	80077c8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80077c8:	4b13      	ldr	r3, [pc, #76]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80077ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d017      	beq.n	8007804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077d4:	4b10      	ldr	r3, [pc, #64]	@ (8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80077d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077d8:	0e1b      	lsrs	r3, r3, #24
 80077da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80077e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077fa:	ee17 2a90 	vmov	r2, s15
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007802:	e002      	b.n	800780a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	609a      	str	r2, [r3, #8]
}
 800780a:	bf00      	nop
 800780c:	3724      	adds	r7, #36	@ 0x24
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	46020c00 	.word	0x46020c00
 800781c:	4b742400 	.word	0x4b742400
 8007820:	46000000 	.word	0x46000000
 8007824:	0800b7c8 	.word	0x0800b7c8

08007828 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b08e      	sub	sp, #56	@ 0x38
 800782c:	af00      	add	r7, sp, #0
 800782e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007836:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800783a:	430b      	orrs	r3, r1
 800783c:	d145      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800783e:	4baa      	ldr	r3, [pc, #680]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007844:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007848:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800784a:	4ba7      	ldr	r3, [pc, #668]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800784c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b02      	cmp	r3, #2
 8007856:	d108      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800785e:	d104      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007860:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007864:	637b      	str	r3, [r7, #52]	@ 0x34
 8007866:	f001 b987 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800786a:	4b9f      	ldr	r3, [pc, #636]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800786c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007874:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007878:	d114      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007880:	d110      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007882:	4b99      	ldr	r3, [pc, #612]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800788c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007890:	d103      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007892:	23fa      	movs	r3, #250	@ 0xfa
 8007894:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007896:	f001 b96f 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800789a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800789e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078a0:	f001 b96a 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80078a4:	4b90      	ldr	r3, [pc, #576]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078b0:	d107      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078b8:	d103      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80078ba:	4b8c      	ldr	r3, [pc, #560]	@ (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80078bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078be:	f001 b95b 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078c6:	f001 b957 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80078ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ce:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80078d2:	430b      	orrs	r3, r1
 80078d4:	d151      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80078d6:	4b84      	ldr	r3, [pc, #528]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80078d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078dc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80078e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80078e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e4:	2b80      	cmp	r3, #128	@ 0x80
 80078e6:	d035      	beq.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80078e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ea:	2b80      	cmp	r3, #128	@ 0x80
 80078ec:	d841      	bhi.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	2b60      	cmp	r3, #96	@ 0x60
 80078f2:	d02a      	beq.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f6:	2b60      	cmp	r3, #96	@ 0x60
 80078f8:	d83b      	bhi.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80078fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fc:	2b40      	cmp	r3, #64	@ 0x40
 80078fe:	d009      	beq.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007902:	2b40      	cmp	r3, #64	@ 0x40
 8007904:	d835      	bhi.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00c      	beq.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800790c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790e:	2b20      	cmp	r3, #32
 8007910:	d012      	beq.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007912:	e02e      	b.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff fb77 	bl	800700c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007922:	f001 b929 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007926:	f107 0318 	add.w	r3, r7, #24
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff fcc8 	bl	80072c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007934:	f001 b920 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007938:	f107 030c 	add.w	r3, r7, #12
 800793c:	4618      	mov	r0, r3
 800793e:	f7ff fe19 	bl	8007574 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007946:	f001 b917 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800794a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800794e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007950:	f001 b912 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007954:	4b64      	ldr	r3, [pc, #400]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800795c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007960:	d103      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007962:	4b63      	ldr	r3, [pc, #396]	@ (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007964:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007966:	f001 b907 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800796e:	f001 b903 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007976:	f001 b8ff 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800797a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800797e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007982:	430b      	orrs	r3, r1
 8007984:	d158      	bne.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007986:	4b58      	ldr	r3, [pc, #352]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007988:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800798c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007990:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007998:	d03b      	beq.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800799a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079a0:	d846      	bhi.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80079a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079a8:	d02e      	beq.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80079aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079b0:	d83e      	bhi.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80079b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079b8:	d00b      	beq.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80079ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079c0:	d836      	bhi.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80079c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00d      	beq.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079ce:	d012      	beq.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80079d0:	e02e      	b.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff fb18 	bl	800700c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80079dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079e0:	f001 b8ca 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079e4:	f107 0318 	add.w	r3, r7, #24
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7ff fc69 	bl	80072c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079f2:	f001 b8c1 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079f6:	f107 030c 	add.w	r3, r7, #12
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff fdba 	bl	8007574 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a04:	f001 b8b8 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007a08:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007a0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a0e:	f001 b8b3 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a12:	4b35      	ldr	r3, [pc, #212]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a1e:	d103      	bne.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007a20:	4b33      	ldr	r3, [pc, #204]	@ (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007a22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a24:	f001 b8a8 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a2c:	f001 b8a4 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a34:	f001 b8a0 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a3c:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8007a40:	430b      	orrs	r3, r1
 8007a42:	d16e      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007a44:	4b28      	ldr	r3, [pc, #160]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a4a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007a4e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a52:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007a56:	d034      	beq.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8007a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007a5e:	d85c      	bhi.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8007a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a66:	d00b      	beq.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a6e:	d854      	bhi.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8007a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d016      	beq.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a7c:	d009      	beq.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007a7e:	e04c      	b.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff fac1 	bl	800700c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a8e:	f001 b873 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a92:	f107 0318 	add.w	r3, r7, #24
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff fc12 	bl	80072c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007aa0:	f001 b86a 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007aa4:	4b10      	ldr	r3, [pc, #64]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ab0:	d103      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8007ab2:	4b10      	ldr	r3, [pc, #64]	@ (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007ab4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ab6:	f001 b85f 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007abe:	f001 b85b 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007ac2:	4b09      	ldr	r3, [pc, #36]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0320 	and.w	r3, r3, #32
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	d121      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ace:	4b06      	ldr	r3, [pc, #24]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00e      	beq.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8007ada:	4b03      	ldr	r3, [pc, #12]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	0e1b      	lsrs	r3, r3, #24
 8007ae0:	f003 030f 	and.w	r3, r3, #15
 8007ae4:	e00f      	b.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007ae6:	bf00      	nop
 8007ae8:	46020c00 	.word	0x46020c00
 8007aec:	0007a120 	.word	0x0007a120
 8007af0:	00f42400 	.word	0x00f42400
 8007af4:	02dc6c00 	.word	0x02dc6c00
 8007af8:	4ba7      	ldr	r3, [pc, #668]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007afa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	0e1b      	lsrs	r3, r3, #24
 8007b02:	f003 030f 	and.w	r3, r3, #15
 8007b06:	4aa5      	ldr	r2, [pc, #660]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b0e:	f001 b833 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b16:	f001 b82f 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b1e:	f001 b82b 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b26:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	d17f      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007b2e:	4b9a      	ldr	r3, [pc, #616]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007b30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b38:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d165      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007b40:	4b95      	ldr	r3, [pc, #596]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b46:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007b4a:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007b52:	d034      	beq.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b56:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007b5a:	d853      	bhi.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b62:	d00b      	beq.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8007b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b6a:	d84b      	bhi.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d016      	beq.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8007b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b78:	d009      	beq.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007b7a:	e043      	b.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff fa43 	bl	800700c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b88:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007b8a:	f000 bff5 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b8e:	f107 0318 	add.w	r3, r7, #24
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7ff fb94 	bl	80072c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007b9c:	f000 bfec 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007ba0:	4b7d      	ldr	r3, [pc, #500]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bac:	d103      	bne.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8007bae:	4b7c      	ldr	r3, [pc, #496]	@ (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007bb0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007bb2:	f000 bfe1 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007bba:	f000 bfdd 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007bbe:	4b76      	ldr	r3, [pc, #472]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0320 	and.w	r3, r3, #32
 8007bc6:	2b20      	cmp	r3, #32
 8007bc8:	d118      	bne.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bca:	4b73      	ldr	r3, [pc, #460]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007bd6:	4b70      	ldr	r3, [pc, #448]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	0e1b      	lsrs	r3, r3, #24
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	e006      	b.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8007be2:	4b6d      	ldr	r3, [pc, #436]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007be8:	041b      	lsls	r3, r3, #16
 8007bea:	0e1b      	lsrs	r3, r3, #24
 8007bec:	f003 030f 	and.w	r3, r3, #15
 8007bf0:	4a6a      	ldr	r2, [pc, #424]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007bf8:	f000 bfbe 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007c00:	f000 bfba 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007c08:	f000 bfb6 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c12:	d108      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7ff f9f7 	bl	800700c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c22:	f000 bfa9 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c2a:	f000 bfa5 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007c2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c32:	1e51      	subs	r1, r2, #1
 8007c34:	430b      	orrs	r3, r1
 8007c36:	d136      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007c38:	4b57      	ldr	r3, [pc, #348]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d104      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007c4a:	f7fe fb55 	bl	80062f8 <HAL_RCC_GetPCLK2Freq>
 8007c4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c50:	f000 bf92 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d104      	bne.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c5a:	f7fe fa1d 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8007c5e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c60:	f000 bf8a 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007c64:	4b4c      	ldr	r3, [pc, #304]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c70:	d106      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8007c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d103      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8007c78:	4b4a      	ldr	r3, [pc, #296]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007c7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c7c:	f000 bf7c 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007c80:	4b45      	ldr	r3, [pc, #276]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d107      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d104      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8007c94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c9a:	f000 bf6d 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ca2:	f000 bf69 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007caa:	1e91      	subs	r1, r2, #2
 8007cac:	430b      	orrs	r3, r1
 8007cae:	d136      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007cb0:	4b39      	ldr	r3, [pc, #228]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cb6:	f003 030c 	and.w	r3, r3, #12
 8007cba:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d104      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007cc2:	f7fe fb05 	bl	80062d0 <HAL_RCC_GetPCLK1Freq>
 8007cc6:	6378      	str	r0, [r7, #52]	@ 0x34
 8007cc8:	f000 bf56 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d104      	bne.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007cd2:	f7fe f9e1 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8007cd6:	6378      	str	r0, [r7, #52]	@ 0x34
 8007cd8:	f000 bf4e 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ce8:	d106      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cec:	2b08      	cmp	r3, #8
 8007cee:	d103      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8007cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf4:	f000 bf40 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007cf8:	4b27      	ldr	r3, [pc, #156]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cfe:	f003 0302 	and.w	r3, r3, #2
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d107      	bne.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8007d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d08:	2b0c      	cmp	r3, #12
 8007d0a:	d104      	bne.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8007d0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d12:	f000 bf31 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d1a:	f000 bf2d 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007d1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d22:	1f11      	subs	r1, r2, #4
 8007d24:	430b      	orrs	r3, r1
 8007d26:	d13f      	bne.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007d28:	4b1b      	ldr	r3, [pc, #108]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007d32:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d104      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d3a:	f7fe fac9 	bl	80062d0 <HAL_RCC_GetPCLK1Freq>
 8007d3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d40:	f000 bf1a 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d46:	2b10      	cmp	r3, #16
 8007d48:	d104      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d4a:	f7fe f9a5 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8007d4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d50:	f000 bf12 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007d54:	4b10      	ldr	r3, [pc, #64]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d60:	d106      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d64:	2b20      	cmp	r3, #32
 8007d66:	d103      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8007d68:	4b0e      	ldr	r3, [pc, #56]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d6c:	f000 bf04 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007d70:	4b09      	ldr	r3, [pc, #36]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d107      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d80:	2b30      	cmp	r3, #48	@ 0x30
 8007d82:	d104      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8007d84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d8a:	f000 bef5 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d92:	f000 bef1 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007d96:	bf00      	nop
 8007d98:	46020c00 	.word	0x46020c00
 8007d9c:	0800b7c8 	.word	0x0800b7c8
 8007da0:	02dc6c00 	.word	0x02dc6c00
 8007da4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dac:	f1a2 0108 	sub.w	r1, r2, #8
 8007db0:	430b      	orrs	r3, r1
 8007db2:	d136      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007db4:	4ba4      	ldr	r3, [pc, #656]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007dbe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d104      	bne.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007dc6:	f7fe fa83 	bl	80062d0 <HAL_RCC_GetPCLK1Freq>
 8007dca:	6378      	str	r0, [r7, #52]	@ 0x34
 8007dcc:	f000 bed4 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd2:	2b40      	cmp	r3, #64	@ 0x40
 8007dd4:	d104      	bne.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007dd6:	f7fe f95f 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8007dda:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ddc:	f000 becc 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007de0:	4b99      	ldr	r3, [pc, #612]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dec:	d106      	bne.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8007dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df0:	2b80      	cmp	r3, #128	@ 0x80
 8007df2:	d103      	bne.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8007df4:	4b95      	ldr	r3, [pc, #596]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df8:	f000 bebe 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007dfc:	4b92      	ldr	r3, [pc, #584]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d107      	bne.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0c:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e0e:	d104      	bne.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8007e10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e16:	f000 beaf 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e1e:	f000 beab 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007e22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e26:	f1a2 0110 	sub.w	r1, r2, #16
 8007e2a:	430b      	orrs	r3, r1
 8007e2c:	d139      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007e2e:	4b86      	ldr	r3, [pc, #536]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e38:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d104      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e40:	f7fe fa46 	bl	80062d0 <HAL_RCC_GetPCLK1Freq>
 8007e44:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e46:	f000 be97 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e50:	d104      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e52:	f7fe f921 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8007e56:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e58:	f000 be8e 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007e5c:	4b7a      	ldr	r3, [pc, #488]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e68:	d107      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e70:	d103      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8007e72:	4b76      	ldr	r3, [pc, #472]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e76:	f000 be7f 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007e7a:	4b73      	ldr	r3, [pc, #460]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d108      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e8e:	d104      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8007e90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e96:	f000 be6f 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e9e:	f000 be6b 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ea6:	f1a2 0120 	sub.w	r1, r2, #32
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	d158      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007eae:	4b66      	ldr	r3, [pc, #408]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007eb4:	f003 0307 	and.w	r3, r3, #7
 8007eb8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d104      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007ec0:	f7fe fa2e 	bl	8006320 <HAL_RCC_GetPCLK3Freq>
 8007ec4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ec6:	f000 be57 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d104      	bne.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ed0:	f7fe f8e2 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8007ed4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ed6:	f000 be4f 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007eda:	4b5b      	ldr	r3, [pc, #364]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ee6:	d106      	bne.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d103      	bne.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8007eee:	4b57      	ldr	r3, [pc, #348]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef2:	f000 be41 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007ef6:	4b54      	ldr	r3, [pc, #336]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d107      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8007f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d104      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8007f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f10:	f000 be32 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007f14:	4b4c      	ldr	r3, [pc, #304]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0320 	and.w	r3, r3, #32
 8007f1c:	2b20      	cmp	r3, #32
 8007f1e:	d11b      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8007f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	d118      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f26:	4b48      	ldr	r3, [pc, #288]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d005      	beq.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8007f32:	4b45      	ldr	r3, [pc, #276]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	0e1b      	lsrs	r3, r3, #24
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	e006      	b.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007f3e:	4b42      	ldr	r3, [pc, #264]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f44:	041b      	lsls	r3, r3, #16
 8007f46:	0e1b      	lsrs	r3, r3, #24
 8007f48:	f003 030f 	and.w	r3, r3, #15
 8007f4c:	4a40      	ldr	r2, [pc, #256]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f54:	f000 be10 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f5c:	f000 be0c 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f64:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007f68:	430b      	orrs	r3, r1
 8007f6a:	d173      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007f6c:	4b36      	ldr	r3, [pc, #216]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f72:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007f76:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f7e:	d104      	bne.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f80:	f7fe f88a 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8007f84:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f86:	f000 bdf7 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f90:	d108      	bne.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f92:	f107 0318 	add.w	r3, r7, #24
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff f992 	bl	80072c0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fa0:	f000 bdea 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d104      	bne.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007faa:	f7fe f977 	bl	800629c <HAL_RCC_GetHCLKFreq>
 8007fae:	6378      	str	r0, [r7, #52]	@ 0x34
 8007fb0:	f000 bde2 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007fba:	d122      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007fbc:	4b22      	ldr	r3, [pc, #136]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0320 	and.w	r3, r3, #32
 8007fc4:	2b20      	cmp	r3, #32
 8007fc6:	d118      	bne.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8007fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	0e1b      	lsrs	r3, r3, #24
 8007fda:	f003 030f 	and.w	r3, r3, #15
 8007fde:	e006      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007fe0:	4b19      	ldr	r3, [pc, #100]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007fe6:	041b      	lsls	r3, r3, #16
 8007fe8:	0e1b      	lsrs	r3, r3, #24
 8007fea:	f003 030f 	and.w	r3, r3, #15
 8007fee:	4a18      	ldr	r2, [pc, #96]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff6:	f000 bdbf 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ffe:	f000 bdbb 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008002:	4b11      	ldr	r3, [pc, #68]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800800a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800800e:	d107      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8008010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008012:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008016:	d103      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8008018:	4b0c      	ldr	r3, [pc, #48]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800801a:	637b      	str	r3, [r7, #52]	@ 0x34
 800801c:	f000 bdac 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008020:	4b09      	ldr	r3, [pc, #36]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800802c:	d107      	bne.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800802e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008030:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008034:	d103      	bne.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8008036:	4b05      	ldr	r3, [pc, #20]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8008038:	637b      	str	r3, [r7, #52]	@ 0x34
 800803a:	f000 bd9d 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	637b      	str	r3, [r7, #52]	@ 0x34
 8008042:	f000 bd99 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008046:	bf00      	nop
 8008048:	46020c00 	.word	0x46020c00
 800804c:	00f42400 	.word	0x00f42400
 8008050:	0800b7c8 	.word	0x0800b7c8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008058:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800805c:	430b      	orrs	r3, r1
 800805e:	d158      	bne.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008060:	4bad      	ldr	r3, [pc, #692]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008062:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800806c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806e:	2b04      	cmp	r3, #4
 8008070:	d84b      	bhi.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008072:	a201      	add	r2, pc, #4	@ (adr r2, 8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008078:	080080b1 	.word	0x080080b1
 800807c:	0800808d 	.word	0x0800808d
 8008080:	0800809f 	.word	0x0800809f
 8008084:	080080bb 	.word	0x080080bb
 8008088:	080080c5 	.word	0x080080c5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800808c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008090:	4618      	mov	r0, r3
 8008092:	f7fe ffbb 	bl	800700c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008098:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800809a:	f000 bd6d 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800809e:	f107 030c 	add.w	r3, r7, #12
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff fa66 	bl	8007574 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080ac:	f000 bd64 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80080b0:	f7fe f8f4 	bl	800629c <HAL_RCC_GetHCLKFreq>
 80080b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80080b6:	f000 bd5f 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80080ba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80080be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080c0:	f000 bd5a 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80080c4:	4b94      	ldr	r3, [pc, #592]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0320 	and.w	r3, r3, #32
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d118      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080d0:	4b91      	ldr	r3, [pc, #580]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d005      	beq.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 80080dc:	4b8e      	ldr	r3, [pc, #568]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	0e1b      	lsrs	r3, r3, #24
 80080e2:	f003 030f 	and.w	r3, r3, #15
 80080e6:	e006      	b.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80080e8:	4b8b      	ldr	r3, [pc, #556]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80080ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080ee:	041b      	lsls	r3, r3, #16
 80080f0:	0e1b      	lsrs	r3, r3, #24
 80080f2:	f003 030f 	and.w	r3, r3, #15
 80080f6:	4a89      	ldr	r2, [pc, #548]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80080f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80080fe:	f000 bd3b 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008106:	f000 bd37 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800810e:	f000 bd33 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8008112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008116:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800811a:	430b      	orrs	r3, r1
 800811c:	d167      	bne.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800811e:	4b7e      	ldr	r3, [pc, #504]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008124:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008128:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008130:	d036      	beq.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008138:	d855      	bhi.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008140:	d029      	beq.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008148:	d84d      	bhi.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800814a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008150:	d013      	beq.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8008152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008154:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008158:	d845      	bhi.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	2b00      	cmp	r3, #0
 800815e:	d015      	beq.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008166:	d13e      	bne.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008168:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800816c:	4618      	mov	r0, r3
 800816e:	f7fe ff4d 	bl	800700c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008174:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008176:	f000 bcff 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800817a:	f107 030c 	add.w	r3, r7, #12
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff f9f8 	bl	8007574 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008188:	f000 bcf6 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800818c:	f7fe f886 	bl	800629c <HAL_RCC_GetHCLKFreq>
 8008190:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008192:	f000 bcf1 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008196:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800819a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800819c:	f000 bcec 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80081a0:	4b5d      	ldr	r3, [pc, #372]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0320 	and.w	r3, r3, #32
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	d118      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081ac:	4b5a      	ldr	r3, [pc, #360]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d005      	beq.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80081b8:	4b57      	ldr	r3, [pc, #348]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	0e1b      	lsrs	r3, r3, #24
 80081be:	f003 030f 	and.w	r3, r3, #15
 80081c2:	e006      	b.n	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80081c4:	4b54      	ldr	r3, [pc, #336]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081ca:	041b      	lsls	r3, r3, #16
 80081cc:	0e1b      	lsrs	r3, r3, #24
 80081ce:	f003 030f 	and.w	r3, r3, #15
 80081d2:	4a52      	ldr	r2, [pc, #328]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80081d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80081da:	f000 bccd 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081e2:	f000 bcc9 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081ea:	f000 bcc5 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80081ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081f2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80081f6:	430b      	orrs	r3, r1
 80081f8:	d14c      	bne.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80081fa:	4b47      	ldr	r3, [pc, #284]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008200:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008204:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	2b00      	cmp	r3, #0
 800820a:	d104      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800820c:	f7fe f860 	bl	80062d0 <HAL_RCC_GetPCLK1Freq>
 8008210:	6378      	str	r0, [r7, #52]	@ 0x34
 8008212:	f000 bcb1 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800821c:	d104      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800821e:	f7fd ff3b 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8008222:	6378      	str	r0, [r7, #52]	@ 0x34
 8008224:	f000 bca8 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008228:	4b3b      	ldr	r3, [pc, #236]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008234:	d107      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8008236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800823c:	d103      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 800823e:	4b38      	ldr	r3, [pc, #224]	@ (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008240:	637b      	str	r3, [r7, #52]	@ 0x34
 8008242:	f000 bc99 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8008246:	4b34      	ldr	r3, [pc, #208]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b20      	cmp	r3, #32
 8008250:	d11c      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8008252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008254:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008258:	d118      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800825a:	4b2f      	ldr	r3, [pc, #188]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d005      	beq.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8008266:	4b2c      	ldr	r3, [pc, #176]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	0e1b      	lsrs	r3, r3, #24
 800826c:	f003 030f 	and.w	r3, r3, #15
 8008270:	e006      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8008272:	4b29      	ldr	r3, [pc, #164]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008278:	041b      	lsls	r3, r3, #16
 800827a:	0e1b      	lsrs	r3, r3, #24
 800827c:	f003 030f 	and.w	r3, r3, #15
 8008280:	4a26      	ldr	r2, [pc, #152]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008286:	637b      	str	r3, [r7, #52]	@ 0x34
 8008288:	f000 bc76 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008290:	f000 bc72 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008298:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800829c:	430b      	orrs	r3, r1
 800829e:	d152      	bne.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80082a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082a6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80082aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80082ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d104      	bne.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80082b2:	f7fe f80d 	bl	80062d0 <HAL_RCC_GetPCLK1Freq>
 80082b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80082b8:	f000 bc5e 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80082bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082c2:	d104      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80082c4:	f7fd fee8 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 80082c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80082ca:	f000 bc55 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80082ce:	4b12      	ldr	r3, [pc, #72]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082da:	d107      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 80082dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082e2:	d103      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 80082e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80082e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082e8:	f000 bc46 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80082ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0320 	and.w	r3, r3, #32
 80082f4:	2b20      	cmp	r3, #32
 80082f6:	d122      	bne.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 80082f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082fe:	d11e      	bne.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008300:	4b05      	ldr	r3, [pc, #20]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 800830c:	4b02      	ldr	r3, [pc, #8]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	0e1b      	lsrs	r3, r3, #24
 8008312:	f003 030f 	and.w	r3, r3, #15
 8008316:	e00c      	b.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8008318:	46020c00 	.word	0x46020c00
 800831c:	0800b7c8 	.word	0x0800b7c8
 8008320:	00f42400 	.word	0x00f42400
 8008324:	4ba1      	ldr	r3, [pc, #644]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008326:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800832a:	041b      	lsls	r3, r3, #16
 800832c:	0e1b      	lsrs	r3, r3, #24
 800832e:	f003 030f 	and.w	r3, r3, #15
 8008332:	4a9f      	ldr	r2, [pc, #636]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008338:	637b      	str	r3, [r7, #52]	@ 0x34
 800833a:	f000 bc1d 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	637b      	str	r3, [r7, #52]	@ 0x34
 8008342:	f000 bc19 	b.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8008346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800834a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800834e:	430b      	orrs	r3, r1
 8008350:	d151      	bne.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008352:	4b96      	ldr	r3, [pc, #600]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008354:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008358:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800835c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008360:	2bc0      	cmp	r3, #192	@ 0xc0
 8008362:	d024      	beq.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008366:	2bc0      	cmp	r3, #192	@ 0xc0
 8008368:	d842      	bhi.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800836a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836c:	2b80      	cmp	r3, #128	@ 0x80
 800836e:	d00d      	beq.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8008370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008372:	2b80      	cmp	r3, #128	@ 0x80
 8008374:	d83c      	bhi.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	2b00      	cmp	r3, #0
 800837a:	d003      	beq.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800837c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837e:	2b40      	cmp	r3, #64	@ 0x40
 8008380:	d011      	beq.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8008382:	e035      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8008384:	f7fd ffcc 	bl	8006320 <HAL_RCC_GetPCLK3Freq>
 8008388:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800838a:	e3f5      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800838c:	4b87      	ldr	r3, [pc, #540]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008398:	d102      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 800839a:	4b86      	ldr	r3, [pc, #536]	@ (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800839c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800839e:	e3eb      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80083a0:	2300      	movs	r3, #0
 80083a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083a4:	e3e8      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80083a6:	f7fd fe77 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 80083aa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80083ac:	e3e4      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80083ae:	4b7f      	ldr	r3, [pc, #508]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	2b20      	cmp	r3, #32
 80083b8:	d117      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083ba:	4b7c      	ldr	r3, [pc, #496]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d005      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 80083c6:	4b79      	ldr	r3, [pc, #484]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	0e1b      	lsrs	r3, r3, #24
 80083cc:	f003 030f 	and.w	r3, r3, #15
 80083d0:	e006      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80083d2:	4b76      	ldr	r3, [pc, #472]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80083d8:	041b      	lsls	r3, r3, #16
 80083da:	0e1b      	lsrs	r3, r3, #24
 80083dc:	f003 030f 	and.w	r3, r3, #15
 80083e0:	4a73      	ldr	r2, [pc, #460]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80083e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80083e8:	e3c6      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083ee:	e3c3      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 80083f0:	2300      	movs	r3, #0
 80083f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083f4:	e3c0      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80083f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083fa:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80083fe:	430b      	orrs	r3, r1
 8008400:	d147      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008402:	4b6a      	ldr	r3, [pc, #424]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008408:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800840c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800840e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008410:	2b00      	cmp	r3, #0
 8008412:	d103      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008414:	f7fd ff5c 	bl	80062d0 <HAL_RCC_GetPCLK1Freq>
 8008418:	6378      	str	r0, [r7, #52]	@ 0x34
 800841a:	e3ad      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800841c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008422:	d103      	bne.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008424:	f7fd fe38 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8008428:	6378      	str	r0, [r7, #52]	@ 0x34
 800842a:	e3a5      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800842c:	4b5f      	ldr	r3, [pc, #380]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008438:	d106      	bne.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800843a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008440:	d102      	bne.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8008442:	4b5c      	ldr	r3, [pc, #368]	@ (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008444:	637b      	str	r3, [r7, #52]	@ 0x34
 8008446:	e397      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8008448:	4b58      	ldr	r3, [pc, #352]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0320 	and.w	r3, r3, #32
 8008450:	2b20      	cmp	r3, #32
 8008452:	d11b      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8008454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008456:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800845a:	d117      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800845c:	4b53      	ldr	r3, [pc, #332]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8008468:	4b50      	ldr	r3, [pc, #320]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	0e1b      	lsrs	r3, r3, #24
 800846e:	f003 030f 	and.w	r3, r3, #15
 8008472:	e006      	b.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8008474:	4b4d      	ldr	r3, [pc, #308]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800847a:	041b      	lsls	r3, r3, #16
 800847c:	0e1b      	lsrs	r3, r3, #24
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	4a4b      	ldr	r2, [pc, #300]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008488:	637b      	str	r3, [r7, #52]	@ 0x34
 800848a:	e375      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008490:	e372      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8008492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008496:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800849a:	430b      	orrs	r3, r1
 800849c:	d164      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800849e:	4b43      	ldr	r3, [pc, #268]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80084a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80084aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d120      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80084b0:	4b3e      	ldr	r3, [pc, #248]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0320 	and.w	r3, r3, #32
 80084b8:	2b20      	cmp	r3, #32
 80084ba:	d117      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084bc:	4b3b      	ldr	r3, [pc, #236]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80084c8:	4b38      	ldr	r3, [pc, #224]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	0e1b      	lsrs	r3, r3, #24
 80084ce:	f003 030f 	and.w	r3, r3, #15
 80084d2:	e006      	b.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80084d4:	4b35      	ldr	r3, [pc, #212]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084da:	041b      	lsls	r3, r3, #16
 80084dc:	0e1b      	lsrs	r3, r3, #24
 80084de:	f003 030f 	and.w	r3, r3, #15
 80084e2:	4a33      	ldr	r2, [pc, #204]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80084e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084ea:	e345      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f0:	e342      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80084f2:	4b2e      	ldr	r3, [pc, #184]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008500:	d112      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8008502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008508:	d10e      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800850a:	4b28      	ldr	r3, [pc, #160]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800850c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008514:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008518:	d102      	bne.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 800851a:	23fa      	movs	r3, #250	@ 0xfa
 800851c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800851e:	e32b      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008520:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008524:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008526:	e327      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008528:	4b20      	ldr	r3, [pc, #128]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008534:	d106      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8008536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800853c:	d102      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800853e:	4b1d      	ldr	r3, [pc, #116]	@ (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008540:	637b      	str	r3, [r7, #52]	@ 0x34
 8008542:	e319      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008544:	4b19      	ldr	r3, [pc, #100]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b02      	cmp	r3, #2
 8008550:	d107      	bne.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8008552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008558:	d103      	bne.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 800855a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800855e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008560:	e30a      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	637b      	str	r3, [r7, #52]	@ 0x34
 8008566:	e307      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800856c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008570:	430b      	orrs	r3, r1
 8008572:	d16b      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008574:	4b0d      	ldr	r3, [pc, #52]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800857a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800857e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8008580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008582:	2b00      	cmp	r3, #0
 8008584:	d127      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008586:	4b09      	ldr	r3, [pc, #36]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0320 	and.w	r3, r3, #32
 800858e:	2b20      	cmp	r3, #32
 8008590:	d11e      	bne.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008592:	4b06      	ldr	r3, [pc, #24]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00c      	beq.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 800859e:	4b03      	ldr	r3, [pc, #12]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	0e1b      	lsrs	r3, r3, #24
 80085a4:	f003 030f 	and.w	r3, r3, #15
 80085a8:	e00d      	b.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80085aa:	bf00      	nop
 80085ac:	46020c00 	.word	0x46020c00
 80085b0:	0800b7c8 	.word	0x0800b7c8
 80085b4:	00f42400 	.word	0x00f42400
 80085b8:	4b94      	ldr	r3, [pc, #592]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80085ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085be:	041b      	lsls	r3, r3, #16
 80085c0:	0e1b      	lsrs	r3, r3, #24
 80085c2:	f003 030f 	and.w	r3, r3, #15
 80085c6:	4a92      	ldr	r2, [pc, #584]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80085c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ce:	e2d3      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80085d4:	e2d0      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80085d6:	4b8d      	ldr	r3, [pc, #564]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80085d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085e4:	d112      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 80085e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085ec:	d10e      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085ee:	4b87      	ldr	r3, [pc, #540]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80085f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085fc:	d102      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 80085fe:	23fa      	movs	r3, #250	@ 0xfa
 8008600:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008602:	e2b9      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008604:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008608:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800860a:	e2b5      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800860c:	4b7f      	ldr	r3, [pc, #508]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008618:	d106      	bne.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008620:	d102      	bne.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8008622:	4b7c      	ldr	r3, [pc, #496]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008624:	637b      	str	r3, [r7, #52]	@ 0x34
 8008626:	e2a7      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008628:	4b78      	ldr	r3, [pc, #480]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800862a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800862e:	f003 0302 	and.w	r3, r3, #2
 8008632:	2b02      	cmp	r3, #2
 8008634:	d107      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8008636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008638:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800863c:	d103      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 800863e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008642:	637b      	str	r3, [r7, #52]	@ 0x34
 8008644:	e298      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	637b      	str	r3, [r7, #52]	@ 0x34
 800864a:	e295      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800864c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008650:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008654:	430b      	orrs	r3, r1
 8008656:	d147      	bne.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008658:	4b6c      	ldr	r3, [pc, #432]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800865a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800865e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008662:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008666:	2b00      	cmp	r3, #0
 8008668:	d103      	bne.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800866a:	f7fd fe31 	bl	80062d0 <HAL_RCC_GetPCLK1Freq>
 800866e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008670:	e282      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008672:	4b66      	ldr	r3, [pc, #408]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800867c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008680:	d112      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008688:	d10e      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800868a:	4b60      	ldr	r3, [pc, #384]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800868c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008694:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008698:	d102      	bne.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 800869a:	23fa      	movs	r3, #250	@ 0xfa
 800869c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800869e:	e26b      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80086a0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80086a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086a6:	e267      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80086a8:	4b58      	ldr	r3, [pc, #352]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086b4:	d106      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80086b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80086bc:	d102      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 80086be:	4b55      	ldr	r3, [pc, #340]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086c2:	e259      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80086c4:	4b51      	ldr	r3, [pc, #324]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d107      	bne.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80086d8:	d103      	bne.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 80086da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086de:	637b      	str	r3, [r7, #52]	@ 0x34
 80086e0:	e24a      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086e6:	e247      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80086e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ec:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80086f0:	430b      	orrs	r3, r1
 80086f2:	d12d      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80086f4:	4b45      	ldr	r3, [pc, #276]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086fa:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80086fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008700:	4b42      	ldr	r3, [pc, #264]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800870c:	d105      	bne.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800870e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008710:	2b00      	cmp	r3, #0
 8008712:	d102      	bne.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8008714:	4b3f      	ldr	r3, [pc, #252]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008716:	637b      	str	r3, [r7, #52]	@ 0x34
 8008718:	e22e      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800871a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008720:	d107      	bne.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008726:	4618      	mov	r0, r3
 8008728:	f7fe fc70 	bl	800700c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800872c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008730:	e222      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008738:	d107      	bne.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800873a:	f107 0318 	add.w	r3, r7, #24
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fdbe 	bl	80072c0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	637b      	str	r3, [r7, #52]	@ 0x34
 8008748:	e216      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	637b      	str	r3, [r7, #52]	@ 0x34
 800874e:	e213      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008754:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8008758:	430b      	orrs	r3, r1
 800875a:	d15d      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800875c:	4b2b      	ldr	r3, [pc, #172]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800875e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008762:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008766:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800876e:	d028      	beq.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8008770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008772:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008776:	d845      	bhi.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800877e:	d013      	beq.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008786:	d83d      	bhi.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878a:	2b00      	cmp	r3, #0
 800878c:	d004      	beq.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800878e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008790:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008794:	d004      	beq.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8008796:	e035      	b.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008798:	f7fd fdae 	bl	80062f8 <HAL_RCC_GetPCLK2Freq>
 800879c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800879e:	e1eb      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80087a0:	f7fd fc7a 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 80087a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80087a6:	e1e7      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087a8:	4b18      	ldr	r3, [pc, #96]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087b4:	d102      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 80087b6:	4b17      	ldr	r3, [pc, #92]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80087b8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087ba:	e1dd      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80087bc:	2300      	movs	r3, #0
 80087be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087c0:	e1da      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80087c2:	4b12      	ldr	r3, [pc, #72]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0320 	and.w	r3, r3, #32
 80087ca:	2b20      	cmp	r3, #32
 80087cc:	d117      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80087ce:	4b0f      	ldr	r3, [pc, #60]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d005      	beq.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80087da:	4b0c      	ldr	r3, [pc, #48]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	0e1b      	lsrs	r3, r3, #24
 80087e0:	f003 030f 	and.w	r3, r3, #15
 80087e4:	e006      	b.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 80087e6:	4b09      	ldr	r3, [pc, #36]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80087e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087ec:	041b      	lsls	r3, r3, #16
 80087ee:	0e1b      	lsrs	r3, r3, #24
 80087f0:	f003 030f 	and.w	r3, r3, #15
 80087f4:	4a06      	ldr	r2, [pc, #24]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80087f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087fc:	e1bc      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008802:	e1b9      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008808:	e1b6      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800880a:	bf00      	nop
 800880c:	46020c00 	.word	0x46020c00
 8008810:	0800b7c8 	.word	0x0800b7c8
 8008814:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800881c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8008820:	430b      	orrs	r3, r1
 8008822:	d156      	bne.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008824:	4ba5      	ldr	r3, [pc, #660]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800882a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800882e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008832:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008836:	d028      	beq.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8008838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800883e:	d845      	bhi.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008846:	d013      	beq.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800884e:	d83d      	bhi.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8008850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008852:	2b00      	cmp	r3, #0
 8008854:	d004      	beq.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8008856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800885c:	d004      	beq.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800885e:	e035      	b.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008860:	f7fd fd36 	bl	80062d0 <HAL_RCC_GetPCLK1Freq>
 8008864:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008866:	e187      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008868:	f7fd fc16 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 800886c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800886e:	e183      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008870:	4b92      	ldr	r3, [pc, #584]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800887c:	d102      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800887e:	4b90      	ldr	r3, [pc, #576]	@ (8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8008880:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008882:	e179      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008888:	e176      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800888a:	4b8c      	ldr	r3, [pc, #560]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0320 	and.w	r3, r3, #32
 8008892:	2b20      	cmp	r3, #32
 8008894:	d117      	bne.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008896:	4b89      	ldr	r3, [pc, #548]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d005      	beq.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 80088a2:	4b86      	ldr	r3, [pc, #536]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	0e1b      	lsrs	r3, r3, #24
 80088a8:	f003 030f 	and.w	r3, r3, #15
 80088ac:	e006      	b.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 80088ae:	4b83      	ldr	r3, [pc, #524]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80088b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80088b4:	041b      	lsls	r3, r3, #16
 80088b6:	0e1b      	lsrs	r3, r3, #24
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	4a81      	ldr	r2, [pc, #516]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80088be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088c4:	e158      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088ca:	e155      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088d0:	e152      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80088d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088d6:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80088da:	430b      	orrs	r3, r1
 80088dc:	d177      	bne.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80088de:	4b77      	ldr	r3, [pc, #476]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80088e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088e4:	f003 0318 	and.w	r3, r3, #24
 80088e8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80088ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ec:	2b18      	cmp	r3, #24
 80088ee:	d86b      	bhi.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80088f0:	a201      	add	r2, pc, #4	@ (adr r2, 80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80088f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f6:	bf00      	nop
 80088f8:	0800895d 	.word	0x0800895d
 80088fc:	080089c9 	.word	0x080089c9
 8008900:	080089c9 	.word	0x080089c9
 8008904:	080089c9 	.word	0x080089c9
 8008908:	080089c9 	.word	0x080089c9
 800890c:	080089c9 	.word	0x080089c9
 8008910:	080089c9 	.word	0x080089c9
 8008914:	080089c9 	.word	0x080089c9
 8008918:	08008965 	.word	0x08008965
 800891c:	080089c9 	.word	0x080089c9
 8008920:	080089c9 	.word	0x080089c9
 8008924:	080089c9 	.word	0x080089c9
 8008928:	080089c9 	.word	0x080089c9
 800892c:	080089c9 	.word	0x080089c9
 8008930:	080089c9 	.word	0x080089c9
 8008934:	080089c9 	.word	0x080089c9
 8008938:	0800896d 	.word	0x0800896d
 800893c:	080089c9 	.word	0x080089c9
 8008940:	080089c9 	.word	0x080089c9
 8008944:	080089c9 	.word	0x080089c9
 8008948:	080089c9 	.word	0x080089c9
 800894c:	080089c9 	.word	0x080089c9
 8008950:	080089c9 	.word	0x080089c9
 8008954:	080089c9 	.word	0x080089c9
 8008958:	08008987 	.word	0x08008987
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800895c:	f7fd fce0 	bl	8006320 <HAL_RCC_GetPCLK3Freq>
 8008960:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008962:	e109      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008964:	f7fd fb98 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8008968:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800896a:	e105      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800896c:	4b53      	ldr	r3, [pc, #332]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008978:	d102      	bne.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800897a:	4b51      	ldr	r3, [pc, #324]	@ (8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800897c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800897e:	e0fb      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008984:	e0f8      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008986:	4b4d      	ldr	r3, [pc, #308]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0320 	and.w	r3, r3, #32
 800898e:	2b20      	cmp	r3, #32
 8008990:	d117      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008992:	4b4a      	ldr	r3, [pc, #296]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d005      	beq.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800899e:	4b47      	ldr	r3, [pc, #284]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	0e1b      	lsrs	r3, r3, #24
 80089a4:	f003 030f 	and.w	r3, r3, #15
 80089a8:	e006      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80089aa:	4b44      	ldr	r3, [pc, #272]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80089ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80089b0:	041b      	lsls	r3, r3, #16
 80089b2:	0e1b      	lsrs	r3, r3, #24
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	4a42      	ldr	r2, [pc, #264]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80089ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80089c0:	e0da      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089c6:	e0d7      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80089c8:	2300      	movs	r3, #0
 80089ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089cc:	e0d4      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80089ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80089d6:	430b      	orrs	r3, r1
 80089d8:	d155      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80089da:	4b38      	ldr	r3, [pc, #224]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80089dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089e0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80089e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80089ec:	d013      	beq.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80089ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80089f4:	d844      	bhi.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80089f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089fc:	d013      	beq.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 80089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a04:	d83c      	bhi.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d014      	beq.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a12:	d014      	beq.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8008a14:	e034      	b.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a16:	f107 0318 	add.w	r3, r7, #24
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe fc50 	bl	80072c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a24:	e0a8      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe faee 	bl	800700c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a34:	e0a0      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008a36:	f7fd fb2f 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8008a3a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008a3c:	e09c      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0320 	and.w	r3, r3, #32
 8008a46:	2b20      	cmp	r3, #32
 8008a48:	d117      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d005      	beq.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8008a56:	4b19      	ldr	r3, [pc, #100]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	0e1b      	lsrs	r3, r3, #24
 8008a5c:	f003 030f 	and.w	r3, r3, #15
 8008a60:	e006      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8008a62:	4b16      	ldr	r3, [pc, #88]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a68:	041b      	lsls	r3, r3, #16
 8008a6a:	0e1b      	lsrs	r3, r3, #24
 8008a6c:	f003 030f 	and.w	r3, r3, #15
 8008a70:	4a14      	ldr	r2, [pc, #80]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a76:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a78:	e07e      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a7e:	e07b      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a84:	e078      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a8a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	d138      	bne.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008a92:	4b0a      	ldr	r3, [pc, #40]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a9c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008a9e:	4b07      	ldr	r3, [pc, #28]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008aa4:	f003 0302 	and.w	r3, r3, #2
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d10d      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10a      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8008ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ab8:	e05e      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008aba:	bf00      	nop
 8008abc:	46020c00 	.word	0x46020c00
 8008ac0:	00f42400 	.word	0x00f42400
 8008ac4:	0800b7c8 	.word	0x0800b7c8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ace:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ad2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ad6:	d112      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ada:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ade:	d10e      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ae0:	4b28      	ldr	r3, [pc, #160]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008ae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008aea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aee:	d102      	bne.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8008af0:	23fa      	movs	r3, #250	@ 0xfa
 8008af2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008af4:	e040      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008af6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008afa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008afc:	e03c      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b02:	e039      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b08:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	d131      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008b10:	4b1c      	ldr	r3, [pc, #112]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008b12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b16:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008b1a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008b1c:	4b19      	ldr	r3, [pc, #100]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b28:	d105      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d102      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8008b30:	4b15      	ldr	r3, [pc, #84]	@ (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8008b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b34:	e020      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008b36:	4b13      	ldr	r3, [pc, #76]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b42:	d106      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8008b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b4a:	d102      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8008b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b50:	e012      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008b52:	4b0c      	ldr	r3, [pc, #48]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b5e:	d106      	bne.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8008b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b66:	d102      	bne.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8008b68:	4b09      	ldr	r3, [pc, #36]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b6c:	e004      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b72:	e001      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8008b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3738      	adds	r7, #56	@ 0x38
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	46020c00 	.word	0x46020c00
 8008b88:	02dc6c00 	.word	0x02dc6c00
 8008b8c:	016e3600 	.word	0x016e3600
 8008b90:	00f42400 	.word	0x00f42400

08008b94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008b9c:	4b47      	ldr	r3, [pc, #284]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a46      	ldr	r2, [pc, #280]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008ba2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ba6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ba8:	f7f9 f988 	bl	8001ebc <HAL_GetTick>
 8008bac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008bae:	e008      	b.n	8008bc2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008bb0:	f7f9 f984 	bl	8001ebc <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d901      	bls.n	8008bc2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e077      	b.n	8008cb2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008bc2:	4b3e      	ldr	r3, [pc, #248]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1f0      	bne.n	8008bb0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008bce:	4b3b      	ldr	r3, [pc, #236]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008bd6:	f023 0303 	bic.w	r3, r3, #3
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	6811      	ldr	r1, [r2, #0]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	6852      	ldr	r2, [r2, #4]
 8008be2:	3a01      	subs	r2, #1
 8008be4:	0212      	lsls	r2, r2, #8
 8008be6:	430a      	orrs	r2, r1
 8008be8:	4934      	ldr	r1, [pc, #208]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008bee:	4b33      	ldr	r3, [pc, #204]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008bf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bf2:	4b33      	ldr	r3, [pc, #204]	@ (8008cc0 <RCCEx_PLL2_Config+0x12c>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	6892      	ldr	r2, [r2, #8]
 8008bfa:	3a01      	subs	r2, #1
 8008bfc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	68d2      	ldr	r2, [r2, #12]
 8008c04:	3a01      	subs	r2, #1
 8008c06:	0252      	lsls	r2, r2, #9
 8008c08:	b292      	uxth	r2, r2
 8008c0a:	4311      	orrs	r1, r2
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	6912      	ldr	r2, [r2, #16]
 8008c10:	3a01      	subs	r2, #1
 8008c12:	0412      	lsls	r2, r2, #16
 8008c14:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008c18:	4311      	orrs	r1, r2
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	6952      	ldr	r2, [r2, #20]
 8008c1e:	3a01      	subs	r2, #1
 8008c20:	0612      	lsls	r2, r2, #24
 8008c22:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008c26:	430a      	orrs	r2, r1
 8008c28:	4924      	ldr	r1, [pc, #144]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008c2e:	4b23      	ldr	r3, [pc, #140]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c32:	f023 020c 	bic.w	r2, r3, #12
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	4920      	ldr	r1, [pc, #128]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008c40:	4b1e      	ldr	r3, [pc, #120]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	491c      	ldr	r1, [pc, #112]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c52:	4a1a      	ldr	r2, [pc, #104]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008c54:	f023 0310 	bic.w	r3, r3, #16
 8008c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c5a:	4b18      	ldr	r3, [pc, #96]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c62:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	69d2      	ldr	r2, [r2, #28]
 8008c6a:	00d2      	lsls	r2, r2, #3
 8008c6c:	4913      	ldr	r1, [pc, #76]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008c72:	4b12      	ldr	r3, [pc, #72]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c76:	4a11      	ldr	r2, [pc, #68]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008c78:	f043 0310 	orr.w	r3, r3, #16
 8008c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a0e      	ldr	r2, [pc, #56]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008c84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c88:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c8a:	f7f9 f917 	bl	8001ebc <HAL_GetTick>
 8008c8e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c90:	e008      	b.n	8008ca4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c92:	f7f9 f913 	bl	8001ebc <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e006      	b.n	8008cb2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ca4:	4b05      	ldr	r3, [pc, #20]	@ (8008cbc <RCCEx_PLL2_Config+0x128>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0f0      	beq.n	8008c92 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0

}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	46020c00 	.word	0x46020c00
 8008cc0:	80800000 	.word	0x80800000

08008cc4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008ccc:	4b47      	ldr	r3, [pc, #284]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a46      	ldr	r2, [pc, #280]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cd6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008cd8:	f7f9 f8f0 	bl	8001ebc <HAL_GetTick>
 8008cdc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cde:	e008      	b.n	8008cf2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ce0:	f7f9 f8ec 	bl	8001ebc <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d901      	bls.n	8008cf2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e077      	b.n	8008de2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1f0      	bne.n	8008ce0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008d06:	f023 0303 	bic.w	r3, r3, #3
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	6811      	ldr	r1, [r2, #0]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6852      	ldr	r2, [r2, #4]
 8008d12:	3a01      	subs	r2, #1
 8008d14:	0212      	lsls	r2, r2, #8
 8008d16:	430a      	orrs	r2, r1
 8008d18:	4934      	ldr	r1, [pc, #208]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	630b      	str	r3, [r1, #48]	@ 0x30
 8008d1e:	4b33      	ldr	r3, [pc, #204]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008d20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d22:	4b33      	ldr	r3, [pc, #204]	@ (8008df0 <RCCEx_PLL3_Config+0x12c>)
 8008d24:	4013      	ands	r3, r2
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	6892      	ldr	r2, [r2, #8]
 8008d2a:	3a01      	subs	r2, #1
 8008d2c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	68d2      	ldr	r2, [r2, #12]
 8008d34:	3a01      	subs	r2, #1
 8008d36:	0252      	lsls	r2, r2, #9
 8008d38:	b292      	uxth	r2, r2
 8008d3a:	4311      	orrs	r1, r2
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	6912      	ldr	r2, [r2, #16]
 8008d40:	3a01      	subs	r2, #1
 8008d42:	0412      	lsls	r2, r2, #16
 8008d44:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008d48:	4311      	orrs	r1, r2
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	6952      	ldr	r2, [r2, #20]
 8008d4e:	3a01      	subs	r2, #1
 8008d50:	0612      	lsls	r2, r2, #24
 8008d52:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008d56:	430a      	orrs	r2, r1
 8008d58:	4924      	ldr	r1, [pc, #144]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008d5e:	4b23      	ldr	r3, [pc, #140]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d62:	f023 020c 	bic.w	r2, r3, #12
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	4920      	ldr	r1, [pc, #128]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008d70:	4b1e      	ldr	r3, [pc, #120]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008d72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	491c      	ldr	r1, [pc, #112]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d82:	4a1a      	ldr	r2, [pc, #104]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008d84:	f023 0310 	bic.w	r3, r3, #16
 8008d88:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d8a:	4b18      	ldr	r3, [pc, #96]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d92:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	69d2      	ldr	r2, [r2, #28]
 8008d9a:	00d2      	lsls	r2, r2, #3
 8008d9c:	4913      	ldr	r1, [pc, #76]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008da2:	4b12      	ldr	r3, [pc, #72]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da6:	4a11      	ldr	r2, [pc, #68]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008da8:	f043 0310 	orr.w	r3, r3, #16
 8008dac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008dae:	4b0f      	ldr	r3, [pc, #60]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a0e      	ldr	r2, [pc, #56]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008db8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008dba:	f7f9 f87f 	bl	8001ebc <HAL_GetTick>
 8008dbe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008dc0:	e008      	b.n	8008dd4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008dc2:	f7f9 f87b 	bl	8001ebc <HAL_GetTick>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d901      	bls.n	8008dd4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e006      	b.n	8008de2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008dd4:	4b05      	ldr	r3, [pc, #20]	@ (8008dec <RCCEx_PLL3_Config+0x128>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d0f0      	beq.n	8008dc2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	46020c00 	.word	0x46020c00
 8008df0:	80800000 	.word	0x80800000

08008df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e049      	b.n	8008e9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d106      	bne.n	8008e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7f8 fbba 	bl	8001594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3304      	adds	r3, #4
 8008e30:	4619      	mov	r1, r3
 8008e32:	4610      	mov	r0, r2
 8008e34:	f000 fbe8 	bl	8009608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d001      	beq.n	8008ebc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e06a      	b.n	8008f92 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a35      	ldr	r2, [pc, #212]	@ (8008fa0 <HAL_TIM_Base_Start+0xfc>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d040      	beq.n	8008f50 <HAL_TIM_Base_Start+0xac>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a34      	ldr	r2, [pc, #208]	@ (8008fa4 <HAL_TIM_Base_Start+0x100>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d03b      	beq.n	8008f50 <HAL_TIM_Base_Start+0xac>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ee0:	d036      	beq.n	8008f50 <HAL_TIM_Base_Start+0xac>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008eea:	d031      	beq.n	8008f50 <HAL_TIM_Base_Start+0xac>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8008fa8 <HAL_TIM_Base_Start+0x104>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d02c      	beq.n	8008f50 <HAL_TIM_Base_Start+0xac>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a2c      	ldr	r2, [pc, #176]	@ (8008fac <HAL_TIM_Base_Start+0x108>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d027      	beq.n	8008f50 <HAL_TIM_Base_Start+0xac>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a2a      	ldr	r2, [pc, #168]	@ (8008fb0 <HAL_TIM_Base_Start+0x10c>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d022      	beq.n	8008f50 <HAL_TIM_Base_Start+0xac>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a29      	ldr	r2, [pc, #164]	@ (8008fb4 <HAL_TIM_Base_Start+0x110>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d01d      	beq.n	8008f50 <HAL_TIM_Base_Start+0xac>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a27      	ldr	r2, [pc, #156]	@ (8008fb8 <HAL_TIM_Base_Start+0x114>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d018      	beq.n	8008f50 <HAL_TIM_Base_Start+0xac>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a26      	ldr	r2, [pc, #152]	@ (8008fbc <HAL_TIM_Base_Start+0x118>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d013      	beq.n	8008f50 <HAL_TIM_Base_Start+0xac>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a24      	ldr	r2, [pc, #144]	@ (8008fc0 <HAL_TIM_Base_Start+0x11c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00e      	beq.n	8008f50 <HAL_TIM_Base_Start+0xac>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a23      	ldr	r2, [pc, #140]	@ (8008fc4 <HAL_TIM_Base_Start+0x120>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d009      	beq.n	8008f50 <HAL_TIM_Base_Start+0xac>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a21      	ldr	r2, [pc, #132]	@ (8008fc8 <HAL_TIM_Base_Start+0x124>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d004      	beq.n	8008f50 <HAL_TIM_Base_Start+0xac>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a20      	ldr	r2, [pc, #128]	@ (8008fcc <HAL_TIM_Base_Start+0x128>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d115      	bne.n	8008f7c <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689a      	ldr	r2, [r3, #8]
 8008f56:	4b1e      	ldr	r3, [pc, #120]	@ (8008fd0 <HAL_TIM_Base_Start+0x12c>)
 8008f58:	4013      	ands	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2b06      	cmp	r3, #6
 8008f60:	d015      	beq.n	8008f8e <HAL_TIM_Base_Start+0xea>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f68:	d011      	beq.n	8008f8e <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f042 0201 	orr.w	r2, r2, #1
 8008f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f7a:	e008      	b.n	8008f8e <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f042 0201 	orr.w	r2, r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	e000      	b.n	8008f90 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	40012c00 	.word	0x40012c00
 8008fa4:	50012c00 	.word	0x50012c00
 8008fa8:	40000400 	.word	0x40000400
 8008fac:	50000400 	.word	0x50000400
 8008fb0:	40000800 	.word	0x40000800
 8008fb4:	50000800 	.word	0x50000800
 8008fb8:	40000c00 	.word	0x40000c00
 8008fbc:	50000c00 	.word	0x50000c00
 8008fc0:	40013400 	.word	0x40013400
 8008fc4:	50013400 	.word	0x50013400
 8008fc8:	40014000 	.word	0x40014000
 8008fcc:	50014000 	.word	0x50014000
 8008fd0:	00010007 	.word	0x00010007

08008fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d001      	beq.n	8008fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e072      	b.n	80090d2 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2202      	movs	r2, #2
 8008ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68da      	ldr	r2, [r3, #12]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f042 0201 	orr.w	r2, r2, #1
 8009002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a35      	ldr	r2, [pc, #212]	@ (80090e0 <HAL_TIM_Base_Start_IT+0x10c>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d040      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0xbc>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a34      	ldr	r2, [pc, #208]	@ (80090e4 <HAL_TIM_Base_Start_IT+0x110>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d03b      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0xbc>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009020:	d036      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0xbc>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800902a:	d031      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0xbc>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a2d      	ldr	r2, [pc, #180]	@ (80090e8 <HAL_TIM_Base_Start_IT+0x114>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d02c      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0xbc>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a2c      	ldr	r2, [pc, #176]	@ (80090ec <HAL_TIM_Base_Start_IT+0x118>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d027      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0xbc>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a2a      	ldr	r2, [pc, #168]	@ (80090f0 <HAL_TIM_Base_Start_IT+0x11c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d022      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0xbc>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a29      	ldr	r2, [pc, #164]	@ (80090f4 <HAL_TIM_Base_Start_IT+0x120>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d01d      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0xbc>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a27      	ldr	r2, [pc, #156]	@ (80090f8 <HAL_TIM_Base_Start_IT+0x124>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d018      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0xbc>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a26      	ldr	r2, [pc, #152]	@ (80090fc <HAL_TIM_Base_Start_IT+0x128>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d013      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0xbc>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a24      	ldr	r2, [pc, #144]	@ (8009100 <HAL_TIM_Base_Start_IT+0x12c>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d00e      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0xbc>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a23      	ldr	r2, [pc, #140]	@ (8009104 <HAL_TIM_Base_Start_IT+0x130>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d009      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0xbc>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a21      	ldr	r2, [pc, #132]	@ (8009108 <HAL_TIM_Base_Start_IT+0x134>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d004      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0xbc>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a20      	ldr	r2, [pc, #128]	@ (800910c <HAL_TIM_Base_Start_IT+0x138>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d115      	bne.n	80090bc <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689a      	ldr	r2, [r3, #8]
 8009096:	4b1e      	ldr	r3, [pc, #120]	@ (8009110 <HAL_TIM_Base_Start_IT+0x13c>)
 8009098:	4013      	ands	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2b06      	cmp	r3, #6
 80090a0:	d015      	beq.n	80090ce <HAL_TIM_Base_Start_IT+0xfa>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090a8:	d011      	beq.n	80090ce <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f042 0201 	orr.w	r2, r2, #1
 80090b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ba:	e008      	b.n	80090ce <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f042 0201 	orr.w	r2, r2, #1
 80090ca:	601a      	str	r2, [r3, #0]
 80090cc:	e000      	b.n	80090d0 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	40012c00 	.word	0x40012c00
 80090e4:	50012c00 	.word	0x50012c00
 80090e8:	40000400 	.word	0x40000400
 80090ec:	50000400 	.word	0x50000400
 80090f0:	40000800 	.word	0x40000800
 80090f4:	50000800 	.word	0x50000800
 80090f8:	40000c00 	.word	0x40000c00
 80090fc:	50000c00 	.word	0x50000c00
 8009100:	40013400 	.word	0x40013400
 8009104:	50013400 	.word	0x50013400
 8009108:	40014000 	.word	0x40014000
 800910c:	50014000 	.word	0x50014000
 8009110:	00010007 	.word	0x00010007

08009114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	f003 0302 	and.w	r3, r3, #2
 8009132:	2b00      	cmp	r3, #0
 8009134:	d020      	beq.n	8009178 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f003 0302 	and.w	r3, r3, #2
 800913c:	2b00      	cmp	r3, #0
 800913e:	d01b      	beq.n	8009178 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f06f 0202 	mvn.w	r2, #2
 8009148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	f003 0303 	and.w	r3, r3, #3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fa34 	bl	80095cc <HAL_TIM_IC_CaptureCallback>
 8009164:	e005      	b.n	8009172 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fa26 	bl	80095b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fa37 	bl	80095e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	f003 0304 	and.w	r3, r3, #4
 800917e:	2b00      	cmp	r3, #0
 8009180:	d020      	beq.n	80091c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f003 0304 	and.w	r3, r3, #4
 8009188:	2b00      	cmp	r3, #0
 800918a:	d01b      	beq.n	80091c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f06f 0204 	mvn.w	r2, #4
 8009194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d003      	beq.n	80091b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fa0e 	bl	80095cc <HAL_TIM_IC_CaptureCallback>
 80091b0:	e005      	b.n	80091be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fa00 	bl	80095b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fa11 	bl	80095e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	f003 0308 	and.w	r3, r3, #8
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d020      	beq.n	8009210 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f003 0308 	and.w	r3, r3, #8
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01b      	beq.n	8009210 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f06f 0208 	mvn.w	r2, #8
 80091e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2204      	movs	r2, #4
 80091e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	f003 0303 	and.w	r3, r3, #3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f9e8 	bl	80095cc <HAL_TIM_IC_CaptureCallback>
 80091fc:	e005      	b.n	800920a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f9da 	bl	80095b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f9eb 	bl	80095e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f003 0310 	and.w	r3, r3, #16
 8009216:	2b00      	cmp	r3, #0
 8009218:	d020      	beq.n	800925c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f003 0310 	and.w	r3, r3, #16
 8009220:	2b00      	cmp	r3, #0
 8009222:	d01b      	beq.n	800925c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f06f 0210 	mvn.w	r2, #16
 800922c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2208      	movs	r2, #8
 8009232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f9c2 	bl	80095cc <HAL_TIM_IC_CaptureCallback>
 8009248:	e005      	b.n	8009256 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f9b4 	bl	80095b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f9c5 	bl	80095e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00c      	beq.n	8009280 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b00      	cmp	r3, #0
 800926e:	d007      	beq.n	8009280 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f06f 0201 	mvn.w	r2, #1
 8009278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7f7 fb0e 	bl	800089c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009286:	2b00      	cmp	r3, #0
 8009288:	d104      	bne.n	8009294 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00c      	beq.n	80092ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800929a:	2b00      	cmp	r3, #0
 800929c:	d007      	beq.n	80092ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80092a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fc15 	bl	8009ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00c      	beq.n	80092d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d007      	beq.n	80092d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80092ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fc0d 	bl	8009aec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00c      	beq.n	80092f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d007      	beq.n	80092f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80092ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f97f 	bl	80095f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	f003 0320 	and.w	r3, r3, #32
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00c      	beq.n	800931a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f003 0320 	and.w	r3, r3, #32
 8009306:	2b00      	cmp	r3, #0
 8009308:	d007      	beq.n	800931a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f06f 0220 	mvn.w	r2, #32
 8009312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fbd5 	bl	8009ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00c      	beq.n	800933e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d007      	beq.n	800933e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fbe1 	bl	8009b00 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00c      	beq.n	8009362 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d007      	beq.n	8009362 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800935a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fbd9 	bl	8009b14 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00c      	beq.n	8009386 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d007      	beq.n	8009386 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800937e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fbd1 	bl	8009b28 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00c      	beq.n	80093aa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d007      	beq.n	80093aa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80093a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fbc9 	bl	8009b3c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093aa:	bf00      	nop
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d101      	bne.n	80093d0 <HAL_TIM_ConfigClockSource+0x1c>
 80093cc:	2302      	movs	r3, #2
 80093ce:	e0e6      	b.n	800959e <HAL_TIM_ConfigClockSource+0x1ea>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2202      	movs	r2, #2
 80093dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80093ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80093f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a67      	ldr	r2, [pc, #412]	@ (80095a8 <HAL_TIM_ConfigClockSource+0x1f4>)
 800940a:	4293      	cmp	r3, r2
 800940c:	f000 80b1 	beq.w	8009572 <HAL_TIM_ConfigClockSource+0x1be>
 8009410:	4a65      	ldr	r2, [pc, #404]	@ (80095a8 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009412:	4293      	cmp	r3, r2
 8009414:	f200 80b6 	bhi.w	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
 8009418:	4a64      	ldr	r2, [pc, #400]	@ (80095ac <HAL_TIM_ConfigClockSource+0x1f8>)
 800941a:	4293      	cmp	r3, r2
 800941c:	f000 80a9 	beq.w	8009572 <HAL_TIM_ConfigClockSource+0x1be>
 8009420:	4a62      	ldr	r2, [pc, #392]	@ (80095ac <HAL_TIM_ConfigClockSource+0x1f8>)
 8009422:	4293      	cmp	r3, r2
 8009424:	f200 80ae 	bhi.w	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
 8009428:	4a61      	ldr	r2, [pc, #388]	@ (80095b0 <HAL_TIM_ConfigClockSource+0x1fc>)
 800942a:	4293      	cmp	r3, r2
 800942c:	f000 80a1 	beq.w	8009572 <HAL_TIM_ConfigClockSource+0x1be>
 8009430:	4a5f      	ldr	r2, [pc, #380]	@ (80095b0 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009432:	4293      	cmp	r3, r2
 8009434:	f200 80a6 	bhi.w	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
 8009438:	4a5e      	ldr	r2, [pc, #376]	@ (80095b4 <HAL_TIM_ConfigClockSource+0x200>)
 800943a:	4293      	cmp	r3, r2
 800943c:	f000 8099 	beq.w	8009572 <HAL_TIM_ConfigClockSource+0x1be>
 8009440:	4a5c      	ldr	r2, [pc, #368]	@ (80095b4 <HAL_TIM_ConfigClockSource+0x200>)
 8009442:	4293      	cmp	r3, r2
 8009444:	f200 809e 	bhi.w	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
 8009448:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800944c:	f000 8091 	beq.w	8009572 <HAL_TIM_ConfigClockSource+0x1be>
 8009450:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009454:	f200 8096 	bhi.w	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
 8009458:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800945c:	f000 8089 	beq.w	8009572 <HAL_TIM_ConfigClockSource+0x1be>
 8009460:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009464:	f200 808e 	bhi.w	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
 8009468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800946c:	d03e      	beq.n	80094ec <HAL_TIM_ConfigClockSource+0x138>
 800946e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009472:	f200 8087 	bhi.w	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
 8009476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800947a:	f000 8086 	beq.w	800958a <HAL_TIM_ConfigClockSource+0x1d6>
 800947e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009482:	d87f      	bhi.n	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
 8009484:	2b70      	cmp	r3, #112	@ 0x70
 8009486:	d01a      	beq.n	80094be <HAL_TIM_ConfigClockSource+0x10a>
 8009488:	2b70      	cmp	r3, #112	@ 0x70
 800948a:	d87b      	bhi.n	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
 800948c:	2b60      	cmp	r3, #96	@ 0x60
 800948e:	d050      	beq.n	8009532 <HAL_TIM_ConfigClockSource+0x17e>
 8009490:	2b60      	cmp	r3, #96	@ 0x60
 8009492:	d877      	bhi.n	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
 8009494:	2b50      	cmp	r3, #80	@ 0x50
 8009496:	d03c      	beq.n	8009512 <HAL_TIM_ConfigClockSource+0x15e>
 8009498:	2b50      	cmp	r3, #80	@ 0x50
 800949a:	d873      	bhi.n	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
 800949c:	2b40      	cmp	r3, #64	@ 0x40
 800949e:	d058      	beq.n	8009552 <HAL_TIM_ConfigClockSource+0x19e>
 80094a0:	2b40      	cmp	r3, #64	@ 0x40
 80094a2:	d86f      	bhi.n	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
 80094a4:	2b30      	cmp	r3, #48	@ 0x30
 80094a6:	d064      	beq.n	8009572 <HAL_TIM_ConfigClockSource+0x1be>
 80094a8:	2b30      	cmp	r3, #48	@ 0x30
 80094aa:	d86b      	bhi.n	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
 80094ac:	2b20      	cmp	r3, #32
 80094ae:	d060      	beq.n	8009572 <HAL_TIM_ConfigClockSource+0x1be>
 80094b0:	2b20      	cmp	r3, #32
 80094b2:	d867      	bhi.n	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d05c      	beq.n	8009572 <HAL_TIM_ConfigClockSource+0x1be>
 80094b8:	2b10      	cmp	r3, #16
 80094ba:	d05a      	beq.n	8009572 <HAL_TIM_ConfigClockSource+0x1be>
 80094bc:	e062      	b.n	8009584 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80094ce:	f000 fa17 	bl	8009900 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80094e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	609a      	str	r2, [r3, #8]
      break;
 80094ea:	e04f      	b.n	800958c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80094fc:	f000 fa00 	bl	8009900 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	689a      	ldr	r2, [r3, #8]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800950e:	609a      	str	r2, [r3, #8]
      break;
 8009510:	e03c      	b.n	800958c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800951e:	461a      	mov	r2, r3
 8009520:	f000 f972 	bl	8009808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2150      	movs	r1, #80	@ 0x50
 800952a:	4618      	mov	r0, r3
 800952c:	f000 f9cb 	bl	80098c6 <TIM_ITRx_SetConfig>
      break;
 8009530:	e02c      	b.n	800958c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800953e:	461a      	mov	r2, r3
 8009540:	f000 f991 	bl	8009866 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2160      	movs	r1, #96	@ 0x60
 800954a:	4618      	mov	r0, r3
 800954c:	f000 f9bb 	bl	80098c6 <TIM_ITRx_SetConfig>
      break;
 8009550:	e01c      	b.n	800958c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800955e:	461a      	mov	r2, r3
 8009560:	f000 f952 	bl	8009808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2140      	movs	r1, #64	@ 0x40
 800956a:	4618      	mov	r0, r3
 800956c:	f000 f9ab 	bl	80098c6 <TIM_ITRx_SetConfig>
      break;
 8009570:	e00c      	b.n	800958c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4619      	mov	r1, r3
 800957c:	4610      	mov	r0, r2
 800957e:	f000 f9a2 	bl	80098c6 <TIM_ITRx_SetConfig>
      break;
 8009582:	e003      	b.n	800958c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	73fb      	strb	r3, [r7, #15]
      break;
 8009588:	e000      	b.n	800958c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800958a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800959c:	7bfb      	ldrb	r3, [r7, #15]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	00100070 	.word	0x00100070
 80095ac:	00100040 	.word	0x00100040
 80095b0:	00100030 	.word	0x00100030
 80095b4:	00100020 	.word	0x00100020

080095b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a6b      	ldr	r2, [pc, #428]	@ (80097c8 <TIM_Base_SetConfig+0x1c0>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d02b      	beq.n	8009678 <TIM_Base_SetConfig+0x70>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a6a      	ldr	r2, [pc, #424]	@ (80097cc <TIM_Base_SetConfig+0x1c4>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d027      	beq.n	8009678 <TIM_Base_SetConfig+0x70>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800962e:	d023      	beq.n	8009678 <TIM_Base_SetConfig+0x70>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009636:	d01f      	beq.n	8009678 <TIM_Base_SetConfig+0x70>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a65      	ldr	r2, [pc, #404]	@ (80097d0 <TIM_Base_SetConfig+0x1c8>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d01b      	beq.n	8009678 <TIM_Base_SetConfig+0x70>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a64      	ldr	r2, [pc, #400]	@ (80097d4 <TIM_Base_SetConfig+0x1cc>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d017      	beq.n	8009678 <TIM_Base_SetConfig+0x70>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a63      	ldr	r2, [pc, #396]	@ (80097d8 <TIM_Base_SetConfig+0x1d0>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d013      	beq.n	8009678 <TIM_Base_SetConfig+0x70>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a62      	ldr	r2, [pc, #392]	@ (80097dc <TIM_Base_SetConfig+0x1d4>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d00f      	beq.n	8009678 <TIM_Base_SetConfig+0x70>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a61      	ldr	r2, [pc, #388]	@ (80097e0 <TIM_Base_SetConfig+0x1d8>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d00b      	beq.n	8009678 <TIM_Base_SetConfig+0x70>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a60      	ldr	r2, [pc, #384]	@ (80097e4 <TIM_Base_SetConfig+0x1dc>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d007      	beq.n	8009678 <TIM_Base_SetConfig+0x70>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a5f      	ldr	r2, [pc, #380]	@ (80097e8 <TIM_Base_SetConfig+0x1e0>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d003      	beq.n	8009678 <TIM_Base_SetConfig+0x70>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a5e      	ldr	r2, [pc, #376]	@ (80097ec <TIM_Base_SetConfig+0x1e4>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d108      	bne.n	800968a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800967e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4313      	orrs	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a4e      	ldr	r2, [pc, #312]	@ (80097c8 <TIM_Base_SetConfig+0x1c0>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d043      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a4d      	ldr	r2, [pc, #308]	@ (80097cc <TIM_Base_SetConfig+0x1c4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d03f      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096a0:	d03b      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096a8:	d037      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a48      	ldr	r2, [pc, #288]	@ (80097d0 <TIM_Base_SetConfig+0x1c8>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d033      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a47      	ldr	r2, [pc, #284]	@ (80097d4 <TIM_Base_SetConfig+0x1cc>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d02f      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a46      	ldr	r2, [pc, #280]	@ (80097d8 <TIM_Base_SetConfig+0x1d0>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d02b      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a45      	ldr	r2, [pc, #276]	@ (80097dc <TIM_Base_SetConfig+0x1d4>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d027      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a44      	ldr	r2, [pc, #272]	@ (80097e0 <TIM_Base_SetConfig+0x1d8>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d023      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a43      	ldr	r2, [pc, #268]	@ (80097e4 <TIM_Base_SetConfig+0x1dc>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d01f      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a42      	ldr	r2, [pc, #264]	@ (80097e8 <TIM_Base_SetConfig+0x1e0>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d01b      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a41      	ldr	r2, [pc, #260]	@ (80097ec <TIM_Base_SetConfig+0x1e4>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d017      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a40      	ldr	r2, [pc, #256]	@ (80097f0 <TIM_Base_SetConfig+0x1e8>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d013      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a3f      	ldr	r2, [pc, #252]	@ (80097f4 <TIM_Base_SetConfig+0x1ec>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d00f      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a3e      	ldr	r2, [pc, #248]	@ (80097f8 <TIM_Base_SetConfig+0x1f0>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d00b      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a3d      	ldr	r2, [pc, #244]	@ (80097fc <TIM_Base_SetConfig+0x1f4>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d007      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a3c      	ldr	r2, [pc, #240]	@ (8009800 <TIM_Base_SetConfig+0x1f8>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d003      	beq.n	800971a <TIM_Base_SetConfig+0x112>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a3b      	ldr	r2, [pc, #236]	@ (8009804 <TIM_Base_SetConfig+0x1fc>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d108      	bne.n	800972c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	4313      	orrs	r3, r2
 800972a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	4313      	orrs	r3, r2
 8009738:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a1e      	ldr	r2, [pc, #120]	@ (80097c8 <TIM_Base_SetConfig+0x1c0>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d023      	beq.n	800979a <TIM_Base_SetConfig+0x192>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a1d      	ldr	r2, [pc, #116]	@ (80097cc <TIM_Base_SetConfig+0x1c4>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d01f      	beq.n	800979a <TIM_Base_SetConfig+0x192>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a22      	ldr	r2, [pc, #136]	@ (80097e8 <TIM_Base_SetConfig+0x1e0>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d01b      	beq.n	800979a <TIM_Base_SetConfig+0x192>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a21      	ldr	r2, [pc, #132]	@ (80097ec <TIM_Base_SetConfig+0x1e4>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d017      	beq.n	800979a <TIM_Base_SetConfig+0x192>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a20      	ldr	r2, [pc, #128]	@ (80097f0 <TIM_Base_SetConfig+0x1e8>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d013      	beq.n	800979a <TIM_Base_SetConfig+0x192>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a1f      	ldr	r2, [pc, #124]	@ (80097f4 <TIM_Base_SetConfig+0x1ec>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d00f      	beq.n	800979a <TIM_Base_SetConfig+0x192>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a1e      	ldr	r2, [pc, #120]	@ (80097f8 <TIM_Base_SetConfig+0x1f0>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d00b      	beq.n	800979a <TIM_Base_SetConfig+0x192>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a1d      	ldr	r2, [pc, #116]	@ (80097fc <TIM_Base_SetConfig+0x1f4>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d007      	beq.n	800979a <TIM_Base_SetConfig+0x192>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a1c      	ldr	r2, [pc, #112]	@ (8009800 <TIM_Base_SetConfig+0x1f8>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d003      	beq.n	800979a <TIM_Base_SetConfig+0x192>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a1b      	ldr	r2, [pc, #108]	@ (8009804 <TIM_Base_SetConfig+0x1fc>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d103      	bne.n	80097a2 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	691a      	ldr	r2, [r3, #16]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f043 0204 	orr.w	r2, r3, #4
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	601a      	str	r2, [r3, #0]
}
 80097ba:	bf00      	nop
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	40012c00 	.word	0x40012c00
 80097cc:	50012c00 	.word	0x50012c00
 80097d0:	40000400 	.word	0x40000400
 80097d4:	50000400 	.word	0x50000400
 80097d8:	40000800 	.word	0x40000800
 80097dc:	50000800 	.word	0x50000800
 80097e0:	40000c00 	.word	0x40000c00
 80097e4:	50000c00 	.word	0x50000c00
 80097e8:	40013400 	.word	0x40013400
 80097ec:	50013400 	.word	0x50013400
 80097f0:	40014000 	.word	0x40014000
 80097f4:	50014000 	.word	0x50014000
 80097f8:	40014400 	.word	0x40014400
 80097fc:	50014400 	.word	0x50014400
 8009800:	40014800 	.word	0x40014800
 8009804:	50014800 	.word	0x50014800

08009808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6a1b      	ldr	r3, [r3, #32]
 8009818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	f023 0201 	bic.w	r2, r3, #1
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	011b      	lsls	r3, r3, #4
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	4313      	orrs	r3, r2
 800983c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f023 030a 	bic.w	r3, r3, #10
 8009844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009846:	697a      	ldr	r2, [r7, #20]
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	4313      	orrs	r3, r2
 800984c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	621a      	str	r2, [r3, #32]
}
 800985a:	bf00      	nop
 800985c:	371c      	adds	r7, #28
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009866:	b480      	push	{r7}
 8009868:	b087      	sub	sp, #28
 800986a:	af00      	add	r7, sp, #0
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6a1b      	ldr	r3, [r3, #32]
 800987c:	f023 0210 	bic.w	r2, r3, #16
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009890:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	031b      	lsls	r3, r3, #12
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	4313      	orrs	r3, r2
 800989a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80098a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	011b      	lsls	r3, r3, #4
 80098a8:	697a      	ldr	r2, [r7, #20]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	621a      	str	r2, [r3, #32]
}
 80098ba:	bf00      	nop
 80098bc:	371c      	adds	r7, #28
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr

080098c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b085      	sub	sp, #20
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80098dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098e2:	683a      	ldr	r2, [r7, #0]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	f043 0307 	orr.w	r3, r3, #7
 80098ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	609a      	str	r2, [r3, #8]
}
 80098f4:	bf00      	nop
 80098f6:	3714      	adds	r7, #20
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009900:	b480      	push	{r7}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800991a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	021a      	lsls	r2, r3, #8
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	431a      	orrs	r2, r3
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	4313      	orrs	r3, r2
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	4313      	orrs	r3, r2
 800992c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	609a      	str	r2, [r3, #8]
}
 8009934:	bf00      	nop
 8009936:	371c      	adds	r7, #28
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009950:	2b01      	cmp	r3, #1
 8009952:	d101      	bne.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009954:	2302      	movs	r3, #2
 8009956:	e097      	b.n	8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2202      	movs	r2, #2
 8009964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a45      	ldr	r2, [pc, #276]	@ (8009a94 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d00e      	beq.n	80099a0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a44      	ldr	r2, [pc, #272]	@ (8009a98 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d009      	beq.n	80099a0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a42      	ldr	r2, [pc, #264]	@ (8009a9c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d004      	beq.n	80099a0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a41      	ldr	r2, [pc, #260]	@ (8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d108      	bne.n	80099b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80099a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80099b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a2f      	ldr	r2, [pc, #188]	@ (8009a94 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d040      	beq.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a2e      	ldr	r2, [pc, #184]	@ (8009a98 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d03b      	beq.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ec:	d036      	beq.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099f6:	d031      	beq.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a29      	ldr	r2, [pc, #164]	@ (8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d02c      	beq.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a28      	ldr	r2, [pc, #160]	@ (8009aa8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d027      	beq.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a26      	ldr	r2, [pc, #152]	@ (8009aac <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d022      	beq.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a25      	ldr	r2, [pc, #148]	@ (8009ab0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d01d      	beq.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a23      	ldr	r2, [pc, #140]	@ (8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d018      	beq.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a22      	ldr	r2, [pc, #136]	@ (8009ab8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d013      	beq.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a18      	ldr	r2, [pc, #96]	@ (8009a9c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d00e      	beq.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a17      	ldr	r2, [pc, #92]	@ (8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d009      	beq.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8009abc <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d004      	beq.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a1a      	ldr	r2, [pc, #104]	@ (8009ac0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d10c      	bne.n	8009a76 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	40012c00 	.word	0x40012c00
 8009a98:	50012c00 	.word	0x50012c00
 8009a9c:	40013400 	.word	0x40013400
 8009aa0:	50013400 	.word	0x50013400
 8009aa4:	40000400 	.word	0x40000400
 8009aa8:	50000400 	.word	0x50000400
 8009aac:	40000800 	.word	0x40000800
 8009ab0:	50000800 	.word	0x50000800
 8009ab4:	40000c00 	.word	0x40000c00
 8009ab8:	50000c00 	.word	0x50000c00
 8009abc:	40014000 	.word	0x40014000
 8009ac0:	50014000 	.word	0x50014000

08009ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e042      	b.n	8009be8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d106      	bne.n	8009b7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f83b 	bl	8009bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2224      	movs	r2, #36	@ 0x24
 8009b7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 0201 	bic.w	r2, r2, #1
 8009b90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d002      	beq.n	8009ba0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 fa72 	bl	800a084 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f8cd 	bl	8009d40 <UART_SetConfig>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d101      	bne.n	8009bb0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	e01b      	b.n	8009be8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	689a      	ldr	r2, [r3, #8]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f042 0201 	orr.w	r2, r2, #1
 8009bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 faf1 	bl	800a1c8 <UART_CheckIdleState>
 8009be6:	4603      	mov	r3, r0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b08a      	sub	sp, #40	@ 0x28
 8009c08:	af02      	add	r7, sp, #8
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	603b      	str	r3, [r7, #0]
 8009c10:	4613      	mov	r3, r2
 8009c12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	f040 808b 	bne.w	8009d36 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <HAL_UART_Transmit+0x28>
 8009c26:	88fb      	ldrh	r3, [r7, #6]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e083      	b.n	8009d38 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c3a:	2b80      	cmp	r3, #128	@ 0x80
 8009c3c:	d107      	bne.n	8009c4e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689a      	ldr	r2, [r3, #8]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009c4c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2221      	movs	r2, #33	@ 0x21
 8009c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c5e:	f7f8 f92d 	bl	8001ebc <HAL_GetTick>
 8009c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	88fa      	ldrh	r2, [r7, #6]
 8009c68:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	88fa      	ldrh	r2, [r7, #6]
 8009c70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c7c:	d108      	bne.n	8009c90 <HAL_UART_Transmit+0x8c>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d104      	bne.n	8009c90 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	61bb      	str	r3, [r7, #24]
 8009c8e:	e003      	b.n	8009c98 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c94:	2300      	movs	r3, #0
 8009c96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c98:	e030      	b.n	8009cfc <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	9300      	str	r3, [sp, #0]
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2180      	movs	r1, #128	@ 0x80
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 fb39 	bl	800a31c <UART_WaitOnFlagUntilTimeout>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d005      	beq.n	8009cbc <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e03d      	b.n	8009d38 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10b      	bne.n	8009cda <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cd0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	3302      	adds	r3, #2
 8009cd6:	61bb      	str	r3, [r7, #24]
 8009cd8:	e007      	b.n	8009cea <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	781a      	ldrb	r2, [r3, #0]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1c8      	bne.n	8009c9a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	2140      	movs	r1, #64	@ 0x40
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f000 fb02 	bl	800a31c <UART_WaitOnFlagUntilTimeout>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d005      	beq.n	8009d2a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2220      	movs	r2, #32
 8009d22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e006      	b.n	8009d38 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2220      	movs	r2, #32
 8009d2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	e000      	b.n	8009d38 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009d36:	2302      	movs	r3, #2
  }
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3720      	adds	r7, #32
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d44:	b094      	sub	sp, #80	@ 0x50
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	4b7e      	ldr	r3, [pc, #504]	@ (8009f50 <UART_SetConfig+0x210>)
 8009d56:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5a:	689a      	ldr	r2, [r3, #8]
 8009d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	431a      	orrs	r2, r3
 8009d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	431a      	orrs	r2, r3
 8009d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4977      	ldr	r1, [pc, #476]	@ (8009f54 <UART_SetConfig+0x214>)
 8009d78:	4019      	ands	r1, r3
 8009d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d80:	430b      	orrs	r3, r1
 8009d82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d90:	68d9      	ldr	r1, [r3, #12]
 8009d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	ea40 0301 	orr.w	r3, r0, r1
 8009d9a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	4b6a      	ldr	r3, [pc, #424]	@ (8009f50 <UART_SetConfig+0x210>)
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d009      	beq.n	8009dc0 <UART_SetConfig+0x80>
 8009dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	4b69      	ldr	r3, [pc, #420]	@ (8009f58 <UART_SetConfig+0x218>)
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d004      	beq.n	8009dc0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db8:	6a1a      	ldr	r2, [r3, #32]
 8009dba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009dca:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dd4:	430b      	orrs	r3, r1
 8009dd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dde:	f023 000f 	bic.w	r0, r3, #15
 8009de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	ea40 0301 	orr.w	r3, r0, r1
 8009dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	4b59      	ldr	r3, [pc, #356]	@ (8009f5c <UART_SetConfig+0x21c>)
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d102      	bne.n	8009e00 <UART_SetConfig+0xc0>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dfe:	e029      	b.n	8009e54 <UART_SetConfig+0x114>
 8009e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	4b56      	ldr	r3, [pc, #344]	@ (8009f60 <UART_SetConfig+0x220>)
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d102      	bne.n	8009e10 <UART_SetConfig+0xd0>
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e0e:	e021      	b.n	8009e54 <UART_SetConfig+0x114>
 8009e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	4b53      	ldr	r3, [pc, #332]	@ (8009f64 <UART_SetConfig+0x224>)
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d102      	bne.n	8009e20 <UART_SetConfig+0xe0>
 8009e1a:	2304      	movs	r3, #4
 8009e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e1e:	e019      	b.n	8009e54 <UART_SetConfig+0x114>
 8009e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	4b50      	ldr	r3, [pc, #320]	@ (8009f68 <UART_SetConfig+0x228>)
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d102      	bne.n	8009e30 <UART_SetConfig+0xf0>
 8009e2a:	2308      	movs	r3, #8
 8009e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e2e:	e011      	b.n	8009e54 <UART_SetConfig+0x114>
 8009e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	4b4d      	ldr	r3, [pc, #308]	@ (8009f6c <UART_SetConfig+0x22c>)
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d102      	bne.n	8009e40 <UART_SetConfig+0x100>
 8009e3a:	2310      	movs	r3, #16
 8009e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e3e:	e009      	b.n	8009e54 <UART_SetConfig+0x114>
 8009e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	4b42      	ldr	r3, [pc, #264]	@ (8009f50 <UART_SetConfig+0x210>)
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d102      	bne.n	8009e50 <UART_SetConfig+0x110>
 8009e4a:	2320      	movs	r3, #32
 8009e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e4e:	e001      	b.n	8009e54 <UART_SetConfig+0x114>
 8009e50:	2300      	movs	r3, #0
 8009e52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	4b3d      	ldr	r3, [pc, #244]	@ (8009f50 <UART_SetConfig+0x210>)
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d005      	beq.n	8009e6a <UART_SetConfig+0x12a>
 8009e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	4b3d      	ldr	r3, [pc, #244]	@ (8009f58 <UART_SetConfig+0x218>)
 8009e64:	429a      	cmp	r2, r3
 8009e66:	f040 8085 	bne.w	8009f74 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	623b      	str	r3, [r7, #32]
 8009e70:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009e76:	f7fd fcd7 	bl	8007828 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e7a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	f000 80e8 	beq.w	800a054 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e88:	4a39      	ldr	r2, [pc, #228]	@ (8009f70 <UART_SetConfig+0x230>)
 8009e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e92:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e96:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e9a:	685a      	ldr	r2, [r3, #4]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	005b      	lsls	r3, r3, #1
 8009ea0:	4413      	add	r3, r2
 8009ea2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d305      	bcc.n	8009eb4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009eae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d903      	bls.n	8009ebc <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009eba:	e048      	b.n	8009f4e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	61bb      	str	r3, [r7, #24]
 8009ec2:	61fa      	str	r2, [r7, #28]
 8009ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec8:	4a29      	ldr	r2, [pc, #164]	@ (8009f70 <UART_SetConfig+0x230>)
 8009eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	613b      	str	r3, [r7, #16]
 8009ed4:	617a      	str	r2, [r7, #20]
 8009ed6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009eda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ede:	f7f6 f9cb 	bl	8000278 <__aeabi_uldivmod>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4610      	mov	r0, r2
 8009ee8:	4619      	mov	r1, r3
 8009eea:	f04f 0200 	mov.w	r2, #0
 8009eee:	f04f 0300 	mov.w	r3, #0
 8009ef2:	020b      	lsls	r3, r1, #8
 8009ef4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ef8:	0202      	lsls	r2, r0, #8
 8009efa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009efc:	6849      	ldr	r1, [r1, #4]
 8009efe:	0849      	lsrs	r1, r1, #1
 8009f00:	2000      	movs	r0, #0
 8009f02:	460c      	mov	r4, r1
 8009f04:	4605      	mov	r5, r0
 8009f06:	eb12 0804 	adds.w	r8, r2, r4
 8009f0a:	eb43 0905 	adc.w	r9, r3, r5
 8009f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	60bb      	str	r3, [r7, #8]
 8009f16:	60fa      	str	r2, [r7, #12]
 8009f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	4649      	mov	r1, r9
 8009f20:	f7f6 f9aa 	bl	8000278 <__aeabi_uldivmod>
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	4613      	mov	r3, r2
 8009f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f32:	d308      	bcc.n	8009f46 <UART_SetConfig+0x206>
 8009f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f3a:	d204      	bcs.n	8009f46 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8009f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f42:	60da      	str	r2, [r3, #12]
 8009f44:	e003      	b.n	8009f4e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009f4c:	e082      	b.n	800a054 <UART_SetConfig+0x314>
 8009f4e:	e081      	b.n	800a054 <UART_SetConfig+0x314>
 8009f50:	46002400 	.word	0x46002400
 8009f54:	cfff69f3 	.word	0xcfff69f3
 8009f58:	56002400 	.word	0x56002400
 8009f5c:	40013800 	.word	0x40013800
 8009f60:	40004400 	.word	0x40004400
 8009f64:	40004800 	.word	0x40004800
 8009f68:	40004c00 	.word	0x40004c00
 8009f6c:	40005000 	.word	0x40005000
 8009f70:	0800b894 	.word	0x0800b894
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f76:	69db      	ldr	r3, [r3, #28]
 8009f78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f7c:	d13c      	bne.n	8009ff8 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f80:	2200      	movs	r2, #0
 8009f82:	603b      	str	r3, [r7, #0]
 8009f84:	607a      	str	r2, [r7, #4]
 8009f86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f8a:	f7fd fc4d 	bl	8007828 <HAL_RCCEx_GetPeriphCLKFreq>
 8009f8e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d05e      	beq.n	800a054 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9a:	4a39      	ldr	r2, [pc, #228]	@ (800a080 <UART_SetConfig+0x340>)
 8009f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fa8:	005a      	lsls	r2, r3, #1
 8009faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	085b      	lsrs	r3, r3, #1
 8009fb0:	441a      	add	r2, r3
 8009fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fbe:	2b0f      	cmp	r3, #15
 8009fc0:	d916      	bls.n	8009ff0 <UART_SetConfig+0x2b0>
 8009fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fc8:	d212      	bcs.n	8009ff0 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	f023 030f 	bic.w	r3, r3, #15
 8009fd2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fd6:	085b      	lsrs	r3, r3, #1
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	f003 0307 	and.w	r3, r3, #7
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009fec:	60da      	str	r2, [r3, #12]
 8009fee:	e031      	b.n	800a054 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009ff6:	e02d      	b.n	800a054 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009ff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	469a      	mov	sl, r3
 8009ffe:	4693      	mov	fp, r2
 800a000:	4650      	mov	r0, sl
 800a002:	4659      	mov	r1, fp
 800a004:	f7fd fc10 	bl	8007828 <HAL_RCCEx_GetPeriphCLKFreq>
 800a008:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a00a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d021      	beq.n	800a054 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a014:	4a1a      	ldr	r2, [pc, #104]	@ (800a080 <UART_SetConfig+0x340>)
 800a016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a01a:	461a      	mov	r2, r3
 800a01c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a01e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	085b      	lsrs	r3, r3, #1
 800a028:	441a      	add	r2, r3
 800a02a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a032:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a036:	2b0f      	cmp	r3, #15
 800a038:	d909      	bls.n	800a04e <UART_SetConfig+0x30e>
 800a03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a03c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a040:	d205      	bcs.n	800a04e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a044:	b29a      	uxth	r2, r3
 800a046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	60da      	str	r2, [r3, #12]
 800a04c:	e002      	b.n	800a054 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a056:	2201      	movs	r2, #1
 800a058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a05e:	2201      	movs	r2, #1
 800a060:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a066:	2200      	movs	r2, #0
 800a068:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a06a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a06c:	2200      	movs	r2, #0
 800a06e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a070:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a074:	4618      	mov	r0, r3
 800a076:	3750      	adds	r7, #80	@ 0x50
 800a078:	46bd      	mov	sp, r7
 800a07a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a07e:	bf00      	nop
 800a080:	0800b894 	.word	0x0800b894

0800a084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a090:	f003 0308 	and.w	r3, r3, #8
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00a      	beq.n	800a0ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	430a      	orrs	r2, r1
 800a0ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00a      	beq.n	800a0d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d4:	f003 0302 	and.w	r3, r3, #2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00a      	beq.n	800a0f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f6:	f003 0304 	and.w	r3, r3, #4
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	430a      	orrs	r2, r1
 800a112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a118:	f003 0310 	and.w	r3, r3, #16
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00a      	beq.n	800a136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13a:	f003 0320 	and.w	r3, r3, #32
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00a      	beq.n	800a158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	430a      	orrs	r2, r1
 800a156:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a15c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a160:	2b00      	cmp	r3, #0
 800a162:	d01a      	beq.n	800a19a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	430a      	orrs	r2, r1
 800a178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a17e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a182:	d10a      	bne.n	800a19a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	430a      	orrs	r2, r1
 800a198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a19e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00a      	beq.n	800a1bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	605a      	str	r2, [r3, #4]
  }
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b098      	sub	sp, #96	@ 0x60
 800a1cc:	af02      	add	r7, sp, #8
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1d8:	f7f7 fe70 	bl	8001ebc <HAL_GetTick>
 800a1dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0308 	and.w	r3, r3, #8
 800a1e8:	2b08      	cmp	r3, #8
 800a1ea:	d12f      	bne.n	800a24c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f88e 	bl	800a31c <UART_WaitOnFlagUntilTimeout>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d022      	beq.n	800a24c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20e:	e853 3f00 	ldrex	r3, [r3]
 800a212:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a216:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a21a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	461a      	mov	r2, r3
 800a222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a224:	647b      	str	r3, [r7, #68]	@ 0x44
 800a226:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a228:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a22a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a22c:	e841 2300 	strex	r3, r2, [r1]
 800a230:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1e6      	bne.n	800a206 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2220      	movs	r2, #32
 800a23c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a248:	2303      	movs	r3, #3
 800a24a:	e063      	b.n	800a314 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 0304 	and.w	r3, r3, #4
 800a256:	2b04      	cmp	r3, #4
 800a258:	d149      	bne.n	800a2ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a25a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a262:	2200      	movs	r2, #0
 800a264:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f857 	bl	800a31c <UART_WaitOnFlagUntilTimeout>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d03c      	beq.n	800a2ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27c:	e853 3f00 	ldrex	r3, [r3]
 800a280:	623b      	str	r3, [r7, #32]
   return(result);
 800a282:	6a3b      	ldr	r3, [r7, #32]
 800a284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a288:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	461a      	mov	r2, r3
 800a290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a292:	633b      	str	r3, [r7, #48]	@ 0x30
 800a294:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a29a:	e841 2300 	strex	r3, r2, [r1]
 800a29e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1e6      	bne.n	800a274 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3308      	adds	r3, #8
 800a2ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	e853 3f00 	ldrex	r3, [r3]
 800a2b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f023 0301 	bic.w	r3, r3, #1
 800a2bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2c6:	61fa      	str	r2, [r7, #28]
 800a2c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ca:	69b9      	ldr	r1, [r7, #24]
 800a2cc:	69fa      	ldr	r2, [r7, #28]
 800a2ce:	e841 2300 	strex	r3, r2, [r1]
 800a2d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1e5      	bne.n	800a2a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2220      	movs	r2, #32
 800a2de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	e012      	b.n	800a314 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2220      	movs	r2, #32
 800a2f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2220      	movs	r2, #32
 800a2fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3758      	adds	r7, #88	@ 0x58
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	603b      	str	r3, [r7, #0]
 800a328:	4613      	mov	r3, r2
 800a32a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a32c:	e04f      	b.n	800a3ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a334:	d04b      	beq.n	800a3ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a336:	f7f7 fdc1 	bl	8001ebc <HAL_GetTick>
 800a33a:	4602      	mov	r2, r0
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	69ba      	ldr	r2, [r7, #24]
 800a342:	429a      	cmp	r2, r3
 800a344:	d302      	bcc.n	800a34c <UART_WaitOnFlagUntilTimeout+0x30>
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e04e      	b.n	800a3ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 0304 	and.w	r3, r3, #4
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d037      	beq.n	800a3ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	2b80      	cmp	r3, #128	@ 0x80
 800a362:	d034      	beq.n	800a3ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	2b40      	cmp	r3, #64	@ 0x40
 800a368:	d031      	beq.n	800a3ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	f003 0308 	and.w	r3, r3, #8
 800a374:	2b08      	cmp	r3, #8
 800a376:	d110      	bne.n	800a39a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2208      	movs	r2, #8
 800a37e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 f838 	bl	800a3f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2208      	movs	r2, #8
 800a38a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e029      	b.n	800a3ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	69db      	ldr	r3, [r3, #28]
 800a3a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3a8:	d111      	bne.n	800a3ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 f81e 	bl	800a3f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2220      	movs	r2, #32
 800a3be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e00f      	b.n	800a3ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	69da      	ldr	r2, [r3, #28]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	bf0c      	ite	eq
 800a3de:	2301      	moveq	r3, #1
 800a3e0:	2300      	movne	r3, #0
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	79fb      	ldrb	r3, [r7, #7]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d0a0      	beq.n	800a32e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b095      	sub	sp, #84	@ 0x54
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a406:	e853 3f00 	ldrex	r3, [r3]
 800a40a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	461a      	mov	r2, r3
 800a41a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a41c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a41e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a420:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a422:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a424:	e841 2300 	strex	r3, r2, [r1]
 800a428:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1e6      	bne.n	800a3fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3308      	adds	r3, #8
 800a436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a438:	6a3b      	ldr	r3, [r7, #32]
 800a43a:	e853 3f00 	ldrex	r3, [r3]
 800a43e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a446:	f023 0301 	bic.w	r3, r3, #1
 800a44a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3308      	adds	r3, #8
 800a452:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a454:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a456:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a458:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a45a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a45c:	e841 2300 	strex	r3, r2, [r1]
 800a460:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1e3      	bne.n	800a430 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d118      	bne.n	800a4a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	e853 3f00 	ldrex	r3, [r3]
 800a47c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f023 0310 	bic.w	r3, r3, #16
 800a484:	647b      	str	r3, [r7, #68]	@ 0x44
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	461a      	mov	r2, r3
 800a48c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a48e:	61bb      	str	r3, [r7, #24]
 800a490:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a492:	6979      	ldr	r1, [r7, #20]
 800a494:	69ba      	ldr	r2, [r7, #24]
 800a496:	e841 2300 	strex	r3, r2, [r1]
 800a49a:	613b      	str	r3, [r7, #16]
   return(result);
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1e6      	bne.n	800a470 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2220      	movs	r2, #32
 800a4a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a4b6:	bf00      	nop
 800a4b8:	3754      	adds	r7, #84	@ 0x54
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <std>:
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	b510      	push	{r4, lr}
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	6083      	str	r3, [r0, #8]
 800a4cc:	8181      	strh	r1, [r0, #12]
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	6643      	str	r3, [r0, #100]	@ 0x64
 800a4d2:	81c2      	strh	r2, [r0, #14]
 800a4d4:	2208      	movs	r2, #8
 800a4d6:	6183      	str	r3, [r0, #24]
 800a4d8:	e9c0 3300 	strd	r3, r3, [r0]
 800a4dc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4e0:	305c      	adds	r0, #92	@ 0x5c
 800a4e2:	f000 f906 	bl	800a6f2 <memset>
 800a4e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a51c <std+0x58>)
 800a4e8:	6224      	str	r4, [r4, #32]
 800a4ea:	6263      	str	r3, [r4, #36]	@ 0x24
 800a4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a520 <std+0x5c>)
 800a4ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a524 <std+0x60>)
 800a4f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a4f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a528 <std+0x64>)
 800a4f6:	6323      	str	r3, [r4, #48]	@ 0x30
 800a4f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a52c <std+0x68>)
 800a4fa:	429c      	cmp	r4, r3
 800a4fc:	d006      	beq.n	800a50c <std+0x48>
 800a4fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a502:	4294      	cmp	r4, r2
 800a504:	d002      	beq.n	800a50c <std+0x48>
 800a506:	33d0      	adds	r3, #208	@ 0xd0
 800a508:	429c      	cmp	r4, r3
 800a50a:	d105      	bne.n	800a518 <std+0x54>
 800a50c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a514:	f000 b966 	b.w	800a7e4 <__retarget_lock_init_recursive>
 800a518:	bd10      	pop	{r4, pc}
 800a51a:	bf00      	nop
 800a51c:	0800a66d 	.word	0x0800a66d
 800a520:	0800a68f 	.word	0x0800a68f
 800a524:	0800a6c7 	.word	0x0800a6c7
 800a528:	0800a6eb 	.word	0x0800a6eb
 800a52c:	20008a68 	.word	0x20008a68

0800a530 <stdio_exit_handler>:
 800a530:	4a02      	ldr	r2, [pc, #8]	@ (800a53c <stdio_exit_handler+0xc>)
 800a532:	4903      	ldr	r1, [pc, #12]	@ (800a540 <stdio_exit_handler+0x10>)
 800a534:	4803      	ldr	r0, [pc, #12]	@ (800a544 <stdio_exit_handler+0x14>)
 800a536:	f000 b869 	b.w	800a60c <_fwalk_sglue>
 800a53a:	bf00      	nop
 800a53c:	200000c8 	.word	0x200000c8
 800a540:	0800b0b5 	.word	0x0800b0b5
 800a544:	200000d8 	.word	0x200000d8

0800a548 <cleanup_stdio>:
 800a548:	6841      	ldr	r1, [r0, #4]
 800a54a:	4b0c      	ldr	r3, [pc, #48]	@ (800a57c <cleanup_stdio+0x34>)
 800a54c:	4299      	cmp	r1, r3
 800a54e:	b510      	push	{r4, lr}
 800a550:	4604      	mov	r4, r0
 800a552:	d001      	beq.n	800a558 <cleanup_stdio+0x10>
 800a554:	f000 fdae 	bl	800b0b4 <_fflush_r>
 800a558:	68a1      	ldr	r1, [r4, #8]
 800a55a:	4b09      	ldr	r3, [pc, #36]	@ (800a580 <cleanup_stdio+0x38>)
 800a55c:	4299      	cmp	r1, r3
 800a55e:	d002      	beq.n	800a566 <cleanup_stdio+0x1e>
 800a560:	4620      	mov	r0, r4
 800a562:	f000 fda7 	bl	800b0b4 <_fflush_r>
 800a566:	68e1      	ldr	r1, [r4, #12]
 800a568:	4b06      	ldr	r3, [pc, #24]	@ (800a584 <cleanup_stdio+0x3c>)
 800a56a:	4299      	cmp	r1, r3
 800a56c:	d004      	beq.n	800a578 <cleanup_stdio+0x30>
 800a56e:	4620      	mov	r0, r4
 800a570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a574:	f000 bd9e 	b.w	800b0b4 <_fflush_r>
 800a578:	bd10      	pop	{r4, pc}
 800a57a:	bf00      	nop
 800a57c:	20008a68 	.word	0x20008a68
 800a580:	20008ad0 	.word	0x20008ad0
 800a584:	20008b38 	.word	0x20008b38

0800a588 <global_stdio_init.part.0>:
 800a588:	b510      	push	{r4, lr}
 800a58a:	4b0b      	ldr	r3, [pc, #44]	@ (800a5b8 <global_stdio_init.part.0+0x30>)
 800a58c:	2104      	movs	r1, #4
 800a58e:	4c0b      	ldr	r4, [pc, #44]	@ (800a5bc <global_stdio_init.part.0+0x34>)
 800a590:	4a0b      	ldr	r2, [pc, #44]	@ (800a5c0 <global_stdio_init.part.0+0x38>)
 800a592:	4620      	mov	r0, r4
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	2200      	movs	r2, #0
 800a598:	f7ff ff94 	bl	800a4c4 <std>
 800a59c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	2109      	movs	r1, #9
 800a5a4:	f7ff ff8e 	bl	800a4c4 <std>
 800a5a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a5ac:	2202      	movs	r2, #2
 800a5ae:	2112      	movs	r1, #18
 800a5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5b4:	f7ff bf86 	b.w	800a4c4 <std>
 800a5b8:	20008ba0 	.word	0x20008ba0
 800a5bc:	20008a68 	.word	0x20008a68
 800a5c0:	0800a531 	.word	0x0800a531

0800a5c4 <__sfp_lock_acquire>:
 800a5c4:	4801      	ldr	r0, [pc, #4]	@ (800a5cc <__sfp_lock_acquire+0x8>)
 800a5c6:	f000 b90e 	b.w	800a7e6 <__retarget_lock_acquire_recursive>
 800a5ca:	bf00      	nop
 800a5cc:	20008ba9 	.word	0x20008ba9

0800a5d0 <__sfp_lock_release>:
 800a5d0:	4801      	ldr	r0, [pc, #4]	@ (800a5d8 <__sfp_lock_release+0x8>)
 800a5d2:	f000 b909 	b.w	800a7e8 <__retarget_lock_release_recursive>
 800a5d6:	bf00      	nop
 800a5d8:	20008ba9 	.word	0x20008ba9

0800a5dc <__sinit>:
 800a5dc:	b510      	push	{r4, lr}
 800a5de:	4604      	mov	r4, r0
 800a5e0:	f7ff fff0 	bl	800a5c4 <__sfp_lock_acquire>
 800a5e4:	6a23      	ldr	r3, [r4, #32]
 800a5e6:	b11b      	cbz	r3, 800a5f0 <__sinit+0x14>
 800a5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5ec:	f7ff bff0 	b.w	800a5d0 <__sfp_lock_release>
 800a5f0:	4b04      	ldr	r3, [pc, #16]	@ (800a604 <__sinit+0x28>)
 800a5f2:	6223      	str	r3, [r4, #32]
 800a5f4:	4b04      	ldr	r3, [pc, #16]	@ (800a608 <__sinit+0x2c>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1f5      	bne.n	800a5e8 <__sinit+0xc>
 800a5fc:	f7ff ffc4 	bl	800a588 <global_stdio_init.part.0>
 800a600:	e7f2      	b.n	800a5e8 <__sinit+0xc>
 800a602:	bf00      	nop
 800a604:	0800a549 	.word	0x0800a549
 800a608:	20008ba0 	.word	0x20008ba0

0800a60c <_fwalk_sglue>:
 800a60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a610:	4607      	mov	r7, r0
 800a612:	4688      	mov	r8, r1
 800a614:	4614      	mov	r4, r2
 800a616:	2600      	movs	r6, #0
 800a618:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a61c:	f1b9 0901 	subs.w	r9, r9, #1
 800a620:	d505      	bpl.n	800a62e <_fwalk_sglue+0x22>
 800a622:	6824      	ldr	r4, [r4, #0]
 800a624:	2c00      	cmp	r4, #0
 800a626:	d1f7      	bne.n	800a618 <_fwalk_sglue+0xc>
 800a628:	4630      	mov	r0, r6
 800a62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a62e:	89ab      	ldrh	r3, [r5, #12]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d907      	bls.n	800a644 <_fwalk_sglue+0x38>
 800a634:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a638:	3301      	adds	r3, #1
 800a63a:	d003      	beq.n	800a644 <_fwalk_sglue+0x38>
 800a63c:	4629      	mov	r1, r5
 800a63e:	4638      	mov	r0, r7
 800a640:	47c0      	blx	r8
 800a642:	4306      	orrs	r6, r0
 800a644:	3568      	adds	r5, #104	@ 0x68
 800a646:	e7e9      	b.n	800a61c <_fwalk_sglue+0x10>

0800a648 <iprintf>:
 800a648:	b40f      	push	{r0, r1, r2, r3}
 800a64a:	b507      	push	{r0, r1, r2, lr}
 800a64c:	4906      	ldr	r1, [pc, #24]	@ (800a668 <iprintf+0x20>)
 800a64e:	ab04      	add	r3, sp, #16
 800a650:	6808      	ldr	r0, [r1, #0]
 800a652:	f853 2b04 	ldr.w	r2, [r3], #4
 800a656:	6881      	ldr	r1, [r0, #8]
 800a658:	9301      	str	r3, [sp, #4]
 800a65a:	f000 f9fd 	bl	800aa58 <_vfiprintf_r>
 800a65e:	b003      	add	sp, #12
 800a660:	f85d eb04 	ldr.w	lr, [sp], #4
 800a664:	b004      	add	sp, #16
 800a666:	4770      	bx	lr
 800a668:	200000d4 	.word	0x200000d4

0800a66c <__sread>:
 800a66c:	b510      	push	{r4, lr}
 800a66e:	460c      	mov	r4, r1
 800a670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a674:	f000 f868 	bl	800a748 <_read_r>
 800a678:	2800      	cmp	r0, #0
 800a67a:	bfab      	itete	ge
 800a67c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a67e:	89a3      	ldrhlt	r3, [r4, #12]
 800a680:	181b      	addge	r3, r3, r0
 800a682:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a686:	bfac      	ite	ge
 800a688:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a68a:	81a3      	strhlt	r3, [r4, #12]
 800a68c:	bd10      	pop	{r4, pc}

0800a68e <__swrite>:
 800a68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a692:	461f      	mov	r7, r3
 800a694:	898b      	ldrh	r3, [r1, #12]
 800a696:	4605      	mov	r5, r0
 800a698:	460c      	mov	r4, r1
 800a69a:	05db      	lsls	r3, r3, #23
 800a69c:	4616      	mov	r6, r2
 800a69e:	d505      	bpl.n	800a6ac <__swrite+0x1e>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a8:	f000 f83c 	bl	800a724 <_lseek_r>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	4632      	mov	r2, r6
 800a6b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6ba:	81a3      	strh	r3, [r4, #12]
 800a6bc:	463b      	mov	r3, r7
 800a6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c2:	f000 b853 	b.w	800a76c <_write_r>

0800a6c6 <__sseek>:
 800a6c6:	b510      	push	{r4, lr}
 800a6c8:	460c      	mov	r4, r1
 800a6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ce:	f000 f829 	bl	800a724 <_lseek_r>
 800a6d2:	1c43      	adds	r3, r0, #1
 800a6d4:	89a3      	ldrh	r3, [r4, #12]
 800a6d6:	bf15      	itete	ne
 800a6d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a6da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6e2:	81a3      	strheq	r3, [r4, #12]
 800a6e4:	bf18      	it	ne
 800a6e6:	81a3      	strhne	r3, [r4, #12]
 800a6e8:	bd10      	pop	{r4, pc}

0800a6ea <__sclose>:
 800a6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ee:	f000 b809 	b.w	800a704 <_close_r>

0800a6f2 <memset>:
 800a6f2:	4402      	add	r2, r0
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d100      	bne.n	800a6fc <memset+0xa>
 800a6fa:	4770      	bx	lr
 800a6fc:	f803 1b01 	strb.w	r1, [r3], #1
 800a700:	e7f9      	b.n	800a6f6 <memset+0x4>
	...

0800a704 <_close_r>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	2300      	movs	r3, #0
 800a708:	4d05      	ldr	r5, [pc, #20]	@ (800a720 <_close_r+0x1c>)
 800a70a:	4604      	mov	r4, r0
 800a70c:	4608      	mov	r0, r1
 800a70e:	602b      	str	r3, [r5, #0]
 800a710:	f7f7 f871 	bl	80017f6 <_close>
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	d102      	bne.n	800a71e <_close_r+0x1a>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	b103      	cbz	r3, 800a71e <_close_r+0x1a>
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	20008ba4 	.word	0x20008ba4

0800a724 <_lseek_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	4604      	mov	r4, r0
 800a728:	4d06      	ldr	r5, [pc, #24]	@ (800a744 <_lseek_r+0x20>)
 800a72a:	4608      	mov	r0, r1
 800a72c:	4611      	mov	r1, r2
 800a72e:	2200      	movs	r2, #0
 800a730:	602a      	str	r2, [r5, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	f7f7 f886 	bl	8001844 <_lseek>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d102      	bne.n	800a742 <_lseek_r+0x1e>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	b103      	cbz	r3, 800a742 <_lseek_r+0x1e>
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	20008ba4 	.word	0x20008ba4

0800a748 <_read_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4604      	mov	r4, r0
 800a74c:	4d06      	ldr	r5, [pc, #24]	@ (800a768 <_read_r+0x20>)
 800a74e:	4608      	mov	r0, r1
 800a750:	4611      	mov	r1, r2
 800a752:	2200      	movs	r2, #0
 800a754:	602a      	str	r2, [r5, #0]
 800a756:	461a      	mov	r2, r3
 800a758:	f7f7 f814 	bl	8001784 <_read>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	d102      	bne.n	800a766 <_read_r+0x1e>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b103      	cbz	r3, 800a766 <_read_r+0x1e>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	20008ba4 	.word	0x20008ba4

0800a76c <_write_r>:
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	4604      	mov	r4, r0
 800a770:	4d06      	ldr	r5, [pc, #24]	@ (800a78c <_write_r+0x20>)
 800a772:	4608      	mov	r0, r1
 800a774:	4611      	mov	r1, r2
 800a776:	2200      	movs	r2, #0
 800a778:	602a      	str	r2, [r5, #0]
 800a77a:	461a      	mov	r2, r3
 800a77c:	f7f7 f81f 	bl	80017be <_write>
 800a780:	1c43      	adds	r3, r0, #1
 800a782:	d102      	bne.n	800a78a <_write_r+0x1e>
 800a784:	682b      	ldr	r3, [r5, #0]
 800a786:	b103      	cbz	r3, 800a78a <_write_r+0x1e>
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	bd38      	pop	{r3, r4, r5, pc}
 800a78c:	20008ba4 	.word	0x20008ba4

0800a790 <__errno>:
 800a790:	4b01      	ldr	r3, [pc, #4]	@ (800a798 <__errno+0x8>)
 800a792:	6818      	ldr	r0, [r3, #0]
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	200000d4 	.word	0x200000d4

0800a79c <__libc_init_array>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	4d0d      	ldr	r5, [pc, #52]	@ (800a7d4 <__libc_init_array+0x38>)
 800a7a0:	2600      	movs	r6, #0
 800a7a2:	4c0d      	ldr	r4, [pc, #52]	@ (800a7d8 <__libc_init_array+0x3c>)
 800a7a4:	1b64      	subs	r4, r4, r5
 800a7a6:	10a4      	asrs	r4, r4, #2
 800a7a8:	42a6      	cmp	r6, r4
 800a7aa:	d109      	bne.n	800a7c0 <__libc_init_array+0x24>
 800a7ac:	4d0b      	ldr	r5, [pc, #44]	@ (800a7dc <__libc_init_array+0x40>)
 800a7ae:	2600      	movs	r6, #0
 800a7b0:	4c0b      	ldr	r4, [pc, #44]	@ (800a7e0 <__libc_init_array+0x44>)
 800a7b2:	f000 fddd 	bl	800b370 <_init>
 800a7b6:	1b64      	subs	r4, r4, r5
 800a7b8:	10a4      	asrs	r4, r4, #2
 800a7ba:	42a6      	cmp	r6, r4
 800a7bc:	d105      	bne.n	800a7ca <__libc_init_array+0x2e>
 800a7be:	bd70      	pop	{r4, r5, r6, pc}
 800a7c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7c4:	3601      	adds	r6, #1
 800a7c6:	4798      	blx	r3
 800a7c8:	e7ee      	b.n	800a7a8 <__libc_init_array+0xc>
 800a7ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ce:	3601      	adds	r6, #1
 800a7d0:	4798      	blx	r3
 800a7d2:	e7f2      	b.n	800a7ba <__libc_init_array+0x1e>
 800a7d4:	0800b8e8 	.word	0x0800b8e8
 800a7d8:	0800b8e8 	.word	0x0800b8e8
 800a7dc:	0800b8e8 	.word	0x0800b8e8
 800a7e0:	0800b8ec 	.word	0x0800b8ec

0800a7e4 <__retarget_lock_init_recursive>:
 800a7e4:	4770      	bx	lr

0800a7e6 <__retarget_lock_acquire_recursive>:
 800a7e6:	4770      	bx	lr

0800a7e8 <__retarget_lock_release_recursive>:
 800a7e8:	4770      	bx	lr

0800a7ea <strcpy>:
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7f0:	f803 2b01 	strb.w	r2, [r3], #1
 800a7f4:	2a00      	cmp	r2, #0
 800a7f6:	d1f9      	bne.n	800a7ec <strcpy+0x2>
 800a7f8:	4770      	bx	lr

0800a7fa <memcpy>:
 800a7fa:	440a      	add	r2, r1
 800a7fc:	1e43      	subs	r3, r0, #1
 800a7fe:	4291      	cmp	r1, r2
 800a800:	d100      	bne.n	800a804 <memcpy+0xa>
 800a802:	4770      	bx	lr
 800a804:	b510      	push	{r4, lr}
 800a806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a80a:	4291      	cmp	r1, r2
 800a80c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a810:	d1f9      	bne.n	800a806 <memcpy+0xc>
 800a812:	bd10      	pop	{r4, pc}

0800a814 <_free_r>:
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	4605      	mov	r5, r0
 800a818:	2900      	cmp	r1, #0
 800a81a:	d041      	beq.n	800a8a0 <_free_r+0x8c>
 800a81c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a820:	1f0c      	subs	r4, r1, #4
 800a822:	2b00      	cmp	r3, #0
 800a824:	bfb8      	it	lt
 800a826:	18e4      	addlt	r4, r4, r3
 800a828:	f000 f8e0 	bl	800a9ec <__malloc_lock>
 800a82c:	4a1d      	ldr	r2, [pc, #116]	@ (800a8a4 <_free_r+0x90>)
 800a82e:	6813      	ldr	r3, [r2, #0]
 800a830:	b933      	cbnz	r3, 800a840 <_free_r+0x2c>
 800a832:	6063      	str	r3, [r4, #4]
 800a834:	6014      	str	r4, [r2, #0]
 800a836:	4628      	mov	r0, r5
 800a838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a83c:	f000 b8dc 	b.w	800a9f8 <__malloc_unlock>
 800a840:	42a3      	cmp	r3, r4
 800a842:	d908      	bls.n	800a856 <_free_r+0x42>
 800a844:	6820      	ldr	r0, [r4, #0]
 800a846:	1821      	adds	r1, r4, r0
 800a848:	428b      	cmp	r3, r1
 800a84a:	bf01      	itttt	eq
 800a84c:	6819      	ldreq	r1, [r3, #0]
 800a84e:	685b      	ldreq	r3, [r3, #4]
 800a850:	1809      	addeq	r1, r1, r0
 800a852:	6021      	streq	r1, [r4, #0]
 800a854:	e7ed      	b.n	800a832 <_free_r+0x1e>
 800a856:	461a      	mov	r2, r3
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	b10b      	cbz	r3, 800a860 <_free_r+0x4c>
 800a85c:	42a3      	cmp	r3, r4
 800a85e:	d9fa      	bls.n	800a856 <_free_r+0x42>
 800a860:	6811      	ldr	r1, [r2, #0]
 800a862:	1850      	adds	r0, r2, r1
 800a864:	42a0      	cmp	r0, r4
 800a866:	d10b      	bne.n	800a880 <_free_r+0x6c>
 800a868:	6820      	ldr	r0, [r4, #0]
 800a86a:	4401      	add	r1, r0
 800a86c:	1850      	adds	r0, r2, r1
 800a86e:	6011      	str	r1, [r2, #0]
 800a870:	4283      	cmp	r3, r0
 800a872:	d1e0      	bne.n	800a836 <_free_r+0x22>
 800a874:	6818      	ldr	r0, [r3, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	4408      	add	r0, r1
 800a87a:	6053      	str	r3, [r2, #4]
 800a87c:	6010      	str	r0, [r2, #0]
 800a87e:	e7da      	b.n	800a836 <_free_r+0x22>
 800a880:	d902      	bls.n	800a888 <_free_r+0x74>
 800a882:	230c      	movs	r3, #12
 800a884:	602b      	str	r3, [r5, #0]
 800a886:	e7d6      	b.n	800a836 <_free_r+0x22>
 800a888:	6820      	ldr	r0, [r4, #0]
 800a88a:	1821      	adds	r1, r4, r0
 800a88c:	428b      	cmp	r3, r1
 800a88e:	bf02      	ittt	eq
 800a890:	6819      	ldreq	r1, [r3, #0]
 800a892:	685b      	ldreq	r3, [r3, #4]
 800a894:	1809      	addeq	r1, r1, r0
 800a896:	6063      	str	r3, [r4, #4]
 800a898:	bf08      	it	eq
 800a89a:	6021      	streq	r1, [r4, #0]
 800a89c:	6054      	str	r4, [r2, #4]
 800a89e:	e7ca      	b.n	800a836 <_free_r+0x22>
 800a8a0:	bd38      	pop	{r3, r4, r5, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20008bb0 	.word	0x20008bb0

0800a8a8 <sbrk_aligned>:
 800a8a8:	b570      	push	{r4, r5, r6, lr}
 800a8aa:	4e0f      	ldr	r6, [pc, #60]	@ (800a8e8 <sbrk_aligned+0x40>)
 800a8ac:	460c      	mov	r4, r1
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	6831      	ldr	r1, [r6, #0]
 800a8b2:	b911      	cbnz	r1, 800a8ba <sbrk_aligned+0x12>
 800a8b4:	f000 fcba 	bl	800b22c <_sbrk_r>
 800a8b8:	6030      	str	r0, [r6, #0]
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	4628      	mov	r0, r5
 800a8be:	f000 fcb5 	bl	800b22c <_sbrk_r>
 800a8c2:	1c43      	adds	r3, r0, #1
 800a8c4:	d103      	bne.n	800a8ce <sbrk_aligned+0x26>
 800a8c6:	f04f 34ff 	mov.w	r4, #4294967295
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	bd70      	pop	{r4, r5, r6, pc}
 800a8ce:	1cc4      	adds	r4, r0, #3
 800a8d0:	f024 0403 	bic.w	r4, r4, #3
 800a8d4:	42a0      	cmp	r0, r4
 800a8d6:	d0f8      	beq.n	800a8ca <sbrk_aligned+0x22>
 800a8d8:	1a21      	subs	r1, r4, r0
 800a8da:	4628      	mov	r0, r5
 800a8dc:	f000 fca6 	bl	800b22c <_sbrk_r>
 800a8e0:	3001      	adds	r0, #1
 800a8e2:	d1f2      	bne.n	800a8ca <sbrk_aligned+0x22>
 800a8e4:	e7ef      	b.n	800a8c6 <sbrk_aligned+0x1e>
 800a8e6:	bf00      	nop
 800a8e8:	20008bac 	.word	0x20008bac

0800a8ec <_malloc_r>:
 800a8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8f0:	1ccd      	adds	r5, r1, #3
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	f025 0503 	bic.w	r5, r5, #3
 800a8f8:	3508      	adds	r5, #8
 800a8fa:	2d0c      	cmp	r5, #12
 800a8fc:	bf38      	it	cc
 800a8fe:	250c      	movcc	r5, #12
 800a900:	2d00      	cmp	r5, #0
 800a902:	db01      	blt.n	800a908 <_malloc_r+0x1c>
 800a904:	42a9      	cmp	r1, r5
 800a906:	d904      	bls.n	800a912 <_malloc_r+0x26>
 800a908:	230c      	movs	r3, #12
 800a90a:	6033      	str	r3, [r6, #0]
 800a90c:	2000      	movs	r0, #0
 800a90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a912:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9e8 <_malloc_r+0xfc>
 800a916:	f000 f869 	bl	800a9ec <__malloc_lock>
 800a91a:	f8d8 3000 	ldr.w	r3, [r8]
 800a91e:	461c      	mov	r4, r3
 800a920:	bb44      	cbnz	r4, 800a974 <_malloc_r+0x88>
 800a922:	4629      	mov	r1, r5
 800a924:	4630      	mov	r0, r6
 800a926:	f7ff ffbf 	bl	800a8a8 <sbrk_aligned>
 800a92a:	1c43      	adds	r3, r0, #1
 800a92c:	4604      	mov	r4, r0
 800a92e:	d158      	bne.n	800a9e2 <_malloc_r+0xf6>
 800a930:	f8d8 4000 	ldr.w	r4, [r8]
 800a934:	4627      	mov	r7, r4
 800a936:	2f00      	cmp	r7, #0
 800a938:	d143      	bne.n	800a9c2 <_malloc_r+0xd6>
 800a93a:	2c00      	cmp	r4, #0
 800a93c:	d04b      	beq.n	800a9d6 <_malloc_r+0xea>
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	4639      	mov	r1, r7
 800a942:	4630      	mov	r0, r6
 800a944:	eb04 0903 	add.w	r9, r4, r3
 800a948:	f000 fc70 	bl	800b22c <_sbrk_r>
 800a94c:	4581      	cmp	r9, r0
 800a94e:	d142      	bne.n	800a9d6 <_malloc_r+0xea>
 800a950:	6821      	ldr	r1, [r4, #0]
 800a952:	4630      	mov	r0, r6
 800a954:	1a6d      	subs	r5, r5, r1
 800a956:	4629      	mov	r1, r5
 800a958:	f7ff ffa6 	bl	800a8a8 <sbrk_aligned>
 800a95c:	3001      	adds	r0, #1
 800a95e:	d03a      	beq.n	800a9d6 <_malloc_r+0xea>
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	442b      	add	r3, r5
 800a964:	6023      	str	r3, [r4, #0]
 800a966:	f8d8 3000 	ldr.w	r3, [r8]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	bb62      	cbnz	r2, 800a9c8 <_malloc_r+0xdc>
 800a96e:	f8c8 7000 	str.w	r7, [r8]
 800a972:	e00f      	b.n	800a994 <_malloc_r+0xa8>
 800a974:	6822      	ldr	r2, [r4, #0]
 800a976:	1b52      	subs	r2, r2, r5
 800a978:	d420      	bmi.n	800a9bc <_malloc_r+0xd0>
 800a97a:	2a0b      	cmp	r2, #11
 800a97c:	d917      	bls.n	800a9ae <_malloc_r+0xc2>
 800a97e:	1961      	adds	r1, r4, r5
 800a980:	42a3      	cmp	r3, r4
 800a982:	6025      	str	r5, [r4, #0]
 800a984:	bf18      	it	ne
 800a986:	6059      	strne	r1, [r3, #4]
 800a988:	6863      	ldr	r3, [r4, #4]
 800a98a:	bf08      	it	eq
 800a98c:	f8c8 1000 	streq.w	r1, [r8]
 800a990:	5162      	str	r2, [r4, r5]
 800a992:	604b      	str	r3, [r1, #4]
 800a994:	4630      	mov	r0, r6
 800a996:	f000 f82f 	bl	800a9f8 <__malloc_unlock>
 800a99a:	f104 000b 	add.w	r0, r4, #11
 800a99e:	1d23      	adds	r3, r4, #4
 800a9a0:	f020 0007 	bic.w	r0, r0, #7
 800a9a4:	1ac2      	subs	r2, r0, r3
 800a9a6:	bf1c      	itt	ne
 800a9a8:	1a1b      	subne	r3, r3, r0
 800a9aa:	50a3      	strne	r3, [r4, r2]
 800a9ac:	e7af      	b.n	800a90e <_malloc_r+0x22>
 800a9ae:	6862      	ldr	r2, [r4, #4]
 800a9b0:	42a3      	cmp	r3, r4
 800a9b2:	bf0c      	ite	eq
 800a9b4:	f8c8 2000 	streq.w	r2, [r8]
 800a9b8:	605a      	strne	r2, [r3, #4]
 800a9ba:	e7eb      	b.n	800a994 <_malloc_r+0xa8>
 800a9bc:	4623      	mov	r3, r4
 800a9be:	6864      	ldr	r4, [r4, #4]
 800a9c0:	e7ae      	b.n	800a920 <_malloc_r+0x34>
 800a9c2:	463c      	mov	r4, r7
 800a9c4:	687f      	ldr	r7, [r7, #4]
 800a9c6:	e7b6      	b.n	800a936 <_malloc_r+0x4a>
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	42a3      	cmp	r3, r4
 800a9ce:	d1fb      	bne.n	800a9c8 <_malloc_r+0xdc>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	6053      	str	r3, [r2, #4]
 800a9d4:	e7de      	b.n	800a994 <_malloc_r+0xa8>
 800a9d6:	230c      	movs	r3, #12
 800a9d8:	4630      	mov	r0, r6
 800a9da:	6033      	str	r3, [r6, #0]
 800a9dc:	f000 f80c 	bl	800a9f8 <__malloc_unlock>
 800a9e0:	e794      	b.n	800a90c <_malloc_r+0x20>
 800a9e2:	6005      	str	r5, [r0, #0]
 800a9e4:	e7d6      	b.n	800a994 <_malloc_r+0xa8>
 800a9e6:	bf00      	nop
 800a9e8:	20008bb0 	.word	0x20008bb0

0800a9ec <__malloc_lock>:
 800a9ec:	4801      	ldr	r0, [pc, #4]	@ (800a9f4 <__malloc_lock+0x8>)
 800a9ee:	f7ff befa 	b.w	800a7e6 <__retarget_lock_acquire_recursive>
 800a9f2:	bf00      	nop
 800a9f4:	20008ba8 	.word	0x20008ba8

0800a9f8 <__malloc_unlock>:
 800a9f8:	4801      	ldr	r0, [pc, #4]	@ (800aa00 <__malloc_unlock+0x8>)
 800a9fa:	f7ff bef5 	b.w	800a7e8 <__retarget_lock_release_recursive>
 800a9fe:	bf00      	nop
 800aa00:	20008ba8 	.word	0x20008ba8

0800aa04 <__sfputc_r>:
 800aa04:	6893      	ldr	r3, [r2, #8]
 800aa06:	3b01      	subs	r3, #1
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	6093      	str	r3, [r2, #8]
 800aa0c:	b410      	push	{r4}
 800aa0e:	da08      	bge.n	800aa22 <__sfputc_r+0x1e>
 800aa10:	6994      	ldr	r4, [r2, #24]
 800aa12:	42a3      	cmp	r3, r4
 800aa14:	db01      	blt.n	800aa1a <__sfputc_r+0x16>
 800aa16:	290a      	cmp	r1, #10
 800aa18:	d103      	bne.n	800aa22 <__sfputc_r+0x1e>
 800aa1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa1e:	f000 bb71 	b.w	800b104 <__swbuf_r>
 800aa22:	6813      	ldr	r3, [r2, #0]
 800aa24:	1c58      	adds	r0, r3, #1
 800aa26:	6010      	str	r0, [r2, #0]
 800aa28:	4608      	mov	r0, r1
 800aa2a:	7019      	strb	r1, [r3, #0]
 800aa2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <__sfputs_r>:
 800aa32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa34:	4606      	mov	r6, r0
 800aa36:	460f      	mov	r7, r1
 800aa38:	4614      	mov	r4, r2
 800aa3a:	18d5      	adds	r5, r2, r3
 800aa3c:	42ac      	cmp	r4, r5
 800aa3e:	d101      	bne.n	800aa44 <__sfputs_r+0x12>
 800aa40:	2000      	movs	r0, #0
 800aa42:	e007      	b.n	800aa54 <__sfputs_r+0x22>
 800aa44:	463a      	mov	r2, r7
 800aa46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	f7ff ffda 	bl	800aa04 <__sfputc_r>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d1f3      	bne.n	800aa3c <__sfputs_r+0xa>
 800aa54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa58 <_vfiprintf_r>:
 800aa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5c:	460d      	mov	r5, r1
 800aa5e:	b09d      	sub	sp, #116	@ 0x74
 800aa60:	4614      	mov	r4, r2
 800aa62:	4698      	mov	r8, r3
 800aa64:	4606      	mov	r6, r0
 800aa66:	b118      	cbz	r0, 800aa70 <_vfiprintf_r+0x18>
 800aa68:	6a03      	ldr	r3, [r0, #32]
 800aa6a:	b90b      	cbnz	r3, 800aa70 <_vfiprintf_r+0x18>
 800aa6c:	f7ff fdb6 	bl	800a5dc <__sinit>
 800aa70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa72:	07d9      	lsls	r1, r3, #31
 800aa74:	d405      	bmi.n	800aa82 <_vfiprintf_r+0x2a>
 800aa76:	89ab      	ldrh	r3, [r5, #12]
 800aa78:	059a      	lsls	r2, r3, #22
 800aa7a:	d402      	bmi.n	800aa82 <_vfiprintf_r+0x2a>
 800aa7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa7e:	f7ff feb2 	bl	800a7e6 <__retarget_lock_acquire_recursive>
 800aa82:	89ab      	ldrh	r3, [r5, #12]
 800aa84:	071b      	lsls	r3, r3, #28
 800aa86:	d501      	bpl.n	800aa8c <_vfiprintf_r+0x34>
 800aa88:	692b      	ldr	r3, [r5, #16]
 800aa8a:	b99b      	cbnz	r3, 800aab4 <_vfiprintf_r+0x5c>
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	4630      	mov	r0, r6
 800aa90:	f000 fb76 	bl	800b180 <__swsetup_r>
 800aa94:	b170      	cbz	r0, 800aab4 <_vfiprintf_r+0x5c>
 800aa96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa98:	07dc      	lsls	r4, r3, #31
 800aa9a:	d504      	bpl.n	800aaa6 <_vfiprintf_r+0x4e>
 800aa9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa0:	b01d      	add	sp, #116	@ 0x74
 800aaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa6:	89ab      	ldrh	r3, [r5, #12]
 800aaa8:	0598      	lsls	r0, r3, #22
 800aaaa:	d4f7      	bmi.n	800aa9c <_vfiprintf_r+0x44>
 800aaac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaae:	f7ff fe9b 	bl	800a7e8 <__retarget_lock_release_recursive>
 800aab2:	e7f3      	b.n	800aa9c <_vfiprintf_r+0x44>
 800aab4:	2300      	movs	r3, #0
 800aab6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaba:	f04f 0901 	mov.w	r9, #1
 800aabe:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800ac74 <_vfiprintf_r+0x21c>
 800aac2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aac4:	2320      	movs	r3, #32
 800aac6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aaca:	2330      	movs	r3, #48	@ 0x30
 800aacc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aad0:	4623      	mov	r3, r4
 800aad2:	469a      	mov	sl, r3
 800aad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aad8:	b10a      	cbz	r2, 800aade <_vfiprintf_r+0x86>
 800aada:	2a25      	cmp	r2, #37	@ 0x25
 800aadc:	d1f9      	bne.n	800aad2 <_vfiprintf_r+0x7a>
 800aade:	ebba 0b04 	subs.w	fp, sl, r4
 800aae2:	d00b      	beq.n	800aafc <_vfiprintf_r+0xa4>
 800aae4:	465b      	mov	r3, fp
 800aae6:	4622      	mov	r2, r4
 800aae8:	4629      	mov	r1, r5
 800aaea:	4630      	mov	r0, r6
 800aaec:	f7ff ffa1 	bl	800aa32 <__sfputs_r>
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	f000 80a7 	beq.w	800ac44 <_vfiprintf_r+0x1ec>
 800aaf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aaf8:	445a      	add	r2, fp
 800aafa:	9209      	str	r2, [sp, #36]	@ 0x24
 800aafc:	f89a 3000 	ldrb.w	r3, [sl]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 809f 	beq.w	800ac44 <_vfiprintf_r+0x1ec>
 800ab06:	2300      	movs	r3, #0
 800ab08:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0c:	f10a 0a01 	add.w	sl, sl, #1
 800ab10:	9304      	str	r3, [sp, #16]
 800ab12:	9307      	str	r3, [sp, #28]
 800ab14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab18:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab1e:	4654      	mov	r4, sl
 800ab20:	2205      	movs	r2, #5
 800ab22:	4854      	ldr	r0, [pc, #336]	@ (800ac74 <_vfiprintf_r+0x21c>)
 800ab24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab28:	f000 fb90 	bl	800b24c <memchr>
 800ab2c:	9a04      	ldr	r2, [sp, #16]
 800ab2e:	b9d8      	cbnz	r0, 800ab68 <_vfiprintf_r+0x110>
 800ab30:	06d1      	lsls	r1, r2, #27
 800ab32:	bf44      	itt	mi
 800ab34:	2320      	movmi	r3, #32
 800ab36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab3a:	0713      	lsls	r3, r2, #28
 800ab3c:	bf44      	itt	mi
 800ab3e:	232b      	movmi	r3, #43	@ 0x2b
 800ab40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab44:	f89a 3000 	ldrb.w	r3, [sl]
 800ab48:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab4a:	d015      	beq.n	800ab78 <_vfiprintf_r+0x120>
 800ab4c:	9a07      	ldr	r2, [sp, #28]
 800ab4e:	4654      	mov	r4, sl
 800ab50:	2000      	movs	r0, #0
 800ab52:	f04f 0c0a 	mov.w	ip, #10
 800ab56:	4621      	mov	r1, r4
 800ab58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab5c:	3b30      	subs	r3, #48	@ 0x30
 800ab5e:	2b09      	cmp	r3, #9
 800ab60:	d94b      	bls.n	800abfa <_vfiprintf_r+0x1a2>
 800ab62:	b1b0      	cbz	r0, 800ab92 <_vfiprintf_r+0x13a>
 800ab64:	9207      	str	r2, [sp, #28]
 800ab66:	e014      	b.n	800ab92 <_vfiprintf_r+0x13a>
 800ab68:	eba0 0308 	sub.w	r3, r0, r8
 800ab6c:	46a2      	mov	sl, r4
 800ab6e:	fa09 f303 	lsl.w	r3, r9, r3
 800ab72:	4313      	orrs	r3, r2
 800ab74:	9304      	str	r3, [sp, #16]
 800ab76:	e7d2      	b.n	800ab1e <_vfiprintf_r+0xc6>
 800ab78:	9b03      	ldr	r3, [sp, #12]
 800ab7a:	1d19      	adds	r1, r3, #4
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	9103      	str	r1, [sp, #12]
 800ab82:	bfbb      	ittet	lt
 800ab84:	425b      	neglt	r3, r3
 800ab86:	f042 0202 	orrlt.w	r2, r2, #2
 800ab8a:	9307      	strge	r3, [sp, #28]
 800ab8c:	9307      	strlt	r3, [sp, #28]
 800ab8e:	bfb8      	it	lt
 800ab90:	9204      	strlt	r2, [sp, #16]
 800ab92:	7823      	ldrb	r3, [r4, #0]
 800ab94:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab96:	d10a      	bne.n	800abae <_vfiprintf_r+0x156>
 800ab98:	7863      	ldrb	r3, [r4, #1]
 800ab9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab9c:	d132      	bne.n	800ac04 <_vfiprintf_r+0x1ac>
 800ab9e:	9b03      	ldr	r3, [sp, #12]
 800aba0:	3402      	adds	r4, #2
 800aba2:	1d1a      	adds	r2, r3, #4
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abaa:	9203      	str	r2, [sp, #12]
 800abac:	9305      	str	r3, [sp, #20]
 800abae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ac84 <_vfiprintf_r+0x22c>
 800abb2:	2203      	movs	r2, #3
 800abb4:	7821      	ldrb	r1, [r4, #0]
 800abb6:	4650      	mov	r0, sl
 800abb8:	f000 fb48 	bl	800b24c <memchr>
 800abbc:	b138      	cbz	r0, 800abce <_vfiprintf_r+0x176>
 800abbe:	eba0 000a 	sub.w	r0, r0, sl
 800abc2:	2240      	movs	r2, #64	@ 0x40
 800abc4:	9b04      	ldr	r3, [sp, #16]
 800abc6:	3401      	adds	r4, #1
 800abc8:	4082      	lsls	r2, r0
 800abca:	4313      	orrs	r3, r2
 800abcc:	9304      	str	r3, [sp, #16]
 800abce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd2:	2206      	movs	r2, #6
 800abd4:	4828      	ldr	r0, [pc, #160]	@ (800ac78 <_vfiprintf_r+0x220>)
 800abd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abda:	f000 fb37 	bl	800b24c <memchr>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d03f      	beq.n	800ac62 <_vfiprintf_r+0x20a>
 800abe2:	4b26      	ldr	r3, [pc, #152]	@ (800ac7c <_vfiprintf_r+0x224>)
 800abe4:	bb1b      	cbnz	r3, 800ac2e <_vfiprintf_r+0x1d6>
 800abe6:	9b03      	ldr	r3, [sp, #12]
 800abe8:	3307      	adds	r3, #7
 800abea:	f023 0307 	bic.w	r3, r3, #7
 800abee:	3308      	adds	r3, #8
 800abf0:	9303      	str	r3, [sp, #12]
 800abf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abf4:	443b      	add	r3, r7
 800abf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800abf8:	e76a      	b.n	800aad0 <_vfiprintf_r+0x78>
 800abfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800abfe:	460c      	mov	r4, r1
 800ac00:	2001      	movs	r0, #1
 800ac02:	e7a8      	b.n	800ab56 <_vfiprintf_r+0xfe>
 800ac04:	2300      	movs	r3, #0
 800ac06:	3401      	adds	r4, #1
 800ac08:	f04f 0c0a 	mov.w	ip, #10
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	9305      	str	r3, [sp, #20]
 800ac10:	4620      	mov	r0, r4
 800ac12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac16:	3a30      	subs	r2, #48	@ 0x30
 800ac18:	2a09      	cmp	r2, #9
 800ac1a:	d903      	bls.n	800ac24 <_vfiprintf_r+0x1cc>
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d0c6      	beq.n	800abae <_vfiprintf_r+0x156>
 800ac20:	9105      	str	r1, [sp, #20]
 800ac22:	e7c4      	b.n	800abae <_vfiprintf_r+0x156>
 800ac24:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac28:	4604      	mov	r4, r0
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e7f0      	b.n	800ac10 <_vfiprintf_r+0x1b8>
 800ac2e:	ab03      	add	r3, sp, #12
 800ac30:	462a      	mov	r2, r5
 800ac32:	a904      	add	r1, sp, #16
 800ac34:	4630      	mov	r0, r6
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	4b11      	ldr	r3, [pc, #68]	@ (800ac80 <_vfiprintf_r+0x228>)
 800ac3a:	f3af 8000 	nop.w
 800ac3e:	4607      	mov	r7, r0
 800ac40:	1c78      	adds	r0, r7, #1
 800ac42:	d1d6      	bne.n	800abf2 <_vfiprintf_r+0x19a>
 800ac44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac46:	07d9      	lsls	r1, r3, #31
 800ac48:	d405      	bmi.n	800ac56 <_vfiprintf_r+0x1fe>
 800ac4a:	89ab      	ldrh	r3, [r5, #12]
 800ac4c:	059a      	lsls	r2, r3, #22
 800ac4e:	d402      	bmi.n	800ac56 <_vfiprintf_r+0x1fe>
 800ac50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac52:	f7ff fdc9 	bl	800a7e8 <__retarget_lock_release_recursive>
 800ac56:	89ab      	ldrh	r3, [r5, #12]
 800ac58:	065b      	lsls	r3, r3, #25
 800ac5a:	f53f af1f 	bmi.w	800aa9c <_vfiprintf_r+0x44>
 800ac5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac60:	e71e      	b.n	800aaa0 <_vfiprintf_r+0x48>
 800ac62:	ab03      	add	r3, sp, #12
 800ac64:	462a      	mov	r2, r5
 800ac66:	a904      	add	r1, sp, #16
 800ac68:	4630      	mov	r0, r6
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	4b04      	ldr	r3, [pc, #16]	@ (800ac80 <_vfiprintf_r+0x228>)
 800ac6e:	f000 f87d 	bl	800ad6c <_printf_i>
 800ac72:	e7e4      	b.n	800ac3e <_vfiprintf_r+0x1e6>
 800ac74:	0800b8ac 	.word	0x0800b8ac
 800ac78:	0800b8b6 	.word	0x0800b8b6
 800ac7c:	00000000 	.word	0x00000000
 800ac80:	0800aa33 	.word	0x0800aa33
 800ac84:	0800b8b2 	.word	0x0800b8b2

0800ac88 <_printf_common>:
 800ac88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8c:	4616      	mov	r6, r2
 800ac8e:	4698      	mov	r8, r3
 800ac90:	688a      	ldr	r2, [r1, #8]
 800ac92:	4607      	mov	r7, r0
 800ac94:	690b      	ldr	r3, [r1, #16]
 800ac96:	460c      	mov	r4, r1
 800ac98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	bfb8      	it	lt
 800aca0:	4613      	movlt	r3, r2
 800aca2:	6033      	str	r3, [r6, #0]
 800aca4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aca8:	b10a      	cbz	r2, 800acae <_printf_common+0x26>
 800acaa:	3301      	adds	r3, #1
 800acac:	6033      	str	r3, [r6, #0]
 800acae:	6823      	ldr	r3, [r4, #0]
 800acb0:	0699      	lsls	r1, r3, #26
 800acb2:	bf42      	ittt	mi
 800acb4:	6833      	ldrmi	r3, [r6, #0]
 800acb6:	3302      	addmi	r3, #2
 800acb8:	6033      	strmi	r3, [r6, #0]
 800acba:	6825      	ldr	r5, [r4, #0]
 800acbc:	f015 0506 	ands.w	r5, r5, #6
 800acc0:	d106      	bne.n	800acd0 <_printf_common+0x48>
 800acc2:	f104 0a19 	add.w	sl, r4, #25
 800acc6:	68e3      	ldr	r3, [r4, #12]
 800acc8:	6832      	ldr	r2, [r6, #0]
 800acca:	1a9b      	subs	r3, r3, r2
 800accc:	42ab      	cmp	r3, r5
 800acce:	dc2b      	bgt.n	800ad28 <_printf_common+0xa0>
 800acd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800acd4:	6822      	ldr	r2, [r4, #0]
 800acd6:	3b00      	subs	r3, #0
 800acd8:	bf18      	it	ne
 800acda:	2301      	movne	r3, #1
 800acdc:	0692      	lsls	r2, r2, #26
 800acde:	d430      	bmi.n	800ad42 <_printf_common+0xba>
 800ace0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ace4:	4641      	mov	r1, r8
 800ace6:	4638      	mov	r0, r7
 800ace8:	47c8      	blx	r9
 800acea:	3001      	adds	r0, #1
 800acec:	d023      	beq.n	800ad36 <_printf_common+0xae>
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	341a      	adds	r4, #26
 800acf2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800acf6:	f003 0306 	and.w	r3, r3, #6
 800acfa:	2b04      	cmp	r3, #4
 800acfc:	bf0a      	itet	eq
 800acfe:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800ad02:	2500      	movne	r5, #0
 800ad04:	6833      	ldreq	r3, [r6, #0]
 800ad06:	f04f 0600 	mov.w	r6, #0
 800ad0a:	bf08      	it	eq
 800ad0c:	1aed      	subeq	r5, r5, r3
 800ad0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ad12:	bf08      	it	eq
 800ad14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	bfc4      	itt	gt
 800ad1c:	1a9b      	subgt	r3, r3, r2
 800ad1e:	18ed      	addgt	r5, r5, r3
 800ad20:	42b5      	cmp	r5, r6
 800ad22:	d11a      	bne.n	800ad5a <_printf_common+0xd2>
 800ad24:	2000      	movs	r0, #0
 800ad26:	e008      	b.n	800ad3a <_printf_common+0xb2>
 800ad28:	2301      	movs	r3, #1
 800ad2a:	4652      	mov	r2, sl
 800ad2c:	4641      	mov	r1, r8
 800ad2e:	4638      	mov	r0, r7
 800ad30:	47c8      	blx	r9
 800ad32:	3001      	adds	r0, #1
 800ad34:	d103      	bne.n	800ad3e <_printf_common+0xb6>
 800ad36:	f04f 30ff 	mov.w	r0, #4294967295
 800ad3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad3e:	3501      	adds	r5, #1
 800ad40:	e7c1      	b.n	800acc6 <_printf_common+0x3e>
 800ad42:	18e1      	adds	r1, r4, r3
 800ad44:	1c5a      	adds	r2, r3, #1
 800ad46:	2030      	movs	r0, #48	@ 0x30
 800ad48:	3302      	adds	r3, #2
 800ad4a:	4422      	add	r2, r4
 800ad4c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad58:	e7c2      	b.n	800ace0 <_printf_common+0x58>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	4622      	mov	r2, r4
 800ad5e:	4641      	mov	r1, r8
 800ad60:	4638      	mov	r0, r7
 800ad62:	47c8      	blx	r9
 800ad64:	3001      	adds	r0, #1
 800ad66:	d0e6      	beq.n	800ad36 <_printf_common+0xae>
 800ad68:	3601      	adds	r6, #1
 800ad6a:	e7d9      	b.n	800ad20 <_printf_common+0x98>

0800ad6c <_printf_i>:
 800ad6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad70:	7e0f      	ldrb	r7, [r1, #24]
 800ad72:	4691      	mov	r9, r2
 800ad74:	4680      	mov	r8, r0
 800ad76:	460c      	mov	r4, r1
 800ad78:	2f78      	cmp	r7, #120	@ 0x78
 800ad7a:	469a      	mov	sl, r3
 800ad7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad82:	d807      	bhi.n	800ad94 <_printf_i+0x28>
 800ad84:	2f62      	cmp	r7, #98	@ 0x62
 800ad86:	d80a      	bhi.n	800ad9e <_printf_i+0x32>
 800ad88:	2f00      	cmp	r7, #0
 800ad8a:	f000 80d2 	beq.w	800af32 <_printf_i+0x1c6>
 800ad8e:	2f58      	cmp	r7, #88	@ 0x58
 800ad90:	f000 80b9 	beq.w	800af06 <_printf_i+0x19a>
 800ad94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad9c:	e03a      	b.n	800ae14 <_printf_i+0xa8>
 800ad9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ada2:	2b15      	cmp	r3, #21
 800ada4:	d8f6      	bhi.n	800ad94 <_printf_i+0x28>
 800ada6:	a101      	add	r1, pc, #4	@ (adr r1, 800adac <_printf_i+0x40>)
 800ada8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800adac:	0800ae05 	.word	0x0800ae05
 800adb0:	0800ae19 	.word	0x0800ae19
 800adb4:	0800ad95 	.word	0x0800ad95
 800adb8:	0800ad95 	.word	0x0800ad95
 800adbc:	0800ad95 	.word	0x0800ad95
 800adc0:	0800ad95 	.word	0x0800ad95
 800adc4:	0800ae19 	.word	0x0800ae19
 800adc8:	0800ad95 	.word	0x0800ad95
 800adcc:	0800ad95 	.word	0x0800ad95
 800add0:	0800ad95 	.word	0x0800ad95
 800add4:	0800ad95 	.word	0x0800ad95
 800add8:	0800af19 	.word	0x0800af19
 800addc:	0800ae43 	.word	0x0800ae43
 800ade0:	0800aed3 	.word	0x0800aed3
 800ade4:	0800ad95 	.word	0x0800ad95
 800ade8:	0800ad95 	.word	0x0800ad95
 800adec:	0800af3b 	.word	0x0800af3b
 800adf0:	0800ad95 	.word	0x0800ad95
 800adf4:	0800ae43 	.word	0x0800ae43
 800adf8:	0800ad95 	.word	0x0800ad95
 800adfc:	0800ad95 	.word	0x0800ad95
 800ae00:	0800aedb 	.word	0x0800aedb
 800ae04:	6833      	ldr	r3, [r6, #0]
 800ae06:	1d1a      	adds	r2, r3, #4
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	6032      	str	r2, [r6, #0]
 800ae0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae14:	2301      	movs	r3, #1
 800ae16:	e09d      	b.n	800af54 <_printf_i+0x1e8>
 800ae18:	6833      	ldr	r3, [r6, #0]
 800ae1a:	6820      	ldr	r0, [r4, #0]
 800ae1c:	1d19      	adds	r1, r3, #4
 800ae1e:	6031      	str	r1, [r6, #0]
 800ae20:	0606      	lsls	r6, r0, #24
 800ae22:	d501      	bpl.n	800ae28 <_printf_i+0xbc>
 800ae24:	681d      	ldr	r5, [r3, #0]
 800ae26:	e003      	b.n	800ae30 <_printf_i+0xc4>
 800ae28:	0645      	lsls	r5, r0, #25
 800ae2a:	d5fb      	bpl.n	800ae24 <_printf_i+0xb8>
 800ae2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae30:	2d00      	cmp	r5, #0
 800ae32:	da03      	bge.n	800ae3c <_printf_i+0xd0>
 800ae34:	232d      	movs	r3, #45	@ 0x2d
 800ae36:	426d      	negs	r5, r5
 800ae38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae3c:	4859      	ldr	r0, [pc, #356]	@ (800afa4 <_printf_i+0x238>)
 800ae3e:	230a      	movs	r3, #10
 800ae40:	e011      	b.n	800ae66 <_printf_i+0xfa>
 800ae42:	6821      	ldr	r1, [r4, #0]
 800ae44:	6833      	ldr	r3, [r6, #0]
 800ae46:	0608      	lsls	r0, r1, #24
 800ae48:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae4c:	d402      	bmi.n	800ae54 <_printf_i+0xe8>
 800ae4e:	0649      	lsls	r1, r1, #25
 800ae50:	bf48      	it	mi
 800ae52:	b2ad      	uxthmi	r5, r5
 800ae54:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae56:	6033      	str	r3, [r6, #0]
 800ae58:	4852      	ldr	r0, [pc, #328]	@ (800afa4 <_printf_i+0x238>)
 800ae5a:	bf14      	ite	ne
 800ae5c:	230a      	movne	r3, #10
 800ae5e:	2308      	moveq	r3, #8
 800ae60:	2100      	movs	r1, #0
 800ae62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae66:	6866      	ldr	r6, [r4, #4]
 800ae68:	2e00      	cmp	r6, #0
 800ae6a:	60a6      	str	r6, [r4, #8]
 800ae6c:	bfa2      	ittt	ge
 800ae6e:	6821      	ldrge	r1, [r4, #0]
 800ae70:	f021 0104 	bicge.w	r1, r1, #4
 800ae74:	6021      	strge	r1, [r4, #0]
 800ae76:	b90d      	cbnz	r5, 800ae7c <_printf_i+0x110>
 800ae78:	2e00      	cmp	r6, #0
 800ae7a:	d04b      	beq.n	800af14 <_printf_i+0x1a8>
 800ae7c:	4616      	mov	r6, r2
 800ae7e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae82:	fb03 5711 	mls	r7, r3, r1, r5
 800ae86:	5dc7      	ldrb	r7, [r0, r7]
 800ae88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae8c:	462f      	mov	r7, r5
 800ae8e:	460d      	mov	r5, r1
 800ae90:	42bb      	cmp	r3, r7
 800ae92:	d9f4      	bls.n	800ae7e <_printf_i+0x112>
 800ae94:	2b08      	cmp	r3, #8
 800ae96:	d10b      	bne.n	800aeb0 <_printf_i+0x144>
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	07df      	lsls	r7, r3, #31
 800ae9c:	d508      	bpl.n	800aeb0 <_printf_i+0x144>
 800ae9e:	6923      	ldr	r3, [r4, #16]
 800aea0:	6861      	ldr	r1, [r4, #4]
 800aea2:	4299      	cmp	r1, r3
 800aea4:	bfde      	ittt	le
 800aea6:	2330      	movle	r3, #48	@ 0x30
 800aea8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aeac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aeb0:	1b92      	subs	r2, r2, r6
 800aeb2:	6122      	str	r2, [r4, #16]
 800aeb4:	464b      	mov	r3, r9
 800aeb6:	aa03      	add	r2, sp, #12
 800aeb8:	4621      	mov	r1, r4
 800aeba:	4640      	mov	r0, r8
 800aebc:	f8cd a000 	str.w	sl, [sp]
 800aec0:	f7ff fee2 	bl	800ac88 <_printf_common>
 800aec4:	3001      	adds	r0, #1
 800aec6:	d14a      	bne.n	800af5e <_printf_i+0x1f2>
 800aec8:	f04f 30ff 	mov.w	r0, #4294967295
 800aecc:	b004      	add	sp, #16
 800aece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed2:	6823      	ldr	r3, [r4, #0]
 800aed4:	f043 0320 	orr.w	r3, r3, #32
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	2778      	movs	r7, #120	@ 0x78
 800aedc:	4832      	ldr	r0, [pc, #200]	@ (800afa8 <_printf_i+0x23c>)
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aee4:	061f      	lsls	r7, r3, #24
 800aee6:	6831      	ldr	r1, [r6, #0]
 800aee8:	f851 5b04 	ldr.w	r5, [r1], #4
 800aeec:	d402      	bmi.n	800aef4 <_printf_i+0x188>
 800aeee:	065f      	lsls	r7, r3, #25
 800aef0:	bf48      	it	mi
 800aef2:	b2ad      	uxthmi	r5, r5
 800aef4:	6031      	str	r1, [r6, #0]
 800aef6:	07d9      	lsls	r1, r3, #31
 800aef8:	bf44      	itt	mi
 800aefa:	f043 0320 	orrmi.w	r3, r3, #32
 800aefe:	6023      	strmi	r3, [r4, #0]
 800af00:	b11d      	cbz	r5, 800af0a <_printf_i+0x19e>
 800af02:	2310      	movs	r3, #16
 800af04:	e7ac      	b.n	800ae60 <_printf_i+0xf4>
 800af06:	4827      	ldr	r0, [pc, #156]	@ (800afa4 <_printf_i+0x238>)
 800af08:	e7e9      	b.n	800aede <_printf_i+0x172>
 800af0a:	6823      	ldr	r3, [r4, #0]
 800af0c:	f023 0320 	bic.w	r3, r3, #32
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	e7f6      	b.n	800af02 <_printf_i+0x196>
 800af14:	4616      	mov	r6, r2
 800af16:	e7bd      	b.n	800ae94 <_printf_i+0x128>
 800af18:	6833      	ldr	r3, [r6, #0]
 800af1a:	6825      	ldr	r5, [r4, #0]
 800af1c:	1d18      	adds	r0, r3, #4
 800af1e:	6961      	ldr	r1, [r4, #20]
 800af20:	6030      	str	r0, [r6, #0]
 800af22:	062e      	lsls	r6, r5, #24
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	d501      	bpl.n	800af2c <_printf_i+0x1c0>
 800af28:	6019      	str	r1, [r3, #0]
 800af2a:	e002      	b.n	800af32 <_printf_i+0x1c6>
 800af2c:	0668      	lsls	r0, r5, #25
 800af2e:	d5fb      	bpl.n	800af28 <_printf_i+0x1bc>
 800af30:	8019      	strh	r1, [r3, #0]
 800af32:	2300      	movs	r3, #0
 800af34:	4616      	mov	r6, r2
 800af36:	6123      	str	r3, [r4, #16]
 800af38:	e7bc      	b.n	800aeb4 <_printf_i+0x148>
 800af3a:	6833      	ldr	r3, [r6, #0]
 800af3c:	2100      	movs	r1, #0
 800af3e:	1d1a      	adds	r2, r3, #4
 800af40:	6032      	str	r2, [r6, #0]
 800af42:	681e      	ldr	r6, [r3, #0]
 800af44:	6862      	ldr	r2, [r4, #4]
 800af46:	4630      	mov	r0, r6
 800af48:	f000 f980 	bl	800b24c <memchr>
 800af4c:	b108      	cbz	r0, 800af52 <_printf_i+0x1e6>
 800af4e:	1b80      	subs	r0, r0, r6
 800af50:	6060      	str	r0, [r4, #4]
 800af52:	6863      	ldr	r3, [r4, #4]
 800af54:	6123      	str	r3, [r4, #16]
 800af56:	2300      	movs	r3, #0
 800af58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af5c:	e7aa      	b.n	800aeb4 <_printf_i+0x148>
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	4632      	mov	r2, r6
 800af62:	4649      	mov	r1, r9
 800af64:	4640      	mov	r0, r8
 800af66:	47d0      	blx	sl
 800af68:	3001      	adds	r0, #1
 800af6a:	d0ad      	beq.n	800aec8 <_printf_i+0x15c>
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	079b      	lsls	r3, r3, #30
 800af70:	d413      	bmi.n	800af9a <_printf_i+0x22e>
 800af72:	68e0      	ldr	r0, [r4, #12]
 800af74:	9b03      	ldr	r3, [sp, #12]
 800af76:	4298      	cmp	r0, r3
 800af78:	bfb8      	it	lt
 800af7a:	4618      	movlt	r0, r3
 800af7c:	e7a6      	b.n	800aecc <_printf_i+0x160>
 800af7e:	2301      	movs	r3, #1
 800af80:	4632      	mov	r2, r6
 800af82:	4649      	mov	r1, r9
 800af84:	4640      	mov	r0, r8
 800af86:	47d0      	blx	sl
 800af88:	3001      	adds	r0, #1
 800af8a:	d09d      	beq.n	800aec8 <_printf_i+0x15c>
 800af8c:	3501      	adds	r5, #1
 800af8e:	68e3      	ldr	r3, [r4, #12]
 800af90:	9903      	ldr	r1, [sp, #12]
 800af92:	1a5b      	subs	r3, r3, r1
 800af94:	42ab      	cmp	r3, r5
 800af96:	dcf2      	bgt.n	800af7e <_printf_i+0x212>
 800af98:	e7eb      	b.n	800af72 <_printf_i+0x206>
 800af9a:	2500      	movs	r5, #0
 800af9c:	f104 0619 	add.w	r6, r4, #25
 800afa0:	e7f5      	b.n	800af8e <_printf_i+0x222>
 800afa2:	bf00      	nop
 800afa4:	0800b8bd 	.word	0x0800b8bd
 800afa8:	0800b8ce 	.word	0x0800b8ce

0800afac <__sflush_r>:
 800afac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb4:	0716      	lsls	r6, r2, #28
 800afb6:	4605      	mov	r5, r0
 800afb8:	460c      	mov	r4, r1
 800afba:	d454      	bmi.n	800b066 <__sflush_r+0xba>
 800afbc:	684b      	ldr	r3, [r1, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	dc02      	bgt.n	800afc8 <__sflush_r+0x1c>
 800afc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	dd48      	ble.n	800b05a <__sflush_r+0xae>
 800afc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afca:	2e00      	cmp	r6, #0
 800afcc:	d045      	beq.n	800b05a <__sflush_r+0xae>
 800afce:	2300      	movs	r3, #0
 800afd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800afd4:	682f      	ldr	r7, [r5, #0]
 800afd6:	6a21      	ldr	r1, [r4, #32]
 800afd8:	602b      	str	r3, [r5, #0]
 800afda:	d030      	beq.n	800b03e <__sflush_r+0x92>
 800afdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afde:	89a3      	ldrh	r3, [r4, #12]
 800afe0:	0759      	lsls	r1, r3, #29
 800afe2:	d505      	bpl.n	800aff0 <__sflush_r+0x44>
 800afe4:	6863      	ldr	r3, [r4, #4]
 800afe6:	1ad2      	subs	r2, r2, r3
 800afe8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afea:	b10b      	cbz	r3, 800aff0 <__sflush_r+0x44>
 800afec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afee:	1ad2      	subs	r2, r2, r3
 800aff0:	2300      	movs	r3, #0
 800aff2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aff4:	6a21      	ldr	r1, [r4, #32]
 800aff6:	4628      	mov	r0, r5
 800aff8:	47b0      	blx	r6
 800affa:	1c43      	adds	r3, r0, #1
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	d106      	bne.n	800b00e <__sflush_r+0x62>
 800b000:	6829      	ldr	r1, [r5, #0]
 800b002:	291d      	cmp	r1, #29
 800b004:	d82b      	bhi.n	800b05e <__sflush_r+0xb2>
 800b006:	4a2a      	ldr	r2, [pc, #168]	@ (800b0b0 <__sflush_r+0x104>)
 800b008:	410a      	asrs	r2, r1
 800b00a:	07d6      	lsls	r6, r2, #31
 800b00c:	d427      	bmi.n	800b05e <__sflush_r+0xb2>
 800b00e:	2200      	movs	r2, #0
 800b010:	04d9      	lsls	r1, r3, #19
 800b012:	6062      	str	r2, [r4, #4]
 800b014:	6922      	ldr	r2, [r4, #16]
 800b016:	6022      	str	r2, [r4, #0]
 800b018:	d504      	bpl.n	800b024 <__sflush_r+0x78>
 800b01a:	1c42      	adds	r2, r0, #1
 800b01c:	d101      	bne.n	800b022 <__sflush_r+0x76>
 800b01e:	682b      	ldr	r3, [r5, #0]
 800b020:	b903      	cbnz	r3, 800b024 <__sflush_r+0x78>
 800b022:	6560      	str	r0, [r4, #84]	@ 0x54
 800b024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b026:	602f      	str	r7, [r5, #0]
 800b028:	b1b9      	cbz	r1, 800b05a <__sflush_r+0xae>
 800b02a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b02e:	4299      	cmp	r1, r3
 800b030:	d002      	beq.n	800b038 <__sflush_r+0x8c>
 800b032:	4628      	mov	r0, r5
 800b034:	f7ff fbee 	bl	800a814 <_free_r>
 800b038:	2300      	movs	r3, #0
 800b03a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b03c:	e00d      	b.n	800b05a <__sflush_r+0xae>
 800b03e:	2301      	movs	r3, #1
 800b040:	4628      	mov	r0, r5
 800b042:	47b0      	blx	r6
 800b044:	4602      	mov	r2, r0
 800b046:	1c50      	adds	r0, r2, #1
 800b048:	d1c9      	bne.n	800afde <__sflush_r+0x32>
 800b04a:	682b      	ldr	r3, [r5, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d0c6      	beq.n	800afde <__sflush_r+0x32>
 800b050:	2b1d      	cmp	r3, #29
 800b052:	d001      	beq.n	800b058 <__sflush_r+0xac>
 800b054:	2b16      	cmp	r3, #22
 800b056:	d11d      	bne.n	800b094 <__sflush_r+0xe8>
 800b058:	602f      	str	r7, [r5, #0]
 800b05a:	2000      	movs	r0, #0
 800b05c:	e021      	b.n	800b0a2 <__sflush_r+0xf6>
 800b05e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b062:	b21b      	sxth	r3, r3
 800b064:	e01a      	b.n	800b09c <__sflush_r+0xf0>
 800b066:	690f      	ldr	r7, [r1, #16]
 800b068:	2f00      	cmp	r7, #0
 800b06a:	d0f6      	beq.n	800b05a <__sflush_r+0xae>
 800b06c:	0793      	lsls	r3, r2, #30
 800b06e:	680e      	ldr	r6, [r1, #0]
 800b070:	600f      	str	r7, [r1, #0]
 800b072:	bf0c      	ite	eq
 800b074:	694b      	ldreq	r3, [r1, #20]
 800b076:	2300      	movne	r3, #0
 800b078:	eba6 0807 	sub.w	r8, r6, r7
 800b07c:	608b      	str	r3, [r1, #8]
 800b07e:	f1b8 0f00 	cmp.w	r8, #0
 800b082:	ddea      	ble.n	800b05a <__sflush_r+0xae>
 800b084:	4643      	mov	r3, r8
 800b086:	463a      	mov	r2, r7
 800b088:	6a21      	ldr	r1, [r4, #32]
 800b08a:	4628      	mov	r0, r5
 800b08c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b08e:	47b0      	blx	r6
 800b090:	2800      	cmp	r0, #0
 800b092:	dc08      	bgt.n	800b0a6 <__sflush_r+0xfa>
 800b094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b09c:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a0:	81a3      	strh	r3, [r4, #12]
 800b0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a6:	4407      	add	r7, r0
 800b0a8:	eba8 0800 	sub.w	r8, r8, r0
 800b0ac:	e7e7      	b.n	800b07e <__sflush_r+0xd2>
 800b0ae:	bf00      	nop
 800b0b0:	dfbffffe 	.word	0xdfbffffe

0800b0b4 <_fflush_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	690b      	ldr	r3, [r1, #16]
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	460c      	mov	r4, r1
 800b0bc:	b913      	cbnz	r3, 800b0c4 <_fflush_r+0x10>
 800b0be:	2500      	movs	r5, #0
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}
 800b0c4:	b118      	cbz	r0, 800b0ce <_fflush_r+0x1a>
 800b0c6:	6a03      	ldr	r3, [r0, #32]
 800b0c8:	b90b      	cbnz	r3, 800b0ce <_fflush_r+0x1a>
 800b0ca:	f7ff fa87 	bl	800a5dc <__sinit>
 800b0ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0f3      	beq.n	800b0be <_fflush_r+0xa>
 800b0d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0d8:	07d0      	lsls	r0, r2, #31
 800b0da:	d404      	bmi.n	800b0e6 <_fflush_r+0x32>
 800b0dc:	0599      	lsls	r1, r3, #22
 800b0de:	d402      	bmi.n	800b0e6 <_fflush_r+0x32>
 800b0e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0e2:	f7ff fb80 	bl	800a7e6 <__retarget_lock_acquire_recursive>
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	4621      	mov	r1, r4
 800b0ea:	f7ff ff5f 	bl	800afac <__sflush_r>
 800b0ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	07da      	lsls	r2, r3, #31
 800b0f4:	d4e4      	bmi.n	800b0c0 <_fflush_r+0xc>
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	059b      	lsls	r3, r3, #22
 800b0fa:	d4e1      	bmi.n	800b0c0 <_fflush_r+0xc>
 800b0fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0fe:	f7ff fb73 	bl	800a7e8 <__retarget_lock_release_recursive>
 800b102:	e7dd      	b.n	800b0c0 <_fflush_r+0xc>

0800b104 <__swbuf_r>:
 800b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b106:	460e      	mov	r6, r1
 800b108:	4614      	mov	r4, r2
 800b10a:	4605      	mov	r5, r0
 800b10c:	b118      	cbz	r0, 800b116 <__swbuf_r+0x12>
 800b10e:	6a03      	ldr	r3, [r0, #32]
 800b110:	b90b      	cbnz	r3, 800b116 <__swbuf_r+0x12>
 800b112:	f7ff fa63 	bl	800a5dc <__sinit>
 800b116:	69a3      	ldr	r3, [r4, #24]
 800b118:	60a3      	str	r3, [r4, #8]
 800b11a:	89a3      	ldrh	r3, [r4, #12]
 800b11c:	071a      	lsls	r2, r3, #28
 800b11e:	d501      	bpl.n	800b124 <__swbuf_r+0x20>
 800b120:	6923      	ldr	r3, [r4, #16]
 800b122:	b943      	cbnz	r3, 800b136 <__swbuf_r+0x32>
 800b124:	4621      	mov	r1, r4
 800b126:	4628      	mov	r0, r5
 800b128:	f000 f82a 	bl	800b180 <__swsetup_r>
 800b12c:	b118      	cbz	r0, 800b136 <__swbuf_r+0x32>
 800b12e:	f04f 37ff 	mov.w	r7, #4294967295
 800b132:	4638      	mov	r0, r7
 800b134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	b2f6      	uxtb	r6, r6
 800b13a:	6922      	ldr	r2, [r4, #16]
 800b13c:	4637      	mov	r7, r6
 800b13e:	1a98      	subs	r0, r3, r2
 800b140:	6963      	ldr	r3, [r4, #20]
 800b142:	4283      	cmp	r3, r0
 800b144:	dc05      	bgt.n	800b152 <__swbuf_r+0x4e>
 800b146:	4621      	mov	r1, r4
 800b148:	4628      	mov	r0, r5
 800b14a:	f7ff ffb3 	bl	800b0b4 <_fflush_r>
 800b14e:	2800      	cmp	r0, #0
 800b150:	d1ed      	bne.n	800b12e <__swbuf_r+0x2a>
 800b152:	68a3      	ldr	r3, [r4, #8]
 800b154:	3b01      	subs	r3, #1
 800b156:	60a3      	str	r3, [r4, #8]
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	1c5a      	adds	r2, r3, #1
 800b15c:	6022      	str	r2, [r4, #0]
 800b15e:	701e      	strb	r6, [r3, #0]
 800b160:	1c43      	adds	r3, r0, #1
 800b162:	6962      	ldr	r2, [r4, #20]
 800b164:	429a      	cmp	r2, r3
 800b166:	d004      	beq.n	800b172 <__swbuf_r+0x6e>
 800b168:	89a3      	ldrh	r3, [r4, #12]
 800b16a:	07db      	lsls	r3, r3, #31
 800b16c:	d5e1      	bpl.n	800b132 <__swbuf_r+0x2e>
 800b16e:	2e0a      	cmp	r6, #10
 800b170:	d1df      	bne.n	800b132 <__swbuf_r+0x2e>
 800b172:	4621      	mov	r1, r4
 800b174:	4628      	mov	r0, r5
 800b176:	f7ff ff9d 	bl	800b0b4 <_fflush_r>
 800b17a:	2800      	cmp	r0, #0
 800b17c:	d0d9      	beq.n	800b132 <__swbuf_r+0x2e>
 800b17e:	e7d6      	b.n	800b12e <__swbuf_r+0x2a>

0800b180 <__swsetup_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4b29      	ldr	r3, [pc, #164]	@ (800b228 <__swsetup_r+0xa8>)
 800b184:	4605      	mov	r5, r0
 800b186:	460c      	mov	r4, r1
 800b188:	6818      	ldr	r0, [r3, #0]
 800b18a:	b118      	cbz	r0, 800b194 <__swsetup_r+0x14>
 800b18c:	6a03      	ldr	r3, [r0, #32]
 800b18e:	b90b      	cbnz	r3, 800b194 <__swsetup_r+0x14>
 800b190:	f7ff fa24 	bl	800a5dc <__sinit>
 800b194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b198:	0719      	lsls	r1, r3, #28
 800b19a:	d422      	bmi.n	800b1e2 <__swsetup_r+0x62>
 800b19c:	06da      	lsls	r2, r3, #27
 800b19e:	d407      	bmi.n	800b1b0 <__swsetup_r+0x30>
 800b1a0:	2209      	movs	r2, #9
 800b1a2:	602a      	str	r2, [r5, #0]
 800b1a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ac:	81a3      	strh	r3, [r4, #12]
 800b1ae:	e033      	b.n	800b218 <__swsetup_r+0x98>
 800b1b0:	0758      	lsls	r0, r3, #29
 800b1b2:	d512      	bpl.n	800b1da <__swsetup_r+0x5a>
 800b1b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1b6:	b141      	cbz	r1, 800b1ca <__swsetup_r+0x4a>
 800b1b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1bc:	4299      	cmp	r1, r3
 800b1be:	d002      	beq.n	800b1c6 <__swsetup_r+0x46>
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	f7ff fb27 	bl	800a814 <_free_r>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1ca:	89a3      	ldrh	r3, [r4, #12]
 800b1cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b1d0:	81a3      	strh	r3, [r4, #12]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	6063      	str	r3, [r4, #4]
 800b1d6:	6923      	ldr	r3, [r4, #16]
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	f043 0308 	orr.w	r3, r3, #8
 800b1e0:	81a3      	strh	r3, [r4, #12]
 800b1e2:	6923      	ldr	r3, [r4, #16]
 800b1e4:	b94b      	cbnz	r3, 800b1fa <__swsetup_r+0x7a>
 800b1e6:	89a3      	ldrh	r3, [r4, #12]
 800b1e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b1ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1f0:	d003      	beq.n	800b1fa <__swsetup_r+0x7a>
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	f000 f85c 	bl	800b2b2 <__smakebuf_r>
 800b1fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1fe:	f013 0201 	ands.w	r2, r3, #1
 800b202:	d00a      	beq.n	800b21a <__swsetup_r+0x9a>
 800b204:	2200      	movs	r2, #0
 800b206:	60a2      	str	r2, [r4, #8]
 800b208:	6962      	ldr	r2, [r4, #20]
 800b20a:	4252      	negs	r2, r2
 800b20c:	61a2      	str	r2, [r4, #24]
 800b20e:	6922      	ldr	r2, [r4, #16]
 800b210:	b942      	cbnz	r2, 800b224 <__swsetup_r+0xa4>
 800b212:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b216:	d1c5      	bne.n	800b1a4 <__swsetup_r+0x24>
 800b218:	bd38      	pop	{r3, r4, r5, pc}
 800b21a:	0799      	lsls	r1, r3, #30
 800b21c:	bf58      	it	pl
 800b21e:	6962      	ldrpl	r2, [r4, #20]
 800b220:	60a2      	str	r2, [r4, #8]
 800b222:	e7f4      	b.n	800b20e <__swsetup_r+0x8e>
 800b224:	2000      	movs	r0, #0
 800b226:	e7f7      	b.n	800b218 <__swsetup_r+0x98>
 800b228:	200000d4 	.word	0x200000d4

0800b22c <_sbrk_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	2300      	movs	r3, #0
 800b230:	4d05      	ldr	r5, [pc, #20]	@ (800b248 <_sbrk_r+0x1c>)
 800b232:	4604      	mov	r4, r0
 800b234:	4608      	mov	r0, r1
 800b236:	602b      	str	r3, [r5, #0]
 800b238:	f7f6 fb12 	bl	8001860 <_sbrk>
 800b23c:	1c43      	adds	r3, r0, #1
 800b23e:	d102      	bne.n	800b246 <_sbrk_r+0x1a>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	b103      	cbz	r3, 800b246 <_sbrk_r+0x1a>
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	bd38      	pop	{r3, r4, r5, pc}
 800b248:	20008ba4 	.word	0x20008ba4

0800b24c <memchr>:
 800b24c:	b2c9      	uxtb	r1, r1
 800b24e:	4603      	mov	r3, r0
 800b250:	4402      	add	r2, r0
 800b252:	b510      	push	{r4, lr}
 800b254:	4293      	cmp	r3, r2
 800b256:	4618      	mov	r0, r3
 800b258:	d101      	bne.n	800b25e <memchr+0x12>
 800b25a:	2000      	movs	r0, #0
 800b25c:	e003      	b.n	800b266 <memchr+0x1a>
 800b25e:	7804      	ldrb	r4, [r0, #0]
 800b260:	3301      	adds	r3, #1
 800b262:	428c      	cmp	r4, r1
 800b264:	d1f6      	bne.n	800b254 <memchr+0x8>
 800b266:	bd10      	pop	{r4, pc}

0800b268 <__swhatbuf_r>:
 800b268:	b570      	push	{r4, r5, r6, lr}
 800b26a:	460c      	mov	r4, r1
 800b26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b270:	b096      	sub	sp, #88	@ 0x58
 800b272:	4615      	mov	r5, r2
 800b274:	2900      	cmp	r1, #0
 800b276:	461e      	mov	r6, r3
 800b278:	da0c      	bge.n	800b294 <__swhatbuf_r+0x2c>
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	2100      	movs	r1, #0
 800b27e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b282:	bf14      	ite	ne
 800b284:	2340      	movne	r3, #64	@ 0x40
 800b286:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b28a:	2000      	movs	r0, #0
 800b28c:	6031      	str	r1, [r6, #0]
 800b28e:	602b      	str	r3, [r5, #0]
 800b290:	b016      	add	sp, #88	@ 0x58
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	466a      	mov	r2, sp
 800b296:	f000 f849 	bl	800b32c <_fstat_r>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	dbed      	blt.n	800b27a <__swhatbuf_r+0x12>
 800b29e:	9901      	ldr	r1, [sp, #4]
 800b2a0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b2a4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b2a8:	4259      	negs	r1, r3
 800b2aa:	4159      	adcs	r1, r3
 800b2ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2b0:	e7eb      	b.n	800b28a <__swhatbuf_r+0x22>

0800b2b2 <__smakebuf_r>:
 800b2b2:	898b      	ldrh	r3, [r1, #12]
 800b2b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2b6:	079d      	lsls	r5, r3, #30
 800b2b8:	4606      	mov	r6, r0
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	d507      	bpl.n	800b2ce <__smakebuf_r+0x1c>
 800b2be:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b2c2:	6023      	str	r3, [r4, #0]
 800b2c4:	6123      	str	r3, [r4, #16]
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	6163      	str	r3, [r4, #20]
 800b2ca:	b003      	add	sp, #12
 800b2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ce:	ab01      	add	r3, sp, #4
 800b2d0:	466a      	mov	r2, sp
 800b2d2:	f7ff ffc9 	bl	800b268 <__swhatbuf_r>
 800b2d6:	9f00      	ldr	r7, [sp, #0]
 800b2d8:	4605      	mov	r5, r0
 800b2da:	4630      	mov	r0, r6
 800b2dc:	4639      	mov	r1, r7
 800b2de:	f7ff fb05 	bl	800a8ec <_malloc_r>
 800b2e2:	b948      	cbnz	r0, 800b2f8 <__smakebuf_r+0x46>
 800b2e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2e8:	059a      	lsls	r2, r3, #22
 800b2ea:	d4ee      	bmi.n	800b2ca <__smakebuf_r+0x18>
 800b2ec:	f023 0303 	bic.w	r3, r3, #3
 800b2f0:	f043 0302 	orr.w	r3, r3, #2
 800b2f4:	81a3      	strh	r3, [r4, #12]
 800b2f6:	e7e2      	b.n	800b2be <__smakebuf_r+0xc>
 800b2f8:	89a3      	ldrh	r3, [r4, #12]
 800b2fa:	6020      	str	r0, [r4, #0]
 800b2fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b300:	81a3      	strh	r3, [r4, #12]
 800b302:	9b01      	ldr	r3, [sp, #4]
 800b304:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b308:	b15b      	cbz	r3, 800b322 <__smakebuf_r+0x70>
 800b30a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b30e:	4630      	mov	r0, r6
 800b310:	f000 f81e 	bl	800b350 <_isatty_r>
 800b314:	b128      	cbz	r0, 800b322 <__smakebuf_r+0x70>
 800b316:	89a3      	ldrh	r3, [r4, #12]
 800b318:	f023 0303 	bic.w	r3, r3, #3
 800b31c:	f043 0301 	orr.w	r3, r3, #1
 800b320:	81a3      	strh	r3, [r4, #12]
 800b322:	89a3      	ldrh	r3, [r4, #12]
 800b324:	431d      	orrs	r5, r3
 800b326:	81a5      	strh	r5, [r4, #12]
 800b328:	e7cf      	b.n	800b2ca <__smakebuf_r+0x18>
	...

0800b32c <_fstat_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	2300      	movs	r3, #0
 800b330:	4d06      	ldr	r5, [pc, #24]	@ (800b34c <_fstat_r+0x20>)
 800b332:	4604      	mov	r4, r0
 800b334:	4608      	mov	r0, r1
 800b336:	4611      	mov	r1, r2
 800b338:	602b      	str	r3, [r5, #0]
 800b33a:	f7f6 fa68 	bl	800180e <_fstat>
 800b33e:	1c43      	adds	r3, r0, #1
 800b340:	d102      	bne.n	800b348 <_fstat_r+0x1c>
 800b342:	682b      	ldr	r3, [r5, #0]
 800b344:	b103      	cbz	r3, 800b348 <_fstat_r+0x1c>
 800b346:	6023      	str	r3, [r4, #0]
 800b348:	bd38      	pop	{r3, r4, r5, pc}
 800b34a:	bf00      	nop
 800b34c:	20008ba4 	.word	0x20008ba4

0800b350 <_isatty_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	2300      	movs	r3, #0
 800b354:	4d05      	ldr	r5, [pc, #20]	@ (800b36c <_isatty_r+0x1c>)
 800b356:	4604      	mov	r4, r0
 800b358:	4608      	mov	r0, r1
 800b35a:	602b      	str	r3, [r5, #0]
 800b35c:	f7f6 fa67 	bl	800182e <_isatty>
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	d102      	bne.n	800b36a <_isatty_r+0x1a>
 800b364:	682b      	ldr	r3, [r5, #0]
 800b366:	b103      	cbz	r3, 800b36a <_isatty_r+0x1a>
 800b368:	6023      	str	r3, [r4, #0]
 800b36a:	bd38      	pop	{r3, r4, r5, pc}
 800b36c:	20008ba4 	.word	0x20008ba4

0800b370 <_init>:
 800b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b372:	bf00      	nop
 800b374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b376:	bc08      	pop	{r3}
 800b378:	469e      	mov	lr, r3
 800b37a:	4770      	bx	lr

0800b37c <_fini>:
 800b37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37e:	bf00      	nop
 800b380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b382:	bc08      	pop	{r3}
 800b384:	469e      	mov	lr, r3
 800b386:	4770      	bx	lr
