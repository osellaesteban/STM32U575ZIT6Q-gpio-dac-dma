
STM32U575ZIT6Q-gpio-dac-dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aec0  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000157  0800b0f8  0800b0f8  0000c0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b250  0800b250  0000c250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b258  0800b258  0000c258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b25c  0800b25c  0000c25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000010c  20000000  0800b260  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000016c0  2000010c  0800b36c  0000d10c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200017cc  0800b36c  0000d7cc  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000d10c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001dc6f  00000000  00000000  0000d142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003908  00000000  00000000  0002adb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018a8  00000000  00000000  0002e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001327  00000000  00000000  0002ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034f8b  00000000  00000000  0003128f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f72b  00000000  00000000  0006621a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00148f6d  00000000  00000000  00085945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ce8b2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000070f0  00000000  00000000  001ce8f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  001d59e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000010c 	.word	0x2000010c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b0e0 	.word	0x0800b0e0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000110 	.word	0x20000110
 8000274:	0800b0e0 	.word	0x0800b0e0

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIOQueue_Config>:
  * @brief  DMA Linked-list GPIOQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_GPIOQueue_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b09c      	sub	sp, #112	@ 0x70
 8000594:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 8000596:	2300      	movs	r3, #0
 8000598:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800059c:	2321      	movs	r3, #33	@ 0x21
 800059e:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_TIM2_UP;
 80005a0:	233c      	movs	r3, #60	@ 0x3c
 80005a2:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ac:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 80005ae:	2308      	movs	r3, #8
 80005b0:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80005ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80005be:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	627b      	str	r3, [r7, #36]	@ 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 80005cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80005d0:	633b      	str	r3, [r7, #48]	@ 0x30
  pNodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 80005d2:	2300      	movs	r3, #0
 80005d4:	643b      	str	r3, [r7, #64]	@ 0x40
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80005d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80005da:	647b      	str	r3, [r7, #68]	@ 0x44
  pNodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM2_TRGO;
 80005dc:	232a      	movs	r3, #42	@ 0x2a
 80005de:	64bb      	str	r3, [r7, #72]	@ 0x48
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pNodeConfig.SrcAddress = GPIOEVals;
 80005e8:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <MX_GPIOQueue_Config+0xb4>)
 80005ea:	663b      	str	r3, [r7, #96]	@ 0x60
  pNodeConfig.DstAddress = (uint32_t)&(GPIOE->ODR);
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <MX_GPIOQueue_Config+0xb8>)
 80005ee:	667b      	str	r3, [r7, #100]	@ 0x64
  pNodeConfig.DataSize = 16*4;
 80005f0:	2340      	movs	r3, #64	@ 0x40
 80005f2:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Build GPIOENode Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &GPIOENode);
 80005f4:	463b      	mov	r3, r7
 80005f6:	4915      	ldr	r1, [pc, #84]	@ (800064c <MX_GPIOQueue_Config+0xbc>)
 80005f8:	4618      	mov	r0, r3
 80005fa:	f003 f82b 	bl	8003654 <HAL_DMAEx_List_BuildNode>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000606:	4313      	orrs	r3, r2
 8000608:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  /* Insert GPIOENode to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&GPIOQueue, &GPIOENode);
 800060c:	490f      	ldr	r1, [pc, #60]	@ (800064c <MX_GPIOQueue_Config+0xbc>)
 800060e:	4810      	ldr	r0, [pc, #64]	@ (8000650 <MX_GPIOQueue_Config+0xc0>)
 8000610:	f003 f84c 	bl	80036ac <HAL_DMAEx_List_InsertNode_Tail>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800061c:	4313      	orrs	r3, r2
 800061e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  ret |= HAL_DMAEx_List_SetCircularMode(&GPIOQueue);
 8000622:	480b      	ldr	r0, [pc, #44]	@ (8000650 <MX_GPIOQueue_Config+0xc0>)
 8000624:	f003 f8ba 	bl	800379c <HAL_DMAEx_List_SetCircularMode>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000630:	4313      	orrs	r3, r2
 8000632:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

   return ret;
 8000636:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800063a:	4618      	mov	r0, r3
 800063c:	3770      	adds	r7, #112	@ 0x70
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000040 	.word	0x20000040
 8000648:	42021014 	.word	0x42021014
 800064c:	20000128 	.word	0x20000128
 8000650:	2000014c 	.word	0x2000014c

08000654 <MX_DACQueue_Config>:
  * @brief  DMA Linked-list DACQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_DACQueue_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09c      	sub	sp, #112	@ 0x70
 8000658:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 800065a:	2300      	movs	r3, #0
 800065c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8000660:	2321      	movs	r3, #33	@ 0x21
 8000662:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_DAC1_CH1;
 8000664:	2302      	movs	r3, #2
 8000666:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000670:	2308      	movs	r3, #8
 8000672:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8000678:	2302      	movs	r3, #2
 800067a:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800067c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000680:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	62bb      	str	r3, [r7, #40]	@ 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800068a:	2300      	movs	r3, #0
 800068c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800068e:	2300      	movs	r3, #0
 8000690:	633b      	str	r3, [r7, #48]	@ 0x30
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8000692:	2300      	movs	r3, #0
 8000694:	647b      	str	r3, [r7, #68]	@ 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8000696:	2300      	movs	r3, #0
 8000698:	63bb      	str	r3, [r7, #56]	@ 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800069a:	2300      	movs	r3, #0
 800069c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pNodeConfig.SrcAddress = DACVals;
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <MX_DACQueue_Config+0xa4>)
 80006a0:	663b      	str	r3, [r7, #96]	@ 0x60
  pNodeConfig.DstAddress = (uint32_t)&(DAC1->DOR1);
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <MX_DACQueue_Config+0xa8>)
 80006a4:	667b      	str	r3, [r7, #100]	@ 0x64
  pNodeConfig.DataSize = 16*4;
 80006a6:	2340      	movs	r3, #64	@ 0x40
 80006a8:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Build DACNode Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DACNode);
 80006aa:	463b      	mov	r3, r7
 80006ac:	4914      	ldr	r1, [pc, #80]	@ (8000700 <MX_DACQueue_Config+0xac>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 ffd0 	bl	8003654 <HAL_DMAEx_List_BuildNode>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80006bc:	4313      	orrs	r3, r2
 80006be:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  /* Insert DACNode to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&DACQueue, &DACNode);
 80006c2:	490f      	ldr	r1, [pc, #60]	@ (8000700 <MX_DACQueue_Config+0xac>)
 80006c4:	480f      	ldr	r0, [pc, #60]	@ (8000704 <MX_DACQueue_Config+0xb0>)
 80006c6:	f002 fff1 	bl	80036ac <HAL_DMAEx_List_InsertNode_Tail>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80006d2:	4313      	orrs	r3, r2
 80006d4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  ret |= HAL_DMAEx_List_SetCircularMode(&DACQueue);
 80006d8:	480a      	ldr	r0, [pc, #40]	@ (8000704 <MX_DACQueue_Config+0xb0>)
 80006da:	f003 f85f 	bl	800379c <HAL_DMAEx_List_SetCircularMode>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80006e6:	4313      	orrs	r3, r2
 80006e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

   return ret;
 80006ec:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3770      	adds	r7, #112	@ 0x70
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000000 	.word	0x20000000
 80006fc:	4602182c 	.word	0x4602182c
 8000700:	20000164 	.word	0x20000164
 8000704:	20000188 	.word	0x20000188

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070e:	f001 fa49 	bl	8001ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000712:	f000 f8fa 	bl	800090a <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 f8a5 	bl	8000864 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b48      	ldr	r3, [pc, #288]	@ (800083c <main+0x134>)
 800071c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000720:	4a46      	ldr	r2, [pc, #280]	@ (800083c <main+0x134>)
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800072a:	4b44      	ldr	r3, [pc, #272]	@ (800083c <main+0x134>)
 800072c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000738:	f000 fa1c 	bl	8000b74 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800073c:	f000 f942 	bl	80009c4 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 8000740:	f000 f9ba 	bl	8000ab8 <MX_ICACHE_Init>
  MX_DAC1_Init();
 8000744:	f000 f8f0 	bl	8000928 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000748:	f000 f9c2 	bl	8000ad0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //DACDMAConfig();
  MX_GPIOQueue_Config();
 800074c:	f7ff ff20 	bl	8000590 <MX_GPIOQueue_Config>
  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel11, &GPIOQueue);
 8000750:	493b      	ldr	r1, [pc, #236]	@ (8000840 <main+0x138>)
 8000752:	483c      	ldr	r0, [pc, #240]	@ (8000844 <main+0x13c>)
 8000754:	f003 f882 	bl	800385c <HAL_DMAEx_List_LinkQ>
  HAL_DMAEx_List_Start(&handle_GPDMA1_Channel11);
 8000758:	483a      	ldr	r0, [pc, #232]	@ (8000844 <main+0x13c>)
 800075a:	f002 fe73 	bl	8003444 <HAL_DMAEx_List_Start>

  MX_DACQueue_Config();
 800075e:	f7ff ff79 	bl	8000654 <MX_DACQueue_Config>
  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel10, &DACQueue);
 8000762:	4939      	ldr	r1, [pc, #228]	@ (8000848 <main+0x140>)
 8000764:	4839      	ldr	r0, [pc, #228]	@ (800084c <main+0x144>)
 8000766:	f003 f879 	bl	800385c <HAL_DMAEx_List_LinkQ>
  __HAL_LINKDMA(&hdac1, DMA_Handle1, handle_GPDMA1_Channel10);
 800076a:	4b39      	ldr	r3, [pc, #228]	@ (8000850 <main+0x148>)
 800076c:	4a37      	ldr	r2, [pc, #220]	@ (800084c <main+0x144>)
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	4b36      	ldr	r3, [pc, #216]	@ (800084c <main+0x144>)
 8000772:	4a37      	ldr	r2, [pc, #220]	@ (8000850 <main+0x148>)
 8000774:	65da      	str	r2, [r3, #92]	@ 0x5c

 // HAL_TIM_Base_Start(&htim1);



  stConfigureDefault(st_ramp);
 8000776:	2001      	movs	r0, #1
 8000778:	f000 fc34 	bl	8000fe4 <stConfigureDefault>
  st_active_t state = st_enabled;
 800077c:	2301      	movs	r3, #1
 800077e:	71fb      	strb	r3, [r7, #7]
  stSetGlobalState(state);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4618      	mov	r0, r3
 8000784:	f000 faf6 	bl	8000d74 <stSetGlobalState>
  state = st_disabled;
 8000788:	2300      	movs	r3, #0
 800078a:	71fb      	strb	r3, [r7, #7]
  stGetGlobalState(&state);
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fb04 	bl	8000d9c <stGetGlobalState>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000794:	2000      	movs	r0, #0
 8000796:	f000 ffb3 	bl	8001700 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800079a:	2001      	movs	r0, #1
 800079c:	f000 ffb0 	bl	8001700 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80007a0:	2002      	movs	r0, #2
 80007a2:	f000 ffad 	bl	8001700 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80007a6:	2101      	movs	r1, #1
 80007a8:	2000      	movs	r0, #0
 80007aa:	f001 f88d 	bl	80018c8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80007ae:	4b29      	ldr	r3, [pc, #164]	@ (8000854 <main+0x14c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80007b6:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <main+0x14c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80007bc:	4b25      	ldr	r3, [pc, #148]	@ (8000854 <main+0x14c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80007c2:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <main+0x14c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80007c8:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <main+0x14c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80007ce:	4921      	ldr	r1, [pc, #132]	@ (8000854 <main+0x14c>)
 80007d0:	2000      	movs	r0, #0
 80007d2:	f001 f907 	bl	80019e4 <BSP_COM_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <main+0xd8>
  {
    Error_Handler();
 80007dc:	f000 fac4 	bl	8000d68 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80007e0:	481d      	ldr	r0, [pc, #116]	@ (8000858 <main+0x150>)
 80007e2:	f009 fde9 	bl	800a3b8 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f001 f81a 	bl	8001820 <BSP_LED_On>
  BSP_LED_On(LED_BLUE);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f001 f817 	bl	8001820 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 80007f2:	2002      	movs	r0, #2
 80007f4:	f001 f814 	bl	8001820 <BSP_LED_On>

  HAL_TIM_Base_Start(&htim2);
 80007f8:	4818      	ldr	r0, [pc, #96]	@ (800085c <main+0x154>)
 80007fa:	f008 fa0b 	bl	8008c14 <HAL_TIM_Base_Start>
/*  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel11, &GPIOQueue);
  HAL_DMAEx_List_Start(&handle_GPDMA1_Channel11);*/
  // GPIOS and DAC output
  TIM2->DIER |= (TIM_DIER_UDE) |  TIM_DIER_CC1DE;;//(1 << 8);   // set UDE bit (update dma request enable)
 80007fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000808:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800080c:	60d3      	str	r3, [r2, #12]
 // HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)DACVals, NVALS, DAC_ALIGN_12B_R);
/*  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel10, &DACQueue);
    HAL_DMAEx_List_Start(&handle_GPDMA1_Channel10);*/


  DACDMAConfig();
 800080e:	f000 fa23 	bl	8000c58 <DACDMAConfig>
  HAL_TIM_Base_Start_IT(&htim2);//(&htim1, TIM_CHANNEL_1);
 8000812:	4812      	ldr	r0, [pc, #72]	@ (800085c <main+0x154>)
 8000814:	f008 fa96 	bl	8008d44 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000818:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <main+0x158>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d1fb      	bne.n	8000818 <main+0x110>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <main+0x158>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000826:	2000      	movs	r0, #0
 8000828:	f001 f824 	bl	8001874 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_BLUE);
 800082c:	2001      	movs	r0, #1
 800082e:	f001 f821 	bl	8001874 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8000832:	2002      	movs	r0, #2
 8000834:	f001 f81e 	bl	8001874 <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED)
 8000838:	e7ee      	b.n	8000818 <main+0x110>
 800083a:	bf00      	nop
 800083c:	46020c00 	.word	0x46020c00
 8000840:	2000014c 	.word	0x2000014c
 8000844:	200001f0 	.word	0x200001f0
 8000848:	20000188 	.word	0x20000188
 800084c:	20000268 	.word	0x20000268
 8000850:	200001b4 	.word	0x200001b4
 8000854:	200001a0 	.word	0x200001a0
 8000858:	0800b0f8 	.word	0x0800b0f8
 800085c:	200002e0 	.word	0x200002e0
 8000860:	200001b0 	.word	0x200001b0

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b09e      	sub	sp, #120	@ 0x78
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0318 	add.w	r3, r7, #24
 800086e:	2260      	movs	r2, #96	@ 0x60
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f009 fdf5 	bl	800a462 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
 8000886:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000888:	2000      	movs	r0, #0
 800088a:	f004 f8f3 	bl	8004a74 <HAL_PWREx_ControlVoltageScaling>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000894:	f000 fa68 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000898:	231a      	movs	r3, #26
 800089a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a2:	2310      	movs	r3, #16
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008ac:	2301      	movs	r3, #1
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008b0:	2310      	movs	r3, #16
 80008b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80008b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008be:	2300      	movs	r3, #0
 80008c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c2:	f107 0318 	add.w	r3, r7, #24
 80008c6:	4618      	mov	r0, r3
 80008c8:	f004 f9d0 	bl	8004c6c <HAL_RCC_OscConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008d2:	f000 fa49 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	231f      	movs	r3, #31
 80008d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f005 f896 	bl	8005a24 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008fe:	f000 fa33 	bl	8000d68 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3778      	adds	r7, #120	@ 0x78
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800090e:	f004 f99d 	bl	8004c4c <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000912:	2002      	movs	r0, #2
 8000914:	f004 f93a 	bl	8004b8c <HAL_PWREx_ConfigSupply>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800091e:	f000 fa23 	bl	8000d68 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	@ 0x38
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	2230      	movs	r2, #48	@ 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f009 fd93 	bl	800a462 <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000940:	4b1e      	ldr	r3, [pc, #120]	@ (80009bc <MX_DAC1_Init+0x94>)
 8000942:	4a1f      	ldr	r2, [pc, #124]	@ (80009c0 <MX_DAC1_Init+0x98>)
 8000944:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000946:	481d      	ldr	r0, [pc, #116]	@ (80009bc <MX_DAC1_Init+0x94>)
 8000948:	f001 fb0a 	bl	8001f60 <HAL_DAC_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 8000952:	f000 fa09 	bl	8000d68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000966:	230a      	movs	r3, #10
 8000968:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	2200      	movs	r2, #0
 800097c:	4619      	mov	r1, r3
 800097e:	480f      	ldr	r0, [pc, #60]	@ (80009bc <MX_DAC1_Init+0x94>)
 8000980:	f001 fdf2 	bl	8002568 <HAL_DAC_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 800098a:	f000 f9ed 	bl	8000d68 <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4619      	mov	r1, r3
 8000996:	4809      	ldr	r0, [pc, #36]	@ (80009bc <MX_DAC1_Init+0x94>)
 8000998:	f002 f918 	bl	8002bcc <HAL_DACEx_SetConfigAutonomousMode>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 80009a2:	f000 f9e1 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1);
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	4803      	ldr	r0, [pc, #12]	@ (80009bc <MX_DAC1_Init+0x94>)
 80009b0:	f001 ffdc 	bl	800296c <HAL_DACEx_SelfCalibrate>
  /* USER CODE END DAC1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3738      	adds	r7, #56	@ 0x38
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200001b4 	.word	0x200001b4
 80009c0:	46021800 	.word	0x46021800

080009c4 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80009ca:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <MX_GPDMA1_Init+0xe0>)
 80009cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d0:	4a34      	ldr	r2, [pc, #208]	@ (8000aa4 <MX_GPDMA1_Init+0xe0>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80009da:	4b32      	ldr	r3, [pc, #200]	@ (8000aa4 <MX_GPDMA1_Init+0xe0>)
 80009dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel10_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2052      	movs	r0, #82	@ 0x52
 80009ee:	f001 fa29 	bl	8001e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel10_IRQn);
 80009f2:	2052      	movs	r0, #82	@ 0x52
 80009f4:	f001 fa40 	bl	8001e78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel11_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	2053      	movs	r0, #83	@ 0x53
 80009fe:	f001 fa21 	bl	8001e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel11_IRQn);
 8000a02:	2053      	movs	r0, #83	@ 0x53
 8000a04:	f001 fa38 	bl	8001e78 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel11.Instance = GPDMA1_Channel11;
 8000a08:	4b27      	ldr	r3, [pc, #156]	@ (8000aa8 <MX_GPDMA1_Init+0xe4>)
 8000a0a:	4a28      	ldr	r2, [pc, #160]	@ (8000aac <MX_GPDMA1_Init+0xe8>)
 8000a0c:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel11.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 8000a0e:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <MX_GPDMA1_Init+0xe4>)
 8000a10:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000a14:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel11.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000a16:	4b24      	ldr	r3, [pc, #144]	@ (8000aa8 <MX_GPDMA1_Init+0xe4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel11.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	@ (8000aa8 <MX_GPDMA1_Init+0xe4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel11.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8000a22:	4b21      	ldr	r3, [pc, #132]	@ (8000aa8 <MX_GPDMA1_Init+0xe4>)
 8000a24:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000a28:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel11.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa8 <MX_GPDMA1_Init+0xe4>)
 8000a2c:	2281      	movs	r2, #129	@ 0x81
 8000a2e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel11) != HAL_OK)
 8000a30:	481d      	ldr	r0, [pc, #116]	@ (8000aa8 <MX_GPDMA1_Init+0xe4>)
 8000a32:	f002 fbdb 	bl	80031ec <HAL_DMAEx_List_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_GPDMA1_Init+0x7c>
  {
    Error_Handler();
 8000a3c:	f000 f994 	bl	8000d68 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel11, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000a40:	2110      	movs	r1, #16
 8000a42:	4819      	ldr	r0, [pc, #100]	@ (8000aa8 <MX_GPDMA1_Init+0xe4>)
 8000a44:	f002 fb70 	bl	8003128 <HAL_DMA_ConfigChannelAttributes>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_GPDMA1_Init+0x8e>
  {
    Error_Handler();
 8000a4e:	f000 f98b 	bl	8000d68 <Error_Handler>
  }
  handle_GPDMA1_Channel10.Instance = GPDMA1_Channel10;
 8000a52:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <MX_GPDMA1_Init+0xec>)
 8000a54:	4a17      	ldr	r2, [pc, #92]	@ (8000ab4 <MX_GPDMA1_Init+0xf0>)
 8000a56:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel10.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <MX_GPDMA1_Init+0xec>)
 8000a5a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000a5e:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel10.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <MX_GPDMA1_Init+0xec>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel10.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000a66:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_GPDMA1_Init+0xec>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel10.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <MX_GPDMA1_Init+0xec>)
 8000a6e:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000a72:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel10.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000a74:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <MX_GPDMA1_Init+0xec>)
 8000a76:	2281      	movs	r2, #129	@ 0x81
 8000a78:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel10) != HAL_OK)
 8000a7a:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <MX_GPDMA1_Init+0xec>)
 8000a7c:	f002 fbb6 	bl	80031ec <HAL_DMAEx_List_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_GPDMA1_Init+0xc6>
  {
    Error_Handler();
 8000a86:	f000 f96f 	bl	8000d68 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel10, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	4808      	ldr	r0, [pc, #32]	@ (8000ab0 <MX_GPDMA1_Init+0xec>)
 8000a8e:	f002 fb4b 	bl	8003128 <HAL_DMA_ConfigChannelAttributes>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_GPDMA1_Init+0xd8>
  {
    Error_Handler();
 8000a98:	f000 f966 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	46020c00 	.word	0x46020c00
 8000aa8:	200001f0 	.word	0x200001f0
 8000aac:	400205d0 	.word	0x400205d0
 8000ab0:	20000268 	.word	0x20000268
 8000ab4:	40020550 	.word	0x40020550

08000ab8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000abc:	f003 ffca 	bl	8004a54 <HAL_ICACHE_Enable>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000ac6:	f000 f94f 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	@ 0x28
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */
  uint32_t clkfreq1 = HAL_RCC_GetPCLK1Freq();
 8000aee:	f005 faa7 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8000af2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t clkfreq2 = HAL_RCC_GetPCLK2Freq();
 8000af4:	f005 fab8 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 8000af8:	6238      	str	r0, [r7, #32]

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000afa:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <MX_TIM2_Init+0xa0>)
 8000afc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20-1;
 8000b02:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <MX_TIM2_Init+0xa0>)
 8000b04:	2213      	movs	r2, #19
 8000b06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b08:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <MX_TIM2_Init+0xa0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <MX_TIM2_Init+0xa0>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b14:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_TIM2_Init+0xa0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <MX_TIM2_Init+0xa0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b20:	4813      	ldr	r0, [pc, #76]	@ (8000b70 <MX_TIM2_Init+0xa0>)
 8000b22:	f008 f81f 	bl	8008b64 <HAL_TIM_Base_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8000b2c:	f000 f91c 	bl	8000d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <MX_TIM2_Init+0xa0>)
 8000b3e:	f008 faf1 	bl	8009124 <HAL_TIM_ConfigClockSource>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000b48:	f000 f90e 	bl	8000d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_TIM2_Init+0xa0>)
 8000b5a:	f008 fda9 	bl	80096b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000b64:	f000 f900 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	@ 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200002e0 	.word	0x200002e0

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	@ 0x28
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8a:	4b31      	ldr	r3, [pc, #196]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b90:	4a2f      	ldr	r2, [pc, #188]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba0:	f003 0310 	and.w	r3, r3, #16
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba8:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bae:	4a28      	ldr	r2, [pc, #160]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bb8:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc6:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bcc:	4a20      	ldr	r2, [pc, #128]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bea:	4a19      	ldr	r2, [pc, #100]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c08:	4a11      	ldr	r2, [pc, #68]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_GPIO_Init+0xdc>)
 8000c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE2_Pin|PE3_Pin|PE4_Pin|PE5_Pin
 8000c20:	2200      	movs	r2, #0
 8000c22:	217d      	movs	r1, #125	@ 0x7d
 8000c24:	480b      	ldr	r0, [pc, #44]	@ (8000c54 <MX_GPIO_Init+0xe0>)
 8000c26:	f003 fee3 	bl	80049f0 <HAL_GPIO_WritePin>
                          |PE6_Pin|PE0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2_Pin PE3_Pin PE4_Pin PE5_Pin
                           PE6_Pin PE0_Pin */
  GPIO_InitStruct.Pin = PE2_Pin|PE3_Pin|PE4_Pin|PE5_Pin
 8000c2a:	237d      	movs	r3, #125	@ 0x7d
 8000c2c:	617b      	str	r3, [r7, #20]
                          |PE6_Pin|PE0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <MX_GPIO_Init+0xe0>)
 8000c42:	f003 fc1f 	bl	8004484 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	@ 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	46020c00 	.word	0x46020c00
 8000c54:	42021000 	.word	0x42021000

08000c58 <DACDMAConfig>:

/* USER CODE BEGIN 4 */
void DACDMAConfig(){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	@ 0x38
 8000c5c:	af02      	add	r7, sp, #8
	 /* Stop DMA transfer */
	  if(HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4827      	ldr	r0, [pc, #156]	@ (8000d00 <DACDMAConfig+0xa8>)
 8000c62:	f001 fbb3 	bl	80023cc <HAL_DAC_Stop_DMA>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <DACDMAConfig+0x18>
	  {
		Error_Handler();
 8000c6c:	f000 f87c 	bl	8000d68 <Error_Handler>
	  }

	  /* Deinitialize the DAC peripheral */
	  if(HAL_DAC_DeInit(&hdac1) != HAL_OK)
 8000c70:	4823      	ldr	r0, [pc, #140]	@ (8000d00 <DACDMAConfig+0xa8>)
 8000c72:	f001 f9c9 	bl	8002008 <HAL_DAC_DeInit>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <DACDMAConfig+0x28>
	  {
		Error_Handler();
 8000c7c:	f000 f874 	bl	8000d68 <Error_Handler>
	  }
	DAC_ChannelConfTypeDef sConfig = {0};
 8000c80:	463b      	mov	r3, r7
 8000c82:	2230      	movs	r2, #48	@ 0x30
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f009 fbeb 	bl	800a462 <memset>

	/* Set DAC instance */
	hdac1.Instance = DAC1;
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <DACDMAConfig+0xa8>)
 8000c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8000d04 <DACDMAConfig+0xac>)
 8000c90:	601a      	str	r2, [r3, #0]

	/* Initialize DAC */
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c92:	481b      	ldr	r0, [pc, #108]	@ (8000d00 <DACDMAConfig+0xa8>)
 8000c94:	f001 f964 	bl	8001f60 <HAL_DAC_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <DACDMAConfig+0x4a>
	{
	/* Initialization Error */
	Error_Handler();
 8000c9e:	f000 f863 	bl	8000d68 <Error_Handler>
	}

	/* Config Channel */
	sConfig.DAC_Trigger                 = DAC_TRIGGER_T2_TRGO;
 8000ca2:	230a      	movs	r3, #10
 8000ca4:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer            = DAC_OUTPUTBUFFER_ENABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
	sConfig.DAC_SampleAndHold           = DAC_SAMPLEANDHOLD_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	61bb      	str	r3, [r7, #24]

	/* DAC Channel configuration */
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <DACDMAConfig+0xa8>)
 8000cba:	f001 fc55 	bl	8002568 <HAL_DAC_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <DACDMAConfig+0x70>
	{
	/* Channel configuration Error */
	Error_Handler();
 8000cc4:	f000 f850 	bl	8000d68 <Error_Handler>
	}

	/* DAC calibration */
	if (HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <DACDMAConfig+0xa8>)
 8000cd0:	f001 fe4c 	bl	800296c <HAL_DACEx_SelfCalibrate>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <DACDMAConfig+0x86>
	{
	Error_Handler();
 8000cda:	f000 f845 	bl	8000d68 <Error_Handler>
	}

	/* Enable DAC selected channel and associated DMA */
	if (HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &DACVals[0], NVALS, DAC_ALIGN_12B_R) != HAL_OK)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	4a08      	ldr	r2, [pc, #32]	@ (8000d08 <DACDMAConfig+0xb0>)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <DACDMAConfig+0xa8>)
 8000cea:	f001 f9b5 	bl	8002058 <HAL_DAC_Start_DMA>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <DACDMAConfig+0xa0>
	{
	/* Start DMA Error */
	Error_Handler();
 8000cf4:	f000 f838 	bl	8000d68 <Error_Handler>
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	3730      	adds	r7, #48	@ 0x30
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200001b4 	.word	0x200001b4
 8000d04:	46021800 	.word	0x46021800
 8000d08:	20000000 	.word	0x20000000

08000d0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a08      	ldr	r2, [pc, #32]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d101      	bne.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1e:	f000 ff71 	bl	8001c04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d2a:	d102      	bne.n	8000d32 <HAL_TIM_PeriodElapsedCallback+0x26>
	  BSP_LED_Toggle(LED_BLUE);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f000 fda1 	bl	8001874 <BSP_LED_Toggle>
  }
  /* USER CODE END Callback 1 */
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40014800 	.word	0x40014800

08000d40 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000d50:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <BSP_PB_Callback+0x24>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
  }
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200001b0 	.word	0x200001b0

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <Error_Handler+0x8>

08000d74 <stSetGlobalState>:
/**
 * Determines the global state.
 * ToDo: remains to implement the actions related with the
 * new state.
 */
void stSetGlobalState(st_active_t state){
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]

	stimulator.stGlobalState = state;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <stSetGlobalState+0x24>)
 8000d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d84:	461a      	mov	r2, r3
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f882 3258 	strb.w	r3, [r2, #600]	@ 0x258

}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	2000032c 	.word	0x2000032c

08000d9c <stGetGlobalState>:

void stGetGlobalState(st_active_t *state){
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	*state = stimulator.stGlobalState;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <stGetGlobalState+0x24>)
 8000da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000daa:	f893 2258 	ldrb.w	r2, [r3, #600]	@ 0x258
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	701a      	strb	r2, [r3, #0]
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	2000032c 	.word	0x2000032c

08000dc4 <stSetChannelState>:


uint8_t stSetChannelState(uint8_t channel, st_active_t state){
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	460a      	mov	r2, r1
 8000dce:	71fb      	strb	r3, [r7, #7]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]
	if(channel < CHAN_LENGTH){
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	2b07      	cmp	r3, #7
 8000ddc:	d80b      	bhi.n	8000df6 <stSetChannelState+0x32>
		stimulator.channels[channel].stActiveState = state;
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <stSetChannelState+0x48>)
 8000de2:	f44f 7112 	mov.w	r1, #584	@ 0x248
 8000de6:	fb01 f303 	mul.w	r3, r1, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	f203 2342 	addw	r3, r3, #578	@ 0x242
 8000df0:	79ba      	ldrb	r2, [r7, #6]
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	e002      	b.n	8000dfc <stSetChannelState+0x38>
	}
	else
		res--;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
	return res;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	2000032c 	.word	0x2000032c

08000e10 <stSetPeriod>:
		}
	return res;
}


uint8_t stSetPeriod(uint32_t period){
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	uint8_t res = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73fb      	strb	r3, [r7, #15]
	if ((period < MAX_PERIOD) && (period >= MIN_PERIOD) )
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000e22:	d20a      	bcs.n	8000e3a <stSetPeriod+0x2a>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d007      	beq.n	8000e3a <stSetPeriod+0x2a>
		stimulator.stPeriod = period;
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <stSetPeriod+0x4c>)
 8000e2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e30:	461a      	mov	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240
 8000e38:	e008      	b.n	8000e4c <stSetPeriod+0x3c>
	else
	{
		res--;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
		stimulator.stGlobalState = st_undefined;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <stSetPeriod+0x4c>)
 8000e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e46:	2202      	movs	r2, #2
 8000e48:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
	}
	return res;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	2000032c 	.word	0x2000032c

08000e60 <stSetPort>:
		res--;
	return 0;
}

uint8_t stSetPort(uint32_t port)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	uint8_t res = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]
	if (port < MAX_PORT)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	d807      	bhi.n	8000e82 <stSetPort+0x22>
		stimulator.stPort = port;
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <stSetPort+0x44>)
 8000e74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e78:	461a      	mov	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f8c2 324c 	str.w	r3, [r2, #588]	@ 0x24c
 8000e80:	e008      	b.n	8000e94 <stSetPort+0x34>
	else
	{
		res--;
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
		stimulator.stGlobalState = st_undefined;
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <stSetPort+0x44>)
 8000e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e8e:	2202      	movs	r2, #2
 8000e90:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
	}
	return res;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2000032c 	.word	0x2000032c

08000ea8 <stSetChannelPin>:
		res--;
	return res;
}


uint8_t stSetChannelPin(uint8_t chan,uint32_t pin){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
	if (chan < CHAN_LENGTH){
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b07      	cmp	r3, #7
 8000ebc:	d81d      	bhi.n	8000efa <stSetChannelPin+0x52>
		if(pin < MAX_PIN)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80b      	bhi.n	8000edc <stSetChannelPin+0x34>
			stimulator.channels[chan].stPin = pin;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4a17      	ldr	r2, [pc, #92]	@ (8000f24 <stSetChannelPin+0x7c>)
 8000ec8:	f44f 7112 	mov.w	r1, #584	@ 0x248
 8000ecc:	fb01 f303 	mul.w	r3, r1, r3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e01c      	b.n	8000f16 <stSetChannelPin+0x6e>
		else
		{
			res-=2;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	73fb      	strb	r3, [r7, #15]
			stimulator.channels[chan].stActiveState = st_undefined;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8000f24 <stSetChannelPin+0x7c>)
 8000ee6:	f44f 7112 	mov.w	r1, #584	@ 0x248
 8000eea:	fb01 f303 	mul.w	r3, r1, r3
 8000eee:	4413      	add	r3, r2
 8000ef0:	f203 2342 	addw	r3, r3, #578	@ 0x242
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	701a      	strb	r2, [r3, #0]
 8000ef8:	e00d      	b.n	8000f16 <stSetChannelPin+0x6e>
		}
	}
	else{
		stimulator.channels[chan].stActiveState = st_undefined;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4a09      	ldr	r2, [pc, #36]	@ (8000f24 <stSetChannelPin+0x7c>)
 8000efe:	f44f 7112 	mov.w	r1, #584	@ 0x248
 8000f02:	fb01 f303 	mul.w	r3, r1, r3
 8000f06:	4413      	add	r3, r2
 8000f08:	f203 2342 	addw	r3, r3, #578	@ 0x242
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	701a      	strb	r2, [r3, #0]
		res--;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	2000032c 	.word	0x2000032c

08000f28 <stSetChannelSignal>:
		res--;
	}

	return res;
}
uint8_t stSetChannelSignal(uint8_t ch, uint32_t sz, uint16_t* values, uint16_t* signs ){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]
	uint8_t res = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	75fb      	strb	r3, [r7, #23]
	if (ch < CHAN_LENGTH){
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	2b07      	cmp	r3, #7
 8000f40:	d83b      	bhi.n	8000fba <stSetChannelSignal+0x92>
		if(sz <= MAX_SIGNAL_LENGTH){
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	2b80      	cmp	r3, #128	@ 0x80
 8000f46:	d829      	bhi.n	8000f9c <stSetChannelSignal+0x74>
			memcpy(stimulator.channels[ch].stimulus.intensity,values,sz* sizeof(uint16_t));
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8000f4e:	fb02 f303 	mul.w	r3, r2, r3
 8000f52:	4a23      	ldr	r2, [pc, #140]	@ (8000fe0 <stSetChannelSignal+0xb8>)
 8000f54:	1898      	adds	r0, r3, r2
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	f009 fb04 	bl	800a56a <memcpy>
			memcpy(stimulator.channels[ch].stimulus.sign,signs,sz* sizeof(uint16_t));
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8000f68:	fb02 f303 	mul.w	r3, r2, r3
 8000f6c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000f70:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe0 <stSetChannelSignal+0xb8>)
 8000f72:	1898      	adds	r0, r3, r2
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	461a      	mov	r2, r3
 8000f7a:	6839      	ldr	r1, [r7, #0]
 8000f7c:	f009 faf5 	bl	800a56a <memcpy>
			stimulator.channels[ch].stimulus.lastVal = sz;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	b290      	uxth	r0, r2
 8000f86:	4a16      	ldr	r2, [pc, #88]	@ (8000fe0 <stSetChannelSignal+0xb8>)
 8000f88:	f44f 7112 	mov.w	r1, #584	@ 0x248
 8000f8c:	fb01 f303 	mul.w	r3, r1, r3
 8000f90:	4413      	add	r3, r2
 8000f92:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000f96:	4602      	mov	r2, r0
 8000f98:	801a      	strh	r2, [r3, #0]
 8000f9a:	e01c      	b.n	8000fd6 <stSetChannelSignal+0xae>
		}
		else{
			res-=2;
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	3b02      	subs	r3, #2
 8000fa0:	75fb      	strb	r3, [r7, #23]
			stimulator.channels[ch].stActiveState = st_undefined;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe0 <stSetChannelSignal+0xb8>)
 8000fa6:	f44f 7112 	mov.w	r1, #584	@ 0x248
 8000faa:	fb01 f303 	mul.w	r3, r1, r3
 8000fae:	4413      	add	r3, r2
 8000fb0:	f203 2342 	addw	r3, r3, #578	@ 0x242
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	701a      	strb	r2, [r3, #0]
 8000fb8:	e00d      	b.n	8000fd6 <stSetChannelSignal+0xae>
		}
	}
	else{
		res--;
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	75fb      	strb	r3, [r7, #23]
		stimulator.channels[ch].stActiveState = st_undefined;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <stSetChannelSignal+0xb8>)
 8000fc4:	f44f 7112 	mov.w	r1, #584	@ 0x248
 8000fc8:	fb01 f303 	mul.w	r3, r1, r3
 8000fcc:	4413      	add	r3, r2
 8000fce:	f203 2342 	addw	r3, r3, #578	@ 0x242
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8000fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000032c 	.word	0x2000032c

08000fe4 <stConfigureDefault>:

uint8_t stConfigureDefault(st_signal_type type){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4602      	mov	r2, r0
 8000fee:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000ff2:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8000ff6:	701a      	strb	r2, [r3, #0]
	uint8_t ch_it,res = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
	uint16_t signal[MAX_SIGNAL_LENGTH];
	uint16_t sign[MAX_SIGNAL_LENGTH];
	char label[MAX_LABEL];

	res += stSetPort(DEFAULT_PORT);
 8000ffe:	486a      	ldr	r0, [pc, #424]	@ (80011a8 <stConfigureDefault+0x1c4>)
 8001000:	f7ff ff2e 	bl	8000e60 <stSetPort>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 800100c:	4413      	add	r3, r2
 800100e:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
	res += stSetPeriod(MAX_PERIOD-1);
 8001012:	f240 102b 	movw	r0, #299	@ 0x12b
 8001016:	f7ff fefb 	bl	8000e10 <stSetPeriod>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 8001022:	4413      	add	r3, r2
 8001024:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
	stSetGlobalState(st_disabled);
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff fea3 	bl	8000d74 <stSetGlobalState>


	memset(sign, 0, MAX_SIGNAL_LENGTH* sizeof(uint16_t));
 800102e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001032:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f009 fa12 	bl	800a462 <memset>
	memset(signal, 0, (uint32_t) MAX_SIGNAL_LENGTH* sizeof(uint16_t));
 800103e:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001042:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f009 fa0a 	bl	800a462 <memset>

	memset(sign, 1, (uint32_t) MAX_SIGNAL_LENGTH* sizeof(uint16_t) /2);
 800104e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	2101      	movs	r1, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f009 fa03 	bl	800a462 <memset>
	switch (type) {
 800105c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001060:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <stConfigureDefault+0x8c>
 800106a:	2b01      	cmp	r3, #1
 800106c:	d012      	beq.n	8001094 <stConfigureDefault+0xb0>
		for(uint16_t it = 0; it < MAX_SIGNAL_LENGTH; it++){
			signal[it] = it*10;
			}
		break;
	default:
		break;
 800106e:	e02e      	b.n	80010ce <stConfigureDefault+0xea>
		memset(signal,0xFFAA,(uint32_t) MAX_SIGNAL_LENGTH* sizeof(uint16_t)/4);
 8001070:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001074:	2240      	movs	r2, #64	@ 0x40
 8001076:	f64f 71aa 	movw	r1, #65450	@ 0xffaa
 800107a:	4618      	mov	r0, r3
 800107c:	f009 f9f1 	bl	800a462 <memset>
		memset(&signal[(uint32_t) MAX_SIGNAL_LENGTH/2],0xFFAA,(uint32_t) CHAN_LENGTH* sizeof(uint16_t)/4);
 8001080:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001084:	3380      	adds	r3, #128	@ 0x80
 8001086:	2204      	movs	r2, #4
 8001088:	f64f 71aa 	movw	r1, #65450	@ 0xffaa
 800108c:	4618      	mov	r0, r3
 800108e:	f009 f9e8 	bl	800a462 <memset>
		break;
 8001092:	e01c      	b.n	80010ce <stConfigureDefault+0xea>
		for(uint16_t it = 0; it < MAX_SIGNAL_LENGTH; it++){
 8001094:	2300      	movs	r3, #0
 8001096:	f8a7 324c 	strh.w	r3, [r7, #588]	@ 0x24c
 800109a:	e013      	b.n	80010c4 <stConfigureDefault+0xe0>
			signal[it] = it*10;
 800109c:	f8b7 224c 	ldrh.w	r2, [r7, #588]	@ 0x24c
 80010a0:	f8b7 324c 	ldrh.w	r3, [r7, #588]	@ 0x24c
 80010a4:	4619      	mov	r1, r3
 80010a6:	0089      	lsls	r1, r1, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	b299      	uxth	r1, r3
 80010ae:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80010b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(uint16_t it = 0; it < MAX_SIGNAL_LENGTH; it++){
 80010ba:	f8b7 324c 	ldrh.w	r3, [r7, #588]	@ 0x24c
 80010be:	3301      	adds	r3, #1
 80010c0:	f8a7 324c 	strh.w	r3, [r7, #588]	@ 0x24c
 80010c4:	f8b7 324c 	ldrh.w	r3, [r7, #588]	@ 0x24c
 80010c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80010ca:	d9e7      	bls.n	800109c <stConfigureDefault+0xb8>
		break;
 80010cc:	bf00      	nop
	}

	strcpy(label,"Channel ");
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	4a36      	ldr	r2, [pc, #216]	@ (80011ac <stConfigureDefault+0x1c8>)
 80010d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010d6:	c303      	stmia	r3!, {r0, r1}
 80010d8:	701a      	strb	r2, [r3, #0]
	for (ch_it = 0; ch_it < CHAN_LENGTH; ch_it++){
 80010da:	2300      	movs	r3, #0
 80010dc:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80010e0:	e057      	b.n	8001192 <stConfigureDefault+0x1ae>
		stimulator.stStimSequence[ch_it] = ch_it;
 80010e2:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80010e6:	4a32      	ldr	r2, [pc, #200]	@ (80011b0 <stConfigureDefault+0x1cc>)
 80010e8:	4413      	add	r3, r2
 80010ea:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 80010ee:	3304      	adds	r3, #4
 80010f0:	f897 224f 	ldrb.w	r2, [r7, #591]	@ 0x24f
 80010f4:	701a      	strb	r2, [r3, #0]
		res += stSetChannelSignal(ch_it, (MAX_SIGNAL_LENGTH), &signal, &sign);
 80010f6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010fa:	f507 72a6 	add.w	r2, r7, #332	@ 0x14c
 80010fe:	f897 024f 	ldrb.w	r0, [r7, #591]	@ 0x24f
 8001102:	2180      	movs	r1, #128	@ 0x80
 8001104:	f7ff ff10 	bl	8000f28 <stSetChannelSignal>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 8001110:	4413      	add	r3, r2
 8001112:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
		label[8] = (ch_it+48);
 8001116:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800111a:	3330      	adds	r3, #48	@ 0x30
 800111c:	b2da      	uxtb	r2, r3
 800111e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001122:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001126:	721a      	strb	r2, [r3, #8]
		strcpy(stimulator.channels[ch_it].stLabel , label); // possibly copying garbage
 8001128:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800112c:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8001130:	fb02 f303 	mul.w	r3, r2, r3
 8001134:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001138:	4a1d      	ldr	r2, [pc, #116]	@ (80011b0 <stConfigureDefault+0x1cc>)
 800113a:	4413      	add	r3, r2
 800113c:	3302      	adds	r3, #2
 800113e:	f107 020c 	add.w	r2, r7, #12
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f009 fa08 	bl	800a55a <strcpy>
		res += stSetChannelPin(ch_it,pins[ch_it]);
 800114a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800114e:	4a19      	ldr	r2, [pc, #100]	@ (80011b4 <stConfigureDefault+0x1d0>)
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	461a      	mov	r2, r3
 8001154:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fea4 	bl	8000ea8 <stSetChannelPin>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 8001168:	4413      	add	r3, r2
 800116a:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
		res += stSetChannelState(ch_it, st_disabled);
 800116e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fe25 	bl	8000dc4 <stSetChannelState>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 8001182:	4413      	add	r3, r2
 8001184:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
	for (ch_it = 0; ch_it < CHAN_LENGTH; ch_it++){
 8001188:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800118c:	3301      	adds	r3, #1
 800118e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8001192:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8001196:	2b07      	cmp	r3, #7
 8001198:	d9a3      	bls.n	80010e2 <stConfigureDefault+0xfe>
	}
	return res;
 800119a:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
}
 800119e:	4618      	mov	r0, r3
 80011a0:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	42021000 	.word	0x42021000
 80011ac:	0800b114 	.word	0x0800b114
 80011b0:	2000032c 	.word	0x2000032c
 80011b4:	20000080 	.word	0x20000080

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <HAL_MspInit+0x34>)
 80011c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011c4:	4a09      	ldr	r2, [pc, #36]	@ (80011ec <HAL_MspInit+0x34>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80011ce:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <HAL_MspInit+0x34>)
 80011d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80011dc:	2004      	movs	r0, #4
 80011de:	f000 fe26 	bl	8001e2e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	46020c00 	.word	0x46020c00

080011f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0ba      	sub	sp, #232	@ 0xe8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	22c0      	movs	r2, #192	@ 0xc0
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f009 f926 	bl	800a462 <memset>
  if(hdac->Instance==DAC1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a29      	ldr	r2, [pc, #164]	@ (80012c0 <HAL_DAC_MspInit+0xd0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d14b      	bne.n	80012b8 <HAL_DAC_MspInit+0xc8>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC|RCC_PERIPHCLK_DAC1;
 8001220:	4a28      	ldr	r2, [pc, #160]	@ (80012c4 <HAL_DAC_MspInit+0xd4>)
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800122a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800122e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 8001232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001236:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4618      	mov	r0, r3
 8001240:	f004 fff8 	bl	8006234 <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_DAC_MspInit+0x5e>
    {
      Error_Handler();
 800124a:	f7ff fd8d 	bl	8000d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800124e:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <HAL_DAC_MspInit+0xd8>)
 8001250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001254:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <HAL_DAC_MspInit+0xd8>)
 8001256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800125a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800125e:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <HAL_DAC_MspInit+0xd8>)
 8001260:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <HAL_DAC_MspInit+0xd8>)
 800126e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001272:	4a15      	ldr	r2, [pc, #84]	@ (80012c8 <HAL_DAC_MspInit+0xd8>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800127c:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <HAL_DAC_MspInit+0xd8>)
 800127e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800128a:	2310      	movs	r3, #16
 800128c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001290:	2303      	movs	r3, #3
 8001292:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012a0:	4619      	mov	r1, r3
 80012a2:	480a      	ldr	r0, [pc, #40]	@ (80012cc <HAL_DAC_MspInit+0xdc>)
 80012a4:	f003 f8ee 	bl	8004484 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(DAC1_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2026      	movs	r0, #38	@ 0x26
 80012ae:	f000 fdc9 	bl	8001e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DAC1_IRQn);
 80012b2:	2026      	movs	r0, #38	@ 0x26
 80012b4:	f000 fde0 	bl	8001e78 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80012b8:	bf00      	nop
 80012ba:	37e8      	adds	r7, #232	@ 0xe8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	46021800 	.word	0x46021800
 80012c4:	10008000 	.word	0x10008000
 80012c8:	46020c00 	.word	0x46020c00
 80012cc:	42020000 	.word	0x42020000

080012d0 <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001308 <HAL_DAC_MspDeInit+0x38>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d10e      	bne.n	8001300 <HAL_DAC_MspDeInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspDeInit 0 */

  /* USER CODE END DAC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC1_CLK_DISABLE();
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_DAC_MspDeInit+0x3c>)
 80012e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012e8:	4a08      	ldr	r2, [pc, #32]	@ (800130c <HAL_DAC_MspDeInit+0x3c>)
 80012ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80012ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 80012f2:	2110      	movs	r1, #16
 80012f4:	4806      	ldr	r0, [pc, #24]	@ (8001310 <HAL_DAC_MspDeInit+0x40>)
 80012f6:	f003 fa9d 	bl	8004834 <HAL_GPIO_DeInit>

    /* DAC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(DAC1_IRQn);
 80012fa:	2026      	movs	r0, #38	@ 0x26
 80012fc:	f000 fdca 	bl	8001e94 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DAC1_MspDeInit 1 */

  /* USER CODE END DAC1_MspDeInit 1 */
  }

}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	46021800 	.word	0x46021800
 800130c:	46020c00 	.word	0x46020c00
 8001310:	42020000 	.word	0x42020000

08001314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001324:	d10e      	bne.n	8001344 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_TIM_Base_MspInit+0x3c>)
 8001328:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800132c:	4a08      	ldr	r2, [pc, #32]	@ (8001350 <HAL_TIM_Base_MspInit+0x3c>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_TIM_Base_MspInit+0x3c>)
 8001338:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	46020c00 	.word	0x46020c00

08001354 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	@ 0x38
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001364:	4b2e      	ldr	r3, [pc, #184]	@ (8001420 <HAL_InitTick+0xcc>)
 8001366:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800136a:	4a2d      	ldr	r2, [pc, #180]	@ (8001420 <HAL_InitTick+0xcc>)
 800136c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001370:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001374:	4b2a      	ldr	r3, [pc, #168]	@ (8001420 <HAL_InitTick+0xcc>)
 8001376:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800137a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001382:	f107 0210 	add.w	r2, r7, #16
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f004 fe93 	bl	80060b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001392:	f004 fe69 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 8001396:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800139a:	4a22      	ldr	r2, [pc, #136]	@ (8001424 <HAL_InitTick+0xd0>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	0c9b      	lsrs	r3, r3, #18
 80013a2:	3b01      	subs	r3, #1
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80013a6:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <HAL_InitTick+0xd4>)
 80013a8:	4a20      	ldr	r2, [pc, #128]	@ (800142c <HAL_InitTick+0xd8>)
 80013aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80013ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <HAL_InitTick+0xd4>)
 80013ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013b2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80013b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001428 <HAL_InitTick+0xd4>)
 80013b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b8:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80013ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <HAL_InitTick+0xd4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c0:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <HAL_InitTick+0xd4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 80013c6:	4818      	ldr	r0, [pc, #96]	@ (8001428 <HAL_InitTick+0xd4>)
 80013c8:	f007 fbcc 	bl	8008b64 <HAL_TIM_Base_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80013d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d118      	bne.n	800140c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80013da:	4813      	ldr	r0, [pc, #76]	@ (8001428 <HAL_InitTick+0xd4>)
 80013dc:	f007 fcb2 	bl	8008d44 <HAL_TIM_Base_Start_IT>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80013e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10e      	bne.n	800140c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d808      	bhi.n	8001406 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	2047      	movs	r0, #71	@ 0x47
 80013fa:	f000 fd23 	bl	8001e44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001430 <HAL_InitTick+0xdc>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	e002      	b.n	800140c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800140c:	2047      	movs	r0, #71	@ 0x47
 800140e:	f000 fd33 	bl	8001e78 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001412:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001416:	4618      	mov	r0, r3
 8001418:	3738      	adds	r7, #56	@ 0x38
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	46020c00 	.word	0x46020c00
 8001424:	431bde83 	.word	0x431bde83
 8001428:	20001588 	.word	0x20001588
 800142c:	40014800 	.word	0x40014800
 8001430:	200000a8 	.word	0x200000a8

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <NMI_Handler+0x4>

0800143c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <MemManage_Handler+0x4>

0800144c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <UsageFault_Handler+0x4>

0800145c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001498:	2000      	movs	r0, #0
 800149a:	f000 fa8d 	bl	80019b8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <DAC1_IRQHandler>:

/**
  * @brief This function handles DAC1 interrupt.
  */
void DAC1_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DAC1_IRQn 0 */

  /* USER CODE END DAC1_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <DAC1_IRQHandler+0x10>)
 80014aa:	f000 ffdc 	bl	8002466 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN DAC1_IRQn 1 */

  /* USER CODE END DAC1_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200001b4 	.word	0x200001b4

080014b8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <TIM17_IRQHandler+0x10>)
 80014be:	f007 fce1 	bl	8008e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20001588 	.word	0x20001588

080014cc <GPDMA1_Channel10_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 10 global interrupt.
  */
void GPDMA1_Channel10_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 0 */

  /* USER CODE END GPDMA1_Channel10_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel10);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <GPDMA1_Channel10_IRQHandler+0x10>)
 80014d2:	f001 fcc8 	bl	8002e66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 1 */

  /* USER CODE END GPDMA1_Channel10_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000268 	.word	0x20000268

080014e0 <GPDMA1_Channel11_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 11 global interrupt.
  */
void GPDMA1_Channel11_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 0 */

  /* USER CODE END GPDMA1_Channel11_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel11);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <GPDMA1_Channel11_IRQHandler+0x10>)
 80014e6:	f001 fcbe 	bl	8002e66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 1 */

  /* USER CODE END GPDMA1_Channel11_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200001f0 	.word	0x200001f0

080014f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e00a      	b.n	800151c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001506:	f3af 8000 	nop.w
 800150a:	4601      	mov	r1, r0
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	60ba      	str	r2, [r7, #8]
 8001512:	b2ca      	uxtb	r2, r1
 8001514:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	dbf0      	blt.n	8001506 <_read+0x12>
  }

  return len;
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	e009      	b.n	8001554 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60ba      	str	r2, [r7, #8]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f000 faaf 	bl	8001aac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbf1      	blt.n	8001540 <_write+0x12>
  }
  return len;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <_close>:

int _close(int file)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800158e:	605a      	str	r2, [r3, #4]
  return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_isatty>:

int _isatty(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d8:	4a14      	ldr	r2, [pc, #80]	@ (800162c <_sbrk+0x5c>)
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <_sbrk+0x60>)
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e4:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <_sbrk+0x64>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <_sbrk+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d207      	bcs.n	8001610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001600:	f008 ff7e 	bl	800a500 <__errno>
 8001604:	4603      	mov	r3, r0
 8001606:	220c      	movs	r2, #12
 8001608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	e009      	b.n	8001624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001616:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <_sbrk+0x64>)
 8001620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200c0000 	.word	0x200c0000
 8001630:	00000400 	.word	0x00000400
 8001634:	200015d4 	.word	0x200015d4
 8001638:	200017d0 	.word	0x200017d0

0800163c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001640:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <SystemInit+0x68>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001646:	4a17      	ldr	r2, [pc, #92]	@ (80016a4 <SystemInit+0x68>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001650:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <SystemInit+0x6c>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001656:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <SystemInit+0x6c>)
 8001658:	2200      	movs	r2, #0
 800165a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <SystemInit+0x6c>)
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <SystemInit+0x6c>)
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <SystemInit+0x6c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0e      	ldr	r2, [pc, #56]	@ (80016a8 <SystemInit+0x6c>)
 800166e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001672:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001676:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001678:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <SystemInit+0x6c>)
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <SystemInit+0x6c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a09      	ldr	r2, [pc, #36]	@ (80016a8 <SystemInit+0x6c>)
 8001684:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001688:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800168a:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <SystemInit+0x6c>)
 800168c:	2200      	movs	r2, #0
 800168e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001690:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <SystemInit+0x68>)
 8001692:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001696:	609a      	str	r2, [r3, #8]
  #endif
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00
 80016a8:	46020c00 	.word	0x46020c00

080016ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80016ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016e4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b0:	f7ff ffc4 	bl	800163c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016b6:	e003      	b.n	80016c0 <LoopCopyDataInit>

080016b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016be:	3104      	adds	r1, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016c0:	480a      	ldr	r0, [pc, #40]	@ (80016ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80016c2:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016c8:	d3f6      	bcc.n	80016b8 <CopyDataInit>
	ldr	r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016cc:	e002      	b.n	80016d4 <LoopFillZerobss>

080016ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016d0:	f842 3b04 	str.w	r3, [r2], #4

080016d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <LoopForever+0x16>)
	cmp	r2, r3
 80016d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016d8:	d3f9      	bcc.n	80016ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016da:	f008 ff17 	bl	800a50c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016de:	f7ff f813 	bl	8000708 <main>

080016e2 <LoopForever>:

LoopForever:
    b LoopForever
 80016e2:	e7fe      	b.n	80016e2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80016e4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80016e8:	0800b260 	.word	0x0800b260
	ldr	r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016f0:	2000010c 	.word	0x2000010c
	ldr	r2, =_sbss
 80016f4:	2000010c 	.word	0x2000010c
	ldr	r3, = _ebss
 80016f8:	200017cc 	.word	0x200017cc

080016fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC1_IRQHandler>
	...

08001700 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08e      	sub	sp, #56	@ 0x38
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800170a:	2300      	movs	r3, #0
 800170c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d009      	beq.n	800172c <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <BSP_LED_Init+0x2c>
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d003      	beq.n	800172c <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001724:	f06f 0301 	mvn.w	r3, #1
 8001728:	637b      	str	r3, [r7, #52]	@ 0x34
 800172a:	e06e      	b.n	800180a <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d10f      	bne.n	8001752 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8001732:	4b38      	ldr	r3, [pc, #224]	@ (8001814 <BSP_LED_Init+0x114>)
 8001734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001738:	4a36      	ldr	r2, [pc, #216]	@ (8001814 <BSP_LED_Init+0x114>)
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001742:	4b34      	ldr	r3, [pc, #208]	@ (8001814 <BSP_LED_Init+0x114>)
 8001744:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	e046      	b.n	80017e0 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10f      	bne.n	8001778 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8001758:	4b2e      	ldr	r3, [pc, #184]	@ (8001814 <BSP_LED_Init+0x114>)
 800175a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800175e:	4a2d      	ldr	r2, [pc, #180]	@ (8001814 <BSP_LED_Init+0x114>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001768:	4b2a      	ldr	r3, [pc, #168]	@ (8001814 <BSP_LED_Init+0x114>)
 800176a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	e033      	b.n	80017e0 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001778:	4b26      	ldr	r3, [pc, #152]	@ (8001814 <BSP_LED_Init+0x114>)
 800177a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	2b00      	cmp	r3, #0
 8001784:	d110      	bne.n	80017a8 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <BSP_LED_Init+0x114>)
 8001788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800178c:	4a21      	ldr	r2, [pc, #132]	@ (8001814 <BSP_LED_Init+0x114>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001796:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <BSP_LED_Init+0x114>)
 8001798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 80017a4:	2301      	movs	r3, #1
 80017a6:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 80017a8:	f003 fa40 	bl	8004c2c <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 80017ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017b2:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <BSP_LED_Init+0x114>)
 80017b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b8:	4a16      	ldr	r2, [pc, #88]	@ (8001814 <BSP_LED_Init+0x114>)
 80017ba:	f023 0304 	bic.w	r3, r3, #4
 80017be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <BSP_LED_Init+0x114>)
 80017c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017c8:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <BSP_LED_Init+0x114>)
 80017ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <BSP_LED_Init+0x114>)
 80017d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001818 <BSP_LED_Init+0x118>)
 80017e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017e8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	4a08      	ldr	r2, [pc, #32]	@ (800181c <BSP_LED_Init+0x11c>)
 80017fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fe:	f107 021c 	add.w	r2, r7, #28
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fe3d 	bl	8004484 <HAL_GPIO_Init>
  }

  return ret;
 800180a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800180c:	4618      	mov	r0, r3
 800180e:	3738      	adds	r7, #56	@ 0x38
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	46020c00 	.word	0x46020c00
 8001818:	0800b178 	.word	0x0800b178
 800181c:	20000090 	.word	0x20000090

08001820 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d009      	beq.n	8001848 <BSP_LED_On+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <BSP_LED_On+0x28>
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d003      	beq.n	8001848 <BSP_LED_On+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001840:	f06f 0301 	mvn.w	r3, #1
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	e00b      	b.n	8001860 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	4a08      	ldr	r2, [pc, #32]	@ (800186c <BSP_LED_On+0x4c>)
 800184c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4a07      	ldr	r2, [pc, #28]	@ (8001870 <BSP_LED_On+0x50>)
 8001854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001858:	2201      	movs	r2, #1
 800185a:	4619      	mov	r1, r3
 800185c:	f003 f8c8 	bl	80049f0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001860:	68fb      	ldr	r3, [r7, #12]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000090 	.word	0x20000090
 8001870:	0800b178 	.word	0x0800b178

08001874 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d009      	beq.n	800189c <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <BSP_LED_Toggle+0x28>
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d003      	beq.n	800189c <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001894:	f06f 0301 	mvn.w	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	e00b      	b.n	80018b4 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	4a08      	ldr	r2, [pc, #32]	@ (80018c0 <BSP_LED_Toggle+0x4c>)
 80018a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	4907      	ldr	r1, [pc, #28]	@ (80018c4 <BSP_LED_Toggle+0x50>)
 80018a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f003 f8b6 	bl	8004a20 <HAL_GPIO_TogglePin>
  }

  return ret;
 80018b4:	68fb      	ldr	r3, [r7, #12]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000090 	.word	0x20000090
 80018c4:	0800b178 	.word	0x0800b178

080018c8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80018d8:	4b30      	ldr	r3, [pc, #192]	@ (800199c <BSP_PB_Init+0xd4>)
 80018da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018de:	4a2f      	ldr	r2, [pc, #188]	@ (800199c <BSP_PB_Init+0xd4>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018e8:	4b2c      	ldr	r3, [pc, #176]	@ (800199c <BSP_PB_Init+0xd4>)
 80018ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80018f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018fa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80018fc:	2302      	movs	r3, #2
 80018fe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001900:	2302      	movs	r3, #2
 8001902:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10c      	bne.n	8001924 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	4a23      	ldr	r2, [pc, #140]	@ (80019a0 <BSP_PB_Init+0xd8>)
 8001912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001916:	f107 020c 	add.w	r2, r7, #12
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f002 fdb1 	bl	8004484 <HAL_GPIO_Init>
 8001922:	e036      	b.n	8001992 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001924:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <BSP_PB_Init+0xdc>)
 8001926:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4a1d      	ldr	r2, [pc, #116]	@ (80019a0 <BSP_PB_Init+0xd8>)
 800192c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001930:	f107 020c 	add.w	r2, r7, #12
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f002 fda4 	bl	8004484 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800193c:	79fa      	ldrb	r2, [r7, #7]
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4a18      	ldr	r2, [pc, #96]	@ (80019a8 <BSP_PB_Init+0xe0>)
 8001948:	441a      	add	r2, r3
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	4917      	ldr	r1, [pc, #92]	@ (80019ac <BSP_PB_Init+0xe4>)
 800194e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001952:	4619      	mov	r1, r3
 8001954:	4610      	mov	r0, r2
 8001956:	f002 fd38 	bl	80043ca <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800195a:	79fa      	ldrb	r2, [r7, #7]
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4a10      	ldr	r2, [pc, #64]	@ (80019a8 <BSP_PB_Init+0xe0>)
 8001966:	1898      	adds	r0, r3, r2
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	4a11      	ldr	r2, [pc, #68]	@ (80019b0 <BSP_PB_Init+0xe8>)
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	461a      	mov	r2, r3
 8001972:	2100      	movs	r1, #0
 8001974:	f002 fcfd 	bl	8004372 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001978:	2018      	movs	r0, #24
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <BSP_PB_Init+0xec>)
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	2200      	movs	r2, #0
 8001984:	4619      	mov	r1, r3
 8001986:	f000 fa5d 	bl	8001e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800198a:	2318      	movs	r3, #24
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fa73 	bl	8001e78 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	46020c00 	.word	0x46020c00
 80019a0:	2000009c 	.word	0x2000009c
 80019a4:	10110000 	.word	0x10110000
 80019a8:	200015d8 	.word	0x200015d8
 80019ac:	0800b180 	.word	0x0800b180
 80019b0:	200000a0 	.word	0x200000a0
 80019b4:	200000a4 	.word	0x200000a4

080019b8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80019c2:	79fa      	ldrb	r2, [r7, #7]
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4a04      	ldr	r2, [pc, #16]	@ (80019e0 <BSP_PB_IRQHandler+0x28>)
 80019ce:	4413      	add	r3, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 fd0f 	bl	80043f4 <HAL_EXTI_IRQHandler>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200015d8 	.word	0x200015d8

080019e4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019fa:	f06f 0301 	mvn.w	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e018      	b.n	8001a34 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2294      	movs	r2, #148	@ 0x94
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <BSP_COM_Init+0x5c>)
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f870 	bl	8001af4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	2294      	movs	r2, #148	@ 0x94
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	4a08      	ldr	r2, [pc, #32]	@ (8001a40 <BSP_COM_Init+0x5c>)
 8001a1e:	4413      	add	r3, r2
 8001a20:	6839      	ldr	r1, [r7, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f80e 	bl	8001a44 <MX_USART1_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001a2e:	f06f 0303 	mvn.w	r3, #3
 8001a32:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001a34:	68fb      	ldr	r3, [r7, #12]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200015e4 	.word	0x200015e4

08001a44 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001a4e:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <MX_USART1_Init+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	220c      	movs	r2, #12
 8001a62:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	895b      	ldrh	r3, [r3, #10]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	891b      	ldrh	r3, [r3, #8]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	899b      	ldrh	r3, [r3, #12]
 8001a84:	461a      	mov	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a90:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f007 ff11 	bl	80098c0 <HAL_UART_Init>
 8001a9e:	4603      	mov	r3, r0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000008c 	.word	0x2000008c

08001aac <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001ab4:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <__io_putchar+0x30>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2394      	movs	r3, #148	@ 0x94
 8001abc:	fb02 f303 	mul.w	r3, r2, r3
 8001ac0:	4a07      	ldr	r2, [pc, #28]	@ (8001ae0 <__io_putchar+0x34>)
 8001ac2:	1898      	adds	r0, r3, r2
 8001ac4:	1d39      	adds	r1, r7, #4
 8001ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aca:	2201      	movs	r2, #1
 8001acc:	f007 ff52 	bl	8009974 <HAL_UART_Transmit>
  return ch;
 8001ad0:	687b      	ldr	r3, [r7, #4]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20001678 	.word	0x20001678
 8001ae0:	200015e4 	.word	0x200015e4

08001ae4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff f929 	bl	8000d40 <BSP_PB_Callback>
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	@ 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001afc:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <COM1_MspInit+0xa8>)
 8001afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b02:	4a26      	ldr	r2, [pc, #152]	@ (8001b9c <COM1_MspInit+0xa8>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b0c:	4b23      	ldr	r3, [pc, #140]	@ (8001b9c <COM1_MspInit+0xa8>)
 8001b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001b1a:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <COM1_MspInit+0xa8>)
 8001b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b20:	4a1e      	ldr	r2, [pc, #120]	@ (8001b9c <COM1_MspInit+0xa8>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b9c <COM1_MspInit+0xa8>)
 8001b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001b38:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <COM1_MspInit+0xa8>)
 8001b3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b3e:	4a17      	ldr	r2, [pc, #92]	@ (8001b9c <COM1_MspInit+0xa8>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b44:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001b48:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <COM1_MspInit+0xa8>)
 8001b4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001b56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b5a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001b60:	2302      	movs	r3, #2
 8001b62:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001b68:	2307      	movs	r3, #7
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	480b      	ldr	r0, [pc, #44]	@ (8001ba0 <COM1_MspInit+0xac>)
 8001b74:	f002 fc86 	bl	8004484 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b7c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001b82:	2307      	movs	r3, #7
 8001b84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <COM1_MspInit+0xac>)
 8001b8e:	f002 fc79 	bl	8004484 <HAL_GPIO_Init>
}
 8001b92:	bf00      	nop
 8001b94:	3728      	adds	r7, #40	@ 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	46020c00 	.word	0x46020c00
 8001ba0:	42020000 	.word	0x42020000

08001ba4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_Init+0x50>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a11      	ldr	r2, [pc, #68]	@ (8001bf4 <HAL_Init+0x50>)
 8001bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f000 f93a 	bl	8001e2e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001bba:	f004 f925 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf8 <HAL_Init+0x54>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	490c      	ldr	r1, [pc, #48]	@ (8001bfc <HAL_Init+0x58>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001c00 <HAL_Init+0x5c>)
 8001bd2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001bd4:	2004      	movs	r0, #4
 8001bd6:	f000 f96b 	bl	8001eb0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bda:	2007      	movs	r0, #7
 8001bdc:	f7ff fbba 	bl	8001354 <HAL_InitTick>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e002      	b.n	8001bf0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bea:	f7ff fae5 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	46020c00 	.word	0x46020c00
 8001bfc:	0800b120 	.word	0x0800b120
 8001c00:	20000088 	.word	0x20000088

08001c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c08:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_IncTick+0x20>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_IncTick+0x24>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a04      	ldr	r2, [pc, #16]	@ (8001c28 <HAL_IncTick+0x24>)
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	200000ac 	.word	0x200000ac
 8001c28:	2000167c 	.word	0x2000167c

08001c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c30:	4b03      	ldr	r3, [pc, #12]	@ (8001c40 <HAL_GetTick+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2000167c 	.word	0x2000167c

08001c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff ffee 	bl	8001c2c <HAL_GetTick>
 8001c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d005      	beq.n	8001c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <HAL_Delay+0x44>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6a:	bf00      	nop
 8001c6c:	f7ff ffde 	bl	8001c2c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d8f7      	bhi.n	8001c6c <HAL_Delay+0x28>
  {
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200000ac 	.word	0x200000ac

08001c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cbe:	4a04      	ldr	r2, [pc, #16]	@ (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	60d3      	str	r3, [r2, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd8:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <__NVIC_GetPriorityGrouping+0x18>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	f003 0307 	and.w	r3, r3, #7
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db0b      	blt.n	8001d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	4907      	ldr	r1, [pc, #28]	@ (8001d28 <__NVIC_EnableIRQ+0x38>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	2001      	movs	r0, #1
 8001d12:	fa00 f202 	lsl.w	r2, r0, r2
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db12      	blt.n	8001d64 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	490a      	ldr	r1, [pc, #40]	@ (8001d70 <__NVIC_DisableIRQ+0x44>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	3320      	adds	r3, #32
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d58:	f3bf 8f4f 	dsb	sy
}
 8001d5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d5e:	f3bf 8f6f 	isb	sy
}
 8001d62:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	@ (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	@ (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	@ 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	@ 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ff28 	bl	8001c8c <__NVIC_SetPriorityGrouping>
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e52:	f7ff ff3f 	bl	8001cd4 <__NVIC_GetPriorityGrouping>
 8001e56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	6978      	ldr	r0, [r7, #20]
 8001e5e:	f7ff ffb3 	bl	8001dc8 <NVIC_EncodePriority>
 8001e62:	4602      	mov	r2, r0
 8001e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff82 	bl	8001d74 <__NVIC_SetPriority>
}
 8001e70:	bf00      	nop
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff32 	bl	8001cf0 <__NVIC_EnableIRQ>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff42 	bl	8001d2c <__NVIC_DisableIRQ>
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d844      	bhi.n	8001f48 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001ee7 	.word	0x08001ee7
 8001ec8:	08001f05 	.word	0x08001f05
 8001ecc:	08001f27 	.word	0x08001f27
 8001ed0:	08001f49 	.word	0x08001f49
 8001ed4:	08001ed9 	.word	0x08001ed9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6013      	str	r3, [r2, #0]
      break;
 8001ee4:	e031      	b.n	8001f4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1b      	ldr	r2, [pc, #108]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001eec:	f023 0304 	bic.w	r3, r3, #4
 8001ef0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef8:	4a18      	ldr	r2, [pc, #96]	@ (8001f5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001efa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001efe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f02:	e022      	b.n	8001f4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f04:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a13      	ldr	r2, [pc, #76]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f0a:	f023 0304 	bic.w	r3, r3, #4
 8001f0e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001f10:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f16:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f1a:	4a10      	ldr	r2, [pc, #64]	@ (8001f5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f24:	e011      	b.n	8001f4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f2c:	f023 0304 	bic.w	r3, r3, #4
 8001f30:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001f32:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f38:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f3c:	4a07      	ldr	r2, [pc, #28]	@ (8001f5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f46:	e000      	b.n	8001f4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001f48:	bf00      	nop
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e010 	.word	0xe000e010
 8001f5c:	46020c00 	.word	0x46020c00

08001f60 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e034      	b.n	8001fdc <HAL_DAC_Init+0x7c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	791b      	ldrb	r3, [r3, #4]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d125      	bne.n	8001fc8 <HAL_DAC_Init+0x68>
  {
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the DAC Callback settings */
    hdac->ConvCpltCallbackCh1           = HAL_DAC_ConvCpltCallbackCh1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a19      	ldr	r2, [pc, #100]	@ (8001fe4 <HAL_DAC_Init+0x84>)
 8001f80:	615a      	str	r2, [r3, #20]
    hdac->ConvHalfCpltCallbackCh1       = HAL_DAC_ConvHalfCpltCallbackCh1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a18      	ldr	r2, [pc, #96]	@ (8001fe8 <HAL_DAC_Init+0x88>)
 8001f86:	619a      	str	r2, [r3, #24]
    hdac->ErrorCallbackCh1              = HAL_DAC_ErrorCallbackCh1;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a18      	ldr	r2, [pc, #96]	@ (8001fec <HAL_DAC_Init+0x8c>)
 8001f8c:	61da      	str	r2, [r3, #28]
    hdac->DMAUnderrunCallbackCh1        = HAL_DAC_DMAUnderrunCallbackCh1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a17      	ldr	r2, [pc, #92]	@ (8001ff0 <HAL_DAC_Init+0x90>)
 8001f92:	621a      	str	r2, [r3, #32]

    hdac->ConvCpltCallbackCh2           = HAL_DACEx_ConvCpltCallbackCh2;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a17      	ldr	r2, [pc, #92]	@ (8001ff4 <HAL_DAC_Init+0x94>)
 8001f98:	625a      	str	r2, [r3, #36]	@ 0x24
    hdac->ConvHalfCpltCallbackCh2       = HAL_DACEx_ConvHalfCpltCallbackCh2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a16      	ldr	r2, [pc, #88]	@ (8001ff8 <HAL_DAC_Init+0x98>)
 8001f9e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdac->ErrorCallbackCh2              = HAL_DACEx_ErrorCallbackCh2;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a16      	ldr	r2, [pc, #88]	@ (8001ffc <HAL_DAC_Init+0x9c>)
 8001fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdac->DMAUnderrunCallbackCh2        = HAL_DACEx_DMAUnderrunCallbackCh2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a15      	ldr	r2, [pc, #84]	@ (8002000 <HAL_DAC_Init+0xa0>)
 8001faa:	631a      	str	r2, [r3, #48]	@ 0x30

    if (hdac->MspInitCallback == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <HAL_DAC_Init+0x5a>
    {
      hdac->MspInitCallback             = HAL_DAC_MspInit;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a13      	ldr	r2, [pc, #76]	@ (8002004 <HAL_DAC_Init+0xa4>)
 8001fb8:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	715a      	strb	r2, [r3, #5]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	08002517 	.word	0x08002517
 8001fe8:	0800252b 	.word	0x0800252b
 8001fec:	0800253f 	.word	0x0800253f
 8001ff0:	08002553 	.word	0x08002553
 8001ff4:	0800291b 	.word	0x0800291b
 8001ff8:	0800292f 	.word	0x0800292f
 8001ffc:	08002943 	.word	0x08002943
 8002000:	08002957 	.word	0x08002957
 8002004:	080011f1 	.word	0x080011f1

08002008 <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e017      	b.n	800204a <HAL_DAC_DeInit+0x42>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2202      	movs	r2, #2
 800201e:	711a      	strb	r2, [r3, #4]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  if (hdac->MspDeInitCallback == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <HAL_DAC_DeInit+0x26>
  {
    hdac->MspDeInitCallback = HAL_DAC_MspDeInit;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <HAL_DAC_DeInit+0x4c>)
 800202c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	080012d1 	.word	0x080012d1

08002058 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b0a4      	sub	sp, #144	@ 0x90
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e1a4      	b.n	80023ba <HAL_DAC_Start_DMA+0x362>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	795b      	ldrb	r3, [r3, #5]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_DAC_Start_DMA+0x24>
 8002078:	2302      	movs	r3, #2
 800207a:	e19e      	b.n	80023ba <HAL_DAC_Start_DMA+0x362>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2201      	movs	r2, #1
 8002080:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2202      	movs	r2, #2
 8002086:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d12e      	bne.n	80020ec <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	4a8b      	ldr	r2, [pc, #556]	@ (80022c0 <HAL_DAC_Start_DMA+0x268>)
 8002094:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	4a8a      	ldr	r2, [pc, #552]	@ (80022c4 <HAL_DAC_Start_DMA+0x26c>)
 800209c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	4a89      	ldr	r2, [pc, #548]	@ (80022c8 <HAL_DAC_Start_DMA+0x270>)
 80020a4:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020b4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80020b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_DAC_Start_DMA+0x70>
 80020be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d006      	beq.n	80020d4 <HAL_DAC_Start_DMA+0x7c>
 80020c6:	e00b      	b.n	80020e0 <HAL_DAC_Start_DMA+0x88>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3308      	adds	r3, #8
 80020ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 80020d2:	e03a      	b.n	800214a <HAL_DAC_Start_DMA+0xf2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	330c      	adds	r3, #12
 80020da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 80020de:	e034      	b.n	800214a <HAL_DAC_Start_DMA+0xf2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3310      	adds	r3, #16
 80020e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 80020ea:	e02e      	b.n	800214a <HAL_DAC_Start_DMA+0xf2>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a76      	ldr	r2, [pc, #472]	@ (80022cc <HAL_DAC_Start_DMA+0x274>)
 80020f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4a75      	ldr	r2, [pc, #468]	@ (80022d0 <HAL_DAC_Start_DMA+0x278>)
 80020fa:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a74      	ldr	r2, [pc, #464]	@ (80022d4 <HAL_DAC_Start_DMA+0x27c>)
 8002102:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002112:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002114:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_DAC_Start_DMA+0xce>
 800211c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002120:	2b04      	cmp	r3, #4
 8002122:	d006      	beq.n	8002132 <HAL_DAC_Start_DMA+0xda>
 8002124:	e00b      	b.n	800213e <HAL_DAC_Start_DMA+0xe6>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	3314      	adds	r3, #20
 800212c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 8002130:	e00b      	b.n	800214a <HAL_DAC_Start_DMA+0xf2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3318      	adds	r3, #24
 8002138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 800213c:	e005      	b.n	800214a <HAL_DAC_Start_DMA+0xf2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	331c      	adds	r3, #28
 8002144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 8002148:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d17e      	bne.n	800224e <HAL_DAC_Start_DMA+0x1f6>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800215e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    /* Check linkedlist mode */
    if ((hdac->DMA_Handle1->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800216a:	2b00      	cmp	r3, #0
 800216c:	d04b      	beq.n	8002206 <HAL_DAC_Start_DMA+0x1ae>
    {
      if ((hdac->DMA_Handle1->LinkedListQueue != NULL) && (hdac->DMA_Handle1->LinkedListQueue->Head != NULL))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002174:	2b00      	cmp	r3, #0
 8002176:	d044      	beq.n	8002202 <HAL_DAC_Start_DMA+0x1aa>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d03e      	beq.n	8002202 <HAL_DAC_Start_DMA+0x1aa>
      {
        /* Length should be converted to number of bytes */
        if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hdac->DMA_Handle1->LinkedListQueue->Head) != HAL_OK)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	f107 0318 	add.w	r3, r7, #24
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f001 fa74 	bl	8003680 <HAL_DMAEx_List_GetNodeConfig>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_DAC_Start_DMA+0x14a>
        {
          return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e10b      	b.n	80023ba <HAL_DAC_Start_DMA+0x362>
        }

        /* Length should be converted to number of bytes */
        if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80021a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d104      	bne.n	80021b2 <HAL_DAC_Start_DMA+0x15a>
        {
          /* Word -> Bytes */
          LengthInBytes = Length * 4U;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80021b0:	e00a      	b.n	80021c8 <HAL_DAC_Start_DMA+0x170>
        }
        else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80021b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d104      	bne.n	80021c2 <HAL_DAC_Start_DMA+0x16a>
        {
          /* Halfword -> Bytes */
          LengthInBytes = Length * 2U;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80021c0:	e002      	b.n	80021c8 <HAL_DAC_Start_DMA+0x170>
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          LengthInBytes = Length;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        }

        /* Set DMA data size */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = LengthInBytes;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80021d4:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = tmpreg;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80021ee:	611a      	str	r2, [r3, #16]

        /* Enable the DMA channel */
        status = HAL_DMAEx_List_Start_IT(hdac->DMA_Handle1);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f001 f999 	bl	800352c <HAL_DMAEx_List_Start_IT>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002200:	e0af      	b.n	8002362 <HAL_DAC_Start_DMA+0x30a>
      }
      else
      {
        /* Return error status */
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0d9      	b.n	80023ba <HAL_DAC_Start_DMA+0x362>
      }
    }
    else
    {
      /* Length should be converted to number of bytes */
      if (hdac->DMA_Handle1->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d104      	bne.n	800221a <HAL_DAC_Start_DMA+0x1c2>
      {
        /* Word -> Bytes */
        LengthInBytes = Length * 4U;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002218:	e00c      	b.n	8002234 <HAL_DAC_Start_DMA+0x1dc>
      }
      else if (hdac->DMA_Handle1->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d104      	bne.n	800222e <HAL_DAC_Start_DMA+0x1d6>
      {
        /* Halfword -> Bytes */
        LengthInBytes = Length * 2U;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800222c:	e002      	b.n	8002234 <HAL_DAC_Start_DMA+0x1dc>
      }
      else /* Bytes */
      {
        /* Same size already expressed in Bytes */
        LengthInBytes = Length;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }

      /* Enable the DMA channel */
      status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, LengthInBytes);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6898      	ldr	r0, [r3, #8]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800223e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002242:	f000 fd34 	bl	8002cae <HAL_DMA_Start_IT>
 8002246:	4603      	mov	r3, r0
 8002248:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800224c:	e089      	b.n	8002362 <HAL_DAC_Start_DMA+0x30a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800225c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    /* Check linkedlist mode */
    if ((hdac->DMA_Handle2->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002268:	2b00      	cmp	r3, #0
 800226a:	d057      	beq.n	800231c <HAL_DAC_Start_DMA+0x2c4>
    {
      if ((hdac->DMA_Handle2->LinkedListQueue != NULL) && (hdac->DMA_Handle2->LinkedListQueue->Head != NULL))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002272:	2b00      	cmp	r3, #0
 8002274:	d050      	beq.n	8002318 <HAL_DAC_Start_DMA+0x2c0>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d04a      	beq.n	8002318 <HAL_DAC_Start_DMA+0x2c0>
      {
        /* Length should be converted to number of bytes */
        if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hdac->DMA_Handle2->LinkedListQueue->Head) != HAL_OK)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	f107 0318 	add.w	r3, r7, #24
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f001 f9f5 	bl	8003680 <HAL_DMAEx_List_GetNodeConfig>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_DAC_Start_DMA+0x248>
        {
          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e08c      	b.n	80023ba <HAL_DAC_Start_DMA+0x362>
        }

        /* Length should be converted to number of bytes */
        if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80022a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d104      	bne.n	80022b0 <HAL_DAC_Start_DMA+0x258>
        {
          /* Word -> Bytes */
          LengthInBytes = Length * 4U;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80022ae:	e016      	b.n	80022de <HAL_DAC_Start_DMA+0x286>
        }
        else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80022b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d110      	bne.n	80022d8 <HAL_DAC_Start_DMA+0x280>
        {
          /* Halfword -> Bytes */
          LengthInBytes = Length * 2U;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80022be:	e00e      	b.n	80022de <HAL_DAC_Start_DMA+0x286>
 80022c0:	080028a9 	.word	0x080028a9
 80022c4:	080028cd 	.word	0x080028cd
 80022c8:	080028eb 	.word	0x080028eb
 80022cc:	08002c3d 	.word	0x08002c3d
 80022d0:	08002c61 	.word	0x08002c61
 80022d4:	08002c7f 	.word	0x08002c7f
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          LengthInBytes = Length;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        }

        /* Set DMA data size */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = LengthInBytes;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80022ea:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = tmpreg;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002304:	611a      	str	r2, [r3, #16]

        /* Enable the DMA channel */
        status = HAL_DMAEx_List_Start_IT(hdac->DMA_Handle2);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	4618      	mov	r0, r3
 800230c:	f001 f90e 	bl	800352c <HAL_DMAEx_List_Start_IT>
 8002310:	4603      	mov	r3, r0
 8002312:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002316:	e024      	b.n	8002362 <HAL_DAC_Start_DMA+0x30a>
      }
      else
      {
        /* Return error status */
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e04e      	b.n	80023ba <HAL_DAC_Start_DMA+0x362>
      }
    }
    else
    {
      /* Length should be converted to number of bytes */
      if (hdac->DMA_Handle2->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d104      	bne.n	8002330 <HAL_DAC_Start_DMA+0x2d8>
      {
        /* Word -> Bytes */
        LengthInBytes = Length * 4U;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800232e:	e00c      	b.n	800234a <HAL_DAC_Start_DMA+0x2f2>
      }
      else if (hdac->DMA_Handle2->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d104      	bne.n	8002344 <HAL_DAC_Start_DMA+0x2ec>
      {
        /* Halfword -> Bytes */
        LengthInBytes = Length * 2U;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002342:	e002      	b.n	800234a <HAL_DAC_Start_DMA+0x2f2>
      }
      else /* Bytes */
      {
        /* Same size already expressed in Bytes */
        LengthInBytes = Length;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }

      /* Enable the DMA channel */
      status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, LengthInBytes);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	68d8      	ldr	r0, [r3, #12]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002354:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002358:	f000 fca9 	bl	8002cae <HAL_DMA_Start_IT>
 800235c:	4603      	mov	r3, r0
 800235e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002368:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800236c:	2b00      	cmp	r3, #0
 800236e:	d11c      	bne.n	80023aa <HAL_DAC_Start_DMA+0x352>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2201      	movs	r2, #1
 800237e:	409a      	lsls	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002388:	4b0e      	ldr	r3, [pc, #56]	@ (80023c4 <HAL_DAC_Start_DMA+0x36c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	4a0e      	ldr	r2, [pc, #56]	@ (80023c8 <HAL_DAC_Start_DMA+0x370>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	3301      	adds	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 800239a:	e002      	b.n	80023a2 <HAL_DAC_Start_DMA+0x34a>
    {
      wait_loop_index--;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3b01      	subs	r3, #1
 80023a0:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f9      	bne.n	800239c <HAL_DAC_Start_DMA+0x344>
 80023a8:	e005      	b.n	80023b6 <HAL_DAC_Start_DMA+0x35e>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f043 0204 	orr.w	r2, r3, #4
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80023b6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3790      	adds	r7, #144	@ 0x90
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000088 	.word	0x20000088
 80023c8:	053e2d63 	.word	0x053e2d63

080023cc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e03e      	b.n	800245e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6819      	ldr	r1, [r3, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43da      	mvns	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	400a      	ands	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6819      	ldr	r1, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2201      	movs	r2, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43da      	mvns	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	400a      	ands	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10d      	bne.n	800243c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fca2 	bl	8002d6e <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	e00c      	b.n	8002456 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fc94 	bl	8002d6e <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8002454:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800247c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01e      	beq.n	80024c6 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d019      	beq.n	80024c6 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2204      	movs	r2, #4
 8002496:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024bc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4798      	blx	r3
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01e      	beq.n	800250e <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d019      	beq.n	800250e <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2204      	movs	r2, #4
 80024de:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f043 0202 	orr.w	r2, r3, #2
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80024f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002504:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	4798      	blx	r3
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <HAL_DAC_ConfigChannel+0x1c>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e187      	b.n	8002898 <HAL_DAC_ConfigChannel+0x330>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	795b      	ldrb	r3, [r3, #5]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_DAC_ConfigChannel+0x32>
 8002596:	2302      	movs	r3, #2
 8002598:	e17e      	b.n	8002898 <HAL_DAC_ConfigChannel+0x330>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2202      	movs	r2, #2
 80025a4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d17a      	bne.n	80026a4 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80025ae:	f7ff fb3d 	bl	8001c2c <HAL_GetTick>
 80025b2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d13d      	bne.n	8002636 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80025ba:	e018      	b.n	80025ee <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80025bc:	f7ff fb36 	bl	8001c2c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d911      	bls.n	80025ee <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00a      	beq.n	80025ee <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f043 0208 	orr.w	r2, r3, #8
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2203      	movs	r2, #3
 80025e8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e154      	b.n	8002898 <HAL_DAC_ConfigChannel+0x330>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1df      	bne.n	80025bc <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002604:	641a      	str	r2, [r3, #64]	@ 0x40
 8002606:	e020      	b.n	800264a <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002608:	f7ff fb10 	bl	8001c2c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d90f      	bls.n	8002636 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261c:	2b00      	cmp	r3, #0
 800261e:	da0a      	bge.n	8002636 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f043 0208 	orr.w	r2, r3, #8
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2203      	movs	r2, #3
 8002630:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e130      	b.n	8002898 <HAL_DAC_ConfigChannel+0x330>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263c:	2b00      	cmp	r3, #0
 800263e:	dbe3      	blt.n	8002608 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002648:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	ea02 0103 	and.w	r1, r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	21ff      	movs	r1, #255	@ 0xff
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	ea02 0103 	and.w	r1, r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	409a      	lsls	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026aa:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	655a      	str	r2, [r3, #84]	@ 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d11d      	bne.n	80026fe <HAL_DAC_ConfigChannel+0x196>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	221f      	movs	r2, #31
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026da:	4013      	ands	r3, r2
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f2:	4313      	orrs	r3, r2
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2207      	movs	r2, #7
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002716:	4013      	ands	r3, r2
 8002718:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d102      	bne.n	8002728 <HAL_DAC_ConfigChannel+0x1c0>
  {
    connectOnChip = 0x00000000UL;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
 8002726:	e00f      	b.n	8002748 <HAL_DAC_ConfigChannel+0x1e0>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d102      	bne.n	8002736 <HAL_DAC_ConfigChannel+0x1ce>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002730:	2301      	movs	r3, #1
 8002732:	623b      	str	r3, [r7, #32]
 8002734:	e008      	b.n	8002748 <HAL_DAC_ConfigChannel+0x1e0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <HAL_DAC_ConfigChannel+0x1dc>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800273e:	2301      	movs	r3, #1
 8002740:	623b      	str	r3, [r7, #32]
 8002742:	e001      	b.n	8002748 <HAL_DAC_ConfigChannel+0x1e0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002744:	2300      	movs	r3, #0
 8002746:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	6a3a      	ldr	r2, [r7, #32]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800276a:	4013      	ands	r3, r2
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	7a1b      	ldrb	r3, [r3, #8]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d102      	bne.n	800277c <HAL_DAC_ConfigChannel+0x214>
 8002776:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800277a:	e000      	b.n	800277e <HAL_DAC_ConfigChannel+0x216>
 800277c:	2300      	movs	r3, #0
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002796:	4013      	ands	r3, r2
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	7a5b      	ldrb	r3, [r3, #9]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d102      	bne.n	80027a8 <HAL_DAC_ConfigChannel+0x240>
 80027a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027a6:	e000      	b.n	80027aa <HAL_DAC_ConfigChannel+0x242>
 80027a8:	2300      	movs	r3, #0
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d114      	bne.n	80027ea <HAL_DAC_ConfigChannel+0x282>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80027c0:	f003 fc24 	bl	800600c <HAL_RCC_GetHCLKFreq>
 80027c4:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4a35      	ldr	r2, [pc, #212]	@ (80028a0 <HAL_DAC_ConfigChannel+0x338>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d904      	bls.n	80027d8 <HAL_DAC_ConfigChannel+0x270>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d6:	e00f      	b.n	80027f8 <HAL_DAC_ConfigChannel+0x290>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4a32      	ldr	r2, [pc, #200]	@ (80028a4 <HAL_DAC_ConfigChannel+0x33c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d90a      	bls.n	80027f6 <HAL_DAC_ConfigChannel+0x28e>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e8:	e006      	b.n	80027f8 <HAL_DAC_ConfigChannel+0x290>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f0:	4313      	orrs	r3, r2
 80027f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f4:	e000      	b.n	80027f8 <HAL_DAC_ConfigChannel+0x290>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80027f6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002806:	4313      	orrs	r3, r2
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002810:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6819      	ldr	r1, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	400a      	ands	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800284a:	4013      	ands	r3, r2
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002862:	4313      	orrs	r3, r2
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800286c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	22c0      	movs	r2, #192	@ 0xc0
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43da      	mvns	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	400a      	ands	r2, r1
 8002888:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002896:	7ffb      	ldrb	r3, [r7, #31]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3728      	adds	r7, #40	@ 0x28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	09896800 	.word	0x09896800
 80028a4:	04c4b400 	.word	0x04c4b400

080028a8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	4798      	blx	r3
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	711a      	strb	r2, [r3, #4]
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	4798      	blx	r3
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f043 0204 	orr.w	r2, r3, #4
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	4798      	blx	r3
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	711a      	strb	r2, [r3, #4]
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <HAL_DACEx_SelfCalibrate>:
  * @retval Updates DAC_TrimmingValue. , DAC_UserTrimming set to DAC_UserTrimming
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */
HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	@ 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Check the DAC handle allocation */
  /* Check if DAC running */
  if ((hdac == NULL) || (sConfig == NULL))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_DACEx_SelfCalibrate+0x1e>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d103      	bne.n	8002992 <HAL_DACEx_SelfCalibrate+0x26>
  {
    status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002990:	e111      	b.n	8002bb6 <HAL_DACEx_SelfCalibrate+0x24a>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	791b      	ldrb	r3, [r3, #4]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d103      	bne.n	80029a4 <HAL_DACEx_SelfCalibrate+0x38>
  {
    status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80029a2:	e108      	b.n	8002bb6 <HAL_DACEx_SelfCalibrate+0x24a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	795b      	ldrb	r3, [r3, #5]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_DACEx_SelfCalibrate+0x44>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e104      	b.n	8002bba <HAL_DACEx_SelfCalibrate+0x24e>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2107      	movs	r1, #7
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6819      	ldr	r1, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2201      	movs	r2, #1
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43da      	mvns	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	400a      	ands	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
    /* Wait for ready bit to be de-asserted */
    HAL_Delay(1);
 80029e8:	2001      	movs	r0, #1
 80029ea:	f7ff f92b 	bl	8001c44 <HAL_Delay>

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2207      	movs	r2, #7
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43da      	mvns	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	400a      	ands	r2, r1
 8002a08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 0x10UL;
 8002a24:	2310      	movs	r3, #16
 8002a26:	623b      	str	r3, [r7, #32]
    delta = 0x08UL;
 8002a28:	2308      	movs	r3, #8
 8002a2a:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 8002a2c:	e047      	b.n	8002abe <HAL_DACEx_SelfCalibrate+0x152>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	211f      	movs	r1, #31
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	ea02 0103 	and.w	r1, r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	6a3a      	ldr	r2, [r7, #32]
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Wait minimum time needed between two calibration steps (OTRIM) */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed */
      /*       32 bits register capacity and handle low frequency. */
      wait_loop_index = ((DAC_DELAY_TRIM_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a58:	4b5a      	ldr	r3, [pc, #360]	@ (8002bc4 <HAL_DACEx_SelfCalibrate+0x258>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	099b      	lsrs	r3, r3, #6
 8002a5e:	4a5a      	ldr	r2, [pc, #360]	@ (8002bc8 <HAL_DACEx_SelfCalibrate+0x25c>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002a70:	e002      	b.n	8002a78 <HAL_DACEx_SelfCalibrate+0x10c>
      {
        wait_loop_index--;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f9      	bne.n	8002a72 <HAL_DACEx_SelfCalibrate+0x106>
      }

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	401a      	ands	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d104      	bne.n	8002ab0 <HAL_DACEx_SelfCalibrate+0x144>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 8002aa6:	6a3a      	ldr	r2, [r7, #32]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	623b      	str	r3, [r7, #32]
 8002aae:	e003      	b.n	8002ab8 <HAL_DACEx_SelfCalibrate+0x14c>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8002ab0:	6a3a      	ldr	r2, [r7, #32]
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1UL;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1b4      	bne.n	8002a2e <HAL_DACEx_SelfCalibrate+0xc2>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	211f      	movs	r1, #31
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	ea02 0103 	and.w	r1, r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	6a3a      	ldr	r2, [r7, #32]
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Wait minimum time needed between two calibration steps (OTRIM) */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed */
    /*       32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_TRIM_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aee:	4b35      	ldr	r3, [pc, #212]	@ (8002bc4 <HAL_DACEx_SelfCalibrate+0x258>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	099b      	lsrs	r3, r3, #6
 8002af4:	4a34      	ldr	r2, [pc, #208]	@ (8002bc8 <HAL_DACEx_SelfCalibrate+0x25c>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	099b      	lsrs	r3, r3, #6
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002b06:	e002      	b.n	8002b0e <HAL_DACEx_SelfCalibrate+0x1a2>
    {
      wait_loop_index--;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f9      	bne.n	8002b08 <HAL_DACEx_SelfCalibrate+0x19c>
    }

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11a      	bne.n	8002b64 <HAL_DACEx_SelfCalibrate+0x1f8>
    {
      /* Check trimming value below maximum */
      if (trimmingvalue < 0x1FU)
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	2b1e      	cmp	r3, #30
 8002b32:	d802      	bhi.n	8002b3a <HAL_DACEx_SelfCalibrate+0x1ce>
      {
        /* Trimming is actually one value more */
        trimmingvalue++;
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	3301      	adds	r3, #1
 8002b38:	623b      	str	r3, [r7, #32]
      }
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	211f      	movs	r1, #31
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	ea02 0103 	and.w	r1, r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43da      	mvns	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	400a      	ands	r2, r1
 8002b80:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	6a3a      	ldr	r2, [r7, #32]
 8002b86:	621a      	str	r2, [r3, #32]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	61da      	str	r2, [r3, #28]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2107      	movs	r1, #7
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	ea02 0103 	and.w	r1, r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	715a      	strb	r2, [r3, #5]
  }

  return status;
 8002bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3728      	adds	r7, #40	@ 0x28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000088 	.word	0x20000088
 8002bc8:	053e2d63 	.word	0x053e2d63

08002bcc <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle and autonomous mode configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_DACEx_SetConfigAutonomousMode+0x16>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_DACEx_SetConfigAutonomousMode+0x1a>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e024      	b.n	8002c30 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }

  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	791b      	ldrb	r3, [r3, #4]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d11e      	bne.n	8002c2e <HAL_DACEx_SetConfigAutonomousMode+0x62>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	795b      	ldrb	r3, [r3, #5]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_DACEx_SetConfigAutonomousMode+0x30>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e019      	b.n	8002c30 <HAL_DACEx_SetConfigAutonomousMode+0x64>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0e:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e000      	b.n	8002c30 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }
  else
  {
    return HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
  }
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c48:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	4798      	blx	r3
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	711a      	strb	r2, [r3, #4]
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	4798      	blx	r3
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f043 0204 	orr.w	r2, r3, #4
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	4798      	blx	r3
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	711a      	strb	r2, [r3, #4]
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e04f      	b.n	8002d66 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_DMA_Start_IT+0x26>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e048      	b.n	8002d66 <HAL_DMA_Start_IT+0xb8>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d136      	bne.n	8002d56 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fa4f 	bl	80031a0 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695a      	ldr	r2, [r3, #20]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002d10:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d007      	beq.n	8002d2a <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695a      	ldr	r2, [r3, #20]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d28:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d40:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695a      	ldr	r2, [r3, #20]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0201 	orr.w	r2, r2, #1
 8002d50:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e007      	b.n	8002d66 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2240      	movs	r2, #64	@ 0x40
 8002d5a:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002d76:	f7fe ff59 	bl	8001c2c <HAL_GetTick>
 8002d7a:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e06b      	b.n	8002e5e <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d008      	beq.n	8002da4 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e05c      	b.n	8002e5e <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0204 	orr.w	r2, r2, #4
 8002db2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2205      	movs	r2, #5
 8002db8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002dbc:	e020      	b.n	8002e00 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002dbe:	f7fe ff35 	bl	8001c2c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b05      	cmp	r3, #5
 8002dca:	d919      	bls.n	8002e00 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd0:	f043 0210 	orr.w	r2, r3, #16
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2203      	movs	r2, #3
 8002ddc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df0:	2201      	movs	r2, #1
 8002df2:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e02e      	b.n	8002e5e <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0d7      	beq.n	8002dbe <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0202 	orr.w	r2, r2, #2
 8002e1c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2204      	movs	r2, #4
 8002e22:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002e2e:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e48:	2201      	movs	r2, #1
 8002e4a:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2200      	movs	r2, #0
 8002e52:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b086      	sub	sp, #24
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002e76:	f023 030f 	bic.w	r3, r3, #15
 8002e7a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e84:	3b50      	subs	r3, #80	@ 0x50
 8002e86:	09db      	lsrs	r3, r3, #7
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 813b 	beq.w	800311c <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d011      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eca:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed0:	f043 0201 	orr.w	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d011      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002efc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f02:	f043 0202 	orr.w	r2, r3, #2
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d011      	beq.n	8002f3c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f2e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f34:	f043 0204 	orr.w	r2, r3, #4
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d011      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f60:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f66:	f043 0208 	orr.w	r2, r3, #8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d013      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00c      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f92:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d04c      	beq.n	800304c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d045      	beq.n	800304c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fc8:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d12e      	bne.n	8003034 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fe4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0202 	orr.w	r2, r2, #2
 8002ff4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800300e:	2201      	movs	r2, #1
 8003010:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2200      	movs	r2, #0
 8003018:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d07a      	beq.n	8003120 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
        }

        return;
 8003032:	e075      	b.n	8003120 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2205      	movs	r2, #5
 8003038:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d039      	beq.n	80030ce <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d032      	beq.n	80030ce <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800306c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003070:	2b00      	cmp	r3, #0
 8003072:	d012      	beq.n	800309a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d116      	bne.n	80030ac <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003084:	2b00      	cmp	r3, #0
 8003086:	d111      	bne.n	80030ac <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003094:	2201      	movs	r2, #1
 8003096:	731a      	strb	r2, [r3, #12]
 8003098:	e008      	b.n	80030ac <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d103      	bne.n	80030ac <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80030b4:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d025      	beq.n	8003122 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0202 	orr.w	r2, r2, #2
 80030e4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030fe:	2201      	movs	r2, #1
 8003100:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
 800311a:	e002      	b.n	8003122 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800311c:	bf00      	nop
 800311e:	e000      	b.n	8003122 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003120:	bf00      	nop
    }
  }
}
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e02b      	b.n	8003194 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003144:	f023 030f 	bic.w	r3, r3, #15
 8003148:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003152:	3b50      	subs	r3, #80	@ 0x50
 8003154:	09db      	lsrs	r3, r3, #7
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	2201      	movs	r2, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	d012      	beq.n	8003192 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	f003 0311 	and.w	r3, r3, #17
 8003172:	2b11      	cmp	r3, #17
 8003174:	d106      	bne.n	8003184 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	431a      	orrs	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	e006      	b.n	8003192 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	43db      	mvns	r3, r3
 800318c:	401a      	ands	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b4:	0c1b      	lsrs	r3, r3, #16
 80031b6:	041b      	lsls	r3, r3, #16
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	b291      	uxth	r1, r2
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80031cc:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80031f4:	f7fe fd1a 	bl	8001c2c <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0db      	b.n	80033bc <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a6e      	ldr	r2, [pc, #440]	@ (80033c4 <HAL_DMAEx_List_Init+0x1d8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	f000 809f 	beq.w	800334e <HAL_DMAEx_List_Init+0x162>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a6c      	ldr	r2, [pc, #432]	@ (80033c8 <HAL_DMAEx_List_Init+0x1dc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	f000 8099 	beq.w	800334e <HAL_DMAEx_List_Init+0x162>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a6a      	ldr	r2, [pc, #424]	@ (80033cc <HAL_DMAEx_List_Init+0x1e0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	f000 8093 	beq.w	800334e <HAL_DMAEx_List_Init+0x162>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a68      	ldr	r2, [pc, #416]	@ (80033d0 <HAL_DMAEx_List_Init+0x1e4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	f000 808d 	beq.w	800334e <HAL_DMAEx_List_Init+0x162>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a66      	ldr	r2, [pc, #408]	@ (80033d4 <HAL_DMAEx_List_Init+0x1e8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	f000 8087 	beq.w	800334e <HAL_DMAEx_List_Init+0x162>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a64      	ldr	r2, [pc, #400]	@ (80033d8 <HAL_DMAEx_List_Init+0x1ec>)
 8003246:	4293      	cmp	r3, r2
 8003248:	f000 8081 	beq.w	800334e <HAL_DMAEx_List_Init+0x162>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a62      	ldr	r2, [pc, #392]	@ (80033dc <HAL_DMAEx_List_Init+0x1f0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d07b      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a61      	ldr	r2, [pc, #388]	@ (80033e0 <HAL_DMAEx_List_Init+0x1f4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d076      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a5f      	ldr	r2, [pc, #380]	@ (80033e4 <HAL_DMAEx_List_Init+0x1f8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d071      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a5e      	ldr	r2, [pc, #376]	@ (80033e8 <HAL_DMAEx_List_Init+0x1fc>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d06c      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a5c      	ldr	r2, [pc, #368]	@ (80033ec <HAL_DMAEx_List_Init+0x200>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d067      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a5b      	ldr	r2, [pc, #364]	@ (80033f0 <HAL_DMAEx_List_Init+0x204>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d062      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a59      	ldr	r2, [pc, #356]	@ (80033f4 <HAL_DMAEx_List_Init+0x208>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d05d      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a58      	ldr	r2, [pc, #352]	@ (80033f8 <HAL_DMAEx_List_Init+0x20c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d058      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a56      	ldr	r2, [pc, #344]	@ (80033fc <HAL_DMAEx_List_Init+0x210>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d053      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a55      	ldr	r2, [pc, #340]	@ (8003400 <HAL_DMAEx_List_Init+0x214>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d04e      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a53      	ldr	r2, [pc, #332]	@ (8003404 <HAL_DMAEx_List_Init+0x218>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d049      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a52      	ldr	r2, [pc, #328]	@ (8003408 <HAL_DMAEx_List_Init+0x21c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d044      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a50      	ldr	r2, [pc, #320]	@ (800340c <HAL_DMAEx_List_Init+0x220>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d03f      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a4f      	ldr	r2, [pc, #316]	@ (8003410 <HAL_DMAEx_List_Init+0x224>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d03a      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003414 <HAL_DMAEx_List_Init+0x228>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d035      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a4c      	ldr	r2, [pc, #304]	@ (8003418 <HAL_DMAEx_List_Init+0x22c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d030      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a4a      	ldr	r2, [pc, #296]	@ (800341c <HAL_DMAEx_List_Init+0x230>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d02b      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a49      	ldr	r2, [pc, #292]	@ (8003420 <HAL_DMAEx_List_Init+0x234>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d026      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a47      	ldr	r2, [pc, #284]	@ (8003424 <HAL_DMAEx_List_Init+0x238>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d021      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a46      	ldr	r2, [pc, #280]	@ (8003428 <HAL_DMAEx_List_Init+0x23c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d01c      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a44      	ldr	r2, [pc, #272]	@ (800342c <HAL_DMAEx_List_Init+0x240>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d017      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a43      	ldr	r2, [pc, #268]	@ (8003430 <HAL_DMAEx_List_Init+0x244>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d012      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a41      	ldr	r2, [pc, #260]	@ (8003434 <HAL_DMAEx_List_Init+0x248>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00d      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a40      	ldr	r2, [pc, #256]	@ (8003438 <HAL_DMAEx_List_Init+0x24c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d008      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a3e      	ldr	r2, [pc, #248]	@ (800343c <HAL_DMAEx_List_Init+0x250>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d003      	beq.n	800334e <HAL_DMAEx_List_Init+0x162>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a3d      	ldr	r2, [pc, #244]	@ (8003440 <HAL_DMAEx_List_Init+0x254>)
 800334c:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695a      	ldr	r2, [r3, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0206 	orr.w	r2, r2, #6
 800336c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800336e:	e00f      	b.n	8003390 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003370:	f7fe fc5c 	bl	8001c2c <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b05      	cmp	r3, #5
 800337c:	d908      	bls.n	8003390 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2210      	movs	r2, #16
 8003382:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2203      	movs	r2, #3
 8003388:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e015      	b.n	80033bc <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e8      	bne.n	8003370 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 faf2 	bl	8003988 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40020050 	.word	0x40020050
 80033c8:	50020050 	.word	0x50020050
 80033cc:	400200d0 	.word	0x400200d0
 80033d0:	500200d0 	.word	0x500200d0
 80033d4:	40020150 	.word	0x40020150
 80033d8:	50020150 	.word	0x50020150
 80033dc:	400201d0 	.word	0x400201d0
 80033e0:	500201d0 	.word	0x500201d0
 80033e4:	40020250 	.word	0x40020250
 80033e8:	50020250 	.word	0x50020250
 80033ec:	400202d0 	.word	0x400202d0
 80033f0:	500202d0 	.word	0x500202d0
 80033f4:	40020350 	.word	0x40020350
 80033f8:	50020350 	.word	0x50020350
 80033fc:	400203d0 	.word	0x400203d0
 8003400:	500203d0 	.word	0x500203d0
 8003404:	40020450 	.word	0x40020450
 8003408:	50020450 	.word	0x50020450
 800340c:	400204d0 	.word	0x400204d0
 8003410:	500204d0 	.word	0x500204d0
 8003414:	40020550 	.word	0x40020550
 8003418:	50020550 	.word	0x50020550
 800341c:	400205d0 	.word	0x400205d0
 8003420:	500205d0 	.word	0x500205d0
 8003424:	40020650 	.word	0x40020650
 8003428:	50020650 	.word	0x50020650
 800342c:	400206d0 	.word	0x400206d0
 8003430:	500206d0 	.word	0x500206d0
 8003434:	40020750 	.word	0x40020750
 8003438:	50020750 	.word	0x50020750
 800343c:	400207d0 	.word	0x400207d0
 8003440:	500207d0 	.word	0x500207d0

08003444 <HAL_DMAEx_List_Start>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start(DMA_HandleTypeDef *const hdma)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_DMAEx_List_Start+0x16>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_DMAEx_List_Start+0x1a>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e062      	b.n	8003524 <HAL_DMAEx_List_Start+0xe0>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003464:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003470:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d005      	beq.n	8003484 <HAL_DMAEx_List_Start+0x40>
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d14a      	bne.n	8003514 <HAL_DMAEx_List_Start+0xd0>
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d047      	beq.n	8003514 <HAL_DMAEx_List_Start+0xd0>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d137      	bne.n	8003500 <HAL_DMAEx_List_Start+0xbc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_DMAEx_List_Start+0x5a>
 800349a:	2302      	movs	r3, #2
 800349c:	e042      	b.n	8003524 <HAL_DMAEx_List_Start+0xe0>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b2:	2202      	movs	r2, #2
 80034b4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c0:	2200      	movs	r2, #0
 80034c2:	611a      	str	r2, [r3, #16]

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f107 010c 	add.w	r1, r7, #12
 80034ce:	2200      	movs	r2, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fe7f 	bl	80041d4 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4619      	mov	r1, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	0c0b      	lsrs	r3, r1, #16
 80034e4:	041b      	lsls	r3, r3, #16
 80034e6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80034f4:	4013      	ands	r3, r2
 80034f6:	68f9      	ldr	r1, [r7, #12]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e007      	b.n	8003524 <HAL_DMAEx_List_Start+0xe0>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2240      	movs	r2, #64	@ 0x40
 8003518:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_DMAEx_List_Start_IT+0x16>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e082      	b.n	800364c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800354c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003558:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d005      	beq.n	800356c <HAL_DMAEx_List_Start_IT+0x40>
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d16a      	bne.n	800363c <HAL_DMAEx_List_Start_IT+0x110>
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d067      	beq.n	800363c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d157      	bne.n	8003628 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_DMAEx_List_Start_IT+0x5a>
 8003582:	2302      	movs	r3, #2
 8003584:	e062      	b.n	800364c <HAL_DMAEx_List_Start_IT+0x120>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359a:	2202      	movs	r2, #2
 800359c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80035ba:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035ea:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f107 010c 	add.w	r1, r7, #12
 80035f6:	2200      	movs	r2, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fdeb 	bl	80041d4 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4619      	mov	r1, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	0c0b      	lsrs	r3, r1, #16
 800360c:	041b      	lsls	r3, r3, #16
 800360e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800361c:	4013      	ands	r3, r2
 800361e:	68f9      	ldr	r1, [r7, #12]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	430b      	orrs	r3, r1
 8003626:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e007      	b.n	800364c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2240      	movs	r2, #64	@ 0x40
 8003640:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_DMAEx_List_BuildNode+0x16>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e004      	b.n	8003678 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fae1 	bl	8003c38 <DMA_List_BuildNode>

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HAL_DMAEx_List_GetNodeConfig+0x16>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e004      	b.n	80036a4 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 800369a:	6839      	ldr	r1, [r7, #0]
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fc23 	bl	8003ee8 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	@ 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e066      	b.n	8003794 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d104      	bne.n	80036d8 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2204      	movs	r2, #4
 80036d2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e05d      	b.n	8003794 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2200      	movs	r2, #0
 80036de:	6839      	ldr	r1, [r7, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fd0b 	bl	80040fc <DMA_List_CheckNodesBaseAddresses>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d004      	beq.n	80036f6 <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2205      	movs	r2, #5
 80036f0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e04e      	b.n	8003794 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2200      	movs	r2, #0
 80036fc:	6839      	ldr	r1, [r7, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fd2c 	bl	800415c <DMA_List_CheckNodesTypes>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d004      	beq.n	8003714 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2204      	movs	r2, #4
 800370e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e03f      	b.n	8003794 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d103      	bne.n	8003724 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e02b      	b.n	800377c <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003724:	f107 0220 	add.w	r2, r7, #32
 8003728:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800372c:	4619      	mov	r1, r3
 800372e:	6838      	ldr	r0, [r7, #0]
 8003730:	f000 fd50 	bl	80041d4 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003738:	f107 030c 	add.w	r3, r7, #12
 800373c:	461a      	mov	r2, r3
 800373e:	2100      	movs	r1, #0
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fd77 	bl	8004234 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	461a      	mov	r2, r3
 8003754:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003758:	4013      	ands	r3, r2
 800375a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800375c:	6a3a      	ldr	r2, [r7, #32]
 800375e:	4319      	orrs	r1, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800376c:	4013      	ands	r3, r2
 800376e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4610      	mov	r0, r2
 8003774:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003776:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8003778:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3728      	adds	r7, #40	@ 0x28
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	@ 0x28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e052      	b.n	8003854 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d104      	bne.n	80037c0 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e049      	b.n	8003854 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00c      	beq.n	80037e2 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d101      	bne.n	80037d8 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e03d      	b.n	8003854 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2204      	movs	r2, #4
 80037dc:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e038      	b.n	8003854 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d104      	bne.n	80037f4 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2204      	movs	r2, #4
 80037ee:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e02f      	b.n	8003854 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f107 0220 	add.w	r2, r7, #32
 8003808:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fce1 	bl	80041d4 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003816:	f107 030c 	add.w	r3, r7, #12
 800381a:	461a      	mov	r2, r3
 800381c:	2100      	movs	r1, #0
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fd08 	bl	8004234 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800382e:	4013      	ands	r3, r2
 8003830:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4610      	mov	r0, r2
 8003836:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003838:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800383a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3728      	adds	r7, #40	@ 0x28
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_DMAEx_List_LinkQ+0x16>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e072      	b.n	800395c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800387c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d002      	beq.n	8003890 <HAL_DMAEx_List_LinkQ+0x34>
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	2b05      	cmp	r3, #5
 800388e:	d108      	bne.n	80038a2 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2240      	movs	r2, #64	@ 0x40
 8003894:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e05c      	b.n	800395c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	7b1b      	ldrb	r3, [r3, #12]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d104      	bne.n	80038b6 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2201      	movs	r2, #1
 80038b0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e052      	b.n	800395c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003968 <HAL_DMAEx_List_LinkQ+0x10c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d022      	beq.n	8003906 <HAL_DMAEx_List_LinkQ+0xaa>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a29      	ldr	r2, [pc, #164]	@ (800396c <HAL_DMAEx_List_LinkQ+0x110>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01d      	beq.n	8003906 <HAL_DMAEx_List_LinkQ+0xaa>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a28      	ldr	r2, [pc, #160]	@ (8003970 <HAL_DMAEx_List_LinkQ+0x114>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d018      	beq.n	8003906 <HAL_DMAEx_List_LinkQ+0xaa>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a26      	ldr	r2, [pc, #152]	@ (8003974 <HAL_DMAEx_List_LinkQ+0x118>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_DMAEx_List_LinkQ+0xaa>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a25      	ldr	r2, [pc, #148]	@ (8003978 <HAL_DMAEx_List_LinkQ+0x11c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_DMAEx_List_LinkQ+0xaa>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a23      	ldr	r2, [pc, #140]	@ (800397c <HAL_DMAEx_List_LinkQ+0x120>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_DMAEx_List_LinkQ+0xaa>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a22      	ldr	r2, [pc, #136]	@ (8003980 <HAL_DMAEx_List_LinkQ+0x124>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_DMAEx_List_LinkQ+0xaa>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a20      	ldr	r2, [pc, #128]	@ (8003984 <HAL_DMAEx_List_LinkQ+0x128>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_DMAEx_List_LinkQ+0xae>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <HAL_DMAEx_List_LinkQ+0xb0>
 800390a:	2300      	movs	r3, #0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10b      	bne.n	8003928 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800391a:	2b00      	cmp	r3, #0
 800391c:	d004      	beq.n	8003928 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2203      	movs	r2, #3
 8003922:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e019      	b.n	800395c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800392c:	2b81      	cmp	r3, #129	@ 0x81
 800392e:	d108      	bne.n	8003942 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2204      	movs	r2, #4
 800393c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e00c      	b.n	800395c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d004      	beq.n	8003954 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2204      	movs	r2, #4
 800394e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e003      	b.n	800395c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40020650 	.word	0x40020650
 800396c:	50020650 	.word	0x50020650
 8003970:	400206d0 	.word	0x400206d0
 8003974:	500206d0 	.word	0x500206d0
 8003978:	40020750 	.word	0x40020750
 800397c:	50020750 	.word	0x50020750
 8003980:	400207d0 	.word	0x400207d0
 8003984:	500207d0 	.word	0x500207d0

08003988 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a85      	ldr	r2, [pc, #532]	@ (8003bb8 <DMA_List_Init+0x230>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	f000 80a0 	beq.w	8003ae8 <DMA_List_Init+0x160>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a83      	ldr	r2, [pc, #524]	@ (8003bbc <DMA_List_Init+0x234>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	f000 809a 	beq.w	8003ae8 <DMA_List_Init+0x160>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a81      	ldr	r2, [pc, #516]	@ (8003bc0 <DMA_List_Init+0x238>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	f000 8094 	beq.w	8003ae8 <DMA_List_Init+0x160>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a7f      	ldr	r2, [pc, #508]	@ (8003bc4 <DMA_List_Init+0x23c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	f000 808e 	beq.w	8003ae8 <DMA_List_Init+0x160>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a7d      	ldr	r2, [pc, #500]	@ (8003bc8 <DMA_List_Init+0x240>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	f000 8088 	beq.w	8003ae8 <DMA_List_Init+0x160>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a7b      	ldr	r2, [pc, #492]	@ (8003bcc <DMA_List_Init+0x244>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	f000 8082 	beq.w	8003ae8 <DMA_List_Init+0x160>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a79      	ldr	r2, [pc, #484]	@ (8003bd0 <DMA_List_Init+0x248>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d07c      	beq.n	8003ae8 <DMA_List_Init+0x160>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a78      	ldr	r2, [pc, #480]	@ (8003bd4 <DMA_List_Init+0x24c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d077      	beq.n	8003ae8 <DMA_List_Init+0x160>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a76      	ldr	r2, [pc, #472]	@ (8003bd8 <DMA_List_Init+0x250>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d072      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a75      	ldr	r2, [pc, #468]	@ (8003bdc <DMA_List_Init+0x254>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d06d      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a73      	ldr	r2, [pc, #460]	@ (8003be0 <DMA_List_Init+0x258>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d068      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a72      	ldr	r2, [pc, #456]	@ (8003be4 <DMA_List_Init+0x25c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d063      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a70      	ldr	r2, [pc, #448]	@ (8003be8 <DMA_List_Init+0x260>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d05e      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6f      	ldr	r2, [pc, #444]	@ (8003bec <DMA_List_Init+0x264>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d059      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a6d      	ldr	r2, [pc, #436]	@ (8003bf0 <DMA_List_Init+0x268>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d054      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6c      	ldr	r2, [pc, #432]	@ (8003bf4 <DMA_List_Init+0x26c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d04f      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a6a      	ldr	r2, [pc, #424]	@ (8003bf8 <DMA_List_Init+0x270>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d04a      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a69      	ldr	r2, [pc, #420]	@ (8003bfc <DMA_List_Init+0x274>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d045      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a67      	ldr	r2, [pc, #412]	@ (8003c00 <DMA_List_Init+0x278>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d040      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a66      	ldr	r2, [pc, #408]	@ (8003c04 <DMA_List_Init+0x27c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d03b      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a64      	ldr	r2, [pc, #400]	@ (8003c08 <DMA_List_Init+0x280>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d036      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a63      	ldr	r2, [pc, #396]	@ (8003c0c <DMA_List_Init+0x284>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d031      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a61      	ldr	r2, [pc, #388]	@ (8003c10 <DMA_List_Init+0x288>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d02c      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a60      	ldr	r2, [pc, #384]	@ (8003c14 <DMA_List_Init+0x28c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d027      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a5e      	ldr	r2, [pc, #376]	@ (8003c18 <DMA_List_Init+0x290>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d022      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a5d      	ldr	r2, [pc, #372]	@ (8003c1c <DMA_List_Init+0x294>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d01d      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a5b      	ldr	r2, [pc, #364]	@ (8003c20 <DMA_List_Init+0x298>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d018      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a5a      	ldr	r2, [pc, #360]	@ (8003c24 <DMA_List_Init+0x29c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a58      	ldr	r2, [pc, #352]	@ (8003c28 <DMA_List_Init+0x2a0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00e      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a57      	ldr	r2, [pc, #348]	@ (8003c2c <DMA_List_Init+0x2a4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d009      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a55      	ldr	r2, [pc, #340]	@ (8003c30 <DMA_List_Init+0x2a8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d004      	beq.n	8003ae8 <DMA_List_Init+0x160>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a54      	ldr	r2, [pc, #336]	@ (8003c34 <DMA_List_Init+0x2ac>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d101      	bne.n	8003aec <DMA_List_Init+0x164>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <DMA_List_Init+0x166>
 8003aec:	2300      	movs	r3, #0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2200      	movs	r2, #0
 8003b16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2200      	movs	r2, #0
 8003b38:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a36      	ldr	r2, [pc, #216]	@ (8003c18 <DMA_List_Init+0x290>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d022      	beq.n	8003b8a <DMA_List_Init+0x202>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a34      	ldr	r2, [pc, #208]	@ (8003c1c <DMA_List_Init+0x294>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01d      	beq.n	8003b8a <DMA_List_Init+0x202>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a33      	ldr	r2, [pc, #204]	@ (8003c20 <DMA_List_Init+0x298>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d018      	beq.n	8003b8a <DMA_List_Init+0x202>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a31      	ldr	r2, [pc, #196]	@ (8003c24 <DMA_List_Init+0x29c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <DMA_List_Init+0x202>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a30      	ldr	r2, [pc, #192]	@ (8003c28 <DMA_List_Init+0x2a0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00e      	beq.n	8003b8a <DMA_List_Init+0x202>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a2e      	ldr	r2, [pc, #184]	@ (8003c2c <DMA_List_Init+0x2a4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d009      	beq.n	8003b8a <DMA_List_Init+0x202>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8003c30 <DMA_List_Init+0x2a8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <DMA_List_Init+0x202>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a2b      	ldr	r2, [pc, #172]	@ (8003c34 <DMA_List_Init+0x2ac>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d101      	bne.n	8003b8e <DMA_List_Init+0x206>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <DMA_List_Init+0x208>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d007      	beq.n	8003ba4 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	40020050 	.word	0x40020050
 8003bbc:	50020050 	.word	0x50020050
 8003bc0:	400200d0 	.word	0x400200d0
 8003bc4:	500200d0 	.word	0x500200d0
 8003bc8:	40020150 	.word	0x40020150
 8003bcc:	50020150 	.word	0x50020150
 8003bd0:	400201d0 	.word	0x400201d0
 8003bd4:	500201d0 	.word	0x500201d0
 8003bd8:	40020250 	.word	0x40020250
 8003bdc:	50020250 	.word	0x50020250
 8003be0:	400202d0 	.word	0x400202d0
 8003be4:	500202d0 	.word	0x500202d0
 8003be8:	40020350 	.word	0x40020350
 8003bec:	50020350 	.word	0x50020350
 8003bf0:	400203d0 	.word	0x400203d0
 8003bf4:	500203d0 	.word	0x500203d0
 8003bf8:	40020450 	.word	0x40020450
 8003bfc:	50020450 	.word	0x50020450
 8003c00:	400204d0 	.word	0x400204d0
 8003c04:	500204d0 	.word	0x500204d0
 8003c08:	40020550 	.word	0x40020550
 8003c0c:	50020550 	.word	0x50020550
 8003c10:	400205d0 	.word	0x400205d0
 8003c14:	500205d0 	.word	0x500205d0
 8003c18:	40020650 	.word	0x40020650
 8003c1c:	50020650 	.word	0x50020650
 8003c20:	400206d0 	.word	0x400206d0
 8003c24:	500206d0 	.word	0x500206d0
 8003c28:	40020750 	.word	0x40020750
 8003c2c:	50020750 	.word	0x50020750
 8003c30:	400207d0 	.word	0x400207d0
 8003c34:	500207d0 	.word	0x500207d0

08003c38 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003c4a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8003c50:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003c56:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8003c5c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d017      	beq.n	8003c9e <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7a:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c80:	3b01      	subs	r3, #1
 8003c82:	051b      	lsls	r3, r3, #20
 8003c84:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003c88:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003c96:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6859      	ldr	r1, [r3, #4]
 8003ca6:	f240 237f 	movw	r3, #639	@ 0x27f
 8003caa:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003cac:	431a      	orrs	r2, r3
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cba:	d10c      	bne.n	8003cd6 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d011      	beq.n	8003cec <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	605a      	str	r2, [r3, #4]
 8003cd4:	e00a      	b.n	8003cec <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cde:	d105      	bne.n	8003cec <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00f      	beq.n	8003d14 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d00:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003d0c:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d04e      	beq.n	8003dc8 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d32:	3b01      	subs	r3, #1
 8003d34:	0419      	lsls	r1, r3, #16
 8003d36:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee0 <DMA_List_BuildNode+0x2a8>)
 8003d38:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	da06      	bge.n	8003d56 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	e005      	b.n	8003d62 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	da06      	bge.n	8003d78 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	609a      	str	r2, [r3, #8]
 8003d76:	e005      	b.n	8003d84 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	da06      	bge.n	8003d9a <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	e005      	b.n	8003da6 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	da06      	bge.n	8003dbc <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	e005      	b.n	8003dc8 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d05d      	beq.n	8003ea0 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	da09      	bge.n	8003e00 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df0:	425b      	negs	r3, r3
 8003df2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	615a      	str	r2, [r3, #20]
 8003dfe:	e005      	b.n	8003e0c <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e04:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	da0d      	bge.n	8003e30 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e18:	425b      	negs	r3, r3
 8003e1a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	0419      	lsls	r1, r3, #16
 8003e24:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee4 <DMA_List_BuildNode+0x2ac>)
 8003e26:	400b      	ands	r3, r1
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	615a      	str	r2, [r3, #20]
 8003e2e:	e009      	b.n	8003e44 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e38:	0419      	lsls	r1, r3, #16
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee4 <DMA_List_BuildNode+0x2ac>)
 8003e3c:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	da08      	bge.n	8003e5e <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	425b      	negs	r3, r3
 8003e52:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	619a      	str	r2, [r3, #24]
 8003e5c:	e004      	b.n	8003e68 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e62:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	da0b      	bge.n	8003e88 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e74:	425b      	negs	r3, r3
 8003e76:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003e80:	431a      	orrs	r2, r3
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	619a      	str	r2, [r3, #24]
 8003e86:	e007      	b.n	8003e98 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e90:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003e92:	431a      	orrs	r2, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	61da      	str	r2, [r3, #28]
 8003e9e:	e002      	b.n	8003ea6 <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8003ec6:	e005      	b.n	8003ed4 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	621a      	str	r2, [r3, #32]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	07ff0000 	.word	0x07ff0000
 8003ee4:	1fff0000 	.word	0x1fff0000

08003ee8 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0208 	and.w	r2, r3, #8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0203 	and.w	r2, r3, #3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f36:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8003f40:	0d1b      	lsrs	r3, r3, #20
 8003f42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f46:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4b66      	ldr	r3, [pc, #408]	@ (80040f8 <DMA_List_GetNodeConfig+0x210>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f82:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	e013      	b.n	8003fb6 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d004      	beq.n	8003fb0 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fac:	60da      	str	r2, [r3, #12]
 8003fae:	e002      	b.n	8003fb6 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8003fde:	0c1b      	lsrs	r3, r3, #16
 8003fe0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	0c1b      	lsrs	r3, r3, #16
 8004010:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004014:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	64da      	str	r2, [r3, #76]	@ 0x4c
 800401a:	e002      	b.n	8004022 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d04a      	beq.n	80040d4 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	b29b      	uxth	r3, r3
 8004044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004048:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 800404a:	89fa      	ldrh	r2, [r7, #14]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	b29b      	uxth	r3, r3
 8004058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800405c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 800405e:	89fa      	ldrh	r2, [r7, #14]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d004      	beq.n	800407a <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004074:	425a      	negs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408a:	425a      	negs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8004096:	89fa      	ldrh	r2, [r7, #14]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	0c1b      	lsrs	r3, r3, #16
 80040a2:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 80040a4:	89fa      	ldrh	r2, [r7, #14]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d004      	beq.n	80040c0 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	425a      	negs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	da11      	bge.n	80040ec <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040cc:	425a      	negs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 80040d2:	e00b      	b.n	80040ec <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	0c002000 	.word	0x0c002000

080040fc <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4313      	orrs	r3, r2
 8004112:	0c1b      	lsrs	r3, r3, #16
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	e00a      	b.n	800413e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	e004      	b.n	800413e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	0c1b      	lsrs	r3, r3, #16
 8004142:	041b      	lsls	r3, r3, #16
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	429a      	cmp	r2, r3
 8004148:	d001      	beq.n	800414e <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d004      	beq.n	800417c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	e00e      	b.n	800419a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d004      	beq.n	800418c <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	e006      	b.n	800419a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80041ac:	2302      	movs	r3, #2
 80041ae:	e00b      	b.n	80041c8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d001      	beq.n	80041c6 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e000      	b.n	80041c8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00c      	beq.n	8004206 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4a0d      	ldr	r2, [pc, #52]	@ (800422c <DMA_List_GetCLLRNodeInfo+0x58>)
 80041f6:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00f      	beq.n	800421e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2207      	movs	r2, #7
 8004202:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004204:	e00b      	b.n	800421e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4a08      	ldr	r2, [pc, #32]	@ (8004230 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004210:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2205      	movs	r2, #5
 800421c:	601a      	str	r2, [r3, #0]
}
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	fe010000 	.word	0xfe010000
 8004230:	f8010000 	.word	0xf8010000

08004234 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8004234:	b480      	push	{r7}
 8004236:	b089      	sub	sp, #36	@ 0x24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d142      	bne.n	80042de <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8004258:	e01d      	b.n	8004296 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d107      	bne.n	8004270 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	461a      	mov	r2, r3
 8004266:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800426a:	4013      	ands	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	e00f      	b.n	8004290 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4413      	add	r3, r2
 8004280:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004288:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	3301      	adds	r3, #1
 8004294:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	429a      	cmp	r2, r3
 800429e:	d3dc      	bcc.n	800425a <DMA_List_FindNode+0x26>
 80042a0:	e029      	b.n	80042f6 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d107      	bne.n	80042b8 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80042b2:	4013      	ands	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	e00f      	b.n	80042d8 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4413      	add	r3, r2
 80042c8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80042d0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	3301      	adds	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d206      	bcs.n	80042f6 <DMA_List_FindNode+0xc2>
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80042ee:	4013      	ands	r3, r2
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d1d5      	bne.n	80042a2 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004302:	4013      	ands	r3, r2
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	429a      	cmp	r2, r3
 8004308:	d001      	beq.n	800430e <DMA_List_FindNode+0xda>
    {
      return 1U;
 800430a:	2301      	movs	r3, #1
 800430c:	e02b      	b.n	8004366 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	041b      	lsls	r3, r3, #16
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	461a      	mov	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00f      	beq.n	8004364 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	461a      	mov	r2, r3
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004350:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8004354:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	0c1b      	lsrs	r3, r3, #16
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3724      	adds	r7, #36	@ 0x24
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8004372:	b480      	push	{r7}
 8004374:	b087      	sub	sp, #28
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	460b      	mov	r3, r1
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004384:	7afb      	ldrb	r3, [r7, #11]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d011      	beq.n	80043ae <HAL_EXTI_RegisterCallback+0x3c>
 800438a:	2b02      	cmp	r3, #2
 800438c:	dc13      	bgt.n	80043b6 <HAL_EXTI_RegisterCallback+0x44>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_EXTI_RegisterCallback+0x26>
 8004392:	2b01      	cmp	r3, #1
 8004394:	d007      	beq.n	80043a6 <HAL_EXTI_RegisterCallback+0x34>
 8004396:	e00e      	b.n	80043b6 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	609a      	str	r2, [r3, #8]
      break;
 80043a4:	e00a      	b.n	80043bc <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	605a      	str	r2, [r3, #4]
      break;
 80043ac:	e006      	b.n	80043bc <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	609a      	str	r2, [r3, #8]
      break;
 80043b4:	e002      	b.n	80043bc <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	75fb      	strb	r3, [r7, #23]
      break;
 80043ba:	bf00      	nop
  }

  return status;
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e003      	b.n	80043e6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80043e4:	2300      	movs	r3, #0
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	2201      	movs	r2, #1
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	4b17      	ldr	r3, [pc, #92]	@ (800447c <HAL_EXTI_IRQHandler+0x88>)
 800441e:	4413      	add	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4013      	ands	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <HAL_EXTI_IRQHandler+0x8c>)
 800444c:	4413      	add	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4013      	ands	r3, r2
 8004458:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d009      	beq.n	8004474 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	4798      	blx	r3
    }
  }
}
 8004474:	bf00      	nop
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	4602200c 	.word	0x4602200c
 8004480:	46022010 	.word	0x46022010

08004484 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	@ 0x24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004496:	e1ba      	b.n	800480e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	2101      	movs	r1, #1
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	4013      	ands	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 81aa 	beq.w	8004808 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a55      	ldr	r2, [pc, #340]	@ (800460c <HAL_GPIO_Init+0x188>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d15d      	bne.n	8004578 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80044c2:	2201      	movs	r2, #1
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43db      	mvns	r3, r3
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	4013      	ands	r3, r2
 80044d0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 0201 	and.w	r2, r3, #1
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80044ec:	4a48      	ldr	r2, [pc, #288]	@ (8004610 <HAL_GPIO_Init+0x18c>)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044f4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80044f6:	4a46      	ldr	r2, [pc, #280]	@ (8004610 <HAL_GPIO_Init+0x18c>)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4413      	add	r3, r2
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	08da      	lsrs	r2, r3, #3
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	3208      	adds	r2, #8
 800450a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	220f      	movs	r2, #15
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	4013      	ands	r3, r2
 8004524:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	220b      	movs	r2, #11
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	4313      	orrs	r3, r2
 8004538:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	08da      	lsrs	r2, r3, #3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	3208      	adds	r2, #8
 8004542:	69f9      	ldr	r1, [r7, #28]
 8004544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	2203      	movs	r2, #3
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	4013      	ands	r3, r2
 800455e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	2202      	movs	r2, #2
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	4313      	orrs	r3, r2
 800456e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e067      	b.n	8004648 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d003      	beq.n	8004588 <HAL_GPIO_Init+0x104>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b12      	cmp	r3, #18
 8004586:	d145      	bne.n	8004614 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	08da      	lsrs	r2, r3, #3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3208      	adds	r2, #8
 8004590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004594:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	220f      	movs	r2, #15
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	43db      	mvns	r3, r3
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	4013      	ands	r3, r2
 80045aa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f003 020f 	and.w	r2, r3, #15
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	08da      	lsrs	r2, r3, #3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3208      	adds	r2, #8
 80045ce:	69f9      	ldr	r1, [r7, #28]
 80045d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	2203      	movs	r2, #3
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 0203 	and.w	r2, r3, #3
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	4313      	orrs	r3, r2
 8004600:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e01e      	b.n	8004648 <HAL_GPIO_Init+0x1c4>
 800460a:	bf00      	nop
 800460c:	46020000 	.word	0x46020000
 8004610:	0800b184 	.word	0x0800b184
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	2203      	movs	r2, #3
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	4013      	ands	r3, r2
 800462a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 0203 	and.w	r2, r3, #3
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	4313      	orrs	r3, r2
 8004640:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d00b      	beq.n	8004668 <HAL_GPIO_Init+0x1e4>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d007      	beq.n	8004668 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800465c:	2b11      	cmp	r3, #17
 800465e:	d003      	beq.n	8004668 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b12      	cmp	r3, #18
 8004666:	d130      	bne.n	80046ca <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	2203      	movs	r2, #3
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	4013      	ands	r3, r2
 800467e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	4313      	orrs	r3, r2
 8004690:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800469e:	2201      	movs	r2, #1
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	f003 0201 	and.w	r2, r3, #1
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d017      	beq.n	8004702 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	2203      	movs	r2, #3
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	4013      	ands	r3, r2
 80046e8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d07c      	beq.n	8004808 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800470e:	4a47      	ldr	r2, [pc, #284]	@ (800482c <HAL_GPIO_Init+0x3a8>)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	089b      	lsrs	r3, r3, #2
 8004714:	3318      	adds	r3, #24
 8004716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	220f      	movs	r2, #15
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	4013      	ands	r3, r2
 8004730:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	0a9a      	lsrs	r2, r3, #10
 8004736:	4b3e      	ldr	r3, [pc, #248]	@ (8004830 <HAL_GPIO_Init+0x3ac>)
 8004738:	4013      	ands	r3, r2
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	f002 0203 	and.w	r2, r2, #3
 8004740:	00d2      	lsls	r2, r2, #3
 8004742:	4093      	lsls	r3, r2
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	4313      	orrs	r3, r2
 8004748:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800474a:	4938      	ldr	r1, [pc, #224]	@ (800482c <HAL_GPIO_Init+0x3a8>)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	3318      	adds	r3, #24
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004758:	4b34      	ldr	r3, [pc, #208]	@ (800482c <HAL_GPIO_Init+0x3a8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	43db      	mvns	r3, r3
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	4013      	ands	r3, r2
 8004766:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800477c:	4a2b      	ldr	r2, [pc, #172]	@ (800482c <HAL_GPIO_Init+0x3a8>)
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004782:	4b2a      	ldr	r3, [pc, #168]	@ (800482c <HAL_GPIO_Init+0x3a8>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	43db      	mvns	r3, r3
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	4013      	ands	r3, r2
 8004790:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80047a6:	4a21      	ldr	r2, [pc, #132]	@ (800482c <HAL_GPIO_Init+0x3a8>)
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80047ac:	4b1f      	ldr	r3, [pc, #124]	@ (800482c <HAL_GPIO_Init+0x3a8>)
 80047ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047b2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	4013      	ands	r3, r2
 80047bc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80047d2:	4a16      	ldr	r2, [pc, #88]	@ (800482c <HAL_GPIO_Init+0x3a8>)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80047da:	4b14      	ldr	r3, [pc, #80]	@ (800482c <HAL_GPIO_Init+0x3a8>)
 80047dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	43db      	mvns	r3, r3
 80047e6:	69fa      	ldr	r2, [r7, #28]
 80047e8:	4013      	ands	r3, r2
 80047ea:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004800:	4a0a      	ldr	r2, [pc, #40]	@ (800482c <HAL_GPIO_Init+0x3a8>)
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	3301      	adds	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	fa22 f303 	lsr.w	r3, r2, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	f47f ae3d 	bne.w	8004498 <HAL_GPIO_Init+0x14>
  }
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	3724      	adds	r7, #36	@ 0x24
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	46022000 	.word	0x46022000
 8004830:	002f7f7f 	.word	0x002f7f7f

08004834 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004834:	b480      	push	{r7}
 8004836:	b089      	sub	sp, #36	@ 0x24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004846:	e0bc      	b.n	80049c2 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004848:	2201      	movs	r2, #1
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	4013      	ands	r3, r2
 8004854:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 80ad 	beq.w	80049bc <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a5e      	ldr	r2, [pc, #376]	@ (80049e0 <HAL_GPIO_DeInit+0x1ac>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d115      	bne.n	8004896 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800486a:	4a5e      	ldr	r2, [pc, #376]	@ (80049e4 <HAL_GPIO_DeInit+0x1b0>)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004872:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004874:	4a5b      	ldr	r2, [pc, #364]	@ (80049e4 <HAL_GPIO_DeInit+0x1b0>)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4413      	add	r3, r2
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8004880:	4b57      	ldr	r3, [pc, #348]	@ (80049e0 <HAL_GPIO_DeInit+0x1ac>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	2101      	movs	r1, #1
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	fa01 f303 	lsl.w	r3, r1, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	4954      	ldr	r1, [pc, #336]	@ (80049e0 <HAL_GPIO_DeInit+0x1ac>)
 8004890:	4013      	ands	r3, r2
 8004892:	600b      	str	r3, [r1, #0]
 8004894:	e053      	b.n	800493e <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8004896:	4a54      	ldr	r2, [pc, #336]	@ (80049e8 <HAL_GPIO_DeInit+0x1b4>)
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	089b      	lsrs	r3, r3, #2
 800489c:	3318      	adds	r3, #24
 800489e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a2:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	220f      	movs	r2, #15
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4013      	ands	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	0a9a      	lsrs	r2, r3, #10
 80048bc:	4b4b      	ldr	r3, [pc, #300]	@ (80049ec <HAL_GPIO_DeInit+0x1b8>)
 80048be:	4013      	ands	r3, r2
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	f002 0203 	and.w	r2, r2, #3
 80048c6:	00d2      	lsls	r2, r2, #3
 80048c8:	4093      	lsls	r3, r2
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d136      	bne.n	800493e <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 80048d0:	4b45      	ldr	r3, [pc, #276]	@ (80049e8 <HAL_GPIO_DeInit+0x1b4>)
 80048d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	43db      	mvns	r3, r3
 80048da:	4943      	ldr	r1, [pc, #268]	@ (80049e8 <HAL_GPIO_DeInit+0x1b4>)
 80048dc:	4013      	ands	r3, r2
 80048de:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 80048e2:	4b41      	ldr	r3, [pc, #260]	@ (80049e8 <HAL_GPIO_DeInit+0x1b4>)
 80048e4:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	43db      	mvns	r3, r3
 80048ec:	493e      	ldr	r1, [pc, #248]	@ (80049e8 <HAL_GPIO_DeInit+0x1b4>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 80048f4:	4b3c      	ldr	r3, [pc, #240]	@ (80049e8 <HAL_GPIO_DeInit+0x1b4>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	493a      	ldr	r1, [pc, #232]	@ (80049e8 <HAL_GPIO_DeInit+0x1b4>)
 80048fe:	4013      	ands	r3, r2
 8004900:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8004902:	4b39      	ldr	r3, [pc, #228]	@ (80049e8 <HAL_GPIO_DeInit+0x1b4>)
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	43db      	mvns	r3, r3
 800490a:	4937      	ldr	r1, [pc, #220]	@ (80049e8 <HAL_GPIO_DeInit+0x1b4>)
 800490c:	4013      	ands	r3, r2
 800490e:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	220f      	movs	r2, #15
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8004920:	4a31      	ldr	r2, [pc, #196]	@ (80049e8 <HAL_GPIO_DeInit+0x1b4>)
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	3318      	adds	r3, #24
 8004928:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	43da      	mvns	r2, r3
 8004930:	482d      	ldr	r0, [pc, #180]	@ (80049e8 <HAL_GPIO_DeInit+0x1b4>)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	089b      	lsrs	r3, r3, #2
 8004936:	400a      	ands	r2, r1
 8004938:	3318      	adds	r3, #24
 800493a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	2103      	movs	r1, #3
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	431a      	orrs	r2, r3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	08da      	lsrs	r2, r3, #3
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	3208      	adds	r2, #8
 800495a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	220f      	movs	r2, #15
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	43db      	mvns	r3, r3
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	08d2      	lsrs	r2, r2, #3
 8004972:	4019      	ands	r1, r3
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	3208      	adds	r2, #8
 8004978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	2103      	movs	r1, #3
 8004986:	fa01 f303 	lsl.w	r3, r1, r3
 800498a:	43db      	mvns	r3, r3
 800498c:	401a      	ands	r2, r3
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	2101      	movs	r1, #1
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	fa01 f303 	lsl.w	r3, r1, r3
 800499e:	43db      	mvns	r3, r3
 80049a0:	401a      	ands	r2, r3
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	2103      	movs	r1, #3
 80049b0:	fa01 f303 	lsl.w	r3, r1, r3
 80049b4:	43db      	mvns	r3, r3
 80049b6:	401a      	ands	r2, r3
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	60da      	str	r2, [r3, #12]
    }

    position++;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	3301      	adds	r3, #1
 80049c0:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f47f af3c 	bne.w	8004848 <HAL_GPIO_DeInit+0x14>
  }
}
 80049d0:	bf00      	nop
 80049d2:	bf00      	nop
 80049d4:	3724      	adds	r7, #36	@ 0x24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	46020000 	.word	0x46020000
 80049e4:	0800b184 	.word	0x0800b184
 80049e8:	46022000 	.word	0x46022000
 80049ec:	002f7f7f 	.word	0x002f7f7f

080049f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	807b      	strh	r3, [r7, #2]
 80049fc:	4613      	mov	r3, r2
 80049fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a00:	787b      	ldrb	r3, [r7, #1]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a06:	887a      	ldrh	r2, [r7, #2]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004a0c:	e002      	b.n	8004a14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004a0e:	887a      	ldrh	r2, [r7, #2]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a32:	887a      	ldrh	r2, [r7, #2]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4013      	ands	r3, r2
 8004a38:	041a      	lsls	r2, r3, #16
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	43d9      	mvns	r1, r3
 8004a3e:	887b      	ldrh	r3, [r7, #2]
 8004a40:	400b      	ands	r3, r1
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	619a      	str	r2, [r3, #24]
}
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004a58:	4b05      	ldr	r3, [pc, #20]	@ (8004a70 <HAL_ICACHE_Enable+0x1c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a04      	ldr	r2, [pc, #16]	@ (8004a70 <HAL_ICACHE_Enable+0x1c>)
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	40030400 	.word	0x40030400

08004a74 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004a7c:	4b39      	ldr	r3, [pc, #228]	@ (8004b64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a84:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d10b      	bne.n	8004aa6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a94:	d905      	bls.n	8004aa2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004a96:	4b33      	ldr	r3, [pc, #204]	@ (8004b64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	4a32      	ldr	r2, [pc, #200]	@ (8004b64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aa0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e057      	b.n	8004b56 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aac:	d90a      	bls.n	8004ac4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004aae:	4b2d      	ldr	r3, [pc, #180]	@ (8004b64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	4a2a      	ldr	r2, [pc, #168]	@ (8004b64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ac0:	60d3      	str	r3, [r2, #12]
 8004ac2:	e007      	b.n	8004ad4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004ac4:	4b27      	ldr	r3, [pc, #156]	@ (8004b64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004acc:	4925      	ldr	r1, [pc, #148]	@ (8004b64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004ad4:	4b24      	ldr	r3, [pc, #144]	@ (8004b68 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a24      	ldr	r2, [pc, #144]	@ (8004b6c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	099b      	lsrs	r3, r3, #6
 8004ae0:	2232      	movs	r2, #50	@ 0x32
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	4a21      	ldr	r2, [pc, #132]	@ (8004b6c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aec:	099b      	lsrs	r3, r3, #6
 8004aee:	3301      	adds	r3, #1
 8004af0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004af2:	e002      	b.n	8004afa <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004afa:	4b1a      	ldr	r3, [pc, #104]	@ (8004b64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <HAL_PWREx_ControlVoltageScaling+0x98>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f3      	bne.n	8004af4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d01b      	beq.n	8004b4a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004b12:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a15      	ldr	r2, [pc, #84]	@ (8004b6c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004b18:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1c:	099b      	lsrs	r3, r3, #6
 8004b1e:	2232      	movs	r2, #50	@ 0x32
 8004b20:	fb02 f303 	mul.w	r3, r2, r3
 8004b24:	4a11      	ldr	r2, [pc, #68]	@ (8004b6c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	099b      	lsrs	r3, r3, #6
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004b30:	e002      	b.n	8004b38 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004b38:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f3      	bne.n	8004b32 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e000      	b.n	8004b56 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	46020800 	.word	0x46020800
 8004b68:	20000088 	.word	0x20000088
 8004b6c:	10624dd3 	.word	0x10624dd3

08004b70 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004b74:	4b04      	ldr	r3, [pc, #16]	@ (8004b88 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	46020800 	.word	0x46020800

08004b8c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004b94:	4b22      	ldr	r3, [pc, #136]	@ (8004c20 <HAL_PWREx_ConfigSupply+0x94>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a22      	ldr	r2, [pc, #136]	@ (8004c24 <HAL_PWREx_ConfigSupply+0x98>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	099b      	lsrs	r3, r3, #6
 8004ba0:	2232      	movs	r2, #50	@ 0x32
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c24 <HAL_PWREx_ConfigSupply+0x98>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	099b      	lsrs	r3, r3, #6
 8004bae:	3301      	adds	r3, #1
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d113      	bne.n	8004be0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c28 <HAL_PWREx_ConfigSupply+0x9c>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	4a1a      	ldr	r2, [pc, #104]	@ (8004c28 <HAL_PWREx_ConfigSupply+0x9c>)
 8004bbe:	f023 0302 	bic.w	r3, r3, #2
 8004bc2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004bc4:	e002      	b.n	8004bcc <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004bcc:	4b16      	ldr	r3, [pc, #88]	@ (8004c28 <HAL_PWREx_ConfigSupply+0x9c>)
 8004bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d116      	bne.n	8004c06 <HAL_PWREx_ConfigSupply+0x7a>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f3      	bne.n	8004bc6 <HAL_PWREx_ConfigSupply+0x3a>
 8004bde:	e012      	b.n	8004c06 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004be0:	4b11      	ldr	r3, [pc, #68]	@ (8004c28 <HAL_PWREx_ConfigSupply+0x9c>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	4a10      	ldr	r2, [pc, #64]	@ (8004c28 <HAL_PWREx_ConfigSupply+0x9c>)
 8004be6:	f043 0302 	orr.w	r3, r3, #2
 8004bea:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004bec:	e002      	b.n	8004bf4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <HAL_PWREx_ConfigSupply+0x9c>)
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d102      	bne.n	8004c06 <HAL_PWREx_ConfigSupply+0x7a>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f3      	bne.n	8004bee <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e000      	b.n	8004c12 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000088 	.word	0x20000088
 8004c24:	10624dd3 	.word	0x10624dd3
 8004c28:	46020800 	.word	0x46020800

08004c2c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004c30:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	4a04      	ldr	r2, [pc, #16]	@ (8004c48 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004c36:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c3a:	6113      	str	r3, [r2, #16]
}
 8004c3c:	bf00      	nop
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	46020800 	.word	0x46020800

08004c4c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004c50:	4b05      	ldr	r3, [pc, #20]	@ (8004c68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	4a04      	ldr	r2, [pc, #16]	@ (8004c68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8004c5c:	bf00      	nop
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	46020800 	.word	0x46020800

08004c6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08e      	sub	sp, #56	@ 0x38
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004c74:	2300      	movs	r3, #0
 8004c76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d102      	bne.n	8004c86 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f000 bec8 	b.w	8005a16 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c86:	4b99      	ldr	r3, [pc, #612]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c90:	4b96      	ldr	r3, [pc, #600]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 816c 	beq.w	8004f80 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d007      	beq.n	8004cbe <HAL_RCC_OscConfig+0x52>
 8004cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb0:	2b0c      	cmp	r3, #12
 8004cb2:	f040 80de 	bne.w	8004e72 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	f040 80da 	bne.w	8004e72 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d102      	bne.n	8004ccc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f000 bea5 	b.w	8005a16 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cd0:	4b86      	ldr	r3, [pc, #536]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d004      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x7a>
 8004cdc:	4b83      	ldr	r3, [pc, #524]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004ce4:	e005      	b.n	8004cf2 <HAL_RCC_OscConfig+0x86>
 8004ce6:	4b81      	ldr	r3, [pc, #516]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cec:	041b      	lsls	r3, r3, #16
 8004cee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d255      	bcs.n	8004da2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10a      	bne.n	8004d12 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d00:	4618      	mov	r0, r3
 8004d02:	f001 fa11 	bl	8006128 <RCC_SetFlashLatencyFromMSIRange>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f000 be82 	b.w	8005a16 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004d12:	4b76      	ldr	r3, [pc, #472]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	4a75      	ldr	r2, [pc, #468]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004d18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d1c:	6093      	str	r3, [r2, #8]
 8004d1e:	4b73      	ldr	r3, [pc, #460]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2a:	4970      	ldr	r1, [pc, #448]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004d38:	d309      	bcc.n	8004d4e <HAL_RCC_OscConfig+0xe2>
 8004d3a:	4b6c      	ldr	r3, [pc, #432]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f023 021f 	bic.w	r2, r3, #31
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	4969      	ldr	r1, [pc, #420]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60cb      	str	r3, [r1, #12]
 8004d4c:	e07e      	b.n	8004e4c <HAL_RCC_OscConfig+0x1e0>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	da0a      	bge.n	8004d6c <HAL_RCC_OscConfig+0x100>
 8004d56:	4b65      	ldr	r3, [pc, #404]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	015b      	lsls	r3, r3, #5
 8004d64:	4961      	ldr	r1, [pc, #388]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60cb      	str	r3, [r1, #12]
 8004d6a:	e06f      	b.n	8004e4c <HAL_RCC_OscConfig+0x1e0>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d74:	d30a      	bcc.n	8004d8c <HAL_RCC_OscConfig+0x120>
 8004d76:	4b5d      	ldr	r3, [pc, #372]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	029b      	lsls	r3, r3, #10
 8004d84:	4959      	ldr	r1, [pc, #356]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60cb      	str	r3, [r1, #12]
 8004d8a:	e05f      	b.n	8004e4c <HAL_RCC_OscConfig+0x1e0>
 8004d8c:	4b57      	ldr	r3, [pc, #348]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	03db      	lsls	r3, r3, #15
 8004d9a:	4954      	ldr	r1, [pc, #336]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60cb      	str	r3, [r1, #12]
 8004da0:	e054      	b.n	8004e4c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004da2:	4b52      	ldr	r3, [pc, #328]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	4a51      	ldr	r2, [pc, #324]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004da8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004dac:	6093      	str	r3, [r2, #8]
 8004dae:	4b4f      	ldr	r3, [pc, #316]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dba:	494c      	ldr	r1, [pc, #304]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004dc8:	d309      	bcc.n	8004dde <HAL_RCC_OscConfig+0x172>
 8004dca:	4b48      	ldr	r3, [pc, #288]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f023 021f 	bic.w	r2, r3, #31
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	4945      	ldr	r1, [pc, #276]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60cb      	str	r3, [r1, #12]
 8004ddc:	e028      	b.n	8004e30 <HAL_RCC_OscConfig+0x1c4>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	da0a      	bge.n	8004dfc <HAL_RCC_OscConfig+0x190>
 8004de6:	4b41      	ldr	r3, [pc, #260]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	015b      	lsls	r3, r3, #5
 8004df4:	493d      	ldr	r1, [pc, #244]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60cb      	str	r3, [r1, #12]
 8004dfa:	e019      	b.n	8004e30 <HAL_RCC_OscConfig+0x1c4>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e04:	d30a      	bcc.n	8004e1c <HAL_RCC_OscConfig+0x1b0>
 8004e06:	4b39      	ldr	r3, [pc, #228]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	029b      	lsls	r3, r3, #10
 8004e14:	4935      	ldr	r1, [pc, #212]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60cb      	str	r3, [r1, #12]
 8004e1a:	e009      	b.n	8004e30 <HAL_RCC_OscConfig+0x1c4>
 8004e1c:	4b33      	ldr	r3, [pc, #204]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	03db      	lsls	r3, r3, #15
 8004e2a:	4930      	ldr	r1, [pc, #192]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10a      	bne.n	8004e4c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f001 f974 	bl	8006128 <RCC_SetFlashLatencyFromMSIRange>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f000 bde5 	b.w	8005a16 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004e4c:	f001 f8de 	bl	800600c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e50:	4b27      	ldr	r3, [pc, #156]	@ (8004ef0 <HAL_RCC_OscConfig+0x284>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fc fa7d 	bl	8001354 <HAL_InitTick>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004e60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 808a 	beq.w	8004f7e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e6e:	f000 bdd2 	b.w	8005a16 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d066      	beq.n	8004f48 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004e86:	f7fc fed1 	bl	8001c2c <HAL_GetTick>
 8004e8a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004e8c:	e009      	b.n	8004ea2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e8e:	f7fc fecd 	bl	8001c2c <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d902      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	f000 bdba 	b.w	8005a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004ea2:	4b12      	ldr	r3, [pc, #72]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0ef      	beq.n	8004e8e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004eae:	4b0f      	ldr	r3, [pc, #60]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004eb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004eb8:	6093      	str	r3, [r2, #8]
 8004eba:	4b0c      	ldr	r3, [pc, #48]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	4909      	ldr	r1, [pc, #36]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004ed4:	d30e      	bcc.n	8004ef4 <HAL_RCC_OscConfig+0x288>
 8004ed6:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f023 021f 	bic.w	r2, r3, #31
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	4902      	ldr	r1, [pc, #8]	@ (8004eec <HAL_RCC_OscConfig+0x280>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60cb      	str	r3, [r1, #12]
 8004ee8:	e04a      	b.n	8004f80 <HAL_RCC_OscConfig+0x314>
 8004eea:	bf00      	nop
 8004eec:	46020c00 	.word	0x46020c00
 8004ef0:	200000a8 	.word	0x200000a8
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	da0a      	bge.n	8004f12 <HAL_RCC_OscConfig+0x2a6>
 8004efc:	4b98      	ldr	r3, [pc, #608]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	015b      	lsls	r3, r3, #5
 8004f0a:	4995      	ldr	r1, [pc, #596]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60cb      	str	r3, [r1, #12]
 8004f10:	e036      	b.n	8004f80 <HAL_RCC_OscConfig+0x314>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1a:	d30a      	bcc.n	8004f32 <HAL_RCC_OscConfig+0x2c6>
 8004f1c:	4b90      	ldr	r3, [pc, #576]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	029b      	lsls	r3, r3, #10
 8004f2a:	498d      	ldr	r1, [pc, #564]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60cb      	str	r3, [r1, #12]
 8004f30:	e026      	b.n	8004f80 <HAL_RCC_OscConfig+0x314>
 8004f32:	4b8b      	ldr	r3, [pc, #556]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	03db      	lsls	r3, r3, #15
 8004f40:	4987      	ldr	r1, [pc, #540]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60cb      	str	r3, [r1, #12]
 8004f46:	e01b      	b.n	8004f80 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004f48:	4b85      	ldr	r3, [pc, #532]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a84      	ldr	r2, [pc, #528]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004f4e:	f023 0301 	bic.w	r3, r3, #1
 8004f52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004f54:	f7fc fe6a 	bl	8001c2c <HAL_GetTick>
 8004f58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004f5a:	e009      	b.n	8004f70 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f5c:	f7fc fe66 	bl	8001c2c <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d902      	bls.n	8004f70 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	f000 bd53 	b.w	8005a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004f70:	4b7b      	ldr	r3, [pc, #492]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1ef      	bne.n	8004f5c <HAL_RCC_OscConfig+0x2f0>
 8004f7c:	e000      	b.n	8004f80 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 808b 	beq.w	80050a4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d005      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x334>
 8004f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f96:	2b0c      	cmp	r3, #12
 8004f98:	d109      	bne.n	8004fae <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d106      	bne.n	8004fae <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d17d      	bne.n	80050a4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f000 bd34 	b.w	8005a16 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb6:	d106      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x35a>
 8004fb8:	4b69      	ldr	r3, [pc, #420]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a68      	ldr	r2, [pc, #416]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004fbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	e041      	b.n	800504a <HAL_RCC_OscConfig+0x3de>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fce:	d112      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x38a>
 8004fd0:	4b63      	ldr	r3, [pc, #396]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a62      	ldr	r2, [pc, #392]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004fd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	4b60      	ldr	r3, [pc, #384]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a5f      	ldr	r2, [pc, #380]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004fe2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	4b5d      	ldr	r3, [pc, #372]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a5c      	ldr	r2, [pc, #368]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8004fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	e029      	b.n	800504a <HAL_RCC_OscConfig+0x3de>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004ffe:	d112      	bne.n	8005026 <HAL_RCC_OscConfig+0x3ba>
 8005000:	4b57      	ldr	r3, [pc, #348]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a56      	ldr	r2, [pc, #344]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8005006:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	4b54      	ldr	r3, [pc, #336]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a53      	ldr	r2, [pc, #332]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8005012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	4b51      	ldr	r3, [pc, #324]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a50      	ldr	r2, [pc, #320]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 800501e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	e011      	b.n	800504a <HAL_RCC_OscConfig+0x3de>
 8005026:	4b4e      	ldr	r3, [pc, #312]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a4d      	ldr	r2, [pc, #308]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 800502c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	4b4b      	ldr	r3, [pc, #300]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a4a      	ldr	r2, [pc, #296]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8005038:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4b48      	ldr	r3, [pc, #288]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a47      	ldr	r2, [pc, #284]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8005044:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005048:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d014      	beq.n	800507c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005052:	f7fc fdeb 	bl	8001c2c <HAL_GetTick>
 8005056:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005058:	e009      	b.n	800506e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800505a:	f7fc fde7 	bl	8001c2c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b64      	cmp	r3, #100	@ 0x64
 8005066:	d902      	bls.n	800506e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	f000 bcd4 	b.w	8005a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800506e:	4b3c      	ldr	r3, [pc, #240]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0ef      	beq.n	800505a <HAL_RCC_OscConfig+0x3ee>
 800507a:	e013      	b.n	80050a4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800507c:	f7fc fdd6 	bl	8001c2c <HAL_GetTick>
 8005080:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005082:	e009      	b.n	8005098 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005084:	f7fc fdd2 	bl	8001c2c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b64      	cmp	r3, #100	@ 0x64
 8005090:	d902      	bls.n	8005098 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	f000 bcbf 	b.w	8005a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005098:	4b31      	ldr	r3, [pc, #196]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1ef      	bne.n	8005084 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d05f      	beq.n	8005170 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80050b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d005      	beq.n	80050c2 <HAL_RCC_OscConfig+0x456>
 80050b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b8:	2b0c      	cmp	r3, #12
 80050ba:	d114      	bne.n	80050e6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d111      	bne.n	80050e6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d102      	bne.n	80050d0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f000 bca3 	b.w	8005a16 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80050d0:	4b23      	ldr	r3, [pc, #140]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	4920      	ldr	r1, [pc, #128]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80050e4:	e044      	b.n	8005170 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d024      	beq.n	8005138 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80050ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 80050f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80050fa:	f7fc fd97 	bl	8001c2c <HAL_GetTick>
 80050fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005100:	e009      	b.n	8005116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005102:	f7fc fd93 	bl	8001c2c <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d902      	bls.n	8005116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	f000 bc80 	b.w	8005a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005116:	4b12      	ldr	r3, [pc, #72]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0ef      	beq.n	8005102 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005122:	4b0f      	ldr	r3, [pc, #60]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	041b      	lsls	r3, r3, #16
 8005130:	490b      	ldr	r1, [pc, #44]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 8005132:	4313      	orrs	r3, r2
 8005134:	610b      	str	r3, [r1, #16]
 8005136:	e01b      	b.n	8005170 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005138:	4b09      	ldr	r3, [pc, #36]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a08      	ldr	r2, [pc, #32]	@ (8005160 <HAL_RCC_OscConfig+0x4f4>)
 800513e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005142:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005144:	f7fc fd72 	bl	8001c2c <HAL_GetTick>
 8005148:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800514a:	e00b      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514c:	f7fc fd6e 	bl	8001c2c <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d904      	bls.n	8005164 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	f000 bc5b 	b.w	8005a16 <HAL_RCC_OscConfig+0xdaa>
 8005160:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005164:	4baf      	ldr	r3, [pc, #700]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1ed      	bne.n	800514c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0308 	and.w	r3, r3, #8
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 80c8 	beq.w	800530e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800517e:	2300      	movs	r3, #0
 8005180:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005184:	4ba7      	ldr	r3, [pc, #668]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 8005186:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d111      	bne.n	80051b6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005192:	4ba4      	ldr	r3, [pc, #656]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 8005194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005198:	4aa2      	ldr	r2, [pc, #648]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 800519a:	f043 0304 	orr.w	r3, r3, #4
 800519e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80051a2:	4ba0      	ldr	r3, [pc, #640]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80051a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051b6:	4b9c      	ldr	r3, [pc, #624]	@ (8005428 <HAL_RCC_OscConfig+0x7bc>)
 80051b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d119      	bne.n	80051f6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80051c2:	4b99      	ldr	r3, [pc, #612]	@ (8005428 <HAL_RCC_OscConfig+0x7bc>)
 80051c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c6:	4a98      	ldr	r2, [pc, #608]	@ (8005428 <HAL_RCC_OscConfig+0x7bc>)
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ce:	f7fc fd2d 	bl	8001c2c <HAL_GetTick>
 80051d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051d4:	e009      	b.n	80051ea <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d6:	f7fc fd29 	bl	8001c2c <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d902      	bls.n	80051ea <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	f000 bc16 	b.w	8005a16 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051ea:	4b8f      	ldr	r3, [pc, #572]	@ (8005428 <HAL_RCC_OscConfig+0x7bc>)
 80051ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0ef      	beq.n	80051d6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d05f      	beq.n	80052be <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80051fe:	4b89      	ldr	r3, [pc, #548]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 8005200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005204:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005210:	429a      	cmp	r2, r3
 8005212:	d037      	beq.n	8005284 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d006      	beq.n	800522c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e3f4      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01b      	beq.n	800526e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005236:	4b7b      	ldr	r3, [pc, #492]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 8005238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800523c:	4a79      	ldr	r2, [pc, #484]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 800523e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005242:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8005246:	f7fc fcf1 	bl	8001c2c <HAL_GetTick>
 800524a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800524e:	f7fc fced 	bl	8001c2c <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b05      	cmp	r3, #5
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e3da      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005260:	4b70      	ldr	r3, [pc, #448]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 8005262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005266:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1ef      	bne.n	800524e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800526e:	4b6d      	ldr	r3, [pc, #436]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 8005270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005274:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	4969      	ldr	r1, [pc, #420]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005284:	4b67      	ldr	r3, [pc, #412]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 8005286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800528a:	4a66      	ldr	r2, [pc, #408]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 800528c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005290:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005294:	f7fc fcca 	bl	8001c2c <HAL_GetTick>
 8005298:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800529c:	f7fc fcc6 	bl	8001c2c <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b05      	cmp	r3, #5
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e3b3      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80052ae:	4b5d      	ldr	r3, [pc, #372]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80052b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0ef      	beq.n	800529c <HAL_RCC_OscConfig+0x630>
 80052bc:	e01b      	b.n	80052f6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80052be:	4b59      	ldr	r3, [pc, #356]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80052c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052c4:	4a57      	ldr	r2, [pc, #348]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80052c6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80052ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80052ce:	f7fc fcad 	bl	8001c2c <HAL_GetTick>
 80052d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d6:	f7fc fca9 	bl	8001c2c <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b05      	cmp	r3, #5
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e396      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80052e8:	4b4e      	ldr	r3, [pc, #312]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80052ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1ef      	bne.n	80052d6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052f6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d107      	bne.n	800530e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052fe:	4b49      	ldr	r3, [pc, #292]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 8005300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005304:	4a47      	ldr	r2, [pc, #284]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 8005306:	f023 0304 	bic.w	r3, r3, #4
 800530a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0304 	and.w	r3, r3, #4
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 8111 	beq.w	800553e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800531c:	2300      	movs	r3, #0
 800531e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005322:	4b40      	ldr	r3, [pc, #256]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 8005324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d111      	bne.n	8005354 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005330:	4b3c      	ldr	r3, [pc, #240]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 8005332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005336:	4a3b      	ldr	r2, [pc, #236]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 8005338:	f043 0304 	orr.w	r3, r3, #4
 800533c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005340:	4b38      	ldr	r3, [pc, #224]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 8005342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800534e:	2301      	movs	r3, #1
 8005350:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005354:	4b34      	ldr	r3, [pc, #208]	@ (8005428 <HAL_RCC_OscConfig+0x7bc>)
 8005356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d118      	bne.n	8005392 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005360:	4b31      	ldr	r3, [pc, #196]	@ (8005428 <HAL_RCC_OscConfig+0x7bc>)
 8005362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005364:	4a30      	ldr	r2, [pc, #192]	@ (8005428 <HAL_RCC_OscConfig+0x7bc>)
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800536c:	f7fc fc5e 	bl	8001c2c <HAL_GetTick>
 8005370:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005374:	f7fc fc5a 	bl	8001c2c <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e347      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005386:	4b28      	ldr	r3, [pc, #160]	@ (8005428 <HAL_RCC_OscConfig+0x7bc>)
 8005388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f0      	beq.n	8005374 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01f      	beq.n	80053de <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d010      	beq.n	80053cc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80053aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80053ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80053b2:	f043 0304 	orr.w	r3, r3, #4
 80053b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80053ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80053bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053c0:	4a18      	ldr	r2, [pc, #96]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80053ca:	e018      	b.n	80053fe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80053cc:	4b15      	ldr	r3, [pc, #84]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80053ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053d2:	4a14      	ldr	r2, [pc, #80]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80053dc:	e00f      	b.n	80053fe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80053de:	4b11      	ldr	r3, [pc, #68]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80053e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80053e6:	f023 0301 	bic.w	r3, r3, #1
 80053ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80053ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80053f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053f4:	4a0b      	ldr	r2, [pc, #44]	@ (8005424 <HAL_RCC_OscConfig+0x7b8>)
 80053f6:	f023 0304 	bic.w	r3, r3, #4
 80053fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d057      	beq.n	80054b6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005406:	f7fc fc11 	bl	8001c2c <HAL_GetTick>
 800540a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800540c:	e00e      	b.n	800542c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540e:	f7fc fc0d 	bl	8001c2c <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541c:	4293      	cmp	r3, r2
 800541e:	d905      	bls.n	800542c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e2f8      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
 8005424:	46020c00 	.word	0x46020c00
 8005428:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800542c:	4b9c      	ldr	r3, [pc, #624]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 800542e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0e9      	beq.n	800540e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01b      	beq.n	800547e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005446:	4b96      	ldr	r3, [pc, #600]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800544c:	4a94      	ldr	r2, [pc, #592]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 800544e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005452:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005456:	e00a      	b.n	800546e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005458:	f7fc fbe8 	bl	8001c2c <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005466:	4293      	cmp	r3, r2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e2d3      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800546e:	4b8c      	ldr	r3, [pc, #560]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005474:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0ed      	beq.n	8005458 <HAL_RCC_OscConfig+0x7ec>
 800547c:	e053      	b.n	8005526 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800547e:	4b88      	ldr	r3, [pc, #544]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005484:	4a86      	ldr	r2, [pc, #536]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800548a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800548e:	e00a      	b.n	80054a6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005490:	f7fc fbcc 	bl	8001c2c <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800549e:	4293      	cmp	r3, r2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e2b7      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054a6:	4b7e      	ldr	r3, [pc, #504]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 80054a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1ed      	bne.n	8005490 <HAL_RCC_OscConfig+0x824>
 80054b4:	e037      	b.n	8005526 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80054b6:	f7fc fbb9 	bl	8001c2c <HAL_GetTick>
 80054ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054bc:	e00a      	b.n	80054d4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054be:	f7fc fbb5 	bl	8001c2c <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e2a0      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054d4:	4b72      	ldr	r3, [pc, #456]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 80054d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1ed      	bne.n	80054be <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80054e2:	4b6f      	ldr	r3, [pc, #444]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 80054e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01a      	beq.n	8005526 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80054f0:	4b6b      	ldr	r3, [pc, #428]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 80054f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054f6:	4a6a      	ldr	r2, [pc, #424]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 80054f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005500:	e00a      	b.n	8005518 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005502:	f7fc fb93 	bl	8001c2c <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005510:	4293      	cmp	r3, r2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e27e      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005518:	4b61      	ldr	r3, [pc, #388]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 800551a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800551e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1ed      	bne.n	8005502 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005526:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800552a:	2b01      	cmp	r3, #1
 800552c:	d107      	bne.n	800553e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800552e:	4b5c      	ldr	r3, [pc, #368]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005534:	4a5a      	ldr	r2, [pc, #360]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005536:	f023 0304 	bic.w	r3, r3, #4
 800553a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d036      	beq.n	80055b8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d019      	beq.n	8005586 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005552:	4b53      	ldr	r3, [pc, #332]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a52      	ldr	r2, [pc, #328]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005558:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800555c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800555e:	f7fc fb65 	bl	8001c2c <HAL_GetTick>
 8005562:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005566:	f7fc fb61 	bl	8001c2c <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e24e      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005578:	4b49      	ldr	r3, [pc, #292]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <HAL_RCC_OscConfig+0x8fa>
 8005584:	e018      	b.n	80055b8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005586:	4b46      	ldr	r3, [pc, #280]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a45      	ldr	r2, [pc, #276]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 800558c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005590:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005592:	f7fc fb4b 	bl	8001c2c <HAL_GetTick>
 8005596:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800559a:	f7fc fb47 	bl	8001c2c <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e234      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80055ac:	4b3c      	ldr	r3, [pc, #240]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f0      	bne.n	800559a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d036      	beq.n	8005632 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d019      	beq.n	8005600 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80055cc:	4b34      	ldr	r3, [pc, #208]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a33      	ldr	r2, [pc, #204]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 80055d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80055d8:	f7fc fb28 	bl	8001c2c <HAL_GetTick>
 80055dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80055e0:	f7fc fb24 	bl	8001c2c <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e211      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80055f2:	4b2b      	ldr	r3, [pc, #172]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0x974>
 80055fe:	e018      	b.n	8005632 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005600:	4b27      	ldr	r3, [pc, #156]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a26      	ldr	r2, [pc, #152]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005606:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800560a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800560c:	f7fc fb0e 	bl	8001c2c <HAL_GetTick>
 8005610:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005614:	f7fc fb0a 	bl	8001c2c <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e1f7      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005626:	4b1e      	ldr	r3, [pc, #120]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f0      	bne.n	8005614 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d07f      	beq.n	800573e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005642:	2b00      	cmp	r3, #0
 8005644:	d062      	beq.n	800570c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005646:	4b16      	ldr	r3, [pc, #88]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	4a15      	ldr	r2, [pc, #84]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 800564c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005650:	6093      	str	r3, [r2, #8]
 8005652:	4b13      	ldr	r3, [pc, #76]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565e:	4910      	ldr	r1, [pc, #64]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005660:	4313      	orrs	r3, r2
 8005662:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005668:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800566c:	d309      	bcc.n	8005682 <HAL_RCC_OscConfig+0xa16>
 800566e:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f023 021f 	bic.w	r2, r3, #31
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	4909      	ldr	r1, [pc, #36]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 800567c:	4313      	orrs	r3, r2
 800567e:	60cb      	str	r3, [r1, #12]
 8005680:	e02a      	b.n	80056d8 <HAL_RCC_OscConfig+0xa6c>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	da0c      	bge.n	80056a4 <HAL_RCC_OscConfig+0xa38>
 800568a:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	015b      	lsls	r3, r3, #5
 8005698:	4901      	ldr	r1, [pc, #4]	@ (80056a0 <HAL_RCC_OscConfig+0xa34>)
 800569a:	4313      	orrs	r3, r2
 800569c:	60cb      	str	r3, [r1, #12]
 800569e:	e01b      	b.n	80056d8 <HAL_RCC_OscConfig+0xa6c>
 80056a0:	46020c00 	.word	0x46020c00
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ac:	d30a      	bcc.n	80056c4 <HAL_RCC_OscConfig+0xa58>
 80056ae:	4ba1      	ldr	r3, [pc, #644]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	029b      	lsls	r3, r3, #10
 80056bc:	499d      	ldr	r1, [pc, #628]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	60cb      	str	r3, [r1, #12]
 80056c2:	e009      	b.n	80056d8 <HAL_RCC_OscConfig+0xa6c>
 80056c4:	4b9b      	ldr	r3, [pc, #620]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	03db      	lsls	r3, r3, #15
 80056d2:	4998      	ldr	r1, [pc, #608]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80056d8:	4b96      	ldr	r3, [pc, #600]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a95      	ldr	r2, [pc, #596]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80056de:	f043 0310 	orr.w	r3, r3, #16
 80056e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80056e4:	f7fc faa2 	bl	8001c2c <HAL_GetTick>
 80056e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80056ec:	f7fc fa9e 	bl	8001c2c <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e18b      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80056fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0f0      	beq.n	80056ec <HAL_RCC_OscConfig+0xa80>
 800570a:	e018      	b.n	800573e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800570c:	4b89      	ldr	r3, [pc, #548]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a88      	ldr	r2, [pc, #544]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005712:	f023 0310 	bic.w	r3, r3, #16
 8005716:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005718:	f7fc fa88 	bl	8001c2c <HAL_GetTick>
 800571c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005720:	f7fc fa84 	bl	8001c2c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e171      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005732:	4b80      	ldr	r3, [pc, #512]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f0      	bne.n	8005720 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 8166 	beq.w	8005a14 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005748:	2300      	movs	r3, #0
 800574a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800574e:	4b79      	ldr	r3, [pc, #484]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f003 030c 	and.w	r3, r3, #12
 8005756:	2b0c      	cmp	r3, #12
 8005758:	f000 80f2 	beq.w	8005940 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005760:	2b02      	cmp	r3, #2
 8005762:	f040 80c5 	bne.w	80058f0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005766:	4b73      	ldr	r3, [pc, #460]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a72      	ldr	r2, [pc, #456]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 800576c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005770:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005772:	f7fc fa5b 	bl	8001c2c <HAL_GetTick>
 8005776:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577a:	f7fc fa57 	bl	8001c2c <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e144      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800578c:	4b69      	ldr	r3, [pc, #420]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f0      	bne.n	800577a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005798:	4b66      	ldr	r3, [pc, #408]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 800579a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800579e:	f003 0304 	and.w	r3, r3, #4
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d111      	bne.n	80057ca <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80057a6:	4b63      	ldr	r3, [pc, #396]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80057a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057ac:	4a61      	ldr	r2, [pc, #388]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80057ae:	f043 0304 	orr.w	r3, r3, #4
 80057b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80057b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80057b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80057ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005938 <HAL_RCC_OscConfig+0xccc>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057d6:	d102      	bne.n	80057de <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80057d8:	2301      	movs	r3, #1
 80057da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80057de:	4b56      	ldr	r3, [pc, #344]	@ (8005938 <HAL_RCC_OscConfig+0xccc>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	4a55      	ldr	r2, [pc, #340]	@ (8005938 <HAL_RCC_OscConfig+0xccc>)
 80057e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057e8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80057ea:	4b52      	ldr	r3, [pc, #328]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80057ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80057fe:	3a01      	subs	r2, #1
 8005800:	0212      	lsls	r2, r2, #8
 8005802:	4311      	orrs	r1, r2
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005808:	430a      	orrs	r2, r1
 800580a:	494a      	ldr	r1, [pc, #296]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 800580c:	4313      	orrs	r3, r2
 800580e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005810:	4b48      	ldr	r3, [pc, #288]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005814:	4b49      	ldr	r3, [pc, #292]	@ (800593c <HAL_RCC_OscConfig+0xcd0>)
 8005816:	4013      	ands	r3, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800581c:	3a01      	subs	r2, #1
 800581e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005826:	3a01      	subs	r2, #1
 8005828:	0252      	lsls	r2, r2, #9
 800582a:	b292      	uxth	r2, r2
 800582c:	4311      	orrs	r1, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005832:	3a01      	subs	r2, #1
 8005834:	0412      	lsls	r2, r2, #16
 8005836:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800583a:	4311      	orrs	r1, r2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005840:	3a01      	subs	r2, #1
 8005842:	0612      	lsls	r2, r2, #24
 8005844:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005848:	430a      	orrs	r2, r1
 800584a:	493a      	ldr	r1, [pc, #232]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 800584c:	4313      	orrs	r3, r2
 800584e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005850:	4b38      	ldr	r3, [pc, #224]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005854:	4a37      	ldr	r2, [pc, #220]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005856:	f023 0310 	bic.w	r3, r3, #16
 800585a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005860:	4a34      	ldr	r2, [pc, #208]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005866:	4b33      	ldr	r3, [pc, #204]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586a:	4a32      	ldr	r2, [pc, #200]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 800586c:	f043 0310 	orr.w	r3, r3, #16
 8005870:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005872:	4b30      	ldr	r3, [pc, #192]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005876:	f023 020c 	bic.w	r2, r3, #12
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587e:	492d      	ldr	r1, [pc, #180]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005880:	4313      	orrs	r3, r2
 8005882:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005884:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005888:	2b01      	cmp	r3, #1
 800588a:	d105      	bne.n	8005898 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800588c:	4b2a      	ldr	r3, [pc, #168]	@ (8005938 <HAL_RCC_OscConfig+0xccc>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	4a29      	ldr	r2, [pc, #164]	@ (8005938 <HAL_RCC_OscConfig+0xccc>)
 8005892:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005896:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005898:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800589c:	2b01      	cmp	r3, #1
 800589e:	d107      	bne.n	80058b0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80058a0:	4b24      	ldr	r3, [pc, #144]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80058a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058a6:	4a23      	ldr	r2, [pc, #140]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80058a8:	f023 0304 	bic.w	r3, r3, #4
 80058ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80058b0:	4b20      	ldr	r3, [pc, #128]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80058b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80058bc:	f7fc f9b6 	bl	8001c2c <HAL_GetTick>
 80058c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80058c2:	e008      	b.n	80058d6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c4:	f7fc f9b2 	bl	8001c2c <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e09f      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80058d6:	4b17      	ldr	r3, [pc, #92]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0f0      	beq.n	80058c4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058e2:	4b14      	ldr	r3, [pc, #80]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80058e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e6:	4a13      	ldr	r2, [pc, #76]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80058e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058ec:	6293      	str	r3, [r2, #40]	@ 0x28
 80058ee:	e091      	b.n	8005a14 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80058f0:	4b10      	ldr	r3, [pc, #64]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a0f      	ldr	r2, [pc, #60]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 80058f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80058fc:	f7fc f996 	bl	8001c2c <HAL_GetTick>
 8005900:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005904:	f7fc f992 	bl	8001c2c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e07f      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005916:	4b07      	ldr	r3, [pc, #28]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005922:	4b04      	ldr	r3, [pc, #16]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005926:	4a03      	ldr	r2, [pc, #12]	@ (8005934 <HAL_RCC_OscConfig+0xcc8>)
 8005928:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800592c:	f023 0303 	bic.w	r3, r3, #3
 8005930:	6293      	str	r3, [r2, #40]	@ 0x28
 8005932:	e06f      	b.n	8005a14 <HAL_RCC_OscConfig+0xda8>
 8005934:	46020c00 	.word	0x46020c00
 8005938:	46020800 	.word	0x46020800
 800593c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005940:	4b37      	ldr	r3, [pc, #220]	@ (8005a20 <HAL_RCC_OscConfig+0xdb4>)
 8005942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005944:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005946:	4b36      	ldr	r3, [pc, #216]	@ (8005a20 <HAL_RCC_OscConfig+0xdb4>)
 8005948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800594a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005950:	2b01      	cmp	r3, #1
 8005952:	d039      	beq.n	80059c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f003 0203 	and.w	r2, r3, #3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800595e:	429a      	cmp	r2, r3
 8005960:	d132      	bne.n	80059c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	0a1b      	lsrs	r3, r3, #8
 8005966:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005970:	429a      	cmp	r2, r3
 8005972:	d129      	bne.n	80059c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800597e:	429a      	cmp	r2, r3
 8005980:	d122      	bne.n	80059c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800598c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800598e:	429a      	cmp	r2, r3
 8005990:	d11a      	bne.n	80059c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	0a5b      	lsrs	r3, r3, #9
 8005996:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d111      	bne.n	80059c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	0c1b      	lsrs	r3, r3, #16
 80059a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d108      	bne.n	80059c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	0e1b      	lsrs	r3, r3, #24
 80059ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d001      	beq.n	80059cc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e024      	b.n	8005a16 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80059cc:	4b14      	ldr	r3, [pc, #80]	@ (8005a20 <HAL_RCC_OscConfig+0xdb4>)
 80059ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d0:	08db      	lsrs	r3, r3, #3
 80059d2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80059da:	429a      	cmp	r2, r3
 80059dc:	d01a      	beq.n	8005a14 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80059de:	4b10      	ldr	r3, [pc, #64]	@ (8005a20 <HAL_RCC_OscConfig+0xdb4>)
 80059e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e2:	4a0f      	ldr	r2, [pc, #60]	@ (8005a20 <HAL_RCC_OscConfig+0xdb4>)
 80059e4:	f023 0310 	bic.w	r3, r3, #16
 80059e8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ea:	f7fc f91f 	bl	8001c2c <HAL_GetTick>
 80059ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80059f0:	bf00      	nop
 80059f2:	f7fc f91b 	bl	8001c2c <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d0f9      	beq.n	80059f2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a02:	4a07      	ldr	r2, [pc, #28]	@ (8005a20 <HAL_RCC_OscConfig+0xdb4>)
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005a08:	4b05      	ldr	r3, [pc, #20]	@ (8005a20 <HAL_RCC_OscConfig+0xdb4>)
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0c:	4a04      	ldr	r2, [pc, #16]	@ (8005a20 <HAL_RCC_OscConfig+0xdb4>)
 8005a0e:	f043 0310 	orr.w	r3, r3, #16
 8005a12:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3738      	adds	r7, #56	@ 0x38
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	46020c00 	.word	0x46020c00

08005a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e1d9      	b.n	8005dec <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a38:	4b9b      	ldr	r3, [pc, #620]	@ (8005ca8 <HAL_RCC_ClockConfig+0x284>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d910      	bls.n	8005a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a46:	4b98      	ldr	r3, [pc, #608]	@ (8005ca8 <HAL_RCC_ClockConfig+0x284>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 020f 	bic.w	r2, r3, #15
 8005a4e:	4996      	ldr	r1, [pc, #600]	@ (8005ca8 <HAL_RCC_ClockConfig+0x284>)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a56:	4b94      	ldr	r3, [pc, #592]	@ (8005ca8 <HAL_RCC_ClockConfig+0x284>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d001      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e1c1      	b.n	8005dec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d010      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	695a      	ldr	r2, [r3, #20]
 8005a78:	4b8c      	ldr	r3, [pc, #560]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d908      	bls.n	8005a96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005a84:	4b89      	ldr	r3, [pc, #548]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	4986      	ldr	r1, [pc, #536]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d012      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	4b81      	ldr	r3, [pc, #516]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	091b      	lsrs	r3, r3, #4
 8005aac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d909      	bls.n	8005ac8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005ab4:	4b7d      	ldr	r3, [pc, #500]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	497a      	ldr	r1, [pc, #488]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d010      	beq.n	8005af6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	4b74      	ldr	r3, [pc, #464]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d908      	bls.n	8005af6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005ae4:	4b71      	ldr	r3, [pc, #452]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	496e      	ldr	r1, [pc, #440]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d010      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	4b69      	ldr	r3, [pc, #420]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f003 030f 	and.w	r3, r3, #15
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d908      	bls.n	8005b24 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005b12:	4b66      	ldr	r3, [pc, #408]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f023 020f 	bic.w	r2, r3, #15
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	4963      	ldr	r1, [pc, #396]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 80d2 	beq.w	8005cd6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005b32:	2300      	movs	r3, #0
 8005b34:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d143      	bne.n	8005bc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d110      	bne.n	8005b6e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005b4c:	4b57      	ldr	r3, [pc, #348]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b52:	4a56      	ldr	r2, [pc, #344]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005b54:	f043 0304 	orr.w	r3, r3, #4
 8005b58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005b5c:	4b53      	ldr	r3, [pc, #332]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	60bb      	str	r3, [r7, #8]
 8005b68:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005b6e:	f7fc f85d 	bl	8001c2c <HAL_GetTick>
 8005b72:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005b74:	4b4e      	ldr	r3, [pc, #312]	@ (8005cb0 <HAL_RCC_ClockConfig+0x28c>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00f      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005b82:	f7fc f853 	bl	8001c2c <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e12b      	b.n	8005dec <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005b94:	4b46      	ldr	r3, [pc, #280]	@ (8005cb0 <HAL_RCC_ClockConfig+0x28c>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d107      	bne.n	8005bb6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005ba6:	4b41      	ldr	r3, [pc, #260]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bac:	4a3f      	ldr	r2, [pc, #252]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005bae:	f023 0304 	bic.w	r3, r3, #4
 8005bb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d121      	bne.n	8005c06 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e112      	b.n	8005dec <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d107      	bne.n	8005bde <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bce:	4b37      	ldr	r3, [pc, #220]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d115      	bne.n	8005c06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e106      	b.n	8005dec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d107      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005be6:	4b31      	ldr	r3, [pc, #196]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e0fa      	b.n	8005dec <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e0f2      	b.n	8005dec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005c06:	4b29      	ldr	r3, [pc, #164]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f023 0203 	bic.w	r2, r3, #3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4926      	ldr	r1, [pc, #152]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005c18:	f7fc f808 	bl	8001c2c <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d112      	bne.n	8005c4c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c26:	e00a      	b.n	8005c3e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c28:	f7fc f800 	bl	8001c2c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e0d6      	b.n	8005dec <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f003 030c 	and.w	r3, r3, #12
 8005c46:	2b0c      	cmp	r3, #12
 8005c48:	d1ee      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x204>
 8005c4a:	e044      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d112      	bne.n	8005c7a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c54:	e00a      	b.n	8005c6c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c56:	f7fb ffe9 	bl	8001c2c <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e0bf      	b.n	8005dec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	f003 030c 	and.w	r3, r3, #12
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d1ee      	bne.n	8005c56 <HAL_RCC_ClockConfig+0x232>
 8005c78:	e02d      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d123      	bne.n	8005cca <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c82:	e00a      	b.n	8005c9a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c84:	f7fb ffd2 	bl	8001c2c <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e0a8      	b.n	8005dec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c9a:	4b04      	ldr	r3, [pc, #16]	@ (8005cac <HAL_RCC_ClockConfig+0x288>)
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f003 030c 	and.w	r3, r3, #12
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1ee      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x260>
 8005ca6:	e016      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x2b2>
 8005ca8:	40022000 	.word	0x40022000
 8005cac:	46020c00 	.word	0x46020c00
 8005cb0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb4:	f7fb ffba 	bl	8001c2c <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e090      	b.n	8005dec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cca:	4b4a      	ldr	r3, [pc, #296]	@ (8005df4 <HAL_RCC_ClockConfig+0x3d0>)
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f003 030c 	and.w	r3, r3, #12
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d1ee      	bne.n	8005cb4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d010      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	4b43      	ldr	r3, [pc, #268]	@ (8005df4 <HAL_RCC_ClockConfig+0x3d0>)
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d208      	bcs.n	8005d04 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005cf2:	4b40      	ldr	r3, [pc, #256]	@ (8005df4 <HAL_RCC_ClockConfig+0x3d0>)
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f023 020f 	bic.w	r2, r3, #15
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	493d      	ldr	r1, [pc, #244]	@ (8005df4 <HAL_RCC_ClockConfig+0x3d0>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d04:	4b3c      	ldr	r3, [pc, #240]	@ (8005df8 <HAL_RCC_ClockConfig+0x3d4>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d210      	bcs.n	8005d34 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d12:	4b39      	ldr	r3, [pc, #228]	@ (8005df8 <HAL_RCC_ClockConfig+0x3d4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f023 020f 	bic.w	r2, r3, #15
 8005d1a:	4937      	ldr	r1, [pc, #220]	@ (8005df8 <HAL_RCC_ClockConfig+0x3d4>)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d22:	4b35      	ldr	r3, [pc, #212]	@ (8005df8 <HAL_RCC_ClockConfig+0x3d4>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d001      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e05b      	b.n	8005dec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d010      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	4b2b      	ldr	r3, [pc, #172]	@ (8005df4 <HAL_RCC_ClockConfig+0x3d0>)
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d208      	bcs.n	8005d62 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005d50:	4b28      	ldr	r3, [pc, #160]	@ (8005df4 <HAL_RCC_ClockConfig+0x3d0>)
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4925      	ldr	r1, [pc, #148]	@ (8005df4 <HAL_RCC_ClockConfig+0x3d0>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d012      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	4b20      	ldr	r3, [pc, #128]	@ (8005df4 <HAL_RCC_ClockConfig+0x3d0>)
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	091b      	lsrs	r3, r3, #4
 8005d78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d209      	bcs.n	8005d94 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005d80:	4b1c      	ldr	r3, [pc, #112]	@ (8005df4 <HAL_RCC_ClockConfig+0x3d0>)
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	4919      	ldr	r1, [pc, #100]	@ (8005df4 <HAL_RCC_ClockConfig+0x3d0>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d010      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	4b13      	ldr	r3, [pc, #76]	@ (8005df4 <HAL_RCC_ClockConfig+0x3d0>)
 8005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d208      	bcs.n	8005dc2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005db0:	4b10      	ldr	r3, [pc, #64]	@ (8005df4 <HAL_RCC_ClockConfig+0x3d0>)
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	490d      	ldr	r1, [pc, #52]	@ (8005df4 <HAL_RCC_ClockConfig+0x3d0>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005dc2:	f000 f821 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005df4 <HAL_RCC_ClockConfig+0x3d0>)
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	490a      	ldr	r1, [pc, #40]	@ (8005dfc <HAL_RCC_ClockConfig+0x3d8>)
 8005dd2:	5ccb      	ldrb	r3, [r1, r3]
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd8:	4a09      	ldr	r2, [pc, #36]	@ (8005e00 <HAL_RCC_ClockConfig+0x3dc>)
 8005dda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ddc:	4b09      	ldr	r3, [pc, #36]	@ (8005e04 <HAL_RCC_ClockConfig+0x3e0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fb fab7 	bl	8001354 <HAL_InitTick>
 8005de6:	4603      	mov	r3, r0
 8005de8:	73fb      	strb	r3, [r7, #15]

  return status;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	46020c00 	.word	0x46020c00
 8005df8:	40022000 	.word	0x40022000
 8005dfc:	0800b120 	.word	0x0800b120
 8005e00:	20000088 	.word	0x20000088
 8005e04:	200000a8 	.word	0x200000a8

08005e08 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b08b      	sub	sp, #44	@ 0x2c
 8005e0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e16:	4b78      	ldr	r3, [pc, #480]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	f003 030c 	and.w	r3, r3, #12
 8005e1e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e20:	4b75      	ldr	r3, [pc, #468]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCC_GetSysClockFreq+0x34>
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	2b0c      	cmp	r3, #12
 8005e34:	d121      	bne.n	8005e7a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d11e      	bne.n	8005e7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005e3c:	4b6e      	ldr	r3, [pc, #440]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d107      	bne.n	8005e58 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005e48:	4b6b      	ldr	r3, [pc, #428]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e4e:	0b1b      	lsrs	r3, r3, #12
 8005e50:	f003 030f 	and.w	r3, r3, #15
 8005e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e56:	e005      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005e58:	4b67      	ldr	r3, [pc, #412]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	0f1b      	lsrs	r3, r3, #28
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e64:	4a65      	ldr	r2, [pc, #404]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d110      	bne.n	8005e96 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e78:	e00d      	b.n	8005e96 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e7a:	4b5f      	ldr	r3, [pc, #380]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f003 030c 	and.w	r3, r3, #12
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d102      	bne.n	8005e8c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e86:	4b5e      	ldr	r3, [pc, #376]	@ (8006000 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005e88:	623b      	str	r3, [r7, #32]
 8005e8a:	e004      	b.n	8005e96 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d101      	bne.n	8005e96 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e92:	4b5b      	ldr	r3, [pc, #364]	@ (8006000 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005e94:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	2b0c      	cmp	r3, #12
 8005e9a:	f040 80a5 	bne.w	8005fe8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005e9e:	4b56      	ldr	r3, [pc, #344]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005ea8:	4b53      	ldr	r3, [pc, #332]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eac:	0a1b      	lsrs	r3, r3, #8
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005eb6:	4b50      	ldr	r3, [pc, #320]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eba:	091b      	lsrs	r3, r3, #4
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ec2:	4b4d      	ldr	r3, [pc, #308]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec6:	08db      	lsrs	r3, r3, #3
 8005ec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	fb02 f303 	mul.w	r3, r2, r3
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eda:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d003      	beq.n	8005eec <HAL_RCC_GetSysClockFreq+0xe4>
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d022      	beq.n	8005f30 <HAL_RCC_GetSysClockFreq+0x128>
 8005eea:	e043      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006004 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efe:	4b3e      	ldr	r3, [pc, #248]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f0e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005f12:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8006008 <HAL_RCC_GetSysClockFreq+0x200>
 8005f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f2e:	e046      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8006004 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f42:	4b2d      	ldr	r3, [pc, #180]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f52:	ed97 6a01 	vldr	s12, [r7, #4]
 8005f56:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006008 <HAL_RCC_GetSysClockFreq+0x200>
 8005f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f72:	e024      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	ee07 3a90 	vmov	s15, r3
 8005f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f94:	ee07 3a90 	vmov	s15, r3
 8005f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f9c:	ed97 6a01 	vldr	s12, [r7, #4]
 8005fa0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8006008 <HAL_RCC_GetSysClockFreq+0x200>
 8005fa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005fac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fbc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fc2:	0e1b      	lsrs	r3, r3, #24
 8005fc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fc8:	3301      	adds	r3, #1
 8005fca:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fe2:	ee17 3a90 	vmov	r3, s15
 8005fe6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	372c      	adds	r7, #44	@ 0x2c
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	46020c00 	.word	0x46020c00
 8005ffc:	0800b138 	.word	0x0800b138
 8006000:	00f42400 	.word	0x00f42400
 8006004:	4b742400 	.word	0x4b742400
 8006008:	46000000 	.word	0x46000000

0800600c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006010:	f7ff fefa 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8006014:	4602      	mov	r2, r0
 8006016:	4b07      	ldr	r3, [pc, #28]	@ (8006034 <HAL_RCC_GetHCLKFreq+0x28>)
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	4906      	ldr	r1, [pc, #24]	@ (8006038 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006020:	5ccb      	ldrb	r3, [r1, r3]
 8006022:	fa22 f303 	lsr.w	r3, r2, r3
 8006026:	4a05      	ldr	r2, [pc, #20]	@ (800603c <HAL_RCC_GetHCLKFreq+0x30>)
 8006028:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800602a:	4b04      	ldr	r3, [pc, #16]	@ (800603c <HAL_RCC_GetHCLKFreq+0x30>)
 800602c:	681b      	ldr	r3, [r3, #0]
}
 800602e:	4618      	mov	r0, r3
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	46020c00 	.word	0x46020c00
 8006038:	0800b120 	.word	0x0800b120
 800603c:	20000088 	.word	0x20000088

08006040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006044:	f7ff ffe2 	bl	800600c <HAL_RCC_GetHCLKFreq>
 8006048:	4602      	mov	r2, r0
 800604a:	4b05      	ldr	r3, [pc, #20]	@ (8006060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	091b      	lsrs	r3, r3, #4
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	4903      	ldr	r1, [pc, #12]	@ (8006064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006056:	5ccb      	ldrb	r3, [r1, r3]
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800605c:	4618      	mov	r0, r3
 800605e:	bd80      	pop	{r7, pc}
 8006060:	46020c00 	.word	0x46020c00
 8006064:	0800b130 	.word	0x0800b130

08006068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800606c:	f7ff ffce 	bl	800600c <HAL_RCC_GetHCLKFreq>
 8006070:	4602      	mov	r2, r0
 8006072:	4b05      	ldr	r3, [pc, #20]	@ (8006088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	4903      	ldr	r1, [pc, #12]	@ (800608c <HAL_RCC_GetPCLK2Freq+0x24>)
 800607e:	5ccb      	ldrb	r3, [r1, r3]
 8006080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006084:	4618      	mov	r0, r3
 8006086:	bd80      	pop	{r7, pc}
 8006088:	46020c00 	.word	0x46020c00
 800608c:	0800b130 	.word	0x0800b130

08006090 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006094:	f7ff ffba 	bl	800600c <HAL_RCC_GetHCLKFreq>
 8006098:	4602      	mov	r2, r0
 800609a:	4b05      	ldr	r3, [pc, #20]	@ (80060b0 <HAL_RCC_GetPCLK3Freq+0x20>)
 800609c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609e:	091b      	lsrs	r3, r3, #4
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	4903      	ldr	r1, [pc, #12]	@ (80060b4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80060a6:	5ccb      	ldrb	r3, [r1, r3]
 80060a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	46020c00 	.word	0x46020c00
 80060b4:	0800b130 	.word	0x0800b130

080060b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	221f      	movs	r2, #31
 80060c6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80060c8:	4b15      	ldr	r3, [pc, #84]	@ (8006120 <HAL_RCC_GetClockConfig+0x68>)
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f003 0203 	and.w	r2, r3, #3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80060d4:	4b12      	ldr	r3, [pc, #72]	@ (8006120 <HAL_RCC_GetClockConfig+0x68>)
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	f003 020f 	and.w	r2, r3, #15
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80060e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006120 <HAL_RCC_GetClockConfig+0x68>)
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80060ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006120 <HAL_RCC_GetClockConfig+0x68>)
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	091b      	lsrs	r3, r3, #4
 80060f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80060fa:	4b09      	ldr	r3, [pc, #36]	@ (8006120 <HAL_RCC_GetClockConfig+0x68>)
 80060fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006106:	4b07      	ldr	r3, [pc, #28]	@ (8006124 <HAL_RCC_GetClockConfig+0x6c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 020f 	and.w	r2, r3, #15
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	601a      	str	r2, [r3, #0]
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	46020c00 	.word	0x46020c00
 8006124:	40022000 	.word	0x40022000

08006128 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006130:	4b3e      	ldr	r3, [pc, #248]	@ (800622c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800613e:	f7fe fd17 	bl	8004b70 <HAL_PWREx_GetVoltageRange>
 8006142:	6178      	str	r0, [r7, #20]
 8006144:	e019      	b.n	800617a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006146:	4b39      	ldr	r3, [pc, #228]	@ (800622c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800614c:	4a37      	ldr	r2, [pc, #220]	@ (800622c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800614e:	f043 0304 	orr.w	r3, r3, #4
 8006152:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006156:	4b35      	ldr	r3, [pc, #212]	@ (800622c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006164:	f7fe fd04 	bl	8004b70 <HAL_PWREx_GetVoltageRange>
 8006168:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800616a:	4b30      	ldr	r3, [pc, #192]	@ (800622c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800616c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006170:	4a2e      	ldr	r2, [pc, #184]	@ (800622c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006172:	f023 0304 	bic.w	r3, r3, #4
 8006176:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006180:	d003      	beq.n	800618a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006188:	d109      	bne.n	800619e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006190:	d202      	bcs.n	8006198 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006192:	2301      	movs	r3, #1
 8006194:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006196:	e033      	b.n	8006200 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006198:	2300      	movs	r3, #0
 800619a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800619c:	e030      	b.n	8006200 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061a4:	d208      	bcs.n	80061b8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ac:	d102      	bne.n	80061b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80061ae:	2303      	movs	r3, #3
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	e025      	b.n	8006200 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e035      	b.n	8006224 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061be:	d90f      	bls.n	80061e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d109      	bne.n	80061da <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061cc:	d902      	bls.n	80061d4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80061ce:	2300      	movs	r3, #0
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	e015      	b.n	8006200 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80061d4:	2301      	movs	r3, #1
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	e012      	b.n	8006200 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80061da:	2300      	movs	r3, #0
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	e00f      	b.n	8006200 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061e6:	d109      	bne.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ee:	d102      	bne.n	80061f6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80061f0:	2301      	movs	r3, #1
 80061f2:	613b      	str	r3, [r7, #16]
 80061f4:	e004      	b.n	8006200 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80061f6:	2302      	movs	r3, #2
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	e001      	b.n	8006200 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80061fc:	2301      	movs	r3, #1
 80061fe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006200:	4b0b      	ldr	r3, [pc, #44]	@ (8006230 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f023 020f 	bic.w	r2, r3, #15
 8006208:	4909      	ldr	r1, [pc, #36]	@ (8006230 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006210:	4b07      	ldr	r3, [pc, #28]	@ (8006230 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	429a      	cmp	r2, r3
 800621c:	d001      	beq.n	8006222 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	46020c00 	.word	0x46020c00
 8006230:	40022000 	.word	0x40022000

08006234 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006238:	b0b8      	sub	sp, #224	@ 0xe0
 800623a:	af00      	add	r7, sp, #0
 800623c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006240:	2300      	movs	r3, #0
 8006242:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006246:	2300      	movs	r3, #0
 8006248:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800624c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f002 0401 	and.w	r4, r2, #1
 8006258:	2500      	movs	r5, #0
 800625a:	ea54 0305 	orrs.w	r3, r4, r5
 800625e:	d00b      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006260:	4bca      	ldr	r3, [pc, #808]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006266:	f023 0103 	bic.w	r1, r3, #3
 800626a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800626e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006270:	4ac6      	ldr	r2, [pc, #792]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006272:	430b      	orrs	r3, r1
 8006274:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f002 0802 	and.w	r8, r2, #2
 8006284:	f04f 0900 	mov.w	r9, #0
 8006288:	ea58 0309 	orrs.w	r3, r8, r9
 800628c:	d00b      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800628e:	4bbf      	ldr	r3, [pc, #764]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006294:	f023 010c 	bic.w	r1, r3, #12
 8006298:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800629c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629e:	4abb      	ldr	r2, [pc, #748]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80062a0:	430b      	orrs	r3, r1
 80062a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	f002 0a04 	and.w	sl, r2, #4
 80062b2:	f04f 0b00 	mov.w	fp, #0
 80062b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80062ba:	d00b      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80062bc:	4bb3      	ldr	r3, [pc, #716]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80062be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062c2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80062c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062cc:	4aaf      	ldr	r2, [pc, #700]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80062ce:	430b      	orrs	r3, r1
 80062d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f002 0308 	and.w	r3, r2, #8
 80062e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062e4:	2300      	movs	r3, #0
 80062e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4313      	orrs	r3, r2
 80062f2:	d00b      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80062f4:	4ba5      	ldr	r3, [pc, #660]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80062f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80062fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006304:	4aa1      	ldr	r2, [pc, #644]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006306:	430b      	orrs	r3, r1
 8006308:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800630c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	f002 0310 	and.w	r3, r2, #16
 8006318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800631c:	2300      	movs	r3, #0
 800631e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006322:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006326:	460b      	mov	r3, r1
 8006328:	4313      	orrs	r3, r2
 800632a:	d00b      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800632c:	4b97      	ldr	r3, [pc, #604]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800632e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006332:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006336:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800633a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800633c:	4a93      	ldr	r2, [pc, #588]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800633e:	430b      	orrs	r3, r1
 8006340:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f002 0320 	and.w	r3, r2, #32
 8006350:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006354:	2300      	movs	r3, #0
 8006356:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800635a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800635e:	460b      	mov	r3, r1
 8006360:	4313      	orrs	r3, r2
 8006362:	d00b      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006364:	4b89      	ldr	r3, [pc, #548]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800636a:	f023 0107 	bic.w	r1, r3, #7
 800636e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006374:	4a85      	ldr	r2, [pc, #532]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006376:	430b      	orrs	r3, r1
 8006378:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800637c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006388:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800638c:	2300      	movs	r3, #0
 800638e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006392:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006396:	460b      	mov	r3, r1
 8006398:	4313      	orrs	r3, r2
 800639a:	d00b      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800639c:	4b7b      	ldr	r3, [pc, #492]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800639e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063a2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80063a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063ac:	4a77      	ldr	r2, [pc, #476]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80063ae:	430b      	orrs	r3, r1
 80063b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80063c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063c4:	2300      	movs	r3, #0
 80063c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063ca:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4313      	orrs	r3, r2
 80063d2:	d00b      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80063d4:	4b6d      	ldr	r3, [pc, #436]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80063d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063e4:	4a69      	ldr	r2, [pc, #420]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80063e6:	430b      	orrs	r3, r1
 80063e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80063f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063fc:	2300      	movs	r3, #0
 80063fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006402:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006406:	460b      	mov	r3, r1
 8006408:	4313      	orrs	r3, r2
 800640a:	d00b      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800640c:	4b5f      	ldr	r3, [pc, #380]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800640e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006412:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006416:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800641a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800641c:	4a5b      	ldr	r2, [pc, #364]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800641e:	430b      	orrs	r3, r1
 8006420:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006430:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006434:	2300      	movs	r3, #0
 8006436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800643a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800643e:	460b      	mov	r3, r1
 8006440:	4313      	orrs	r3, r2
 8006442:	d00b      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006444:	4b51      	ldr	r3, [pc, #324]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800644a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800644e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006454:	4a4d      	ldr	r2, [pc, #308]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006456:	430b      	orrs	r3, r1
 8006458:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800645c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006468:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800646c:	2300      	movs	r3, #0
 800646e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006472:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006476:	460b      	mov	r3, r1
 8006478:	4313      	orrs	r3, r2
 800647a:	d00b      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800647c:	4b43      	ldr	r3, [pc, #268]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800647e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006482:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006486:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800648a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800648c:	4a3f      	ldr	r2, [pc, #252]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800648e:	430b      	orrs	r3, r1
 8006490:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006494:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80064a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064a4:	2300      	movs	r3, #0
 80064a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80064ae:	460b      	mov	r3, r1
 80064b0:	4313      	orrs	r3, r2
 80064b2:	d00b      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80064b4:	4b35      	ldr	r3, [pc, #212]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064ba:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80064be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064c4:	4a31      	ldr	r2, [pc, #196]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064c6:	430b      	orrs	r3, r1
 80064c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80064cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80064d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064da:	2300      	movs	r3, #0
 80064dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80064de:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80064e2:	460b      	mov	r3, r1
 80064e4:	4313      	orrs	r3, r2
 80064e6:	d00c      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80064e8:	4b28      	ldr	r3, [pc, #160]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064fa:	4a24      	ldr	r2, [pc, #144]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064fc:	430b      	orrs	r3, r1
 80064fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800650e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006510:	2300      	movs	r3, #0
 8006512:	677b      	str	r3, [r7, #116]	@ 0x74
 8006514:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006518:	460b      	mov	r3, r1
 800651a:	4313      	orrs	r3, r2
 800651c:	d04f      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800651e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006526:	2b80      	cmp	r3, #128	@ 0x80
 8006528:	d02d      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800652a:	2b80      	cmp	r3, #128	@ 0x80
 800652c:	d827      	bhi.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800652e:	2b60      	cmp	r3, #96	@ 0x60
 8006530:	d02e      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006532:	2b60      	cmp	r3, #96	@ 0x60
 8006534:	d823      	bhi.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006536:	2b40      	cmp	r3, #64	@ 0x40
 8006538:	d006      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800653a:	2b40      	cmp	r3, #64	@ 0x40
 800653c:	d81f      	bhi.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d009      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8006542:	2b20      	cmp	r3, #32
 8006544:	d011      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006546:	e01a      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006548:	4b10      	ldr	r3, [pc, #64]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	4a0f      	ldr	r2, [pc, #60]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800654e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006552:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006554:	e01d      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006556:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800655a:	3308      	adds	r3, #8
 800655c:	4618      	mov	r0, r3
 800655e:	f002 f9d1 	bl	8008904 <RCCEx_PLL2_Config>
 8006562:	4603      	mov	r3, r0
 8006564:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006568:	e013      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800656a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800656e:	332c      	adds	r3, #44	@ 0x2c
 8006570:	4618      	mov	r0, r3
 8006572:	f002 fa5f 	bl	8008a34 <RCCEx_PLL3_Config>
 8006576:	4603      	mov	r3, r0
 8006578:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800657c:	e009      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006584:	e005      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8006586:	bf00      	nop
 8006588:	e003      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800658a:	bf00      	nop
 800658c:	46020c00 	.word	0x46020c00
        break;
 8006590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006592:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10d      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800659a:	4bb6      	ldr	r3, [pc, #728]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800659c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065a0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80065a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ac:	4ab1      	ldr	r2, [pc, #708]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80065ae:	430b      	orrs	r3, r1
 80065b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80065b4:	e003      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80065ba:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80065be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80065ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065cc:	2300      	movs	r3, #0
 80065ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065d0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80065d4:	460b      	mov	r3, r1
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d053      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80065da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065e6:	d033      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80065e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ec:	d82c      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80065ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065f2:	d02f      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80065f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065f8:	d826      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80065fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065fe:	d008      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006604:	d820      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800660a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800660e:	d011      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006610:	e01a      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006612:	4b98      	ldr	r3, [pc, #608]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006616:	4a97      	ldr	r2, [pc, #604]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800661c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800661e:	e01a      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006624:	3308      	adds	r3, #8
 8006626:	4618      	mov	r0, r3
 8006628:	f002 f96c 	bl	8008904 <RCCEx_PLL2_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006632:	e010      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006634:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006638:	332c      	adds	r3, #44	@ 0x2c
 800663a:	4618      	mov	r0, r3
 800663c:	f002 f9fa 	bl	8008a34 <RCCEx_PLL3_Config>
 8006640:	4603      	mov	r3, r0
 8006642:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006646:	e006      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800664e:	e002      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006656:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10d      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800665e:	4b85      	ldr	r3, [pc, #532]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006660:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006664:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006668:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800666c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006670:	4a80      	ldr	r2, [pc, #512]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006672:	430b      	orrs	r3, r1
 8006674:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006678:	e003      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800667e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006682:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800668e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006690:	2300      	movs	r3, #0
 8006692:	667b      	str	r3, [r7, #100]	@ 0x64
 8006694:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	d046      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800669e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066a6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066aa:	d028      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80066ac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066b0:	d821      	bhi.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80066b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066b6:	d022      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80066b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066bc:	d81b      	bhi.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80066be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066c2:	d01c      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80066c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066c8:	d815      	bhi.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80066ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066ce:	d008      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80066d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066d4:	d80f      	bhi.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d011      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80066da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066de:	d00e      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80066e0:	e009      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066e6:	3308      	adds	r3, #8
 80066e8:	4618      	mov	r0, r3
 80066ea:	f002 f90b 	bl	8008904 <RCCEx_PLL2_Config>
 80066ee:	4603      	mov	r3, r0
 80066f0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80066f4:	e004      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80066fc:	e000      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 80066fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006700:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10d      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006708:	4b5a      	ldr	r3, [pc, #360]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800670a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800670e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006712:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800671a:	4a56      	ldr	r2, [pc, #344]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800671c:	430b      	orrs	r3, r1
 800671e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006722:	e003      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006724:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006728:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800672c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006738:	65bb      	str	r3, [r7, #88]	@ 0x58
 800673a:	2300      	movs	r3, #0
 800673c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800673e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006742:	460b      	mov	r3, r1
 8006744:	4313      	orrs	r3, r2
 8006746:	d03f      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006748:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006750:	2b04      	cmp	r3, #4
 8006752:	d81e      	bhi.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8006754:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	0800679b 	.word	0x0800679b
 8006760:	08006771 	.word	0x08006771
 8006764:	0800677f 	.word	0x0800677f
 8006768:	0800679b 	.word	0x0800679b
 800676c:	0800679b 	.word	0x0800679b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006770:	4b40      	ldr	r3, [pc, #256]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006774:	4a3f      	ldr	r2, [pc, #252]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800677a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800677c:	e00e      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800677e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006782:	332c      	adds	r3, #44	@ 0x2c
 8006784:	4618      	mov	r0, r3
 8006786:	f002 f955 	bl	8008a34 <RCCEx_PLL3_Config>
 800678a:	4603      	mov	r3, r0
 800678c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006790:	e004      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006798:	e000      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800679a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800679c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10d      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80067a4:	4b33      	ldr	r3, [pc, #204]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80067a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067aa:	f023 0107 	bic.w	r1, r3, #7
 80067ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b6:	4a2f      	ldr	r2, [pc, #188]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80067b8:	430b      	orrs	r3, r1
 80067ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80067be:	e003      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80067c4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80067c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80067d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80067d6:	2300      	movs	r3, #0
 80067d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80067da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80067de:	460b      	mov	r3, r1
 80067e0:	4313      	orrs	r3, r2
 80067e2:	d04d      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80067e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067f0:	d028      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x610>
 80067f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067f6:	d821      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80067f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067fc:	d024      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80067fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006802:	d81b      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006808:	d00e      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800680a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800680e:	d815      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01b      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006818:	d110      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800681a:	4b16      	ldr	r3, [pc, #88]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800681c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800681e:	4a15      	ldr	r2, [pc, #84]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006824:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006826:	e012      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006828:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800682c:	332c      	adds	r3, #44	@ 0x2c
 800682e:	4618      	mov	r0, r3
 8006830:	f002 f900 	bl	8008a34 <RCCEx_PLL3_Config>
 8006834:	4603      	mov	r3, r0
 8006836:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800683a:	e008      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006842:	e004      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006844:	bf00      	nop
 8006846:	e002      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006848:	bf00      	nop
 800684a:	e000      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800684c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800684e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006852:	2b00      	cmp	r3, #0
 8006854:	d110      	bne.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006856:	4b07      	ldr	r3, [pc, #28]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800685c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006860:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006868:	4a02      	ldr	r2, [pc, #8]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800686a:	430b      	orrs	r3, r1
 800686c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006870:	e006      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006872:	bf00      	nop
 8006874:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006878:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800687c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006880:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800688c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800688e:	2300      	movs	r3, #0
 8006890:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006892:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006896:	460b      	mov	r3, r1
 8006898:	4313      	orrs	r3, r2
 800689a:	f000 80b5 	beq.w	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800689e:	2300      	movs	r3, #0
 80068a0:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068a4:	4b9d      	ldr	r3, [pc, #628]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80068a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d113      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068b2:	4b9a      	ldr	r3, [pc, #616]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80068b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068b8:	4a98      	ldr	r2, [pc, #608]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80068ba:	f043 0304 	orr.w	r3, r3, #4
 80068be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80068c2:	4b96      	ldr	r3, [pc, #600]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80068c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80068d4:	2301      	movs	r3, #1
 80068d6:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80068da:	4b91      	ldr	r3, [pc, #580]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068de:	4a90      	ldr	r2, [pc, #576]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068e0:	f043 0301 	orr.w	r3, r3, #1
 80068e4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068e6:	f7fb f9a1 	bl	8001c2c <HAL_GetTick>
 80068ea:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80068ee:	e00b      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068f0:	f7fb f99c 	bl	8001c2c <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d903      	bls.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006906:	e005      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006908:	4b85      	ldr	r3, [pc, #532]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800690a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0ed      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8006914:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006918:	2b00      	cmp	r3, #0
 800691a:	d165      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800691c:	4b7f      	ldr	r3, [pc, #508]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800691e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006926:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800692a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800692e:	2b00      	cmp	r3, #0
 8006930:	d023      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x746>
 8006932:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006936:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800693a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800693e:	4293      	cmp	r3, r2
 8006940:	d01b      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006942:	4b76      	ldr	r3, [pc, #472]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800694c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006950:	4b72      	ldr	r3, [pc, #456]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006956:	4a71      	ldr	r2, [pc, #452]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800695c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006960:	4b6e      	ldr	r3, [pc, #440]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006966:	4a6d      	ldr	r2, [pc, #436]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006968:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800696c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006970:	4a6a      	ldr	r2, [pc, #424]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006976:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800697a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d019      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006986:	f7fb f951 	bl	8001c2c <HAL_GetTick>
 800698a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800698e:	e00d      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006990:	f7fb f94c 	bl	8001c2c <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800699a:	1ad2      	subs	r2, r2, r3
 800699c:	f241 3388 	movw	r3, #5000	@ 0x1388
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d903      	bls.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80069aa:	e006      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069ac:	4b5b      	ldr	r3, [pc, #364]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80069ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0ea      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80069ba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10d      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80069c2:	4b56      	ldr	r3, [pc, #344]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80069c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80069d4:	4a51      	ldr	r2, [pc, #324]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80069d6:	430b      	orrs	r3, r1
 80069d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80069dc:	e008      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069de:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80069e2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80069e6:	e003      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80069ec:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069f0:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d107      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f8:	4b48      	ldr	r3, [pc, #288]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80069fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069fe:	4a47      	ldr	r2, [pc, #284]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006a00:	f023 0304 	bic.w	r3, r3, #4
 8006a04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006a08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006a14:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a16:	2300      	movs	r3, #0
 8006a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a1a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4313      	orrs	r3, r2
 8006a22:	d042      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006a24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a2c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a30:	d022      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8006a32:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a36:	d81b      	bhi.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006a38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a3c:	d011      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8006a3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a42:	d815      	bhi.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d019      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006a48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a4c:	d110      	bne.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a52:	3308      	adds	r3, #8
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 ff55 	bl	8008904 <RCCEx_PLL2_Config>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006a60:	e00d      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a62:	4b2e      	ldr	r3, [pc, #184]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a66:	4a2d      	ldr	r2, [pc, #180]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a6c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006a6e:	e006      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006a76:	e002      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006a78:	bf00      	nop
 8006a7a:	e000      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006a7c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a7e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10d      	bne.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006a86:	4b25      	ldr	r3, [pc, #148]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a8c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006a90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a98:	4a20      	ldr	r2, [pc, #128]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006a9a:	430b      	orrs	r3, r1
 8006a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006aa0:	e003      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006aa6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006aaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ab8:	2300      	movs	r3, #0
 8006aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006abc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	d032      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006ac6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ad2:	d00b      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ad8:	d804      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d008      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ae2:	d007      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006aea:	e004      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006aec:	bf00      	nop
 8006aee:	e002      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006af0:	bf00      	nop
 8006af2:	e000      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006af4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006af6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d112      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006afe:	4b07      	ldr	r3, [pc, #28]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b04:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b10:	4a02      	ldr	r2, [pc, #8]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b12:	430b      	orrs	r3, r1
 8006b14:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006b18:	e008      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006b1a:	bf00      	nop
 8006b1c:	46020c00 	.word	0x46020c00
 8006b20:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b24:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006b28:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006b2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b3e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006b42:	460b      	mov	r3, r1
 8006b44:	4313      	orrs	r3, r2
 8006b46:	d019      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006b48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b54:	d105      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b56:	4b88      	ldr	r3, [pc, #544]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5a:	4a87      	ldr	r2, [pc, #540]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b60:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006b62:	4b85      	ldr	r3, [pc, #532]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006b64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b68:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b74:	4a80      	ldr	r2, [pc, #512]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006b76:	430b      	orrs	r3, r1
 8006b78:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b8e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006b92:	460b      	mov	r3, r1
 8006b94:	4313      	orrs	r3, r2
 8006b96:	d00c      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006b98:	4b77      	ldr	r3, [pc, #476]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ba2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ba6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006baa:	4973      	ldr	r1, [pc, #460]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006bb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006bbe:	623b      	str	r3, [r7, #32]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bc4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	d00c      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006bce:	4b6a      	ldr	r3, [pc, #424]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006bd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006be0:	4965      	ldr	r1, [pc, #404]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006be8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61fb      	str	r3, [r7, #28]
 8006bfa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4313      	orrs	r3, r2
 8006c02:	d00c      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006c04:	4b5c      	ldr	r3, [pc, #368]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006c06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c0a:	f023 0218 	bic.w	r2, r3, #24
 8006c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006c16:	4958      	ldr	r1, [pc, #352]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006c2a:	613b      	str	r3, [r7, #16]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c34:	460b      	mov	r3, r1
 8006c36:	4313      	orrs	r3, r2
 8006c38:	d032      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006c3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006c42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c46:	d105      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c48:	4b4b      	ldr	r3, [pc, #300]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4c:	4a4a      	ldr	r2, [pc, #296]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c52:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006c54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006c5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c60:	d108      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c66:	3308      	adds	r3, #8
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f001 fe4b 	bl	8008904 <RCCEx_PLL2_Config>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8006c74:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10d      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006c7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006c8e:	493a      	ldr	r1, [pc, #232]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006c96:	e003      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c98:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c9c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006ca0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006cac:	60bb      	str	r3, [r7, #8]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	d03a      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006cbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cc8:	d00e      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006cca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cce:	d815      	bhi.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d017      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8006cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cd8:	d110      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cda:	4b27      	ldr	r3, [pc, #156]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cde:	4a26      	ldr	r2, [pc, #152]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ce4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006ce6:	e00e      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ce8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006cec:	3308      	adds	r3, #8
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 fe08 	bl	8008904 <RCCEx_PLL2_Config>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006cfa:	e004      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006d02:	e000      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8006d04:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d06:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10d      	bne.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d14:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006d18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d20:	4915      	ldr	r1, [pc, #84]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006d28:	e003      	b.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006d2e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006d32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	2300      	movs	r3, #0
 8006d42:	607b      	str	r3, [r7, #4]
 8006d44:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	d00c      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d54:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006d58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d60:	4905      	ldr	r1, [pc, #20]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006d68:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	37e0      	adds	r7, #224	@ 0xe0
 8006d70:	46bd      	mov	sp, r7
 8006d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d76:	bf00      	nop
 8006d78:	46020c00 	.word	0x46020c00

08006d7c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b089      	sub	sp, #36	@ 0x24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006d84:	4ba6      	ldr	r3, [pc, #664]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006d8e:	4ba4      	ldr	r3, [pc, #656]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006d98:	4ba1      	ldr	r3, [pc, #644]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9c:	0a1b      	lsrs	r3, r3, #8
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	3301      	adds	r3, #1
 8006da4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006da6:	4b9e      	ldr	r3, [pc, #632]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006daa:	091b      	lsrs	r3, r3, #4
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006db2:	4b9b      	ldr	r3, [pc, #620]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db6:	08db      	lsrs	r3, r3, #3
 8006db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dca:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d062      	beq.n	8006e9a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	f200 8081 	bhi.w	8006ede <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d024      	beq.n	8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d17a      	bne.n	8006ede <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	ee07 3a90 	vmov	s15, r3
 8006dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007024 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfa:	4b89      	ldr	r3, [pc, #548]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e0e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e2a:	e08f      	b.n	8006f4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006e2c:	4b7c      	ldr	r3, [pc, #496]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006e38:	4b79      	ldr	r3, [pc, #484]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	0f1b      	lsrs	r3, r3, #28
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	e006      	b.n	8006e52 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006e44:	4b76      	ldr	r3, [pc, #472]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006e46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e4a:	041b      	lsls	r3, r3, #16
 8006e4c:	0f1b      	lsrs	r3, r3, #28
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	4a76      	ldr	r2, [pc, #472]	@ (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e58:	ee07 3a90 	vmov	s15, r3
 8006e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	ee07 3a90 	vmov	s15, r3
 8006e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e78:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e7c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006e80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e98:	e058      	b.n	8006f4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	ee07 3a90 	vmov	s15, r3
 8006ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007024 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006ea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eac:	4b5c      	ldr	r3, [pc, #368]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb4:	ee07 3a90 	vmov	s15, r3
 8006eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ebc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ec0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006ec4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ec8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ecc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006edc:	e036      	b.n	8006f4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006ede:	4b50      	ldr	r3, [pc, #320]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d005      	beq.n	8006ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006eea:	4b4d      	ldr	r3, [pc, #308]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	0f1b      	lsrs	r3, r3, #28
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	e006      	b.n	8006f04 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006efc:	041b      	lsls	r3, r3, #16
 8006efe:	0f1b      	lsrs	r3, r3, #28
 8006f00:	f003 030f 	and.w	r3, r3, #15
 8006f04:	4a49      	ldr	r2, [pc, #292]	@ (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	ee07 3a90 	vmov	s15, r3
 8006f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f2e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f4a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006f4c:	4b34      	ldr	r3, [pc, #208]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d017      	beq.n	8006f88 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f58:	4b31      	ldr	r3, [pc, #196]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f5c:	0a5b      	lsrs	r3, r3, #9
 8006f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006f6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f6e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f72:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f7e:	ee17 2a90 	vmov	r2, s15
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	e002      	b.n	8006f8e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006f8e:	4b24      	ldr	r3, [pc, #144]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d017      	beq.n	8006fca <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f9a:	4b21      	ldr	r3, [pc, #132]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9e:	0c1b      	lsrs	r3, r3, #16
 8006fa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fa4:	ee07 3a90 	vmov	s15, r3
 8006fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006fac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fb0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006fb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fc0:	ee17 2a90 	vmov	r2, s15
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	605a      	str	r2, [r3, #4]
 8006fc8:	e002      	b.n	8006fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006fd0:	4b13      	ldr	r3, [pc, #76]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d017      	beq.n	800700c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006fdc:	4b10      	ldr	r3, [pc, #64]	@ (8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe0:	0e1b      	lsrs	r3, r3, #24
 8006fe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006fee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007002:	ee17 2a90 	vmov	r2, s15
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800700a:	e002      	b.n	8007012 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	609a      	str	r2, [r3, #8]
}
 8007012:	bf00      	nop
 8007014:	3724      	adds	r7, #36	@ 0x24
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	46020c00 	.word	0x46020c00
 8007024:	4b742400 	.word	0x4b742400
 8007028:	46000000 	.word	0x46000000
 800702c:	0800b138 	.word	0x0800b138

08007030 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007030:	b480      	push	{r7}
 8007032:	b089      	sub	sp, #36	@ 0x24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007038:	4ba6      	ldr	r3, [pc, #664]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800703a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007040:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007042:	4ba4      	ldr	r3, [pc, #656]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800704c:	4ba1      	ldr	r3, [pc, #644]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007050:	0a1b      	lsrs	r3, r3, #8
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	3301      	adds	r3, #1
 8007058:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800705a:	4b9e      	ldr	r3, [pc, #632]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800705c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705e:	091b      	lsrs	r3, r3, #4
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007066:	4b9b      	ldr	r3, [pc, #620]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706a:	08db      	lsrs	r3, r3, #3
 800706c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	fb02 f303 	mul.w	r3, r2, r3
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b03      	cmp	r3, #3
 8007086:	d062      	beq.n	800714e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b03      	cmp	r3, #3
 800708c:	f200 8081 	bhi.w	8007192 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d024      	beq.n	80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b02      	cmp	r3, #2
 800709a:	d17a      	bne.n	8007192 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80072d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80070aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ae:	4b89      	ldr	r3, [pc, #548]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80070b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80070be:	ed97 6a02 	vldr	s12, [r7, #8]
 80070c2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80070c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80070ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80070ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80070d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070de:	e08f      	b.n	8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80070e0:	4b7c      	ldr	r3, [pc, #496]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d005      	beq.n	80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80070ec:	4b79      	ldr	r3, [pc, #484]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	0f1b      	lsrs	r3, r3, #28
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	e006      	b.n	8007106 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80070f8:	4b76      	ldr	r3, [pc, #472]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80070fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070fe:	041b      	lsls	r3, r3, #16
 8007100:	0f1b      	lsrs	r3, r3, #28
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	4a76      	ldr	r2, [pc, #472]	@ (80072e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800710c:	ee07 3a90 	vmov	s15, r3
 8007110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007130:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007140:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007148:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800714c:	e058      	b.n	8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	ee07 3a90 	vmov	s15, r3
 8007154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007158:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80072d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800715c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007160:	4b5c      	ldr	r3, [pc, #368]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007168:	ee07 3a90 	vmov	s15, r3
 800716c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007170:	ed97 6a02 	vldr	s12, [r7, #8]
 8007174:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007178:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800717c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007180:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007184:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007190:	e036      	b.n	8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007192:	4b50      	ldr	r3, [pc, #320]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800719e:	4b4d      	ldr	r3, [pc, #308]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	0f1b      	lsrs	r3, r3, #28
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	e006      	b.n	80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80071aa:	4b4a      	ldr	r3, [pc, #296]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80071ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071b0:	041b      	lsls	r3, r3, #16
 80071b2:	0f1b      	lsrs	r3, r3, #28
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	4a49      	ldr	r2, [pc, #292]	@ (80072e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80071ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	ee07 3a90 	vmov	s15, r3
 80071cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071de:	ed97 6a02 	vldr	s12, [r7, #8]
 80071e2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80071e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80071f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071fe:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007200:	4b34      	ldr	r3, [pc, #208]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d017      	beq.n	800723c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800720c:	4b31      	ldr	r3, [pc, #196]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800720e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007210:	0a5b      	lsrs	r3, r3, #9
 8007212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800721e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007222:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007226:	edd7 6a07 	vldr	s13, [r7, #28]
 800722a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800722e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007232:	ee17 2a90 	vmov	r2, s15
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	e002      	b.n	8007242 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007242:	4b24      	ldr	r3, [pc, #144]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d017      	beq.n	800727e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800724e:	4b21      	ldr	r3, [pc, #132]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007252:	0c1b      	lsrs	r3, r3, #16
 8007254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007258:	ee07 3a90 	vmov	s15, r3
 800725c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007260:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007264:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007268:	edd7 6a07 	vldr	s13, [r7, #28]
 800726c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007274:	ee17 2a90 	vmov	r2, s15
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	605a      	str	r2, [r3, #4]
 800727c:	e002      	b.n	8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007284:	4b13      	ldr	r3, [pc, #76]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d017      	beq.n	80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007290:	4b10      	ldr	r3, [pc, #64]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007294:	0e1b      	lsrs	r3, r3, #24
 8007296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80072a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072a6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80072aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b6:	ee17 2a90 	vmov	r2, s15
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80072be:	e002      	b.n	80072c6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	609a      	str	r2, [r3, #8]
}
 80072c6:	bf00      	nop
 80072c8:	3724      	adds	r7, #36	@ 0x24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	46020c00 	.word	0x46020c00
 80072d8:	4b742400 	.word	0x4b742400
 80072dc:	46000000 	.word	0x46000000
 80072e0:	0800b138 	.word	0x0800b138

080072e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b089      	sub	sp, #36	@ 0x24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80072ec:	4ba6      	ldr	r3, [pc, #664]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80072ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80072f6:	4ba4      	ldr	r3, [pc, #656]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007300:	4ba1      	ldr	r3, [pc, #644]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007304:	0a1b      	lsrs	r3, r3, #8
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	3301      	adds	r3, #1
 800730c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800730e:	4b9e      	ldr	r3, [pc, #632]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007312:	091b      	lsrs	r3, r3, #4
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800731a:	4b9b      	ldr	r3, [pc, #620]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800731c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800731e:	08db      	lsrs	r3, r3, #3
 8007320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	fb02 f303 	mul.w	r3, r2, r3
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007332:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b03      	cmp	r3, #3
 800733a:	d062      	beq.n	8007402 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2b03      	cmp	r3, #3
 8007340:	f200 8081 	bhi.w	8007446 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d024      	beq.n	8007394 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b02      	cmp	r3, #2
 800734e:	d17a      	bne.n	8007446 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800758c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800735e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007362:	4b89      	ldr	r3, [pc, #548]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007372:	ed97 6a02 	vldr	s12, [r7, #8]
 8007376:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007590 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800737a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800737e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007386:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800738a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8007392:	e08f      	b.n	80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007394:	4b7c      	ldr	r3, [pc, #496]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d005      	beq.n	80073ac <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80073a0:	4b79      	ldr	r3, [pc, #484]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	0f1b      	lsrs	r3, r3, #28
 80073a6:	f003 030f 	and.w	r3, r3, #15
 80073aa:	e006      	b.n	80073ba <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80073ac:	4b76      	ldr	r3, [pc, #472]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80073ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073b2:	041b      	lsls	r3, r3, #16
 80073b4:	0f1b      	lsrs	r3, r3, #28
 80073b6:	f003 030f 	and.w	r3, r3, #15
 80073ba:	4a76      	ldr	r2, [pc, #472]	@ (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80073bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c0:	ee07 3a90 	vmov	s15, r3
 80073c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	ee07 3a90 	vmov	s15, r3
 80073dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80073e4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007590 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80073e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80073f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007400:	e058      	b.n	80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	ee07 3a90 	vmov	s15, r3
 8007408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800758c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007414:	4b5c      	ldr	r3, [pc, #368]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741c:	ee07 3a90 	vmov	s15, r3
 8007420:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007424:	ed97 6a02 	vldr	s12, [r7, #8]
 8007428:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007590 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800742c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007430:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007434:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007438:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800743c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007440:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007444:	e036      	b.n	80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007446:	4b50      	ldr	r3, [pc, #320]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8007452:	4b4d      	ldr	r3, [pc, #308]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	0f1b      	lsrs	r3, r3, #28
 8007458:	f003 030f 	and.w	r3, r3, #15
 800745c:	e006      	b.n	800746c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800745e:	4b4a      	ldr	r3, [pc, #296]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007460:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007464:	041b      	lsls	r3, r3, #16
 8007466:	0f1b      	lsrs	r3, r3, #28
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	4a49      	ldr	r2, [pc, #292]	@ (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800746e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	ee07 3a90 	vmov	s15, r3
 8007480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007484:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007492:	ed97 6a02 	vldr	s12, [r7, #8]
 8007496:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007590 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800749a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80074aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074b2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80074b4:	4b34      	ldr	r3, [pc, #208]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80074b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d017      	beq.n	80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80074c0:	4b31      	ldr	r3, [pc, #196]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80074c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074c4:	0a5b      	lsrs	r3, r3, #9
 80074c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074ca:	ee07 3a90 	vmov	s15, r3
 80074ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80074d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80074da:	edd7 6a07 	vldr	s13, [r7, #28]
 80074de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074e6:	ee17 2a90 	vmov	r2, s15
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	e002      	b.n	80074f6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80074f6:	4b24      	ldr	r3, [pc, #144]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80074f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d017      	beq.n	8007532 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007502:	4b21      	ldr	r3, [pc, #132]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007506:	0c1b      	lsrs	r3, r3, #16
 8007508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800750c:	ee07 3a90 	vmov	s15, r3
 8007510:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007514:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007518:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800751c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007528:	ee17 2a90 	vmov	r2, s15
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	605a      	str	r2, [r3, #4]
 8007530:	e002      	b.n	8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007538:	4b13      	ldr	r3, [pc, #76]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800753a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800753c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d017      	beq.n	8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007544:	4b10      	ldr	r3, [pc, #64]	@ (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007548:	0e1b      	lsrs	r3, r3, #24
 800754a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007556:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800755a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800755e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800756a:	ee17 2a90 	vmov	r2, s15
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007572:	e002      	b.n	800757a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	609a      	str	r2, [r3, #8]
}
 800757a:	bf00      	nop
 800757c:	3724      	adds	r7, #36	@ 0x24
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	46020c00 	.word	0x46020c00
 800758c:	4b742400 	.word	0x4b742400
 8007590:	46000000 	.word	0x46000000
 8007594:	0800b138 	.word	0x0800b138

08007598 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08e      	sub	sp, #56	@ 0x38
 800759c:	af00      	add	r7, sp, #0
 800759e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80075a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80075aa:	430b      	orrs	r3, r1
 80075ac:	d145      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80075ae:	4baa      	ldr	r3, [pc, #680]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80075b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075b8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80075ba:	4ba7      	ldr	r3, [pc, #668]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80075bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d108      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80075c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075ce:	d104      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80075d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80075d6:	f001 b987 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80075da:	4b9f      	ldr	r3, [pc, #636]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80075dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075e8:	d114      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075f0:	d110      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075f2:	4b99      	ldr	r3, [pc, #612]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80075f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007600:	d103      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007602:	23fa      	movs	r3, #250	@ 0xfa
 8007604:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007606:	f001 b96f 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800760a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800760e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007610:	f001 b96a 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007614:	4b90      	ldr	r3, [pc, #576]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800761c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007620:	d107      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007628:	d103      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800762a:	4b8c      	ldr	r3, [pc, #560]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800762c:	637b      	str	r3, [r7, #52]	@ 0x34
 800762e:	f001 b95b 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	637b      	str	r3, [r7, #52]	@ 0x34
 8007636:	f001 b957 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800763a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800763e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007642:	430b      	orrs	r3, r1
 8007644:	d151      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007646:	4b84      	ldr	r3, [pc, #528]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007648:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800764c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007650:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007654:	2b80      	cmp	r3, #128	@ 0x80
 8007656:	d035      	beq.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765a:	2b80      	cmp	r3, #128	@ 0x80
 800765c:	d841      	bhi.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800765e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007660:	2b60      	cmp	r3, #96	@ 0x60
 8007662:	d02a      	beq.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007666:	2b60      	cmp	r3, #96	@ 0x60
 8007668:	d83b      	bhi.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800766a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766c:	2b40      	cmp	r3, #64	@ 0x40
 800766e:	d009      	beq.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007672:	2b40      	cmp	r3, #64	@ 0x40
 8007674:	d835      	bhi.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00c      	beq.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800767c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767e:	2b20      	cmp	r3, #32
 8007680:	d012      	beq.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007682:	e02e      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007688:	4618      	mov	r0, r3
 800768a:	f7ff fb77 	bl	8006d7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800768e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007690:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007692:	f001 b929 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007696:	f107 0318 	add.w	r3, r7, #24
 800769a:	4618      	mov	r0, r3
 800769c:	f7ff fcc8 	bl	8007030 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076a4:	f001 b920 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076a8:	f107 030c 	add.w	r3, r7, #12
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff fe19 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076b6:	f001 b917 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80076ba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80076be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076c0:	f001 b912 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076c4:	4b64      	ldr	r3, [pc, #400]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076d0:	d103      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80076d2:	4b63      	ldr	r3, [pc, #396]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80076d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076d6:	f001 b907 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076de:	f001 b903 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076e6:	f001 b8ff 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80076ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076ee:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80076f2:	430b      	orrs	r3, r1
 80076f4:	d158      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80076f6:	4b58      	ldr	r3, [pc, #352]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80076f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007700:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007708:	d03b      	beq.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800770a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007710:	d846      	bhi.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007714:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007718:	d02e      	beq.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800771a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007720:	d83e      	bhi.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007728:	d00b      	beq.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007730:	d836      	bhi.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00d      	beq.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800773e:	d012      	beq.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007740:	e02e      	b.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff fb18 	bl	8006d7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007750:	f001 b8ca 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007754:	f107 0318 	add.w	r3, r7, #24
 8007758:	4618      	mov	r0, r3
 800775a:	f7ff fc69 	bl	8007030 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007762:	f001 b8c1 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007766:	f107 030c 	add.w	r3, r7, #12
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fdba 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007774:	f001 b8b8 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007778:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800777c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800777e:	f001 b8b3 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007782:	4b35      	ldr	r3, [pc, #212]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800778a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800778e:	d103      	bne.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007790:	4b33      	ldr	r3, [pc, #204]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007792:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007794:	f001 b8a8 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800779c:	f001 b8a4 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077a4:	f001 b8a0 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80077a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ac:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80077b0:	430b      	orrs	r3, r1
 80077b2:	d16e      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80077b4:	4b28      	ldr	r3, [pc, #160]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80077b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077ba:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80077be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80077c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80077c6:	d034      	beq.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80077c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80077ce:	d85c      	bhi.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80077d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077d6:	d00b      	beq.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80077d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077de:	d854      	bhi.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d016      	beq.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80077e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077ec:	d009      	beq.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80077ee:	e04c      	b.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff fac1 	bl	8006d7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80077fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077fe:	f001 b873 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007802:	f107 0318 	add.w	r3, r7, #24
 8007806:	4618      	mov	r0, r3
 8007808:	f7ff fc12 	bl	8007030 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007810:	f001 b86a 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007814:	4b10      	ldr	r3, [pc, #64]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800781c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007820:	d103      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8007822:	4b10      	ldr	r3, [pc, #64]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007824:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007826:	f001 b85f 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800782e:	f001 b85b 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007832:	4b09      	ldr	r3, [pc, #36]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b20      	cmp	r3, #32
 800783c:	d121      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800783e:	4b06      	ldr	r3, [pc, #24]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00e      	beq.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800784a:	4b03      	ldr	r3, [pc, #12]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	0e1b      	lsrs	r3, r3, #24
 8007850:	f003 030f 	and.w	r3, r3, #15
 8007854:	e00f      	b.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007856:	bf00      	nop
 8007858:	46020c00 	.word	0x46020c00
 800785c:	0007a120 	.word	0x0007a120
 8007860:	00f42400 	.word	0x00f42400
 8007864:	02dc6c00 	.word	0x02dc6c00
 8007868:	4ba7      	ldr	r3, [pc, #668]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800786a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800786e:	041b      	lsls	r3, r3, #16
 8007870:	0e1b      	lsrs	r3, r3, #24
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	4aa5      	ldr	r2, [pc, #660]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800787e:	f001 b833 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007886:	f001 b82f 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800788e:	f001 b82b 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007896:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800789a:	430b      	orrs	r3, r1
 800789c:	d17f      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800789e:	4b9a      	ldr	r3, [pc, #616]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80078a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078a8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80078aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d165      	bne.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80078b0:	4b95      	ldr	r3, [pc, #596]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80078b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078b6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80078ba:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80078c2:	d034      	beq.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80078c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80078ca:	d853      	bhi.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80078cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078d2:	d00b      	beq.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80078d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078da:	d84b      	bhi.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d016      	beq.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80078e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078e8:	d009      	beq.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80078ea:	e043      	b.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7ff fa43 	bl	8006d7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80078fa:	f000 bff5 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078fe:	f107 0318 	add.w	r3, r7, #24
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff fb94 	bl	8007030 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800790c:	f000 bfec 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007910:	4b7d      	ldr	r3, [pc, #500]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800791c:	d103      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800791e:	4b7c      	ldr	r3, [pc, #496]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007920:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007922:	f000 bfe1 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800792a:	f000 bfdd 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800792e:	4b76      	ldr	r3, [pc, #472]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b20      	cmp	r3, #32
 8007938:	d118      	bne.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800793a:	4b73      	ldr	r3, [pc, #460]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d005      	beq.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007946:	4b70      	ldr	r3, [pc, #448]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	0e1b      	lsrs	r3, r3, #24
 800794c:	f003 030f 	and.w	r3, r3, #15
 8007950:	e006      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8007952:	4b6d      	ldr	r3, [pc, #436]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007958:	041b      	lsls	r3, r3, #16
 800795a:	0e1b      	lsrs	r3, r3, #24
 800795c:	f003 030f 	and.w	r3, r3, #15
 8007960:	4a6a      	ldr	r2, [pc, #424]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007966:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007968:	f000 bfbe 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007970:	f000 bfba 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007978:	f000 bfb6 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800797c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007982:	d108      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007988:	4618      	mov	r0, r3
 800798a:	f7ff f9f7 	bl	8006d7c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	637b      	str	r3, [r7, #52]	@ 0x34
 8007992:	f000 bfa9 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	637b      	str	r3, [r7, #52]	@ 0x34
 800799a:	f000 bfa5 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800799e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079a2:	1e51      	subs	r1, r2, #1
 80079a4:	430b      	orrs	r3, r1
 80079a6:	d136      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80079a8:	4b57      	ldr	r3, [pc, #348]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80079aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079ae:	f003 0303 	and.w	r3, r3, #3
 80079b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80079b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d104      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80079ba:	f7fe fb55 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 80079be:	6378      	str	r0, [r7, #52]	@ 0x34
 80079c0:	f000 bf92 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80079c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d104      	bne.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80079ca:	f7fe fa1d 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 80079ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80079d0:	f000 bf8a 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80079d4:	4b4c      	ldr	r3, [pc, #304]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079e0:	d106      	bne.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80079e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d103      	bne.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80079e8:	4b4a      	ldr	r3, [pc, #296]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80079ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ec:	f000 bf7c 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80079f0:	4b45      	ldr	r3, [pc, #276]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80079f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d107      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80079fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d104      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8007a04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a0a:	f000 bf6d 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a12:	f000 bf69 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a1a:	1e91      	subs	r1, r2, #2
 8007a1c:	430b      	orrs	r3, r1
 8007a1e:	d136      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007a20:	4b39      	ldr	r3, [pc, #228]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a26:	f003 030c 	and.w	r3, r3, #12
 8007a2a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d104      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a32:	f7fe fb05 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8007a36:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a38:	f000 bf56 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d104      	bne.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a42:	f7fe f9e1 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8007a46:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a48:	f000 bf4e 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a58:	d106      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d103      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8007a60:	4b2c      	ldr	r3, [pc, #176]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a64:	f000 bf40 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007a68:	4b27      	ldr	r3, [pc, #156]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d107      	bne.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	2b0c      	cmp	r3, #12
 8007a7a:	d104      	bne.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8007a7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a82:	f000 bf31 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a8a:	f000 bf2d 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a92:	1f11      	subs	r1, r2, #4
 8007a94:	430b      	orrs	r3, r1
 8007a96:	d13f      	bne.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007a98:	4b1b      	ldr	r3, [pc, #108]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a9e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007aa2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d104      	bne.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007aaa:	f7fe fac9 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8007aae:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ab0:	f000 bf1a 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab6:	2b10      	cmp	r3, #16
 8007ab8:	d104      	bne.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007aba:	f7fe f9a5 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8007abe:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ac0:	f000 bf12 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007ac4:	4b10      	ldr	r3, [pc, #64]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ad0:	d106      	bne.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad4:	2b20      	cmp	r3, #32
 8007ad6:	d103      	bne.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8007ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8007adc:	f000 bf04 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007ae0:	4b09      	ldr	r3, [pc, #36]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007ae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d107      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af0:	2b30      	cmp	r3, #48	@ 0x30
 8007af2:	d104      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8007af4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007afa:	f000 bef5 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b02:	f000 bef1 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007b06:	bf00      	nop
 8007b08:	46020c00 	.word	0x46020c00
 8007b0c:	0800b138 	.word	0x0800b138
 8007b10:	02dc6c00 	.word	0x02dc6c00
 8007b14:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b1c:	f1a2 0108 	sub.w	r1, r2, #8
 8007b20:	430b      	orrs	r3, r1
 8007b22:	d136      	bne.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007b24:	4ba4      	ldr	r3, [pc, #656]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b2e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d104      	bne.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007b36:	f7fe fa83 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8007b3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b3c:	f000 bed4 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b42:	2b40      	cmp	r3, #64	@ 0x40
 8007b44:	d104      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b46:	f7fe f95f 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8007b4a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b4c:	f000 becc 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007b50:	4b99      	ldr	r3, [pc, #612]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b5c:	d106      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	2b80      	cmp	r3, #128	@ 0x80
 8007b62:	d103      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8007b64:	4b95      	ldr	r3, [pc, #596]	@ (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b68:	f000 bebe 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007b6c:	4b92      	ldr	r3, [pc, #584]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d107      	bne.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7c:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b7e:	d104      	bne.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8007b80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b86:	f000 beaf 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b8e:	f000 beab 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007b92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b96:	f1a2 0110 	sub.w	r1, r2, #16
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	d139      	bne.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007b9e:	4b86      	ldr	r3, [pc, #536]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ba4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ba8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d104      	bne.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007bb0:	f7fe fa46 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8007bb4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007bb6:	f000 be97 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bc0:	d104      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bc2:	f7fe f921 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8007bc6:	6378      	str	r0, [r7, #52]	@ 0x34
 8007bc8:	f000 be8e 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007bcc:	4b7a      	ldr	r3, [pc, #488]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bd8:	d107      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8007bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007be0:	d103      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8007be2:	4b76      	ldr	r3, [pc, #472]	@ (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007be6:	f000 be7f 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007bea:	4b73      	ldr	r3, [pc, #460]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bf0:	f003 0302 	and.w	r3, r3, #2
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d108      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bfe:	d104      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8007c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c06:	f000 be6f 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c0e:	f000 be6b 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c16:	f1a2 0120 	sub.w	r1, r2, #32
 8007c1a:	430b      	orrs	r3, r1
 8007c1c:	d158      	bne.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007c1e:	4b66      	ldr	r3, [pc, #408]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007c20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c24:	f003 0307 	and.w	r3, r3, #7
 8007c28:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d104      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007c30:	f7fe fa2e 	bl	8006090 <HAL_RCC_GetPCLK3Freq>
 8007c34:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c36:	f000 be57 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d104      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c40:	f7fe f8e2 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8007c44:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c46:	f000 be4f 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007c4a:	4b5b      	ldr	r3, [pc, #364]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c56:	d106      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8007c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d103      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8007c5e:	4b57      	ldr	r3, [pc, #348]	@ (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c62:	f000 be41 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007c66:	4b54      	ldr	r3, [pc, #336]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d107      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8007c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d104      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8007c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c80:	f000 be32 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007c84:	4b4c      	ldr	r3, [pc, #304]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0320 	and.w	r3, r3, #32
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	d11b      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8007c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d118      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c96:	4b48      	ldr	r3, [pc, #288]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d005      	beq.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8007ca2:	4b45      	ldr	r3, [pc, #276]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	0e1b      	lsrs	r3, r3, #24
 8007ca8:	f003 030f 	and.w	r3, r3, #15
 8007cac:	e006      	b.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007cae:	4b42      	ldr	r3, [pc, #264]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007cb4:	041b      	lsls	r3, r3, #16
 8007cb6:	0e1b      	lsrs	r3, r3, #24
 8007cb8:	f003 030f 	and.w	r3, r3, #15
 8007cbc:	4a40      	ldr	r2, [pc, #256]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cc4:	f000 be10 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ccc:	f000 be0c 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	d173      	bne.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007cdc:	4b36      	ldr	r3, [pc, #216]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007cde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ce2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007ce6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cee:	d104      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007cf0:	f7fe f88a 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8007cf4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007cf6:	f000 bdf7 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d00:	d108      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d02:	f107 0318 	add.w	r3, r7, #24
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7ff f992 	bl	8007030 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d10:	f000 bdea 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d104      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007d1a:	f7fe f977 	bl	800600c <HAL_RCC_GetHCLKFreq>
 8007d1e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d20:	f000 bde2 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d26:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007d2a:	d122      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007d2c:	4b22      	ldr	r3, [pc, #136]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0320 	and.w	r3, r3, #32
 8007d34:	2b20      	cmp	r3, #32
 8007d36:	d118      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d38:	4b1f      	ldr	r3, [pc, #124]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d005      	beq.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8007d44:	4b1c      	ldr	r3, [pc, #112]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	0e1b      	lsrs	r3, r3, #24
 8007d4a:	f003 030f 	and.w	r3, r3, #15
 8007d4e:	e006      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007d50:	4b19      	ldr	r3, [pc, #100]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d56:	041b      	lsls	r3, r3, #16
 8007d58:	0e1b      	lsrs	r3, r3, #24
 8007d5a:	f003 030f 	and.w	r3, r3, #15
 8007d5e:	4a18      	ldr	r2, [pc, #96]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d66:	f000 bdbf 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d6e:	f000 bdbb 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007d72:	4b11      	ldr	r3, [pc, #68]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d7e:	d107      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8007d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d86:	d103      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8007d88:	4b0c      	ldr	r3, [pc, #48]	@ (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d8c:	f000 bdac 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007d90:	4b09      	ldr	r3, [pc, #36]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d9c:	d107      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007da4:	d103      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8007da6:	4b05      	ldr	r3, [pc, #20]	@ (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007daa:	f000 bd9d 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007dae:	2300      	movs	r3, #0
 8007db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007db2:	f000 bd99 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007db6:	bf00      	nop
 8007db8:	46020c00 	.word	0x46020c00
 8007dbc:	00f42400 	.word	0x00f42400
 8007dc0:	0800b138 	.word	0x0800b138
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007dcc:	430b      	orrs	r3, r1
 8007dce:	d158      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007dd0:	4bad      	ldr	r3, [pc, #692]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007dd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d84b      	bhi.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007de2:	a201      	add	r2, pc, #4	@ (adr r2, 8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007e21 	.word	0x08007e21
 8007dec:	08007dfd 	.word	0x08007dfd
 8007df0:	08007e0f 	.word	0x08007e0f
 8007df4:	08007e2b 	.word	0x08007e2b
 8007df8:	08007e35 	.word	0x08007e35
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe ffbb 	bl	8006d7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e0a:	f000 bd6d 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e0e:	f107 030c 	add.w	r3, r7, #12
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff fa66 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e1c:	f000 bd64 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007e20:	f7fe f8f4 	bl	800600c <HAL_RCC_GetHCLKFreq>
 8007e24:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007e26:	f000 bd5f 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007e2a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007e2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e30:	f000 bd5a 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e34:	4b94      	ldr	r3, [pc, #592]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0320 	and.w	r3, r3, #32
 8007e3c:	2b20      	cmp	r3, #32
 8007e3e:	d118      	bne.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e40:	4b91      	ldr	r3, [pc, #580]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8007e4c:	4b8e      	ldr	r3, [pc, #568]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	0e1b      	lsrs	r3, r3, #24
 8007e52:	f003 030f 	and.w	r3, r3, #15
 8007e56:	e006      	b.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8007e58:	4b8b      	ldr	r3, [pc, #556]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007e5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e5e:	041b      	lsls	r3, r3, #16
 8007e60:	0e1b      	lsrs	r3, r3, #24
 8007e62:	f003 030f 	and.w	r3, r3, #15
 8007e66:	4a89      	ldr	r2, [pc, #548]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e6c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e6e:	f000 bd3b 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e76:	f000 bd37 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e7e:	f000 bd33 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e86:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007e8a:	430b      	orrs	r3, r1
 8007e8c:	d167      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007e8e:	4b7e      	ldr	r3, [pc, #504]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e94:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007e98:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ea0:	d036      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ea8:	d855      	bhi.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007eb0:	d029      	beq.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007eb8:	d84d      	bhi.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ec0:	d013      	beq.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ec8:	d845      	bhi.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d015      	beq.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ed6:	d13e      	bne.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe ff4d 	bl	8006d7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ee6:	f000 bcff 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eea:	f107 030c 	add.w	r3, r7, #12
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7ff f9f8 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ef8:	f000 bcf6 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007efc:	f7fe f886 	bl	800600c <HAL_RCC_GetHCLKFreq>
 8007f00:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007f02:	f000 bcf1 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007f06:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007f0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f0c:	f000 bcec 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007f10:	4b5d      	ldr	r3, [pc, #372]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0320 	and.w	r3, r3, #32
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	d118      	bne.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8007f28:	4b57      	ldr	r3, [pc, #348]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	0e1b      	lsrs	r3, r3, #24
 8007f2e:	f003 030f 	and.w	r3, r3, #15
 8007f32:	e006      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8007f34:	4b54      	ldr	r3, [pc, #336]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007f36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f3a:	041b      	lsls	r3, r3, #16
 8007f3c:	0e1b      	lsrs	r3, r3, #24
 8007f3e:	f003 030f 	and.w	r3, r3, #15
 8007f42:	4a52      	ldr	r2, [pc, #328]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f48:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f4a:	f000 bccd 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f52:	f000 bcc9 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f5a:	f000 bcc5 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f62:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007f66:	430b      	orrs	r3, r1
 8007f68:	d14c      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007f6a:	4b47      	ldr	r3, [pc, #284]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f74:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d104      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f7c:	f7fe f860 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8007f80:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f82:	f000 bcb1 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f8c:	d104      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f8e:	f7fd ff3b 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8007f92:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f94:	f000 bca8 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007f98:	4b3b      	ldr	r3, [pc, #236]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fa4:	d107      	bne.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fac:	d103      	bne.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8007fae:	4b38      	ldr	r3, [pc, #224]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fb2:	f000 bc99 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007fb6:	4b34      	ldr	r3, [pc, #208]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0320 	and.w	r3, r3, #32
 8007fbe:	2b20      	cmp	r3, #32
 8007fc0:	d11c      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fc8:	d118      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fca:	4b2f      	ldr	r3, [pc, #188]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d005      	beq.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8007fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	0e1b      	lsrs	r3, r3, #24
 8007fdc:	f003 030f 	and.w	r3, r3, #15
 8007fe0:	e006      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8007fe2:	4b29      	ldr	r3, [pc, #164]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007fe8:	041b      	lsls	r3, r3, #16
 8007fea:	0e1b      	lsrs	r3, r3, #24
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	4a26      	ldr	r2, [pc, #152]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff8:	f000 bc76 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008000:	f000 bc72 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008008:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800800c:	430b      	orrs	r3, r1
 800800e:	d152      	bne.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008010:	4b1d      	ldr	r3, [pc, #116]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008016:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800801a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	2b00      	cmp	r3, #0
 8008020:	d104      	bne.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008022:	f7fe f80d 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8008026:	6378      	str	r0, [r7, #52]	@ 0x34
 8008028:	f000 bc5e 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800802c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008032:	d104      	bne.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008034:	f7fd fee8 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8008038:	6378      	str	r0, [r7, #52]	@ 0x34
 800803a:	f000 bc55 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800803e:	4b12      	ldr	r3, [pc, #72]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800804a:	d107      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 800804c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008052:	d103      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8008054:	4b0e      	ldr	r3, [pc, #56]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008056:	637b      	str	r3, [r7, #52]	@ 0x34
 8008058:	f000 bc46 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800805c:	4b0a      	ldr	r3, [pc, #40]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0320 	and.w	r3, r3, #32
 8008064:	2b20      	cmp	r3, #32
 8008066:	d122      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8008068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800806e:	d11e      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008070:	4b05      	ldr	r3, [pc, #20]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00b      	beq.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 800807c:	4b02      	ldr	r3, [pc, #8]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	0e1b      	lsrs	r3, r3, #24
 8008082:	f003 030f 	and.w	r3, r3, #15
 8008086:	e00c      	b.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8008088:	46020c00 	.word	0x46020c00
 800808c:	0800b138 	.word	0x0800b138
 8008090:	00f42400 	.word	0x00f42400
 8008094:	4ba1      	ldr	r3, [pc, #644]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800809a:	041b      	lsls	r3, r3, #16
 800809c:	0e1b      	lsrs	r3, r3, #24
 800809e:	f003 030f 	and.w	r3, r3, #15
 80080a2:	4a9f      	ldr	r2, [pc, #636]	@ (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080aa:	f000 bc1d 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b2:	f000 bc19 	b.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80080b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ba:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80080be:	430b      	orrs	r3, r1
 80080c0:	d151      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80080c2:	4b96      	ldr	r3, [pc, #600]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80080c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080c8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80080cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80080ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80080d2:	d024      	beq.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80080d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80080d8:	d842      	bhi.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80080da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080dc:	2b80      	cmp	r3, #128	@ 0x80
 80080de:	d00d      	beq.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80080e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e2:	2b80      	cmp	r3, #128	@ 0x80
 80080e4:	d83c      	bhi.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80080e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80080ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ee:	2b40      	cmp	r3, #64	@ 0x40
 80080f0:	d011      	beq.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80080f2:	e035      	b.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80080f4:	f7fd ffcc 	bl	8006090 <HAL_RCC_GetPCLK3Freq>
 80080f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80080fa:	e3f5      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080fc:	4b87      	ldr	r3, [pc, #540]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008108:	d102      	bne.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 800810a:	4b86      	ldr	r3, [pc, #536]	@ (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800810c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800810e:	e3eb      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008114:	e3e8      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008116:	f7fd fe77 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 800811a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800811c:	e3e4      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800811e:	4b7f      	ldr	r3, [pc, #508]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b20      	cmp	r3, #32
 8008128:	d117      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800812a:	4b7c      	ldr	r3, [pc, #496]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d005      	beq.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8008136:	4b79      	ldr	r3, [pc, #484]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	0e1b      	lsrs	r3, r3, #24
 800813c:	f003 030f 	and.w	r3, r3, #15
 8008140:	e006      	b.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8008142:	4b76      	ldr	r3, [pc, #472]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008148:	041b      	lsls	r3, r3, #16
 800814a:	0e1b      	lsrs	r3, r3, #24
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	4a73      	ldr	r2, [pc, #460]	@ (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008156:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008158:	e3c6      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800815e:	e3c3      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008164:	e3c0      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800816a:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800816e:	430b      	orrs	r3, r1
 8008170:	d147      	bne.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008172:	4b6a      	ldr	r3, [pc, #424]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008178:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800817c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800817e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008180:	2b00      	cmp	r3, #0
 8008182:	d103      	bne.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008184:	f7fd ff5c 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8008188:	6378      	str	r0, [r7, #52]	@ 0x34
 800818a:	e3ad      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800818c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008192:	d103      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008194:	f7fd fe38 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8008198:	6378      	str	r0, [r7, #52]	@ 0x34
 800819a:	e3a5      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800819c:	4b5f      	ldr	r3, [pc, #380]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081a8:	d106      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80081aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081b0:	d102      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 80081b2:	4b5c      	ldr	r3, [pc, #368]	@ (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80081b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b6:	e397      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80081b8:	4b58      	ldr	r3, [pc, #352]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0320 	and.w	r3, r3, #32
 80081c0:	2b20      	cmp	r3, #32
 80081c2:	d11b      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80081c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80081ca:	d117      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081cc:	4b53      	ldr	r3, [pc, #332]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d005      	beq.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80081d8:	4b50      	ldr	r3, [pc, #320]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	0e1b      	lsrs	r3, r3, #24
 80081de:	f003 030f 	and.w	r3, r3, #15
 80081e2:	e006      	b.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80081e4:	4b4d      	ldr	r3, [pc, #308]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80081e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081ea:	041b      	lsls	r3, r3, #16
 80081ec:	0e1b      	lsrs	r3, r3, #24
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	4a4b      	ldr	r2, [pc, #300]	@ (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081fa:	e375      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008200:	e372      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8008202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008206:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800820a:	430b      	orrs	r3, r1
 800820c:	d164      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800820e:	4b43      	ldr	r3, [pc, #268]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008218:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	2b00      	cmp	r3, #0
 800821e:	d120      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008220:	4b3e      	ldr	r3, [pc, #248]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0320 	and.w	r3, r3, #32
 8008228:	2b20      	cmp	r3, #32
 800822a:	d117      	bne.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800822c:	4b3b      	ldr	r3, [pc, #236]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d005      	beq.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8008238:	4b38      	ldr	r3, [pc, #224]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	0e1b      	lsrs	r3, r3, #24
 800823e:	f003 030f 	and.w	r3, r3, #15
 8008242:	e006      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8008244:	4b35      	ldr	r3, [pc, #212]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800824a:	041b      	lsls	r3, r3, #16
 800824c:	0e1b      	lsrs	r3, r3, #24
 800824e:	f003 030f 	and.w	r3, r3, #15
 8008252:	4a33      	ldr	r2, [pc, #204]	@ (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008258:	637b      	str	r3, [r7, #52]	@ 0x34
 800825a:	e345      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008260:	e342      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008262:	4b2e      	ldr	r3, [pc, #184]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008264:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800826c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008270:	d112      	bne.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8008272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008278:	d10e      	bne.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800827a:	4b28      	ldr	r3, [pc, #160]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800827c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008288:	d102      	bne.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 800828a:	23fa      	movs	r3, #250	@ 0xfa
 800828c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800828e:	e32b      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008290:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008294:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008296:	e327      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008298:	4b20      	ldr	r3, [pc, #128]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082a4:	d106      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80082a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082ac:	d102      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80082ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80082b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082b2:	e319      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80082b4:	4b19      	ldr	r3, [pc, #100]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80082b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d107      	bne.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80082c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082c8:	d103      	bne.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80082ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d0:	e30a      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d6:	e307      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80082d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082dc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80082e0:	430b      	orrs	r3, r1
 80082e2:	d16b      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80082e4:	4b0d      	ldr	r3, [pc, #52]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80082e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082ea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80082ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80082f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d127      	bne.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80082f6:	4b09      	ldr	r3, [pc, #36]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	2b20      	cmp	r3, #32
 8008300:	d11e      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008302:	4b06      	ldr	r3, [pc, #24]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00c      	beq.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 800830e:	4b03      	ldr	r3, [pc, #12]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	0e1b      	lsrs	r3, r3, #24
 8008314:	f003 030f 	and.w	r3, r3, #15
 8008318:	e00d      	b.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800831a:	bf00      	nop
 800831c:	46020c00 	.word	0x46020c00
 8008320:	0800b138 	.word	0x0800b138
 8008324:	00f42400 	.word	0x00f42400
 8008328:	4b94      	ldr	r3, [pc, #592]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800832a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800832e:	041b      	lsls	r3, r3, #16
 8008330:	0e1b      	lsrs	r3, r3, #24
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	4a92      	ldr	r2, [pc, #584]	@ (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800833c:	637b      	str	r3, [r7, #52]	@ 0x34
 800833e:	e2d3      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	637b      	str	r3, [r7, #52]	@ 0x34
 8008344:	e2d0      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008346:	4b8d      	ldr	r3, [pc, #564]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800834c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008350:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008354:	d112      	bne.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8008356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800835c:	d10e      	bne.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800835e:	4b87      	ldr	r3, [pc, #540]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008368:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800836c:	d102      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 800836e:	23fa      	movs	r3, #250	@ 0xfa
 8008370:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008372:	e2b9      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008374:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008378:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800837a:	e2b5      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800837c:	4b7f      	ldr	r3, [pc, #508]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008388:	d106      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 800838a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008390:	d102      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8008392:	4b7c      	ldr	r3, [pc, #496]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008394:	637b      	str	r3, [r7, #52]	@ 0x34
 8008396:	e2a7      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008398:	4b78      	ldr	r3, [pc, #480]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800839a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800839e:	f003 0302 	and.w	r3, r3, #2
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d107      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 80083a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083ac:	d103      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 80083ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b4:	e298      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ba:	e295      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80083bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083c0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80083c4:	430b      	orrs	r3, r1
 80083c6:	d147      	bne.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80083c8:	4b6c      	ldr	r3, [pc, #432]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80083ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083ce:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80083d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80083d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d103      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80083da:	f7fd fe31 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 80083de:	6378      	str	r0, [r7, #52]	@ 0x34
 80083e0:	e282      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80083e2:	4b66      	ldr	r3, [pc, #408]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80083e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083f0:	d112      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083f8:	d10e      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083fa:	4b60      	ldr	r3, [pc, #384]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80083fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008408:	d102      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 800840a:	23fa      	movs	r3, #250	@ 0xfa
 800840c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800840e:	e26b      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008410:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008414:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008416:	e267      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008418:	4b58      	ldr	r3, [pc, #352]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008424:	d106      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8008426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008428:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800842c:	d102      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 800842e:	4b55      	ldr	r3, [pc, #340]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008430:	637b      	str	r3, [r7, #52]	@ 0x34
 8008432:	e259      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008434:	4b51      	ldr	r3, [pc, #324]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b02      	cmp	r3, #2
 8008440:	d107      	bne.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8008442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008444:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008448:	d103      	bne.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 800844a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800844e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008450:	e24a      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	637b      	str	r3, [r7, #52]	@ 0x34
 8008456:	e247      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800845c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8008460:	430b      	orrs	r3, r1
 8008462:	d12d      	bne.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008464:	4b45      	ldr	r3, [pc, #276]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800846a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800846e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008470:	4b42      	ldr	r3, [pc, #264]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008478:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800847c:	d105      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	2b00      	cmp	r3, #0
 8008482:	d102      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8008484:	4b3f      	ldr	r3, [pc, #252]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008486:	637b      	str	r3, [r7, #52]	@ 0x34
 8008488:	e22e      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800848a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008490:	d107      	bne.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008492:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fc70 	bl	8006d7c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800849c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849e:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a0:	e222      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80084a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084a8:	d107      	bne.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084aa:	f107 0318 	add.w	r3, r7, #24
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fdbe 	bl	8007030 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084b8:	e216      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80084be:	e213      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80084c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084c4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80084c8:	430b      	orrs	r3, r1
 80084ca:	d15d      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80084cc:	4b2b      	ldr	r3, [pc, #172]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80084ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084d2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80084d6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80084d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084de:	d028      	beq.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 80084e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084e6:	d845      	bhi.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80084e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084ee:	d013      	beq.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 80084f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084f6:	d83d      	bhi.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80084f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d004      	beq.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80084fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008500:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008504:	d004      	beq.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8008506:	e035      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008508:	f7fd fdae 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 800850c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800850e:	e1eb      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008510:	f7fd fc7a 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8008514:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008516:	e1e7      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008518:	4b18      	ldr	r3, [pc, #96]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008524:	d102      	bne.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8008526:	4b17      	ldr	r3, [pc, #92]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008528:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800852a:	e1dd      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800852c:	2300      	movs	r3, #0
 800852e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008530:	e1da      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008532:	4b12      	ldr	r3, [pc, #72]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0320 	and.w	r3, r3, #32
 800853a:	2b20      	cmp	r3, #32
 800853c:	d117      	bne.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800853e:	4b0f      	ldr	r3, [pc, #60]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d005      	beq.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800854a:	4b0c      	ldr	r3, [pc, #48]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	0e1b      	lsrs	r3, r3, #24
 8008550:	f003 030f 	and.w	r3, r3, #15
 8008554:	e006      	b.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8008556:	4b09      	ldr	r3, [pc, #36]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800855c:	041b      	lsls	r3, r3, #16
 800855e:	0e1b      	lsrs	r3, r3, #24
 8008560:	f003 030f 	and.w	r3, r3, #15
 8008564:	4a06      	ldr	r2, [pc, #24]	@ (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800856a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800856c:	e1bc      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800856e:	2300      	movs	r3, #0
 8008570:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008572:	e1b9      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008578:	e1b6      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800857a:	bf00      	nop
 800857c:	46020c00 	.word	0x46020c00
 8008580:	0800b138 	.word	0x0800b138
 8008584:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800858c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8008590:	430b      	orrs	r3, r1
 8008592:	d156      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008594:	4ba5      	ldr	r3, [pc, #660]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800859a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800859e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80085a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085a6:	d028      	beq.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 80085a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085ae:	d845      	bhi.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80085b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085b6:	d013      	beq.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085be:	d83d      	bhi.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80085c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d004      	beq.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 80085c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085cc:	d004      	beq.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80085ce:	e035      	b.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80085d0:	f7fd fd36 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 80085d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80085d6:	e187      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80085d8:	f7fd fc16 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 80085dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80085de:	e183      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085e0:	4b92      	ldr	r3, [pc, #584]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085ec:	d102      	bne.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 80085ee:	4b90      	ldr	r3, [pc, #576]	@ (8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80085f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80085f2:	e179      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085f8:	e176      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80085fa:	4b8c      	ldr	r3, [pc, #560]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b20      	cmp	r3, #32
 8008604:	d117      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008606:	4b89      	ldr	r3, [pc, #548]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d005      	beq.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8008612:	4b86      	ldr	r3, [pc, #536]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	0e1b      	lsrs	r3, r3, #24
 8008618:	f003 030f 	and.w	r3, r3, #15
 800861c:	e006      	b.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800861e:	4b83      	ldr	r3, [pc, #524]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008620:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008624:	041b      	lsls	r3, r3, #16
 8008626:	0e1b      	lsrs	r3, r3, #24
 8008628:	f003 030f 	and.w	r3, r3, #15
 800862c:	4a81      	ldr	r2, [pc, #516]	@ (8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800862e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008632:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008634:	e158      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800863a:	e155      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008640:	e152      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008642:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008646:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800864a:	430b      	orrs	r3, r1
 800864c:	d177      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800864e:	4b77      	ldr	r3, [pc, #476]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008654:	f003 0318 	and.w	r3, r3, #24
 8008658:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	2b18      	cmp	r3, #24
 800865e:	d86b      	bhi.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8008660:	a201      	add	r2, pc, #4	@ (adr r2, 8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8008662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008666:	bf00      	nop
 8008668:	080086cd 	.word	0x080086cd
 800866c:	08008739 	.word	0x08008739
 8008670:	08008739 	.word	0x08008739
 8008674:	08008739 	.word	0x08008739
 8008678:	08008739 	.word	0x08008739
 800867c:	08008739 	.word	0x08008739
 8008680:	08008739 	.word	0x08008739
 8008684:	08008739 	.word	0x08008739
 8008688:	080086d5 	.word	0x080086d5
 800868c:	08008739 	.word	0x08008739
 8008690:	08008739 	.word	0x08008739
 8008694:	08008739 	.word	0x08008739
 8008698:	08008739 	.word	0x08008739
 800869c:	08008739 	.word	0x08008739
 80086a0:	08008739 	.word	0x08008739
 80086a4:	08008739 	.word	0x08008739
 80086a8:	080086dd 	.word	0x080086dd
 80086ac:	08008739 	.word	0x08008739
 80086b0:	08008739 	.word	0x08008739
 80086b4:	08008739 	.word	0x08008739
 80086b8:	08008739 	.word	0x08008739
 80086bc:	08008739 	.word	0x08008739
 80086c0:	08008739 	.word	0x08008739
 80086c4:	08008739 	.word	0x08008739
 80086c8:	080086f7 	.word	0x080086f7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80086cc:	f7fd fce0 	bl	8006090 <HAL_RCC_GetPCLK3Freq>
 80086d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80086d2:	e109      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80086d4:	f7fd fb98 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 80086d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80086da:	e105      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086dc:	4b53      	ldr	r3, [pc, #332]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086e8:	d102      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 80086ea:	4b51      	ldr	r3, [pc, #324]	@ (8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80086ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086ee:	e0fb      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086f4:	e0f8      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80086f6:	4b4d      	ldr	r3, [pc, #308]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0320 	and.w	r3, r3, #32
 80086fe:	2b20      	cmp	r3, #32
 8008700:	d117      	bne.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008702:	4b4a      	ldr	r3, [pc, #296]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d005      	beq.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800870e:	4b47      	ldr	r3, [pc, #284]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	0e1b      	lsrs	r3, r3, #24
 8008714:	f003 030f 	and.w	r3, r3, #15
 8008718:	e006      	b.n	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800871a:	4b44      	ldr	r3, [pc, #272]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800871c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008720:	041b      	lsls	r3, r3, #16
 8008722:	0e1b      	lsrs	r3, r3, #24
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	4a42      	ldr	r2, [pc, #264]	@ (8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800872a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800872e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008730:	e0da      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008736:	e0d7      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008738:	2300      	movs	r3, #0
 800873a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800873c:	e0d4      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800873e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008742:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8008746:	430b      	orrs	r3, r1
 8008748:	d155      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800874a:	4b38      	ldr	r3, [pc, #224]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800874c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008750:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008754:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008758:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800875c:	d013      	beq.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800875e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008760:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008764:	d844      	bhi.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008768:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800876c:	d013      	beq.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008774:	d83c      	bhi.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	2b00      	cmp	r3, #0
 800877a:	d014      	beq.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 800877c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008782:	d014      	beq.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8008784:	e034      	b.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008786:	f107 0318 	add.w	r3, r7, #24
 800878a:	4618      	mov	r0, r3
 800878c:	f7fe fc50 	bl	8007030 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008794:	e0a8      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe faee 	bl	8006d7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80087a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087a4:	e0a0      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80087a6:	f7fd fb2f 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 80087aa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80087ac:	e09c      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80087ae:	4b1f      	ldr	r3, [pc, #124]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b20      	cmp	r3, #32
 80087b8:	d117      	bne.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80087ba:	4b1c      	ldr	r3, [pc, #112]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d005      	beq.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80087c6:	4b19      	ldr	r3, [pc, #100]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	0e1b      	lsrs	r3, r3, #24
 80087cc:	f003 030f 	and.w	r3, r3, #15
 80087d0:	e006      	b.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 80087d2:	4b16      	ldr	r3, [pc, #88]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80087d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087d8:	041b      	lsls	r3, r3, #16
 80087da:	0e1b      	lsrs	r3, r3, #24
 80087dc:	f003 030f 	and.w	r3, r3, #15
 80087e0:	4a14      	ldr	r2, [pc, #80]	@ (8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80087e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087e8:	e07e      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087ee:	e07b      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087f4:	e078      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80087f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087fa:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80087fe:	430b      	orrs	r3, r1
 8008800:	d138      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008802:	4b0a      	ldr	r3, [pc, #40]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008808:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800880c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800880e:	4b07      	ldr	r3, [pc, #28]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008814:	f003 0302 	and.w	r3, r3, #2
 8008818:	2b02      	cmp	r3, #2
 800881a:	d10d      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800881c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8008822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008826:	637b      	str	r3, [r7, #52]	@ 0x34
 8008828:	e05e      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800882a:	bf00      	nop
 800882c:	46020c00 	.word	0x46020c00
 8008830:	00f42400 	.word	0x00f42400
 8008834:	0800b138 	.word	0x0800b138
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008838:	4b2e      	ldr	r3, [pc, #184]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800883a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800883e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008846:	d112      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800884e:	d10e      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008850:	4b28      	ldr	r3, [pc, #160]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800885a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800885e:	d102      	bne.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8008860:	23fa      	movs	r3, #250	@ 0xfa
 8008862:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008864:	e040      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008866:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800886a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800886c:	e03c      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	637b      	str	r3, [r7, #52]	@ 0x34
 8008872:	e039      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008874:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008878:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800887c:	430b      	orrs	r3, r1
 800887e:	d131      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008880:	4b1c      	ldr	r3, [pc, #112]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008882:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008886:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800888a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800888c:	4b19      	ldr	r3, [pc, #100]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008898:	d105      	bne.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	2b00      	cmp	r3, #0
 800889e:	d102      	bne.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 80088a0:	4b15      	ldr	r3, [pc, #84]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 80088a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088a4:	e020      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80088a6:	4b13      	ldr	r3, [pc, #76]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088b2:	d106      	bne.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80088b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088ba:	d102      	bne.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80088bc:	4b0f      	ldr	r3, [pc, #60]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80088be:	637b      	str	r3, [r7, #52]	@ 0x34
 80088c0:	e012      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80088c2:	4b0c      	ldr	r3, [pc, #48]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088ce:	d106      	bne.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80088d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088d6:	d102      	bne.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 80088d8:	4b09      	ldr	r3, [pc, #36]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80088da:	637b      	str	r3, [r7, #52]	@ 0x34
 80088dc:	e004      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80088e2:	e001      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80088e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3738      	adds	r7, #56	@ 0x38
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	46020c00 	.word	0x46020c00
 80088f8:	02dc6c00 	.word	0x02dc6c00
 80088fc:	016e3600 	.word	0x016e3600
 8008900:	00f42400 	.word	0x00f42400

08008904 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800890c:	4b47      	ldr	r3, [pc, #284]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a46      	ldr	r2, [pc, #280]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 8008912:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008916:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008918:	f7f9 f988 	bl	8001c2c <HAL_GetTick>
 800891c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800891e:	e008      	b.n	8008932 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008920:	f7f9 f984 	bl	8001c2c <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	2b02      	cmp	r3, #2
 800892c:	d901      	bls.n	8008932 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e077      	b.n	8008a22 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008932:	4b3e      	ldr	r3, [pc, #248]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1f0      	bne.n	8008920 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800893e:	4b3b      	ldr	r3, [pc, #236]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 8008940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008942:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008946:	f023 0303 	bic.w	r3, r3, #3
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	6811      	ldr	r1, [r2, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	6852      	ldr	r2, [r2, #4]
 8008952:	3a01      	subs	r2, #1
 8008954:	0212      	lsls	r2, r2, #8
 8008956:	430a      	orrs	r2, r1
 8008958:	4934      	ldr	r1, [pc, #208]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 800895a:	4313      	orrs	r3, r2
 800895c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800895e:	4b33      	ldr	r3, [pc, #204]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 8008960:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008962:	4b33      	ldr	r3, [pc, #204]	@ (8008a30 <RCCEx_PLL2_Config+0x12c>)
 8008964:	4013      	ands	r3, r2
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	6892      	ldr	r2, [r2, #8]
 800896a:	3a01      	subs	r2, #1
 800896c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	68d2      	ldr	r2, [r2, #12]
 8008974:	3a01      	subs	r2, #1
 8008976:	0252      	lsls	r2, r2, #9
 8008978:	b292      	uxth	r2, r2
 800897a:	4311      	orrs	r1, r2
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	6912      	ldr	r2, [r2, #16]
 8008980:	3a01      	subs	r2, #1
 8008982:	0412      	lsls	r2, r2, #16
 8008984:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008988:	4311      	orrs	r1, r2
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	6952      	ldr	r2, [r2, #20]
 800898e:	3a01      	subs	r2, #1
 8008990:	0612      	lsls	r2, r2, #24
 8008992:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008996:	430a      	orrs	r2, r1
 8008998:	4924      	ldr	r1, [pc, #144]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 800899a:	4313      	orrs	r3, r2
 800899c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800899e:	4b23      	ldr	r3, [pc, #140]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 80089a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a2:	f023 020c 	bic.w	r2, r3, #12
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	4920      	ldr	r1, [pc, #128]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80089b0:	4b1e      	ldr	r3, [pc, #120]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 80089b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a1b      	ldr	r3, [r3, #32]
 80089b8:	491c      	ldr	r1, [pc, #112]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80089be:	4b1b      	ldr	r3, [pc, #108]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 80089c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c2:	4a1a      	ldr	r2, [pc, #104]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 80089c4:	f023 0310 	bic.w	r3, r3, #16
 80089c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80089ca:	4b18      	ldr	r3, [pc, #96]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 80089cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089d2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	69d2      	ldr	r2, [r2, #28]
 80089da:	00d2      	lsls	r2, r2, #3
 80089dc:	4913      	ldr	r1, [pc, #76]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80089e2:	4b12      	ldr	r3, [pc, #72]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 80089e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e6:	4a11      	ldr	r2, [pc, #68]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 80089e8:	f043 0310 	orr.w	r3, r3, #16
 80089ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80089ee:	4b0f      	ldr	r3, [pc, #60]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a0e      	ldr	r2, [pc, #56]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 80089f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80089fa:	f7f9 f917 	bl	8001c2c <HAL_GetTick>
 80089fe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a00:	e008      	b.n	8008a14 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a02:	f7f9 f913 	bl	8001c2c <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d901      	bls.n	8008a14 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e006      	b.n	8008a22 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a14:	4b05      	ldr	r3, [pc, #20]	@ (8008a2c <RCCEx_PLL2_Config+0x128>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d0f0      	beq.n	8008a02 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008a20:	2300      	movs	r3, #0

}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	46020c00 	.word	0x46020c00
 8008a30:	80800000 	.word	0x80800000

08008a34 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008a3c:	4b47      	ldr	r3, [pc, #284]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a46      	ldr	r2, [pc, #280]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008a42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a46:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a48:	f7f9 f8f0 	bl	8001c2c <HAL_GetTick>
 8008a4c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a4e:	e008      	b.n	8008a62 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a50:	f7f9 f8ec 	bl	8001c2c <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d901      	bls.n	8008a62 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e077      	b.n	8008b52 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a62:	4b3e      	ldr	r3, [pc, #248]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1f0      	bne.n	8008a50 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a72:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008a76:	f023 0303 	bic.w	r3, r3, #3
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	6811      	ldr	r1, [r2, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6852      	ldr	r2, [r2, #4]
 8008a82:	3a01      	subs	r2, #1
 8008a84:	0212      	lsls	r2, r2, #8
 8008a86:	430a      	orrs	r2, r1
 8008a88:	4934      	ldr	r1, [pc, #208]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	630b      	str	r3, [r1, #48]	@ 0x30
 8008a8e:	4b33      	ldr	r3, [pc, #204]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a92:	4b33      	ldr	r3, [pc, #204]	@ (8008b60 <RCCEx_PLL3_Config+0x12c>)
 8008a94:	4013      	ands	r3, r2
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	6892      	ldr	r2, [r2, #8]
 8008a9a:	3a01      	subs	r2, #1
 8008a9c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	68d2      	ldr	r2, [r2, #12]
 8008aa4:	3a01      	subs	r2, #1
 8008aa6:	0252      	lsls	r2, r2, #9
 8008aa8:	b292      	uxth	r2, r2
 8008aaa:	4311      	orrs	r1, r2
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	6912      	ldr	r2, [r2, #16]
 8008ab0:	3a01      	subs	r2, #1
 8008ab2:	0412      	lsls	r2, r2, #16
 8008ab4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008ab8:	4311      	orrs	r1, r2
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	6952      	ldr	r2, [r2, #20]
 8008abe:	3a01      	subs	r2, #1
 8008ac0:	0612      	lsls	r2, r2, #24
 8008ac2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	4924      	ldr	r1, [pc, #144]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008ace:	4b23      	ldr	r3, [pc, #140]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ad2:	f023 020c 	bic.w	r2, r3, #12
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	4920      	ldr	r1, [pc, #128]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008adc:	4313      	orrs	r3, r2
 8008ade:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008ae2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a1b      	ldr	r3, [r3, #32]
 8008ae8:	491c      	ldr	r1, [pc, #112]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008aee:	4b1b      	ldr	r3, [pc, #108]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af2:	4a1a      	ldr	r2, [pc, #104]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008af4:	f023 0310 	bic.w	r3, r3, #16
 8008af8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008afa:	4b18      	ldr	r3, [pc, #96]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008afe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b02:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	69d2      	ldr	r2, [r2, #28]
 8008b0a:	00d2      	lsls	r2, r2, #3
 8008b0c:	4913      	ldr	r1, [pc, #76]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008b12:	4b12      	ldr	r3, [pc, #72]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b16:	4a11      	ldr	r2, [pc, #68]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008b18:	f043 0310 	orr.w	r3, r3, #16
 8008b1c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a0e      	ldr	r2, [pc, #56]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b28:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b2a:	f7f9 f87f 	bl	8001c2c <HAL_GetTick>
 8008b2e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b30:	e008      	b.n	8008b44 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b32:	f7f9 f87b 	bl	8001c2c <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d901      	bls.n	8008b44 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e006      	b.n	8008b52 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b44:	4b05      	ldr	r3, [pc, #20]	@ (8008b5c <RCCEx_PLL3_Config+0x128>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0f0      	beq.n	8008b32 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	46020c00 	.word	0x46020c00
 8008b60:	80800000 	.word	0x80800000

08008b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e049      	b.n	8008c0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d106      	bne.n	8008b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7f8 fbc2 	bl	8001314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	f000 fbe8 	bl	8009378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
	...

08008c14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d001      	beq.n	8008c2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e06a      	b.n	8008d02 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a35      	ldr	r2, [pc, #212]	@ (8008d10 <HAL_TIM_Base_Start+0xfc>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d040      	beq.n	8008cc0 <HAL_TIM_Base_Start+0xac>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a34      	ldr	r2, [pc, #208]	@ (8008d14 <HAL_TIM_Base_Start+0x100>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d03b      	beq.n	8008cc0 <HAL_TIM_Base_Start+0xac>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c50:	d036      	beq.n	8008cc0 <HAL_TIM_Base_Start+0xac>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c5a:	d031      	beq.n	8008cc0 <HAL_TIM_Base_Start+0xac>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a2d      	ldr	r2, [pc, #180]	@ (8008d18 <HAL_TIM_Base_Start+0x104>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d02c      	beq.n	8008cc0 <HAL_TIM_Base_Start+0xac>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8008d1c <HAL_TIM_Base_Start+0x108>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d027      	beq.n	8008cc0 <HAL_TIM_Base_Start+0xac>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a2a      	ldr	r2, [pc, #168]	@ (8008d20 <HAL_TIM_Base_Start+0x10c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d022      	beq.n	8008cc0 <HAL_TIM_Base_Start+0xac>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a29      	ldr	r2, [pc, #164]	@ (8008d24 <HAL_TIM_Base_Start+0x110>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d01d      	beq.n	8008cc0 <HAL_TIM_Base_Start+0xac>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a27      	ldr	r2, [pc, #156]	@ (8008d28 <HAL_TIM_Base_Start+0x114>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d018      	beq.n	8008cc0 <HAL_TIM_Base_Start+0xac>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a26      	ldr	r2, [pc, #152]	@ (8008d2c <HAL_TIM_Base_Start+0x118>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d013      	beq.n	8008cc0 <HAL_TIM_Base_Start+0xac>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a24      	ldr	r2, [pc, #144]	@ (8008d30 <HAL_TIM_Base_Start+0x11c>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d00e      	beq.n	8008cc0 <HAL_TIM_Base_Start+0xac>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a23      	ldr	r2, [pc, #140]	@ (8008d34 <HAL_TIM_Base_Start+0x120>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d009      	beq.n	8008cc0 <HAL_TIM_Base_Start+0xac>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a21      	ldr	r2, [pc, #132]	@ (8008d38 <HAL_TIM_Base_Start+0x124>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d004      	beq.n	8008cc0 <HAL_TIM_Base_Start+0xac>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a20      	ldr	r2, [pc, #128]	@ (8008d3c <HAL_TIM_Base_Start+0x128>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d115      	bne.n	8008cec <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689a      	ldr	r2, [r3, #8]
 8008cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8008d40 <HAL_TIM_Base_Start+0x12c>)
 8008cc8:	4013      	ands	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b06      	cmp	r3, #6
 8008cd0:	d015      	beq.n	8008cfe <HAL_TIM_Base_Start+0xea>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cd8:	d011      	beq.n	8008cfe <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f042 0201 	orr.w	r2, r2, #1
 8008ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cea:	e008      	b.n	8008cfe <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f042 0201 	orr.w	r2, r2, #1
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	e000      	b.n	8008d00 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	40012c00 	.word	0x40012c00
 8008d14:	50012c00 	.word	0x50012c00
 8008d18:	40000400 	.word	0x40000400
 8008d1c:	50000400 	.word	0x50000400
 8008d20:	40000800 	.word	0x40000800
 8008d24:	50000800 	.word	0x50000800
 8008d28:	40000c00 	.word	0x40000c00
 8008d2c:	50000c00 	.word	0x50000c00
 8008d30:	40013400 	.word	0x40013400
 8008d34:	50013400 	.word	0x50013400
 8008d38:	40014000 	.word	0x40014000
 8008d3c:	50014000 	.word	0x50014000
 8008d40:	00010007 	.word	0x00010007

08008d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d001      	beq.n	8008d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e072      	b.n	8008e42 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68da      	ldr	r2, [r3, #12]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f042 0201 	orr.w	r2, r2, #1
 8008d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a35      	ldr	r2, [pc, #212]	@ (8008e50 <HAL_TIM_Base_Start_IT+0x10c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d040      	beq.n	8008e00 <HAL_TIM_Base_Start_IT+0xbc>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a34      	ldr	r2, [pc, #208]	@ (8008e54 <HAL_TIM_Base_Start_IT+0x110>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d03b      	beq.n	8008e00 <HAL_TIM_Base_Start_IT+0xbc>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d90:	d036      	beq.n	8008e00 <HAL_TIM_Base_Start_IT+0xbc>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d9a:	d031      	beq.n	8008e00 <HAL_TIM_Base_Start_IT+0xbc>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a2d      	ldr	r2, [pc, #180]	@ (8008e58 <HAL_TIM_Base_Start_IT+0x114>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d02c      	beq.n	8008e00 <HAL_TIM_Base_Start_IT+0xbc>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a2c      	ldr	r2, [pc, #176]	@ (8008e5c <HAL_TIM_Base_Start_IT+0x118>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d027      	beq.n	8008e00 <HAL_TIM_Base_Start_IT+0xbc>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a2a      	ldr	r2, [pc, #168]	@ (8008e60 <HAL_TIM_Base_Start_IT+0x11c>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d022      	beq.n	8008e00 <HAL_TIM_Base_Start_IT+0xbc>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a29      	ldr	r2, [pc, #164]	@ (8008e64 <HAL_TIM_Base_Start_IT+0x120>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d01d      	beq.n	8008e00 <HAL_TIM_Base_Start_IT+0xbc>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a27      	ldr	r2, [pc, #156]	@ (8008e68 <HAL_TIM_Base_Start_IT+0x124>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d018      	beq.n	8008e00 <HAL_TIM_Base_Start_IT+0xbc>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a26      	ldr	r2, [pc, #152]	@ (8008e6c <HAL_TIM_Base_Start_IT+0x128>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d013      	beq.n	8008e00 <HAL_TIM_Base_Start_IT+0xbc>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a24      	ldr	r2, [pc, #144]	@ (8008e70 <HAL_TIM_Base_Start_IT+0x12c>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d00e      	beq.n	8008e00 <HAL_TIM_Base_Start_IT+0xbc>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a23      	ldr	r2, [pc, #140]	@ (8008e74 <HAL_TIM_Base_Start_IT+0x130>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d009      	beq.n	8008e00 <HAL_TIM_Base_Start_IT+0xbc>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a21      	ldr	r2, [pc, #132]	@ (8008e78 <HAL_TIM_Base_Start_IT+0x134>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d004      	beq.n	8008e00 <HAL_TIM_Base_Start_IT+0xbc>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a20      	ldr	r2, [pc, #128]	@ (8008e7c <HAL_TIM_Base_Start_IT+0x138>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d115      	bne.n	8008e2c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	4b1e      	ldr	r3, [pc, #120]	@ (8008e80 <HAL_TIM_Base_Start_IT+0x13c>)
 8008e08:	4013      	ands	r3, r2
 8008e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2b06      	cmp	r3, #6
 8008e10:	d015      	beq.n	8008e3e <HAL_TIM_Base_Start_IT+0xfa>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e18:	d011      	beq.n	8008e3e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f042 0201 	orr.w	r2, r2, #1
 8008e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e2a:	e008      	b.n	8008e3e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f042 0201 	orr.w	r2, r2, #1
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	e000      	b.n	8008e40 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	40012c00 	.word	0x40012c00
 8008e54:	50012c00 	.word	0x50012c00
 8008e58:	40000400 	.word	0x40000400
 8008e5c:	50000400 	.word	0x50000400
 8008e60:	40000800 	.word	0x40000800
 8008e64:	50000800 	.word	0x50000800
 8008e68:	40000c00 	.word	0x40000c00
 8008e6c:	50000c00 	.word	0x50000c00
 8008e70:	40013400 	.word	0x40013400
 8008e74:	50013400 	.word	0x50013400
 8008e78:	40014000 	.word	0x40014000
 8008e7c:	50014000 	.word	0x50014000
 8008e80:	00010007 	.word	0x00010007

08008e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d020      	beq.n	8008ee8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f003 0302 	and.w	r3, r3, #2
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d01b      	beq.n	8008ee8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f06f 0202 	mvn.w	r2, #2
 8008eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	f003 0303 	and.w	r3, r3, #3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fa34 	bl	800933c <HAL_TIM_IC_CaptureCallback>
 8008ed4:	e005      	b.n	8008ee2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fa26 	bl	8009328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fa37 	bl	8009350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f003 0304 	and.w	r3, r3, #4
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d020      	beq.n	8008f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f003 0304 	and.w	r3, r3, #4
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d01b      	beq.n	8008f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f06f 0204 	mvn.w	r2, #4
 8008f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2202      	movs	r2, #2
 8008f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d003      	beq.n	8008f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fa0e 	bl	800933c <HAL_TIM_IC_CaptureCallback>
 8008f20:	e005      	b.n	8008f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa00 	bl	8009328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fa11 	bl	8009350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f003 0308 	and.w	r3, r3, #8
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d020      	beq.n	8008f80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f003 0308 	and.w	r3, r3, #8
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01b      	beq.n	8008f80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f06f 0208 	mvn.w	r2, #8
 8008f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2204      	movs	r2, #4
 8008f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	f003 0303 	and.w	r3, r3, #3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d003      	beq.n	8008f6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f9e8 	bl	800933c <HAL_TIM_IC_CaptureCallback>
 8008f6c:	e005      	b.n	8008f7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f9da 	bl	8009328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f9eb 	bl	8009350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f003 0310 	and.w	r3, r3, #16
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d020      	beq.n	8008fcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f003 0310 	and.w	r3, r3, #16
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d01b      	beq.n	8008fcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f06f 0210 	mvn.w	r2, #16
 8008f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2208      	movs	r2, #8
 8008fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f9c2 	bl	800933c <HAL_TIM_IC_CaptureCallback>
 8008fb8:	e005      	b.n	8008fc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f9b4 	bl	8009328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f9c5 	bl	8009350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00c      	beq.n	8008ff0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f003 0301 	and.w	r3, r3, #1
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d007      	beq.n	8008ff0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f06f 0201 	mvn.w	r2, #1
 8008fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7f7 fe8e 	bl	8000d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d104      	bne.n	8009004 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00c      	beq.n	800901e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800900a:	2b00      	cmp	r3, #0
 800900c:	d007      	beq.n	800901e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fc15 	bl	8009848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00c      	beq.n	8009042 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800902e:	2b00      	cmp	r3, #0
 8009030:	d007      	beq.n	8009042 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800903a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fc0d 	bl	800985c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00c      	beq.n	8009066 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009052:	2b00      	cmp	r3, #0
 8009054:	d007      	beq.n	8009066 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800905e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f97f 	bl	8009364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	f003 0320 	and.w	r3, r3, #32
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00c      	beq.n	800908a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f003 0320 	and.w	r3, r3, #32
 8009076:	2b00      	cmp	r3, #0
 8009078:	d007      	beq.n	800908a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f06f 0220 	mvn.w	r2, #32
 8009082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fbd5 	bl	8009834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00c      	beq.n	80090ae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d007      	beq.n	80090ae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80090a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fbe1 	bl	8009870 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00c      	beq.n	80090d2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d007      	beq.n	80090d2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80090ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fbd9 	bl	8009884 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00c      	beq.n	80090f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d007      	beq.n	80090f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80090ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fbd1 	bl	8009898 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00c      	beq.n	800911a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d007      	beq.n	800911a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fbc9 	bl	80098ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800911a:	bf00      	nop
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009138:	2b01      	cmp	r3, #1
 800913a:	d101      	bne.n	8009140 <HAL_TIM_ConfigClockSource+0x1c>
 800913c:	2302      	movs	r3, #2
 800913e:	e0e6      	b.n	800930e <HAL_TIM_ConfigClockSource+0x1ea>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2202      	movs	r2, #2
 800914c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800915e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800916a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a67      	ldr	r2, [pc, #412]	@ (8009318 <HAL_TIM_ConfigClockSource+0x1f4>)
 800917a:	4293      	cmp	r3, r2
 800917c:	f000 80b1 	beq.w	80092e2 <HAL_TIM_ConfigClockSource+0x1be>
 8009180:	4a65      	ldr	r2, [pc, #404]	@ (8009318 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009182:	4293      	cmp	r3, r2
 8009184:	f200 80b6 	bhi.w	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009188:	4a64      	ldr	r2, [pc, #400]	@ (800931c <HAL_TIM_ConfigClockSource+0x1f8>)
 800918a:	4293      	cmp	r3, r2
 800918c:	f000 80a9 	beq.w	80092e2 <HAL_TIM_ConfigClockSource+0x1be>
 8009190:	4a62      	ldr	r2, [pc, #392]	@ (800931c <HAL_TIM_ConfigClockSource+0x1f8>)
 8009192:	4293      	cmp	r3, r2
 8009194:	f200 80ae 	bhi.w	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009198:	4a61      	ldr	r2, [pc, #388]	@ (8009320 <HAL_TIM_ConfigClockSource+0x1fc>)
 800919a:	4293      	cmp	r3, r2
 800919c:	f000 80a1 	beq.w	80092e2 <HAL_TIM_ConfigClockSource+0x1be>
 80091a0:	4a5f      	ldr	r2, [pc, #380]	@ (8009320 <HAL_TIM_ConfigClockSource+0x1fc>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	f200 80a6 	bhi.w	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
 80091a8:	4a5e      	ldr	r2, [pc, #376]	@ (8009324 <HAL_TIM_ConfigClockSource+0x200>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	f000 8099 	beq.w	80092e2 <HAL_TIM_ConfigClockSource+0x1be>
 80091b0:	4a5c      	ldr	r2, [pc, #368]	@ (8009324 <HAL_TIM_ConfigClockSource+0x200>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	f200 809e 	bhi.w	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
 80091b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80091bc:	f000 8091 	beq.w	80092e2 <HAL_TIM_ConfigClockSource+0x1be>
 80091c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80091c4:	f200 8096 	bhi.w	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
 80091c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091cc:	f000 8089 	beq.w	80092e2 <HAL_TIM_ConfigClockSource+0x1be>
 80091d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091d4:	f200 808e 	bhi.w	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
 80091d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091dc:	d03e      	beq.n	800925c <HAL_TIM_ConfigClockSource+0x138>
 80091de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091e2:	f200 8087 	bhi.w	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
 80091e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091ea:	f000 8086 	beq.w	80092fa <HAL_TIM_ConfigClockSource+0x1d6>
 80091ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091f2:	d87f      	bhi.n	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
 80091f4:	2b70      	cmp	r3, #112	@ 0x70
 80091f6:	d01a      	beq.n	800922e <HAL_TIM_ConfigClockSource+0x10a>
 80091f8:	2b70      	cmp	r3, #112	@ 0x70
 80091fa:	d87b      	bhi.n	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
 80091fc:	2b60      	cmp	r3, #96	@ 0x60
 80091fe:	d050      	beq.n	80092a2 <HAL_TIM_ConfigClockSource+0x17e>
 8009200:	2b60      	cmp	r3, #96	@ 0x60
 8009202:	d877      	bhi.n	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009204:	2b50      	cmp	r3, #80	@ 0x50
 8009206:	d03c      	beq.n	8009282 <HAL_TIM_ConfigClockSource+0x15e>
 8009208:	2b50      	cmp	r3, #80	@ 0x50
 800920a:	d873      	bhi.n	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
 800920c:	2b40      	cmp	r3, #64	@ 0x40
 800920e:	d058      	beq.n	80092c2 <HAL_TIM_ConfigClockSource+0x19e>
 8009210:	2b40      	cmp	r3, #64	@ 0x40
 8009212:	d86f      	bhi.n	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009214:	2b30      	cmp	r3, #48	@ 0x30
 8009216:	d064      	beq.n	80092e2 <HAL_TIM_ConfigClockSource+0x1be>
 8009218:	2b30      	cmp	r3, #48	@ 0x30
 800921a:	d86b      	bhi.n	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
 800921c:	2b20      	cmp	r3, #32
 800921e:	d060      	beq.n	80092e2 <HAL_TIM_ConfigClockSource+0x1be>
 8009220:	2b20      	cmp	r3, #32
 8009222:	d867      	bhi.n	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009224:	2b00      	cmp	r3, #0
 8009226:	d05c      	beq.n	80092e2 <HAL_TIM_ConfigClockSource+0x1be>
 8009228:	2b10      	cmp	r3, #16
 800922a:	d05a      	beq.n	80092e2 <HAL_TIM_ConfigClockSource+0x1be>
 800922c:	e062      	b.n	80092f4 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800923e:	f000 fa17 	bl	8009670 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	609a      	str	r2, [r3, #8]
      break;
 800925a:	e04f      	b.n	80092fc <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800926c:	f000 fa00 	bl	8009670 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	689a      	ldr	r2, [r3, #8]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800927e:	609a      	str	r2, [r3, #8]
      break;
 8009280:	e03c      	b.n	80092fc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800928e:	461a      	mov	r2, r3
 8009290:	f000 f972 	bl	8009578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2150      	movs	r1, #80	@ 0x50
 800929a:	4618      	mov	r0, r3
 800929c:	f000 f9cb 	bl	8009636 <TIM_ITRx_SetConfig>
      break;
 80092a0:	e02c      	b.n	80092fc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092ae:	461a      	mov	r2, r3
 80092b0:	f000 f991 	bl	80095d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2160      	movs	r1, #96	@ 0x60
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 f9bb 	bl	8009636 <TIM_ITRx_SetConfig>
      break;
 80092c0:	e01c      	b.n	80092fc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ce:	461a      	mov	r2, r3
 80092d0:	f000 f952 	bl	8009578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2140      	movs	r1, #64	@ 0x40
 80092da:	4618      	mov	r0, r3
 80092dc:	f000 f9ab 	bl	8009636 <TIM_ITRx_SetConfig>
      break;
 80092e0:	e00c      	b.n	80092fc <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4619      	mov	r1, r3
 80092ec:	4610      	mov	r0, r2
 80092ee:	f000 f9a2 	bl	8009636 <TIM_ITRx_SetConfig>
      break;
 80092f2:	e003      	b.n	80092fc <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	73fb      	strb	r3, [r7, #15]
      break;
 80092f8:	e000      	b.n	80092fc <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80092fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800930c:	7bfb      	ldrb	r3, [r7, #15]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	00100070 	.word	0x00100070
 800931c:	00100040 	.word	0x00100040
 8009320:	00100030 	.word	0x00100030
 8009324:	00100020 	.word	0x00100020

08009328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a6b      	ldr	r2, [pc, #428]	@ (8009538 <TIM_Base_SetConfig+0x1c0>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d02b      	beq.n	80093e8 <TIM_Base_SetConfig+0x70>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a6a      	ldr	r2, [pc, #424]	@ (800953c <TIM_Base_SetConfig+0x1c4>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d027      	beq.n	80093e8 <TIM_Base_SetConfig+0x70>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800939e:	d023      	beq.n	80093e8 <TIM_Base_SetConfig+0x70>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093a6:	d01f      	beq.n	80093e8 <TIM_Base_SetConfig+0x70>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a65      	ldr	r2, [pc, #404]	@ (8009540 <TIM_Base_SetConfig+0x1c8>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d01b      	beq.n	80093e8 <TIM_Base_SetConfig+0x70>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a64      	ldr	r2, [pc, #400]	@ (8009544 <TIM_Base_SetConfig+0x1cc>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d017      	beq.n	80093e8 <TIM_Base_SetConfig+0x70>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a63      	ldr	r2, [pc, #396]	@ (8009548 <TIM_Base_SetConfig+0x1d0>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d013      	beq.n	80093e8 <TIM_Base_SetConfig+0x70>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a62      	ldr	r2, [pc, #392]	@ (800954c <TIM_Base_SetConfig+0x1d4>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00f      	beq.n	80093e8 <TIM_Base_SetConfig+0x70>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a61      	ldr	r2, [pc, #388]	@ (8009550 <TIM_Base_SetConfig+0x1d8>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d00b      	beq.n	80093e8 <TIM_Base_SetConfig+0x70>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a60      	ldr	r2, [pc, #384]	@ (8009554 <TIM_Base_SetConfig+0x1dc>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d007      	beq.n	80093e8 <TIM_Base_SetConfig+0x70>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a5f      	ldr	r2, [pc, #380]	@ (8009558 <TIM_Base_SetConfig+0x1e0>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d003      	beq.n	80093e8 <TIM_Base_SetConfig+0x70>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a5e      	ldr	r2, [pc, #376]	@ (800955c <TIM_Base_SetConfig+0x1e4>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d108      	bne.n	80093fa <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a4e      	ldr	r2, [pc, #312]	@ (8009538 <TIM_Base_SetConfig+0x1c0>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d043      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a4d      	ldr	r2, [pc, #308]	@ (800953c <TIM_Base_SetConfig+0x1c4>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d03f      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009410:	d03b      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009418:	d037      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a48      	ldr	r2, [pc, #288]	@ (8009540 <TIM_Base_SetConfig+0x1c8>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d033      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a47      	ldr	r2, [pc, #284]	@ (8009544 <TIM_Base_SetConfig+0x1cc>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d02f      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a46      	ldr	r2, [pc, #280]	@ (8009548 <TIM_Base_SetConfig+0x1d0>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d02b      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a45      	ldr	r2, [pc, #276]	@ (800954c <TIM_Base_SetConfig+0x1d4>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d027      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a44      	ldr	r2, [pc, #272]	@ (8009550 <TIM_Base_SetConfig+0x1d8>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d023      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a43      	ldr	r2, [pc, #268]	@ (8009554 <TIM_Base_SetConfig+0x1dc>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d01f      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a42      	ldr	r2, [pc, #264]	@ (8009558 <TIM_Base_SetConfig+0x1e0>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d01b      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a41      	ldr	r2, [pc, #260]	@ (800955c <TIM_Base_SetConfig+0x1e4>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d017      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a40      	ldr	r2, [pc, #256]	@ (8009560 <TIM_Base_SetConfig+0x1e8>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d013      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a3f      	ldr	r2, [pc, #252]	@ (8009564 <TIM_Base_SetConfig+0x1ec>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d00f      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a3e      	ldr	r2, [pc, #248]	@ (8009568 <TIM_Base_SetConfig+0x1f0>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d00b      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a3d      	ldr	r2, [pc, #244]	@ (800956c <TIM_Base_SetConfig+0x1f4>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d007      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a3c      	ldr	r2, [pc, #240]	@ (8009570 <TIM_Base_SetConfig+0x1f8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d003      	beq.n	800948a <TIM_Base_SetConfig+0x112>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a3b      	ldr	r2, [pc, #236]	@ (8009574 <TIM_Base_SetConfig+0x1fc>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d108      	bne.n	800949c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	4313      	orrs	r3, r2
 800949a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a1e      	ldr	r2, [pc, #120]	@ (8009538 <TIM_Base_SetConfig+0x1c0>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d023      	beq.n	800950a <TIM_Base_SetConfig+0x192>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a1d      	ldr	r2, [pc, #116]	@ (800953c <TIM_Base_SetConfig+0x1c4>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d01f      	beq.n	800950a <TIM_Base_SetConfig+0x192>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a22      	ldr	r2, [pc, #136]	@ (8009558 <TIM_Base_SetConfig+0x1e0>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d01b      	beq.n	800950a <TIM_Base_SetConfig+0x192>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a21      	ldr	r2, [pc, #132]	@ (800955c <TIM_Base_SetConfig+0x1e4>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d017      	beq.n	800950a <TIM_Base_SetConfig+0x192>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a20      	ldr	r2, [pc, #128]	@ (8009560 <TIM_Base_SetConfig+0x1e8>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d013      	beq.n	800950a <TIM_Base_SetConfig+0x192>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a1f      	ldr	r2, [pc, #124]	@ (8009564 <TIM_Base_SetConfig+0x1ec>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d00f      	beq.n	800950a <TIM_Base_SetConfig+0x192>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a1e      	ldr	r2, [pc, #120]	@ (8009568 <TIM_Base_SetConfig+0x1f0>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d00b      	beq.n	800950a <TIM_Base_SetConfig+0x192>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a1d      	ldr	r2, [pc, #116]	@ (800956c <TIM_Base_SetConfig+0x1f4>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d007      	beq.n	800950a <TIM_Base_SetConfig+0x192>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a1c      	ldr	r2, [pc, #112]	@ (8009570 <TIM_Base_SetConfig+0x1f8>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d003      	beq.n	800950a <TIM_Base_SetConfig+0x192>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a1b      	ldr	r2, [pc, #108]	@ (8009574 <TIM_Base_SetConfig+0x1fc>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d103      	bne.n	8009512 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	691a      	ldr	r2, [r3, #16]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f043 0204 	orr.w	r2, r3, #4
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	601a      	str	r2, [r3, #0]
}
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	40012c00 	.word	0x40012c00
 800953c:	50012c00 	.word	0x50012c00
 8009540:	40000400 	.word	0x40000400
 8009544:	50000400 	.word	0x50000400
 8009548:	40000800 	.word	0x40000800
 800954c:	50000800 	.word	0x50000800
 8009550:	40000c00 	.word	0x40000c00
 8009554:	50000c00 	.word	0x50000c00
 8009558:	40013400 	.word	0x40013400
 800955c:	50013400 	.word	0x50013400
 8009560:	40014000 	.word	0x40014000
 8009564:	50014000 	.word	0x50014000
 8009568:	40014400 	.word	0x40014400
 800956c:	50014400 	.word	0x50014400
 8009570:	40014800 	.word	0x40014800
 8009574:	50014800 	.word	0x50014800

08009578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6a1b      	ldr	r3, [r3, #32]
 8009588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	f023 0201 	bic.w	r2, r3, #1
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	011b      	lsls	r3, r3, #4
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f023 030a 	bic.w	r3, r3, #10
 80095b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	697a      	ldr	r2, [r7, #20]
 80095c8:	621a      	str	r2, [r3, #32]
}
 80095ca:	bf00      	nop
 80095cc:	371c      	adds	r7, #28
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b087      	sub	sp, #28
 80095da:	af00      	add	r7, sp, #0
 80095dc:	60f8      	str	r0, [r7, #12]
 80095de:	60b9      	str	r1, [r7, #8]
 80095e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6a1b      	ldr	r3, [r3, #32]
 80095ec:	f023 0210 	bic.w	r2, r3, #16
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009600:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	031b      	lsls	r3, r3, #12
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	4313      	orrs	r3, r2
 800960a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009612:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	011b      	lsls	r3, r3, #4
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	4313      	orrs	r3, r2
 800961c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	621a      	str	r2, [r3, #32]
}
 800962a:	bf00      	nop
 800962c:	371c      	adds	r7, #28
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009636:	b480      	push	{r7}
 8009638:	b085      	sub	sp, #20
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800964c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4313      	orrs	r3, r2
 8009658:	f043 0307 	orr.w	r3, r3, #7
 800965c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	609a      	str	r2, [r3, #8]
}
 8009664:	bf00      	nop
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009670:	b480      	push	{r7}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800968a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	021a      	lsls	r2, r3, #8
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	431a      	orrs	r2, r3
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	4313      	orrs	r3, r2
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	4313      	orrs	r3, r2
 800969c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	609a      	str	r2, [r3, #8]
}
 80096a4:	bf00      	nop
 80096a6:	371c      	adds	r7, #28
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d101      	bne.n	80096c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096c4:	2302      	movs	r3, #2
 80096c6:	e097      	b.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2202      	movs	r2, #2
 80096d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a45      	ldr	r2, [pc, #276]	@ (8009804 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00e      	beq.n	8009710 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a44      	ldr	r2, [pc, #272]	@ (8009808 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d009      	beq.n	8009710 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a42      	ldr	r2, [pc, #264]	@ (800980c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d004      	beq.n	8009710 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a41      	ldr	r2, [pc, #260]	@ (8009810 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d108      	bne.n	8009722 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009716:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	4313      	orrs	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800972c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	4313      	orrs	r3, r2
 8009736:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a2f      	ldr	r2, [pc, #188]	@ (8009804 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d040      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a2e      	ldr	r2, [pc, #184]	@ (8009808 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d03b      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800975c:	d036      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009766:	d031      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a29      	ldr	r2, [pc, #164]	@ (8009814 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d02c      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a28      	ldr	r2, [pc, #160]	@ (8009818 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d027      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a26      	ldr	r2, [pc, #152]	@ (800981c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d022      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a25      	ldr	r2, [pc, #148]	@ (8009820 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d01d      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a23      	ldr	r2, [pc, #140]	@ (8009824 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d018      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a22      	ldr	r2, [pc, #136]	@ (8009828 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d013      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a18      	ldr	r2, [pc, #96]	@ (800980c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d00e      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a17      	ldr	r2, [pc, #92]	@ (8009810 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d009      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a1b      	ldr	r2, [pc, #108]	@ (800982c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d004      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a1a      	ldr	r2, [pc, #104]	@ (8009830 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d10c      	bne.n	80097e6 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	4313      	orrs	r3, r2
 80097dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3714      	adds	r7, #20
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	40012c00 	.word	0x40012c00
 8009808:	50012c00 	.word	0x50012c00
 800980c:	40013400 	.word	0x40013400
 8009810:	50013400 	.word	0x50013400
 8009814:	40000400 	.word	0x40000400
 8009818:	50000400 	.word	0x50000400
 800981c:	40000800 	.word	0x40000800
 8009820:	50000800 	.word	0x50000800
 8009824:	40000c00 	.word	0x40000c00
 8009828:	50000c00 	.word	0x50000c00
 800982c:	40014000 	.word	0x40014000
 8009830:	50014000 	.word	0x50014000

08009834 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e042      	b.n	8009958 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d106      	bne.n	80098ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f83b 	bl	8009960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2224      	movs	r2, #36	@ 0x24
 80098ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f022 0201 	bic.w	r2, r2, #1
 8009900:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009906:	2b00      	cmp	r3, #0
 8009908:	d002      	beq.n	8009910 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fa72 	bl	8009df4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f8cd 	bl	8009ab0 <UART_SetConfig>
 8009916:	4603      	mov	r3, r0
 8009918:	2b01      	cmp	r3, #1
 800991a:	d101      	bne.n	8009920 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e01b      	b.n	8009958 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	685a      	ldr	r2, [r3, #4]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800992e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	689a      	ldr	r2, [r3, #8]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800993e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f042 0201 	orr.w	r2, r2, #1
 800994e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 faf1 	bl	8009f38 <UART_CheckIdleState>
 8009956:	4603      	mov	r3, r0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08a      	sub	sp, #40	@ 0x28
 8009978:	af02      	add	r7, sp, #8
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	603b      	str	r3, [r7, #0]
 8009980:	4613      	mov	r3, r2
 8009982:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800998a:	2b20      	cmp	r3, #32
 800998c:	f040 808b 	bne.w	8009aa6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d002      	beq.n	800999c <HAL_UART_Transmit+0x28>
 8009996:	88fb      	ldrh	r3, [r7, #6]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d101      	bne.n	80099a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	e083      	b.n	8009aa8 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099aa:	2b80      	cmp	r3, #128	@ 0x80
 80099ac:	d107      	bne.n	80099be <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689a      	ldr	r2, [r3, #8]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80099bc:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2221      	movs	r2, #33	@ 0x21
 80099ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099ce:	f7f8 f92d 	bl	8001c2c <HAL_GetTick>
 80099d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	88fa      	ldrh	r2, [r7, #6]
 80099d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	88fa      	ldrh	r2, [r7, #6]
 80099e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099ec:	d108      	bne.n	8009a00 <HAL_UART_Transmit+0x8c>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d104      	bne.n	8009a00 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80099f6:	2300      	movs	r3, #0
 80099f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	61bb      	str	r3, [r7, #24]
 80099fe:	e003      	b.n	8009a08 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a04:	2300      	movs	r3, #0
 8009a06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a08:	e030      	b.n	8009a6c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	2200      	movs	r2, #0
 8009a12:	2180      	movs	r1, #128	@ 0x80
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 fb39 	bl	800a08c <UART_WaitOnFlagUntilTimeout>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d005      	beq.n	8009a2c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2220      	movs	r2, #32
 8009a24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e03d      	b.n	8009aa8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10b      	bne.n	8009a4a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a40:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	3302      	adds	r3, #2
 8009a46:	61bb      	str	r3, [r7, #24]
 8009a48:	e007      	b.n	8009a5a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	781a      	ldrb	r2, [r3, #0]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	3301      	adds	r3, #1
 8009a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	3b01      	subs	r3, #1
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1c8      	bne.n	8009a0a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2140      	movs	r1, #64	@ 0x40
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 fb02 	bl	800a08c <UART_WaitOnFlagUntilTimeout>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d005      	beq.n	8009a9a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2220      	movs	r2, #32
 8009a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009a96:	2303      	movs	r3, #3
 8009a98:	e006      	b.n	8009aa8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e000      	b.n	8009aa8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009aa6:	2302      	movs	r3, #2
  }
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3720      	adds	r7, #32
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ab4:	b094      	sub	sp, #80	@ 0x50
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	4b7e      	ldr	r3, [pc, #504]	@ (8009cc0 <UART_SetConfig+0x210>)
 8009ac6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aca:	689a      	ldr	r2, [r3, #8]
 8009acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	431a      	orrs	r2, r3
 8009ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ada:	69db      	ldr	r3, [r3, #28]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4977      	ldr	r1, [pc, #476]	@ (8009cc4 <UART_SetConfig+0x214>)
 8009ae8:	4019      	ands	r1, r3
 8009aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009af0:	430b      	orrs	r3, r1
 8009af2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b00:	68d9      	ldr	r1, [r3, #12]
 8009b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	ea40 0301 	orr.w	r3, r0, r1
 8009b0a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	4b6a      	ldr	r3, [pc, #424]	@ (8009cc0 <UART_SetConfig+0x210>)
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d009      	beq.n	8009b30 <UART_SetConfig+0x80>
 8009b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	4b69      	ldr	r3, [pc, #420]	@ (8009cc8 <UART_SetConfig+0x218>)
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d004      	beq.n	8009b30 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b28:	6a1a      	ldr	r2, [r3, #32]
 8009b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009b3a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b44:	430b      	orrs	r3, r1
 8009b46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4e:	f023 000f 	bic.w	r0, r3, #15
 8009b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b54:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	ea40 0301 	orr.w	r3, r0, r1
 8009b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	4b59      	ldr	r3, [pc, #356]	@ (8009ccc <UART_SetConfig+0x21c>)
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d102      	bne.n	8009b70 <UART_SetConfig+0xc0>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b6e:	e029      	b.n	8009bc4 <UART_SetConfig+0x114>
 8009b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	4b56      	ldr	r3, [pc, #344]	@ (8009cd0 <UART_SetConfig+0x220>)
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d102      	bne.n	8009b80 <UART_SetConfig+0xd0>
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b7e:	e021      	b.n	8009bc4 <UART_SetConfig+0x114>
 8009b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	4b53      	ldr	r3, [pc, #332]	@ (8009cd4 <UART_SetConfig+0x224>)
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d102      	bne.n	8009b90 <UART_SetConfig+0xe0>
 8009b8a:	2304      	movs	r3, #4
 8009b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b8e:	e019      	b.n	8009bc4 <UART_SetConfig+0x114>
 8009b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	4b50      	ldr	r3, [pc, #320]	@ (8009cd8 <UART_SetConfig+0x228>)
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d102      	bne.n	8009ba0 <UART_SetConfig+0xf0>
 8009b9a:	2308      	movs	r3, #8
 8009b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b9e:	e011      	b.n	8009bc4 <UART_SetConfig+0x114>
 8009ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8009cdc <UART_SetConfig+0x22c>)
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d102      	bne.n	8009bb0 <UART_SetConfig+0x100>
 8009baa:	2310      	movs	r3, #16
 8009bac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bae:	e009      	b.n	8009bc4 <UART_SetConfig+0x114>
 8009bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	4b42      	ldr	r3, [pc, #264]	@ (8009cc0 <UART_SetConfig+0x210>)
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d102      	bne.n	8009bc0 <UART_SetConfig+0x110>
 8009bba:	2320      	movs	r3, #32
 8009bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bbe:	e001      	b.n	8009bc4 <UART_SetConfig+0x114>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8009cc0 <UART_SetConfig+0x210>)
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d005      	beq.n	8009bda <UART_SetConfig+0x12a>
 8009bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8009cc8 <UART_SetConfig+0x218>)
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	f040 8085 	bne.w	8009ce4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bdc:	2200      	movs	r2, #0
 8009bde:	623b      	str	r3, [r7, #32]
 8009be0:	627a      	str	r2, [r7, #36]	@ 0x24
 8009be2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009be6:	f7fd fcd7 	bl	8007598 <HAL_RCCEx_GetPeriphCLKFreq>
 8009bea:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f000 80e8 	beq.w	8009dc4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf8:	4a39      	ldr	r2, [pc, #228]	@ (8009ce0 <UART_SetConfig+0x230>)
 8009bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c02:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c06:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	4413      	add	r3, r2
 8009c12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d305      	bcc.n	8009c24 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d903      	bls.n	8009c2c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009c2a:	e048      	b.n	8009cbe <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c2e:	2200      	movs	r2, #0
 8009c30:	61bb      	str	r3, [r7, #24]
 8009c32:	61fa      	str	r2, [r7, #28]
 8009c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c38:	4a29      	ldr	r2, [pc, #164]	@ (8009ce0 <UART_SetConfig+0x230>)
 8009c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	2200      	movs	r2, #0
 8009c42:	613b      	str	r3, [r7, #16]
 8009c44:	617a      	str	r2, [r7, #20]
 8009c46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009c4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c4e:	f7f6 fb13 	bl	8000278 <__aeabi_uldivmod>
 8009c52:	4602      	mov	r2, r0
 8009c54:	460b      	mov	r3, r1
 8009c56:	4610      	mov	r0, r2
 8009c58:	4619      	mov	r1, r3
 8009c5a:	f04f 0200 	mov.w	r2, #0
 8009c5e:	f04f 0300 	mov.w	r3, #0
 8009c62:	020b      	lsls	r3, r1, #8
 8009c64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c68:	0202      	lsls	r2, r0, #8
 8009c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c6c:	6849      	ldr	r1, [r1, #4]
 8009c6e:	0849      	lsrs	r1, r1, #1
 8009c70:	2000      	movs	r0, #0
 8009c72:	460c      	mov	r4, r1
 8009c74:	4605      	mov	r5, r0
 8009c76:	eb12 0804 	adds.w	r8, r2, r4
 8009c7a:	eb43 0905 	adc.w	r9, r3, r5
 8009c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	60bb      	str	r3, [r7, #8]
 8009c86:	60fa      	str	r2, [r7, #12]
 8009c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c8c:	4640      	mov	r0, r8
 8009c8e:	4649      	mov	r1, r9
 8009c90:	f7f6 faf2 	bl	8000278 <__aeabi_uldivmod>
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4613      	mov	r3, r2
 8009c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ca2:	d308      	bcc.n	8009cb6 <UART_SetConfig+0x206>
 8009ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009caa:	d204      	bcs.n	8009cb6 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8009cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009cb2:	60da      	str	r2, [r3, #12]
 8009cb4:	e003      	b.n	8009cbe <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009cbc:	e082      	b.n	8009dc4 <UART_SetConfig+0x314>
 8009cbe:	e081      	b.n	8009dc4 <UART_SetConfig+0x314>
 8009cc0:	46002400 	.word	0x46002400
 8009cc4:	cfff69f3 	.word	0xcfff69f3
 8009cc8:	56002400 	.word	0x56002400
 8009ccc:	40013800 	.word	0x40013800
 8009cd0:	40004400 	.word	0x40004400
 8009cd4:	40004800 	.word	0x40004800
 8009cd8:	40004c00 	.word	0x40004c00
 8009cdc:	40005000 	.word	0x40005000
 8009ce0:	0800b204 	.word	0x0800b204
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cec:	d13c      	bne.n	8009d68 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	607a      	str	r2, [r7, #4]
 8009cf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cfa:	f7fd fc4d 	bl	8007598 <HAL_RCCEx_GetPeriphCLKFreq>
 8009cfe:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d05e      	beq.n	8009dc4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0a:	4a39      	ldr	r2, [pc, #228]	@ (8009df0 <UART_SetConfig+0x340>)
 8009d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d10:	461a      	mov	r2, r3
 8009d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d18:	005a      	lsls	r2, r3, #1
 8009d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	085b      	lsrs	r3, r3, #1
 8009d20:	441a      	add	r2, r3
 8009d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d2e:	2b0f      	cmp	r3, #15
 8009d30:	d916      	bls.n	8009d60 <UART_SetConfig+0x2b0>
 8009d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d38:	d212      	bcs.n	8009d60 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	f023 030f 	bic.w	r3, r3, #15
 8009d42:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d46:	085b      	lsrs	r3, r3, #1
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	f003 0307 	and.w	r3, r3, #7
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009d52:	4313      	orrs	r3, r2
 8009d54:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009d5c:	60da      	str	r2, [r3, #12]
 8009d5e:	e031      	b.n	8009dc4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009d66:	e02d      	b.n	8009dc4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009d68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	469a      	mov	sl, r3
 8009d6e:	4693      	mov	fp, r2
 8009d70:	4650      	mov	r0, sl
 8009d72:	4659      	mov	r1, fp
 8009d74:	f7fd fc10 	bl	8007598 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d78:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d021      	beq.n	8009dc4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d84:	4a1a      	ldr	r2, [pc, #104]	@ (8009df0 <UART_SetConfig+0x340>)
 8009d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	085b      	lsrs	r3, r3, #1
 8009d98:	441a      	add	r2, r3
 8009d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009da6:	2b0f      	cmp	r3, #15
 8009da8:	d909      	bls.n	8009dbe <UART_SetConfig+0x30e>
 8009daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009db0:	d205      	bcs.n	8009dbe <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	60da      	str	r2, [r3, #12]
 8009dbc:	e002      	b.n	8009dc4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ddc:	2200      	movs	r2, #0
 8009dde:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009de0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3750      	adds	r7, #80	@ 0x50
 8009de8:	46bd      	mov	sp, r7
 8009dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dee:	bf00      	nop
 8009df0:	0800b204 	.word	0x0800b204

08009df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e00:	f003 0308 	and.w	r3, r3, #8
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00a      	beq.n	8009e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e44:	f003 0302 	and.w	r3, r3, #2
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00a      	beq.n	8009e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e66:	f003 0304 	and.w	r3, r3, #4
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00a      	beq.n	8009e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	430a      	orrs	r2, r1
 8009e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e88:	f003 0310 	and.w	r3, r3, #16
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00a      	beq.n	8009ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eaa:	f003 0320 	and.w	r3, r3, #32
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00a      	beq.n	8009ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	430a      	orrs	r2, r1
 8009ec6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d01a      	beq.n	8009f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ef2:	d10a      	bne.n	8009f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	430a      	orrs	r2, r1
 8009f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00a      	beq.n	8009f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	430a      	orrs	r2, r1
 8009f2a:	605a      	str	r2, [r3, #4]
  }
}
 8009f2c:	bf00      	nop
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b098      	sub	sp, #96	@ 0x60
 8009f3c:	af02      	add	r7, sp, #8
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f48:	f7f7 fe70 	bl	8001c2c <HAL_GetTick>
 8009f4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 0308 	and.w	r3, r3, #8
 8009f58:	2b08      	cmp	r3, #8
 8009f5a:	d12f      	bne.n	8009fbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f64:	2200      	movs	r2, #0
 8009f66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f88e 	bl	800a08c <UART_WaitOnFlagUntilTimeout>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d022      	beq.n	8009fbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f7e:	e853 3f00 	ldrex	r3, [r3]
 8009f82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f9c:	e841 2300 	strex	r3, r2, [r1]
 8009fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1e6      	bne.n	8009f76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2220      	movs	r2, #32
 8009fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e063      	b.n	800a084 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 0304 	and.w	r3, r3, #4
 8009fc6:	2b04      	cmp	r3, #4
 8009fc8:	d149      	bne.n	800a05e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f857 	bl	800a08c <UART_WaitOnFlagUntilTimeout>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d03c      	beq.n	800a05e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fec:	e853 3f00 	ldrex	r3, [r3]
 8009ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a002:	633b      	str	r3, [r7, #48]	@ 0x30
 800a004:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a006:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a00a:	e841 2300 	strex	r3, r2, [r1]
 800a00e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1e6      	bne.n	8009fe4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3308      	adds	r3, #8
 800a01c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	e853 3f00 	ldrex	r3, [r3]
 800a024:	60fb      	str	r3, [r7, #12]
   return(result);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f023 0301 	bic.w	r3, r3, #1
 800a02c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3308      	adds	r3, #8
 800a034:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a036:	61fa      	str	r2, [r7, #28]
 800a038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	69b9      	ldr	r1, [r7, #24]
 800a03c:	69fa      	ldr	r2, [r7, #28]
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	617b      	str	r3, [r7, #20]
   return(result);
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1e5      	bne.n	800a016 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2220      	movs	r2, #32
 800a04e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e012      	b.n	800a084 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2220      	movs	r2, #32
 800a062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2220      	movs	r2, #32
 800a06a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3758      	adds	r7, #88	@ 0x58
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	603b      	str	r3, [r7, #0]
 800a098:	4613      	mov	r3, r2
 800a09a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a09c:	e04f      	b.n	800a13e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a4:	d04b      	beq.n	800a13e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0a6:	f7f7 fdc1 	bl	8001c2c <HAL_GetTick>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	69ba      	ldr	r2, [r7, #24]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d302      	bcc.n	800a0bc <UART_WaitOnFlagUntilTimeout+0x30>
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e04e      	b.n	800a15e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 0304 	and.w	r3, r3, #4
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d037      	beq.n	800a13e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b80      	cmp	r3, #128	@ 0x80
 800a0d2:	d034      	beq.n	800a13e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2b40      	cmp	r3, #64	@ 0x40
 800a0d8:	d031      	beq.n	800a13e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	69db      	ldr	r3, [r3, #28]
 800a0e0:	f003 0308 	and.w	r3, r3, #8
 800a0e4:	2b08      	cmp	r3, #8
 800a0e6:	d110      	bne.n	800a10a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2208      	movs	r2, #8
 800a0ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f000 f838 	bl	800a166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2208      	movs	r2, #8
 800a0fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e029      	b.n	800a15e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	69db      	ldr	r3, [r3, #28]
 800a110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a118:	d111      	bne.n	800a13e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 f81e 	bl	800a166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2220      	movs	r2, #32
 800a12e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e00f      	b.n	800a15e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	69da      	ldr	r2, [r3, #28]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	4013      	ands	r3, r2
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	bf0c      	ite	eq
 800a14e:	2301      	moveq	r3, #1
 800a150:	2300      	movne	r3, #0
 800a152:	b2db      	uxtb	r3, r3
 800a154:	461a      	mov	r2, r3
 800a156:	79fb      	ldrb	r3, [r7, #7]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d0a0      	beq.n	800a09e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a166:	b480      	push	{r7}
 800a168:	b095      	sub	sp, #84	@ 0x54
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a176:	e853 3f00 	ldrex	r3, [r3]
 800a17a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	461a      	mov	r2, r3
 800a18a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a18c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a18e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a190:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a194:	e841 2300 	strex	r3, r2, [r1]
 800a198:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1e6      	bne.n	800a16e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a8:	6a3b      	ldr	r3, [r7, #32]
 800a1aa:	e853 3f00 	ldrex	r3, [r3]
 800a1ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1b6:	f023 0301 	bic.w	r3, r3, #1
 800a1ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1cc:	e841 2300 	strex	r3, r2, [r1]
 800a1d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1e3      	bne.n	800a1a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d118      	bne.n	800a212 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	e853 3f00 	ldrex	r3, [r3]
 800a1ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	f023 0310 	bic.w	r3, r3, #16
 800a1f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1fe:	61bb      	str	r3, [r7, #24]
 800a200:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a202:	6979      	ldr	r1, [r7, #20]
 800a204:	69ba      	ldr	r2, [r7, #24]
 800a206:	e841 2300 	strex	r3, r2, [r1]
 800a20a:	613b      	str	r3, [r7, #16]
   return(result);
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1e6      	bne.n	800a1e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2220      	movs	r2, #32
 800a216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a226:	bf00      	nop
 800a228:	3754      	adds	r7, #84	@ 0x54
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
	...

0800a234 <std>:
 800a234:	2300      	movs	r3, #0
 800a236:	b510      	push	{r4, lr}
 800a238:	4604      	mov	r4, r0
 800a23a:	6083      	str	r3, [r0, #8]
 800a23c:	8181      	strh	r1, [r0, #12]
 800a23e:	4619      	mov	r1, r3
 800a240:	6643      	str	r3, [r0, #100]	@ 0x64
 800a242:	81c2      	strh	r2, [r0, #14]
 800a244:	2208      	movs	r2, #8
 800a246:	6183      	str	r3, [r0, #24]
 800a248:	e9c0 3300 	strd	r3, r3, [r0]
 800a24c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a250:	305c      	adds	r0, #92	@ 0x5c
 800a252:	f000 f906 	bl	800a462 <memset>
 800a256:	4b0d      	ldr	r3, [pc, #52]	@ (800a28c <std+0x58>)
 800a258:	6224      	str	r4, [r4, #32]
 800a25a:	6263      	str	r3, [r4, #36]	@ 0x24
 800a25c:	4b0c      	ldr	r3, [pc, #48]	@ (800a290 <std+0x5c>)
 800a25e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a260:	4b0c      	ldr	r3, [pc, #48]	@ (800a294 <std+0x60>)
 800a262:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a264:	4b0c      	ldr	r3, [pc, #48]	@ (800a298 <std+0x64>)
 800a266:	6323      	str	r3, [r4, #48]	@ 0x30
 800a268:	4b0c      	ldr	r3, [pc, #48]	@ (800a29c <std+0x68>)
 800a26a:	429c      	cmp	r4, r3
 800a26c:	d006      	beq.n	800a27c <std+0x48>
 800a26e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a272:	4294      	cmp	r4, r2
 800a274:	d002      	beq.n	800a27c <std+0x48>
 800a276:	33d0      	adds	r3, #208	@ 0xd0
 800a278:	429c      	cmp	r4, r3
 800a27a:	d105      	bne.n	800a288 <std+0x54>
 800a27c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a284:	f000 b966 	b.w	800a554 <__retarget_lock_init_recursive>
 800a288:	bd10      	pop	{r4, pc}
 800a28a:	bf00      	nop
 800a28c:	0800a3dd 	.word	0x0800a3dd
 800a290:	0800a3ff 	.word	0x0800a3ff
 800a294:	0800a437 	.word	0x0800a437
 800a298:	0800a45b 	.word	0x0800a45b
 800a29c:	20001680 	.word	0x20001680

0800a2a0 <stdio_exit_handler>:
 800a2a0:	4a02      	ldr	r2, [pc, #8]	@ (800a2ac <stdio_exit_handler+0xc>)
 800a2a2:	4903      	ldr	r1, [pc, #12]	@ (800a2b0 <stdio_exit_handler+0x10>)
 800a2a4:	4803      	ldr	r0, [pc, #12]	@ (800a2b4 <stdio_exit_handler+0x14>)
 800a2a6:	f000 b869 	b.w	800a37c <_fwalk_sglue>
 800a2aa:	bf00      	nop
 800a2ac:	200000b0 	.word	0x200000b0
 800a2b0:	0800ae25 	.word	0x0800ae25
 800a2b4:	200000c0 	.word	0x200000c0

0800a2b8 <cleanup_stdio>:
 800a2b8:	6841      	ldr	r1, [r0, #4]
 800a2ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a2ec <cleanup_stdio+0x34>)
 800a2bc:	4299      	cmp	r1, r3
 800a2be:	b510      	push	{r4, lr}
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	d001      	beq.n	800a2c8 <cleanup_stdio+0x10>
 800a2c4:	f000 fdae 	bl	800ae24 <_fflush_r>
 800a2c8:	68a1      	ldr	r1, [r4, #8]
 800a2ca:	4b09      	ldr	r3, [pc, #36]	@ (800a2f0 <cleanup_stdio+0x38>)
 800a2cc:	4299      	cmp	r1, r3
 800a2ce:	d002      	beq.n	800a2d6 <cleanup_stdio+0x1e>
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f000 fda7 	bl	800ae24 <_fflush_r>
 800a2d6:	68e1      	ldr	r1, [r4, #12]
 800a2d8:	4b06      	ldr	r3, [pc, #24]	@ (800a2f4 <cleanup_stdio+0x3c>)
 800a2da:	4299      	cmp	r1, r3
 800a2dc:	d004      	beq.n	800a2e8 <cleanup_stdio+0x30>
 800a2de:	4620      	mov	r0, r4
 800a2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2e4:	f000 bd9e 	b.w	800ae24 <_fflush_r>
 800a2e8:	bd10      	pop	{r4, pc}
 800a2ea:	bf00      	nop
 800a2ec:	20001680 	.word	0x20001680
 800a2f0:	200016e8 	.word	0x200016e8
 800a2f4:	20001750 	.word	0x20001750

0800a2f8 <global_stdio_init.part.0>:
 800a2f8:	b510      	push	{r4, lr}
 800a2fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a328 <global_stdio_init.part.0+0x30>)
 800a2fc:	2104      	movs	r1, #4
 800a2fe:	4c0b      	ldr	r4, [pc, #44]	@ (800a32c <global_stdio_init.part.0+0x34>)
 800a300:	4a0b      	ldr	r2, [pc, #44]	@ (800a330 <global_stdio_init.part.0+0x38>)
 800a302:	4620      	mov	r0, r4
 800a304:	601a      	str	r2, [r3, #0]
 800a306:	2200      	movs	r2, #0
 800a308:	f7ff ff94 	bl	800a234 <std>
 800a30c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a310:	2201      	movs	r2, #1
 800a312:	2109      	movs	r1, #9
 800a314:	f7ff ff8e 	bl	800a234 <std>
 800a318:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a31c:	2202      	movs	r2, #2
 800a31e:	2112      	movs	r1, #18
 800a320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a324:	f7ff bf86 	b.w	800a234 <std>
 800a328:	200017b8 	.word	0x200017b8
 800a32c:	20001680 	.word	0x20001680
 800a330:	0800a2a1 	.word	0x0800a2a1

0800a334 <__sfp_lock_acquire>:
 800a334:	4801      	ldr	r0, [pc, #4]	@ (800a33c <__sfp_lock_acquire+0x8>)
 800a336:	f000 b90e 	b.w	800a556 <__retarget_lock_acquire_recursive>
 800a33a:	bf00      	nop
 800a33c:	200017c1 	.word	0x200017c1

0800a340 <__sfp_lock_release>:
 800a340:	4801      	ldr	r0, [pc, #4]	@ (800a348 <__sfp_lock_release+0x8>)
 800a342:	f000 b909 	b.w	800a558 <__retarget_lock_release_recursive>
 800a346:	bf00      	nop
 800a348:	200017c1 	.word	0x200017c1

0800a34c <__sinit>:
 800a34c:	b510      	push	{r4, lr}
 800a34e:	4604      	mov	r4, r0
 800a350:	f7ff fff0 	bl	800a334 <__sfp_lock_acquire>
 800a354:	6a23      	ldr	r3, [r4, #32]
 800a356:	b11b      	cbz	r3, 800a360 <__sinit+0x14>
 800a358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a35c:	f7ff bff0 	b.w	800a340 <__sfp_lock_release>
 800a360:	4b04      	ldr	r3, [pc, #16]	@ (800a374 <__sinit+0x28>)
 800a362:	6223      	str	r3, [r4, #32]
 800a364:	4b04      	ldr	r3, [pc, #16]	@ (800a378 <__sinit+0x2c>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1f5      	bne.n	800a358 <__sinit+0xc>
 800a36c:	f7ff ffc4 	bl	800a2f8 <global_stdio_init.part.0>
 800a370:	e7f2      	b.n	800a358 <__sinit+0xc>
 800a372:	bf00      	nop
 800a374:	0800a2b9 	.word	0x0800a2b9
 800a378:	200017b8 	.word	0x200017b8

0800a37c <_fwalk_sglue>:
 800a37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a380:	4607      	mov	r7, r0
 800a382:	4688      	mov	r8, r1
 800a384:	4614      	mov	r4, r2
 800a386:	2600      	movs	r6, #0
 800a388:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a38c:	f1b9 0901 	subs.w	r9, r9, #1
 800a390:	d505      	bpl.n	800a39e <_fwalk_sglue+0x22>
 800a392:	6824      	ldr	r4, [r4, #0]
 800a394:	2c00      	cmp	r4, #0
 800a396:	d1f7      	bne.n	800a388 <_fwalk_sglue+0xc>
 800a398:	4630      	mov	r0, r6
 800a39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a39e:	89ab      	ldrh	r3, [r5, #12]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d907      	bls.n	800a3b4 <_fwalk_sglue+0x38>
 800a3a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	d003      	beq.n	800a3b4 <_fwalk_sglue+0x38>
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	47c0      	blx	r8
 800a3b2:	4306      	orrs	r6, r0
 800a3b4:	3568      	adds	r5, #104	@ 0x68
 800a3b6:	e7e9      	b.n	800a38c <_fwalk_sglue+0x10>

0800a3b8 <iprintf>:
 800a3b8:	b40f      	push	{r0, r1, r2, r3}
 800a3ba:	b507      	push	{r0, r1, r2, lr}
 800a3bc:	4906      	ldr	r1, [pc, #24]	@ (800a3d8 <iprintf+0x20>)
 800a3be:	ab04      	add	r3, sp, #16
 800a3c0:	6808      	ldr	r0, [r1, #0]
 800a3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3c6:	6881      	ldr	r1, [r0, #8]
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	f000 f9fd 	bl	800a7c8 <_vfiprintf_r>
 800a3ce:	b003      	add	sp, #12
 800a3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3d4:	b004      	add	sp, #16
 800a3d6:	4770      	bx	lr
 800a3d8:	200000bc 	.word	0x200000bc

0800a3dc <__sread>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	460c      	mov	r4, r1
 800a3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e4:	f000 f868 	bl	800a4b8 <_read_r>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	bfab      	itete	ge
 800a3ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a3ee:	89a3      	ldrhlt	r3, [r4, #12]
 800a3f0:	181b      	addge	r3, r3, r0
 800a3f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a3f6:	bfac      	ite	ge
 800a3f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a3fa:	81a3      	strhlt	r3, [r4, #12]
 800a3fc:	bd10      	pop	{r4, pc}

0800a3fe <__swrite>:
 800a3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a402:	461f      	mov	r7, r3
 800a404:	898b      	ldrh	r3, [r1, #12]
 800a406:	4605      	mov	r5, r0
 800a408:	460c      	mov	r4, r1
 800a40a:	05db      	lsls	r3, r3, #23
 800a40c:	4616      	mov	r6, r2
 800a40e:	d505      	bpl.n	800a41c <__swrite+0x1e>
 800a410:	2302      	movs	r3, #2
 800a412:	2200      	movs	r2, #0
 800a414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a418:	f000 f83c 	bl	800a494 <_lseek_r>
 800a41c:	89a3      	ldrh	r3, [r4, #12]
 800a41e:	4632      	mov	r2, r6
 800a420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a424:	4628      	mov	r0, r5
 800a426:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a42a:	81a3      	strh	r3, [r4, #12]
 800a42c:	463b      	mov	r3, r7
 800a42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a432:	f000 b853 	b.w	800a4dc <_write_r>

0800a436 <__sseek>:
 800a436:	b510      	push	{r4, lr}
 800a438:	460c      	mov	r4, r1
 800a43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a43e:	f000 f829 	bl	800a494 <_lseek_r>
 800a442:	1c43      	adds	r3, r0, #1
 800a444:	89a3      	ldrh	r3, [r4, #12]
 800a446:	bf15      	itete	ne
 800a448:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a44a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a44e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a452:	81a3      	strheq	r3, [r4, #12]
 800a454:	bf18      	it	ne
 800a456:	81a3      	strhne	r3, [r4, #12]
 800a458:	bd10      	pop	{r4, pc}

0800a45a <__sclose>:
 800a45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a45e:	f000 b809 	b.w	800a474 <_close_r>

0800a462 <memset>:
 800a462:	4402      	add	r2, r0
 800a464:	4603      	mov	r3, r0
 800a466:	4293      	cmp	r3, r2
 800a468:	d100      	bne.n	800a46c <memset+0xa>
 800a46a:	4770      	bx	lr
 800a46c:	f803 1b01 	strb.w	r1, [r3], #1
 800a470:	e7f9      	b.n	800a466 <memset+0x4>
	...

0800a474 <_close_r>:
 800a474:	b538      	push	{r3, r4, r5, lr}
 800a476:	2300      	movs	r3, #0
 800a478:	4d05      	ldr	r5, [pc, #20]	@ (800a490 <_close_r+0x1c>)
 800a47a:	4604      	mov	r4, r0
 800a47c:	4608      	mov	r0, r1
 800a47e:	602b      	str	r3, [r5, #0]
 800a480:	f7f7 f871 	bl	8001566 <_close>
 800a484:	1c43      	adds	r3, r0, #1
 800a486:	d102      	bne.n	800a48e <_close_r+0x1a>
 800a488:	682b      	ldr	r3, [r5, #0]
 800a48a:	b103      	cbz	r3, 800a48e <_close_r+0x1a>
 800a48c:	6023      	str	r3, [r4, #0]
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	200017bc 	.word	0x200017bc

0800a494 <_lseek_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4604      	mov	r4, r0
 800a498:	4d06      	ldr	r5, [pc, #24]	@ (800a4b4 <_lseek_r+0x20>)
 800a49a:	4608      	mov	r0, r1
 800a49c:	4611      	mov	r1, r2
 800a49e:	2200      	movs	r2, #0
 800a4a0:	602a      	str	r2, [r5, #0]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	f7f7 f886 	bl	80015b4 <_lseek>
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	d102      	bne.n	800a4b2 <_lseek_r+0x1e>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	b103      	cbz	r3, 800a4b2 <_lseek_r+0x1e>
 800a4b0:	6023      	str	r3, [r4, #0]
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	200017bc 	.word	0x200017bc

0800a4b8 <_read_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	4d06      	ldr	r5, [pc, #24]	@ (800a4d8 <_read_r+0x20>)
 800a4be:	4608      	mov	r0, r1
 800a4c0:	4611      	mov	r1, r2
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	602a      	str	r2, [r5, #0]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	f7f7 f814 	bl	80014f4 <_read>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d102      	bne.n	800a4d6 <_read_r+0x1e>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	b103      	cbz	r3, 800a4d6 <_read_r+0x1e>
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	200017bc 	.word	0x200017bc

0800a4dc <_write_r>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	4604      	mov	r4, r0
 800a4e0:	4d06      	ldr	r5, [pc, #24]	@ (800a4fc <_write_r+0x20>)
 800a4e2:	4608      	mov	r0, r1
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	602a      	str	r2, [r5, #0]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	f7f7 f81f 	bl	800152e <_write>
 800a4f0:	1c43      	adds	r3, r0, #1
 800a4f2:	d102      	bne.n	800a4fa <_write_r+0x1e>
 800a4f4:	682b      	ldr	r3, [r5, #0]
 800a4f6:	b103      	cbz	r3, 800a4fa <_write_r+0x1e>
 800a4f8:	6023      	str	r3, [r4, #0]
 800a4fa:	bd38      	pop	{r3, r4, r5, pc}
 800a4fc:	200017bc 	.word	0x200017bc

0800a500 <__errno>:
 800a500:	4b01      	ldr	r3, [pc, #4]	@ (800a508 <__errno+0x8>)
 800a502:	6818      	ldr	r0, [r3, #0]
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	200000bc 	.word	0x200000bc

0800a50c <__libc_init_array>:
 800a50c:	b570      	push	{r4, r5, r6, lr}
 800a50e:	4d0d      	ldr	r5, [pc, #52]	@ (800a544 <__libc_init_array+0x38>)
 800a510:	2600      	movs	r6, #0
 800a512:	4c0d      	ldr	r4, [pc, #52]	@ (800a548 <__libc_init_array+0x3c>)
 800a514:	1b64      	subs	r4, r4, r5
 800a516:	10a4      	asrs	r4, r4, #2
 800a518:	42a6      	cmp	r6, r4
 800a51a:	d109      	bne.n	800a530 <__libc_init_array+0x24>
 800a51c:	4d0b      	ldr	r5, [pc, #44]	@ (800a54c <__libc_init_array+0x40>)
 800a51e:	2600      	movs	r6, #0
 800a520:	4c0b      	ldr	r4, [pc, #44]	@ (800a550 <__libc_init_array+0x44>)
 800a522:	f000 fddd 	bl	800b0e0 <_init>
 800a526:	1b64      	subs	r4, r4, r5
 800a528:	10a4      	asrs	r4, r4, #2
 800a52a:	42a6      	cmp	r6, r4
 800a52c:	d105      	bne.n	800a53a <__libc_init_array+0x2e>
 800a52e:	bd70      	pop	{r4, r5, r6, pc}
 800a530:	f855 3b04 	ldr.w	r3, [r5], #4
 800a534:	3601      	adds	r6, #1
 800a536:	4798      	blx	r3
 800a538:	e7ee      	b.n	800a518 <__libc_init_array+0xc>
 800a53a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a53e:	3601      	adds	r6, #1
 800a540:	4798      	blx	r3
 800a542:	e7f2      	b.n	800a52a <__libc_init_array+0x1e>
 800a544:	0800b258 	.word	0x0800b258
 800a548:	0800b258 	.word	0x0800b258
 800a54c:	0800b258 	.word	0x0800b258
 800a550:	0800b25c 	.word	0x0800b25c

0800a554 <__retarget_lock_init_recursive>:
 800a554:	4770      	bx	lr

0800a556 <__retarget_lock_acquire_recursive>:
 800a556:	4770      	bx	lr

0800a558 <__retarget_lock_release_recursive>:
 800a558:	4770      	bx	lr

0800a55a <strcpy>:
 800a55a:	4603      	mov	r3, r0
 800a55c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a560:	f803 2b01 	strb.w	r2, [r3], #1
 800a564:	2a00      	cmp	r2, #0
 800a566:	d1f9      	bne.n	800a55c <strcpy+0x2>
 800a568:	4770      	bx	lr

0800a56a <memcpy>:
 800a56a:	440a      	add	r2, r1
 800a56c:	1e43      	subs	r3, r0, #1
 800a56e:	4291      	cmp	r1, r2
 800a570:	d100      	bne.n	800a574 <memcpy+0xa>
 800a572:	4770      	bx	lr
 800a574:	b510      	push	{r4, lr}
 800a576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a57a:	4291      	cmp	r1, r2
 800a57c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a580:	d1f9      	bne.n	800a576 <memcpy+0xc>
 800a582:	bd10      	pop	{r4, pc}

0800a584 <_free_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4605      	mov	r5, r0
 800a588:	2900      	cmp	r1, #0
 800a58a:	d041      	beq.n	800a610 <_free_r+0x8c>
 800a58c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a590:	1f0c      	subs	r4, r1, #4
 800a592:	2b00      	cmp	r3, #0
 800a594:	bfb8      	it	lt
 800a596:	18e4      	addlt	r4, r4, r3
 800a598:	f000 f8e0 	bl	800a75c <__malloc_lock>
 800a59c:	4a1d      	ldr	r2, [pc, #116]	@ (800a614 <_free_r+0x90>)
 800a59e:	6813      	ldr	r3, [r2, #0]
 800a5a0:	b933      	cbnz	r3, 800a5b0 <_free_r+0x2c>
 800a5a2:	6063      	str	r3, [r4, #4]
 800a5a4:	6014      	str	r4, [r2, #0]
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5ac:	f000 b8dc 	b.w	800a768 <__malloc_unlock>
 800a5b0:	42a3      	cmp	r3, r4
 800a5b2:	d908      	bls.n	800a5c6 <_free_r+0x42>
 800a5b4:	6820      	ldr	r0, [r4, #0]
 800a5b6:	1821      	adds	r1, r4, r0
 800a5b8:	428b      	cmp	r3, r1
 800a5ba:	bf01      	itttt	eq
 800a5bc:	6819      	ldreq	r1, [r3, #0]
 800a5be:	685b      	ldreq	r3, [r3, #4]
 800a5c0:	1809      	addeq	r1, r1, r0
 800a5c2:	6021      	streq	r1, [r4, #0]
 800a5c4:	e7ed      	b.n	800a5a2 <_free_r+0x1e>
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	b10b      	cbz	r3, 800a5d0 <_free_r+0x4c>
 800a5cc:	42a3      	cmp	r3, r4
 800a5ce:	d9fa      	bls.n	800a5c6 <_free_r+0x42>
 800a5d0:	6811      	ldr	r1, [r2, #0]
 800a5d2:	1850      	adds	r0, r2, r1
 800a5d4:	42a0      	cmp	r0, r4
 800a5d6:	d10b      	bne.n	800a5f0 <_free_r+0x6c>
 800a5d8:	6820      	ldr	r0, [r4, #0]
 800a5da:	4401      	add	r1, r0
 800a5dc:	1850      	adds	r0, r2, r1
 800a5de:	6011      	str	r1, [r2, #0]
 800a5e0:	4283      	cmp	r3, r0
 800a5e2:	d1e0      	bne.n	800a5a6 <_free_r+0x22>
 800a5e4:	6818      	ldr	r0, [r3, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	4408      	add	r0, r1
 800a5ea:	6053      	str	r3, [r2, #4]
 800a5ec:	6010      	str	r0, [r2, #0]
 800a5ee:	e7da      	b.n	800a5a6 <_free_r+0x22>
 800a5f0:	d902      	bls.n	800a5f8 <_free_r+0x74>
 800a5f2:	230c      	movs	r3, #12
 800a5f4:	602b      	str	r3, [r5, #0]
 800a5f6:	e7d6      	b.n	800a5a6 <_free_r+0x22>
 800a5f8:	6820      	ldr	r0, [r4, #0]
 800a5fa:	1821      	adds	r1, r4, r0
 800a5fc:	428b      	cmp	r3, r1
 800a5fe:	bf02      	ittt	eq
 800a600:	6819      	ldreq	r1, [r3, #0]
 800a602:	685b      	ldreq	r3, [r3, #4]
 800a604:	1809      	addeq	r1, r1, r0
 800a606:	6063      	str	r3, [r4, #4]
 800a608:	bf08      	it	eq
 800a60a:	6021      	streq	r1, [r4, #0]
 800a60c:	6054      	str	r4, [r2, #4]
 800a60e:	e7ca      	b.n	800a5a6 <_free_r+0x22>
 800a610:	bd38      	pop	{r3, r4, r5, pc}
 800a612:	bf00      	nop
 800a614:	200017c8 	.word	0x200017c8

0800a618 <sbrk_aligned>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	4e0f      	ldr	r6, [pc, #60]	@ (800a658 <sbrk_aligned+0x40>)
 800a61c:	460c      	mov	r4, r1
 800a61e:	4605      	mov	r5, r0
 800a620:	6831      	ldr	r1, [r6, #0]
 800a622:	b911      	cbnz	r1, 800a62a <sbrk_aligned+0x12>
 800a624:	f000 fcba 	bl	800af9c <_sbrk_r>
 800a628:	6030      	str	r0, [r6, #0]
 800a62a:	4621      	mov	r1, r4
 800a62c:	4628      	mov	r0, r5
 800a62e:	f000 fcb5 	bl	800af9c <_sbrk_r>
 800a632:	1c43      	adds	r3, r0, #1
 800a634:	d103      	bne.n	800a63e <sbrk_aligned+0x26>
 800a636:	f04f 34ff 	mov.w	r4, #4294967295
 800a63a:	4620      	mov	r0, r4
 800a63c:	bd70      	pop	{r4, r5, r6, pc}
 800a63e:	1cc4      	adds	r4, r0, #3
 800a640:	f024 0403 	bic.w	r4, r4, #3
 800a644:	42a0      	cmp	r0, r4
 800a646:	d0f8      	beq.n	800a63a <sbrk_aligned+0x22>
 800a648:	1a21      	subs	r1, r4, r0
 800a64a:	4628      	mov	r0, r5
 800a64c:	f000 fca6 	bl	800af9c <_sbrk_r>
 800a650:	3001      	adds	r0, #1
 800a652:	d1f2      	bne.n	800a63a <sbrk_aligned+0x22>
 800a654:	e7ef      	b.n	800a636 <sbrk_aligned+0x1e>
 800a656:	bf00      	nop
 800a658:	200017c4 	.word	0x200017c4

0800a65c <_malloc_r>:
 800a65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a660:	1ccd      	adds	r5, r1, #3
 800a662:	4606      	mov	r6, r0
 800a664:	f025 0503 	bic.w	r5, r5, #3
 800a668:	3508      	adds	r5, #8
 800a66a:	2d0c      	cmp	r5, #12
 800a66c:	bf38      	it	cc
 800a66e:	250c      	movcc	r5, #12
 800a670:	2d00      	cmp	r5, #0
 800a672:	db01      	blt.n	800a678 <_malloc_r+0x1c>
 800a674:	42a9      	cmp	r1, r5
 800a676:	d904      	bls.n	800a682 <_malloc_r+0x26>
 800a678:	230c      	movs	r3, #12
 800a67a:	6033      	str	r3, [r6, #0]
 800a67c:	2000      	movs	r0, #0
 800a67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a682:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a758 <_malloc_r+0xfc>
 800a686:	f000 f869 	bl	800a75c <__malloc_lock>
 800a68a:	f8d8 3000 	ldr.w	r3, [r8]
 800a68e:	461c      	mov	r4, r3
 800a690:	bb44      	cbnz	r4, 800a6e4 <_malloc_r+0x88>
 800a692:	4629      	mov	r1, r5
 800a694:	4630      	mov	r0, r6
 800a696:	f7ff ffbf 	bl	800a618 <sbrk_aligned>
 800a69a:	1c43      	adds	r3, r0, #1
 800a69c:	4604      	mov	r4, r0
 800a69e:	d158      	bne.n	800a752 <_malloc_r+0xf6>
 800a6a0:	f8d8 4000 	ldr.w	r4, [r8]
 800a6a4:	4627      	mov	r7, r4
 800a6a6:	2f00      	cmp	r7, #0
 800a6a8:	d143      	bne.n	800a732 <_malloc_r+0xd6>
 800a6aa:	2c00      	cmp	r4, #0
 800a6ac:	d04b      	beq.n	800a746 <_malloc_r+0xea>
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	eb04 0903 	add.w	r9, r4, r3
 800a6b8:	f000 fc70 	bl	800af9c <_sbrk_r>
 800a6bc:	4581      	cmp	r9, r0
 800a6be:	d142      	bne.n	800a746 <_malloc_r+0xea>
 800a6c0:	6821      	ldr	r1, [r4, #0]
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	1a6d      	subs	r5, r5, r1
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	f7ff ffa6 	bl	800a618 <sbrk_aligned>
 800a6cc:	3001      	adds	r0, #1
 800a6ce:	d03a      	beq.n	800a746 <_malloc_r+0xea>
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	442b      	add	r3, r5
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	bb62      	cbnz	r2, 800a738 <_malloc_r+0xdc>
 800a6de:	f8c8 7000 	str.w	r7, [r8]
 800a6e2:	e00f      	b.n	800a704 <_malloc_r+0xa8>
 800a6e4:	6822      	ldr	r2, [r4, #0]
 800a6e6:	1b52      	subs	r2, r2, r5
 800a6e8:	d420      	bmi.n	800a72c <_malloc_r+0xd0>
 800a6ea:	2a0b      	cmp	r2, #11
 800a6ec:	d917      	bls.n	800a71e <_malloc_r+0xc2>
 800a6ee:	1961      	adds	r1, r4, r5
 800a6f0:	42a3      	cmp	r3, r4
 800a6f2:	6025      	str	r5, [r4, #0]
 800a6f4:	bf18      	it	ne
 800a6f6:	6059      	strne	r1, [r3, #4]
 800a6f8:	6863      	ldr	r3, [r4, #4]
 800a6fa:	bf08      	it	eq
 800a6fc:	f8c8 1000 	streq.w	r1, [r8]
 800a700:	5162      	str	r2, [r4, r5]
 800a702:	604b      	str	r3, [r1, #4]
 800a704:	4630      	mov	r0, r6
 800a706:	f000 f82f 	bl	800a768 <__malloc_unlock>
 800a70a:	f104 000b 	add.w	r0, r4, #11
 800a70e:	1d23      	adds	r3, r4, #4
 800a710:	f020 0007 	bic.w	r0, r0, #7
 800a714:	1ac2      	subs	r2, r0, r3
 800a716:	bf1c      	itt	ne
 800a718:	1a1b      	subne	r3, r3, r0
 800a71a:	50a3      	strne	r3, [r4, r2]
 800a71c:	e7af      	b.n	800a67e <_malloc_r+0x22>
 800a71e:	6862      	ldr	r2, [r4, #4]
 800a720:	42a3      	cmp	r3, r4
 800a722:	bf0c      	ite	eq
 800a724:	f8c8 2000 	streq.w	r2, [r8]
 800a728:	605a      	strne	r2, [r3, #4]
 800a72a:	e7eb      	b.n	800a704 <_malloc_r+0xa8>
 800a72c:	4623      	mov	r3, r4
 800a72e:	6864      	ldr	r4, [r4, #4]
 800a730:	e7ae      	b.n	800a690 <_malloc_r+0x34>
 800a732:	463c      	mov	r4, r7
 800a734:	687f      	ldr	r7, [r7, #4]
 800a736:	e7b6      	b.n	800a6a6 <_malloc_r+0x4a>
 800a738:	461a      	mov	r2, r3
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	d1fb      	bne.n	800a738 <_malloc_r+0xdc>
 800a740:	2300      	movs	r3, #0
 800a742:	6053      	str	r3, [r2, #4]
 800a744:	e7de      	b.n	800a704 <_malloc_r+0xa8>
 800a746:	230c      	movs	r3, #12
 800a748:	4630      	mov	r0, r6
 800a74a:	6033      	str	r3, [r6, #0]
 800a74c:	f000 f80c 	bl	800a768 <__malloc_unlock>
 800a750:	e794      	b.n	800a67c <_malloc_r+0x20>
 800a752:	6005      	str	r5, [r0, #0]
 800a754:	e7d6      	b.n	800a704 <_malloc_r+0xa8>
 800a756:	bf00      	nop
 800a758:	200017c8 	.word	0x200017c8

0800a75c <__malloc_lock>:
 800a75c:	4801      	ldr	r0, [pc, #4]	@ (800a764 <__malloc_lock+0x8>)
 800a75e:	f7ff befa 	b.w	800a556 <__retarget_lock_acquire_recursive>
 800a762:	bf00      	nop
 800a764:	200017c0 	.word	0x200017c0

0800a768 <__malloc_unlock>:
 800a768:	4801      	ldr	r0, [pc, #4]	@ (800a770 <__malloc_unlock+0x8>)
 800a76a:	f7ff bef5 	b.w	800a558 <__retarget_lock_release_recursive>
 800a76e:	bf00      	nop
 800a770:	200017c0 	.word	0x200017c0

0800a774 <__sfputc_r>:
 800a774:	6893      	ldr	r3, [r2, #8]
 800a776:	3b01      	subs	r3, #1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	6093      	str	r3, [r2, #8]
 800a77c:	b410      	push	{r4}
 800a77e:	da08      	bge.n	800a792 <__sfputc_r+0x1e>
 800a780:	6994      	ldr	r4, [r2, #24]
 800a782:	42a3      	cmp	r3, r4
 800a784:	db01      	blt.n	800a78a <__sfputc_r+0x16>
 800a786:	290a      	cmp	r1, #10
 800a788:	d103      	bne.n	800a792 <__sfputc_r+0x1e>
 800a78a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a78e:	f000 bb71 	b.w	800ae74 <__swbuf_r>
 800a792:	6813      	ldr	r3, [r2, #0]
 800a794:	1c58      	adds	r0, r3, #1
 800a796:	6010      	str	r0, [r2, #0]
 800a798:	4608      	mov	r0, r1
 800a79a:	7019      	strb	r1, [r3, #0]
 800a79c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <__sfputs_r>:
 800a7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a4:	4606      	mov	r6, r0
 800a7a6:	460f      	mov	r7, r1
 800a7a8:	4614      	mov	r4, r2
 800a7aa:	18d5      	adds	r5, r2, r3
 800a7ac:	42ac      	cmp	r4, r5
 800a7ae:	d101      	bne.n	800a7b4 <__sfputs_r+0x12>
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	e007      	b.n	800a7c4 <__sfputs_r+0x22>
 800a7b4:	463a      	mov	r2, r7
 800a7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f7ff ffda 	bl	800a774 <__sfputc_r>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d1f3      	bne.n	800a7ac <__sfputs_r+0xa>
 800a7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7c8 <_vfiprintf_r>:
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	460d      	mov	r5, r1
 800a7ce:	b09d      	sub	sp, #116	@ 0x74
 800a7d0:	4614      	mov	r4, r2
 800a7d2:	4698      	mov	r8, r3
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	b118      	cbz	r0, 800a7e0 <_vfiprintf_r+0x18>
 800a7d8:	6a03      	ldr	r3, [r0, #32]
 800a7da:	b90b      	cbnz	r3, 800a7e0 <_vfiprintf_r+0x18>
 800a7dc:	f7ff fdb6 	bl	800a34c <__sinit>
 800a7e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7e2:	07d9      	lsls	r1, r3, #31
 800a7e4:	d405      	bmi.n	800a7f2 <_vfiprintf_r+0x2a>
 800a7e6:	89ab      	ldrh	r3, [r5, #12]
 800a7e8:	059a      	lsls	r2, r3, #22
 800a7ea:	d402      	bmi.n	800a7f2 <_vfiprintf_r+0x2a>
 800a7ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7ee:	f7ff feb2 	bl	800a556 <__retarget_lock_acquire_recursive>
 800a7f2:	89ab      	ldrh	r3, [r5, #12]
 800a7f4:	071b      	lsls	r3, r3, #28
 800a7f6:	d501      	bpl.n	800a7fc <_vfiprintf_r+0x34>
 800a7f8:	692b      	ldr	r3, [r5, #16]
 800a7fa:	b99b      	cbnz	r3, 800a824 <_vfiprintf_r+0x5c>
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	4630      	mov	r0, r6
 800a800:	f000 fb76 	bl	800aef0 <__swsetup_r>
 800a804:	b170      	cbz	r0, 800a824 <_vfiprintf_r+0x5c>
 800a806:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a808:	07dc      	lsls	r4, r3, #31
 800a80a:	d504      	bpl.n	800a816 <_vfiprintf_r+0x4e>
 800a80c:	f04f 30ff 	mov.w	r0, #4294967295
 800a810:	b01d      	add	sp, #116	@ 0x74
 800a812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a816:	89ab      	ldrh	r3, [r5, #12]
 800a818:	0598      	lsls	r0, r3, #22
 800a81a:	d4f7      	bmi.n	800a80c <_vfiprintf_r+0x44>
 800a81c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a81e:	f7ff fe9b 	bl	800a558 <__retarget_lock_release_recursive>
 800a822:	e7f3      	b.n	800a80c <_vfiprintf_r+0x44>
 800a824:	2300      	movs	r3, #0
 800a826:	f8cd 800c 	str.w	r8, [sp, #12]
 800a82a:	f04f 0901 	mov.w	r9, #1
 800a82e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800a9e4 <_vfiprintf_r+0x21c>
 800a832:	9309      	str	r3, [sp, #36]	@ 0x24
 800a834:	2320      	movs	r3, #32
 800a836:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a83a:	2330      	movs	r3, #48	@ 0x30
 800a83c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a840:	4623      	mov	r3, r4
 800a842:	469a      	mov	sl, r3
 800a844:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a848:	b10a      	cbz	r2, 800a84e <_vfiprintf_r+0x86>
 800a84a:	2a25      	cmp	r2, #37	@ 0x25
 800a84c:	d1f9      	bne.n	800a842 <_vfiprintf_r+0x7a>
 800a84e:	ebba 0b04 	subs.w	fp, sl, r4
 800a852:	d00b      	beq.n	800a86c <_vfiprintf_r+0xa4>
 800a854:	465b      	mov	r3, fp
 800a856:	4622      	mov	r2, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7ff ffa1 	bl	800a7a2 <__sfputs_r>
 800a860:	3001      	adds	r0, #1
 800a862:	f000 80a7 	beq.w	800a9b4 <_vfiprintf_r+0x1ec>
 800a866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a868:	445a      	add	r2, fp
 800a86a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a86c:	f89a 3000 	ldrb.w	r3, [sl]
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 809f 	beq.w	800a9b4 <_vfiprintf_r+0x1ec>
 800a876:	2300      	movs	r3, #0
 800a878:	f04f 32ff 	mov.w	r2, #4294967295
 800a87c:	f10a 0a01 	add.w	sl, sl, #1
 800a880:	9304      	str	r3, [sp, #16]
 800a882:	9307      	str	r3, [sp, #28]
 800a884:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a888:	931a      	str	r3, [sp, #104]	@ 0x68
 800a88a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a88e:	4654      	mov	r4, sl
 800a890:	2205      	movs	r2, #5
 800a892:	4854      	ldr	r0, [pc, #336]	@ (800a9e4 <_vfiprintf_r+0x21c>)
 800a894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a898:	f000 fb90 	bl	800afbc <memchr>
 800a89c:	9a04      	ldr	r2, [sp, #16]
 800a89e:	b9d8      	cbnz	r0, 800a8d8 <_vfiprintf_r+0x110>
 800a8a0:	06d1      	lsls	r1, r2, #27
 800a8a2:	bf44      	itt	mi
 800a8a4:	2320      	movmi	r3, #32
 800a8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8aa:	0713      	lsls	r3, r2, #28
 800a8ac:	bf44      	itt	mi
 800a8ae:	232b      	movmi	r3, #43	@ 0x2b
 800a8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8ba:	d015      	beq.n	800a8e8 <_vfiprintf_r+0x120>
 800a8bc:	9a07      	ldr	r2, [sp, #28]
 800a8be:	4654      	mov	r4, sl
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f04f 0c0a 	mov.w	ip, #10
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8cc:	3b30      	subs	r3, #48	@ 0x30
 800a8ce:	2b09      	cmp	r3, #9
 800a8d0:	d94b      	bls.n	800a96a <_vfiprintf_r+0x1a2>
 800a8d2:	b1b0      	cbz	r0, 800a902 <_vfiprintf_r+0x13a>
 800a8d4:	9207      	str	r2, [sp, #28]
 800a8d6:	e014      	b.n	800a902 <_vfiprintf_r+0x13a>
 800a8d8:	eba0 0308 	sub.w	r3, r0, r8
 800a8dc:	46a2      	mov	sl, r4
 800a8de:	fa09 f303 	lsl.w	r3, r9, r3
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	9304      	str	r3, [sp, #16]
 800a8e6:	e7d2      	b.n	800a88e <_vfiprintf_r+0xc6>
 800a8e8:	9b03      	ldr	r3, [sp, #12]
 800a8ea:	1d19      	adds	r1, r3, #4
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	9103      	str	r1, [sp, #12]
 800a8f2:	bfbb      	ittet	lt
 800a8f4:	425b      	neglt	r3, r3
 800a8f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a8fa:	9307      	strge	r3, [sp, #28]
 800a8fc:	9307      	strlt	r3, [sp, #28]
 800a8fe:	bfb8      	it	lt
 800a900:	9204      	strlt	r2, [sp, #16]
 800a902:	7823      	ldrb	r3, [r4, #0]
 800a904:	2b2e      	cmp	r3, #46	@ 0x2e
 800a906:	d10a      	bne.n	800a91e <_vfiprintf_r+0x156>
 800a908:	7863      	ldrb	r3, [r4, #1]
 800a90a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a90c:	d132      	bne.n	800a974 <_vfiprintf_r+0x1ac>
 800a90e:	9b03      	ldr	r3, [sp, #12]
 800a910:	3402      	adds	r4, #2
 800a912:	1d1a      	adds	r2, r3, #4
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a91a:	9203      	str	r2, [sp, #12]
 800a91c:	9305      	str	r3, [sp, #20]
 800a91e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a9f4 <_vfiprintf_r+0x22c>
 800a922:	2203      	movs	r2, #3
 800a924:	7821      	ldrb	r1, [r4, #0]
 800a926:	4650      	mov	r0, sl
 800a928:	f000 fb48 	bl	800afbc <memchr>
 800a92c:	b138      	cbz	r0, 800a93e <_vfiprintf_r+0x176>
 800a92e:	eba0 000a 	sub.w	r0, r0, sl
 800a932:	2240      	movs	r2, #64	@ 0x40
 800a934:	9b04      	ldr	r3, [sp, #16]
 800a936:	3401      	adds	r4, #1
 800a938:	4082      	lsls	r2, r0
 800a93a:	4313      	orrs	r3, r2
 800a93c:	9304      	str	r3, [sp, #16]
 800a93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a942:	2206      	movs	r2, #6
 800a944:	4828      	ldr	r0, [pc, #160]	@ (800a9e8 <_vfiprintf_r+0x220>)
 800a946:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a94a:	f000 fb37 	bl	800afbc <memchr>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d03f      	beq.n	800a9d2 <_vfiprintf_r+0x20a>
 800a952:	4b26      	ldr	r3, [pc, #152]	@ (800a9ec <_vfiprintf_r+0x224>)
 800a954:	bb1b      	cbnz	r3, 800a99e <_vfiprintf_r+0x1d6>
 800a956:	9b03      	ldr	r3, [sp, #12]
 800a958:	3307      	adds	r3, #7
 800a95a:	f023 0307 	bic.w	r3, r3, #7
 800a95e:	3308      	adds	r3, #8
 800a960:	9303      	str	r3, [sp, #12]
 800a962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a964:	443b      	add	r3, r7
 800a966:	9309      	str	r3, [sp, #36]	@ 0x24
 800a968:	e76a      	b.n	800a840 <_vfiprintf_r+0x78>
 800a96a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a96e:	460c      	mov	r4, r1
 800a970:	2001      	movs	r0, #1
 800a972:	e7a8      	b.n	800a8c6 <_vfiprintf_r+0xfe>
 800a974:	2300      	movs	r3, #0
 800a976:	3401      	adds	r4, #1
 800a978:	f04f 0c0a 	mov.w	ip, #10
 800a97c:	4619      	mov	r1, r3
 800a97e:	9305      	str	r3, [sp, #20]
 800a980:	4620      	mov	r0, r4
 800a982:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a986:	3a30      	subs	r2, #48	@ 0x30
 800a988:	2a09      	cmp	r2, #9
 800a98a:	d903      	bls.n	800a994 <_vfiprintf_r+0x1cc>
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d0c6      	beq.n	800a91e <_vfiprintf_r+0x156>
 800a990:	9105      	str	r1, [sp, #20]
 800a992:	e7c4      	b.n	800a91e <_vfiprintf_r+0x156>
 800a994:	fb0c 2101 	mla	r1, ip, r1, r2
 800a998:	4604      	mov	r4, r0
 800a99a:	2301      	movs	r3, #1
 800a99c:	e7f0      	b.n	800a980 <_vfiprintf_r+0x1b8>
 800a99e:	ab03      	add	r3, sp, #12
 800a9a0:	462a      	mov	r2, r5
 800a9a2:	a904      	add	r1, sp, #16
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	4b11      	ldr	r3, [pc, #68]	@ (800a9f0 <_vfiprintf_r+0x228>)
 800a9aa:	f3af 8000 	nop.w
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	1c78      	adds	r0, r7, #1
 800a9b2:	d1d6      	bne.n	800a962 <_vfiprintf_r+0x19a>
 800a9b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9b6:	07d9      	lsls	r1, r3, #31
 800a9b8:	d405      	bmi.n	800a9c6 <_vfiprintf_r+0x1fe>
 800a9ba:	89ab      	ldrh	r3, [r5, #12]
 800a9bc:	059a      	lsls	r2, r3, #22
 800a9be:	d402      	bmi.n	800a9c6 <_vfiprintf_r+0x1fe>
 800a9c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9c2:	f7ff fdc9 	bl	800a558 <__retarget_lock_release_recursive>
 800a9c6:	89ab      	ldrh	r3, [r5, #12]
 800a9c8:	065b      	lsls	r3, r3, #25
 800a9ca:	f53f af1f 	bmi.w	800a80c <_vfiprintf_r+0x44>
 800a9ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9d0:	e71e      	b.n	800a810 <_vfiprintf_r+0x48>
 800a9d2:	ab03      	add	r3, sp, #12
 800a9d4:	462a      	mov	r2, r5
 800a9d6:	a904      	add	r1, sp, #16
 800a9d8:	4630      	mov	r0, r6
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	4b04      	ldr	r3, [pc, #16]	@ (800a9f0 <_vfiprintf_r+0x228>)
 800a9de:	f000 f87d 	bl	800aadc <_printf_i>
 800a9e2:	e7e4      	b.n	800a9ae <_vfiprintf_r+0x1e6>
 800a9e4:	0800b21c 	.word	0x0800b21c
 800a9e8:	0800b226 	.word	0x0800b226
 800a9ec:	00000000 	.word	0x00000000
 800a9f0:	0800a7a3 	.word	0x0800a7a3
 800a9f4:	0800b222 	.word	0x0800b222

0800a9f8 <_printf_common>:
 800a9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9fc:	4616      	mov	r6, r2
 800a9fe:	4698      	mov	r8, r3
 800aa00:	688a      	ldr	r2, [r1, #8]
 800aa02:	4607      	mov	r7, r0
 800aa04:	690b      	ldr	r3, [r1, #16]
 800aa06:	460c      	mov	r4, r1
 800aa08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	bfb8      	it	lt
 800aa10:	4613      	movlt	r3, r2
 800aa12:	6033      	str	r3, [r6, #0]
 800aa14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa18:	b10a      	cbz	r2, 800aa1e <_printf_common+0x26>
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	6033      	str	r3, [r6, #0]
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	0699      	lsls	r1, r3, #26
 800aa22:	bf42      	ittt	mi
 800aa24:	6833      	ldrmi	r3, [r6, #0]
 800aa26:	3302      	addmi	r3, #2
 800aa28:	6033      	strmi	r3, [r6, #0]
 800aa2a:	6825      	ldr	r5, [r4, #0]
 800aa2c:	f015 0506 	ands.w	r5, r5, #6
 800aa30:	d106      	bne.n	800aa40 <_printf_common+0x48>
 800aa32:	f104 0a19 	add.w	sl, r4, #25
 800aa36:	68e3      	ldr	r3, [r4, #12]
 800aa38:	6832      	ldr	r2, [r6, #0]
 800aa3a:	1a9b      	subs	r3, r3, r2
 800aa3c:	42ab      	cmp	r3, r5
 800aa3e:	dc2b      	bgt.n	800aa98 <_printf_common+0xa0>
 800aa40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa44:	6822      	ldr	r2, [r4, #0]
 800aa46:	3b00      	subs	r3, #0
 800aa48:	bf18      	it	ne
 800aa4a:	2301      	movne	r3, #1
 800aa4c:	0692      	lsls	r2, r2, #26
 800aa4e:	d430      	bmi.n	800aab2 <_printf_common+0xba>
 800aa50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa54:	4641      	mov	r1, r8
 800aa56:	4638      	mov	r0, r7
 800aa58:	47c8      	blx	r9
 800aa5a:	3001      	adds	r0, #1
 800aa5c:	d023      	beq.n	800aaa6 <_printf_common+0xae>
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	341a      	adds	r4, #26
 800aa62:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800aa66:	f003 0306 	and.w	r3, r3, #6
 800aa6a:	2b04      	cmp	r3, #4
 800aa6c:	bf0a      	itet	eq
 800aa6e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800aa72:	2500      	movne	r5, #0
 800aa74:	6833      	ldreq	r3, [r6, #0]
 800aa76:	f04f 0600 	mov.w	r6, #0
 800aa7a:	bf08      	it	eq
 800aa7c:	1aed      	subeq	r5, r5, r3
 800aa7e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aa82:	bf08      	it	eq
 800aa84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	bfc4      	itt	gt
 800aa8c:	1a9b      	subgt	r3, r3, r2
 800aa8e:	18ed      	addgt	r5, r5, r3
 800aa90:	42b5      	cmp	r5, r6
 800aa92:	d11a      	bne.n	800aaca <_printf_common+0xd2>
 800aa94:	2000      	movs	r0, #0
 800aa96:	e008      	b.n	800aaaa <_printf_common+0xb2>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	4652      	mov	r2, sl
 800aa9c:	4641      	mov	r1, r8
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	47c8      	blx	r9
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	d103      	bne.n	800aaae <_printf_common+0xb6>
 800aaa6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaae:	3501      	adds	r5, #1
 800aab0:	e7c1      	b.n	800aa36 <_printf_common+0x3e>
 800aab2:	18e1      	adds	r1, r4, r3
 800aab4:	1c5a      	adds	r2, r3, #1
 800aab6:	2030      	movs	r0, #48	@ 0x30
 800aab8:	3302      	adds	r3, #2
 800aaba:	4422      	add	r2, r4
 800aabc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aac4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aac8:	e7c2      	b.n	800aa50 <_printf_common+0x58>
 800aaca:	2301      	movs	r3, #1
 800aacc:	4622      	mov	r2, r4
 800aace:	4641      	mov	r1, r8
 800aad0:	4638      	mov	r0, r7
 800aad2:	47c8      	blx	r9
 800aad4:	3001      	adds	r0, #1
 800aad6:	d0e6      	beq.n	800aaa6 <_printf_common+0xae>
 800aad8:	3601      	adds	r6, #1
 800aada:	e7d9      	b.n	800aa90 <_printf_common+0x98>

0800aadc <_printf_i>:
 800aadc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aae0:	7e0f      	ldrb	r7, [r1, #24]
 800aae2:	4691      	mov	r9, r2
 800aae4:	4680      	mov	r8, r0
 800aae6:	460c      	mov	r4, r1
 800aae8:	2f78      	cmp	r7, #120	@ 0x78
 800aaea:	469a      	mov	sl, r3
 800aaec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aaee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aaf2:	d807      	bhi.n	800ab04 <_printf_i+0x28>
 800aaf4:	2f62      	cmp	r7, #98	@ 0x62
 800aaf6:	d80a      	bhi.n	800ab0e <_printf_i+0x32>
 800aaf8:	2f00      	cmp	r7, #0
 800aafa:	f000 80d2 	beq.w	800aca2 <_printf_i+0x1c6>
 800aafe:	2f58      	cmp	r7, #88	@ 0x58
 800ab00:	f000 80b9 	beq.w	800ac76 <_printf_i+0x19a>
 800ab04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab0c:	e03a      	b.n	800ab84 <_printf_i+0xa8>
 800ab0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab12:	2b15      	cmp	r3, #21
 800ab14:	d8f6      	bhi.n	800ab04 <_printf_i+0x28>
 800ab16:	a101      	add	r1, pc, #4	@ (adr r1, 800ab1c <_printf_i+0x40>)
 800ab18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab1c:	0800ab75 	.word	0x0800ab75
 800ab20:	0800ab89 	.word	0x0800ab89
 800ab24:	0800ab05 	.word	0x0800ab05
 800ab28:	0800ab05 	.word	0x0800ab05
 800ab2c:	0800ab05 	.word	0x0800ab05
 800ab30:	0800ab05 	.word	0x0800ab05
 800ab34:	0800ab89 	.word	0x0800ab89
 800ab38:	0800ab05 	.word	0x0800ab05
 800ab3c:	0800ab05 	.word	0x0800ab05
 800ab40:	0800ab05 	.word	0x0800ab05
 800ab44:	0800ab05 	.word	0x0800ab05
 800ab48:	0800ac89 	.word	0x0800ac89
 800ab4c:	0800abb3 	.word	0x0800abb3
 800ab50:	0800ac43 	.word	0x0800ac43
 800ab54:	0800ab05 	.word	0x0800ab05
 800ab58:	0800ab05 	.word	0x0800ab05
 800ab5c:	0800acab 	.word	0x0800acab
 800ab60:	0800ab05 	.word	0x0800ab05
 800ab64:	0800abb3 	.word	0x0800abb3
 800ab68:	0800ab05 	.word	0x0800ab05
 800ab6c:	0800ab05 	.word	0x0800ab05
 800ab70:	0800ac4b 	.word	0x0800ac4b
 800ab74:	6833      	ldr	r3, [r6, #0]
 800ab76:	1d1a      	adds	r2, r3, #4
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	6032      	str	r2, [r6, #0]
 800ab7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab84:	2301      	movs	r3, #1
 800ab86:	e09d      	b.n	800acc4 <_printf_i+0x1e8>
 800ab88:	6833      	ldr	r3, [r6, #0]
 800ab8a:	6820      	ldr	r0, [r4, #0]
 800ab8c:	1d19      	adds	r1, r3, #4
 800ab8e:	6031      	str	r1, [r6, #0]
 800ab90:	0606      	lsls	r6, r0, #24
 800ab92:	d501      	bpl.n	800ab98 <_printf_i+0xbc>
 800ab94:	681d      	ldr	r5, [r3, #0]
 800ab96:	e003      	b.n	800aba0 <_printf_i+0xc4>
 800ab98:	0645      	lsls	r5, r0, #25
 800ab9a:	d5fb      	bpl.n	800ab94 <_printf_i+0xb8>
 800ab9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aba0:	2d00      	cmp	r5, #0
 800aba2:	da03      	bge.n	800abac <_printf_i+0xd0>
 800aba4:	232d      	movs	r3, #45	@ 0x2d
 800aba6:	426d      	negs	r5, r5
 800aba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abac:	4859      	ldr	r0, [pc, #356]	@ (800ad14 <_printf_i+0x238>)
 800abae:	230a      	movs	r3, #10
 800abb0:	e011      	b.n	800abd6 <_printf_i+0xfa>
 800abb2:	6821      	ldr	r1, [r4, #0]
 800abb4:	6833      	ldr	r3, [r6, #0]
 800abb6:	0608      	lsls	r0, r1, #24
 800abb8:	f853 5b04 	ldr.w	r5, [r3], #4
 800abbc:	d402      	bmi.n	800abc4 <_printf_i+0xe8>
 800abbe:	0649      	lsls	r1, r1, #25
 800abc0:	bf48      	it	mi
 800abc2:	b2ad      	uxthmi	r5, r5
 800abc4:	2f6f      	cmp	r7, #111	@ 0x6f
 800abc6:	6033      	str	r3, [r6, #0]
 800abc8:	4852      	ldr	r0, [pc, #328]	@ (800ad14 <_printf_i+0x238>)
 800abca:	bf14      	ite	ne
 800abcc:	230a      	movne	r3, #10
 800abce:	2308      	moveq	r3, #8
 800abd0:	2100      	movs	r1, #0
 800abd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abd6:	6866      	ldr	r6, [r4, #4]
 800abd8:	2e00      	cmp	r6, #0
 800abda:	60a6      	str	r6, [r4, #8]
 800abdc:	bfa2      	ittt	ge
 800abde:	6821      	ldrge	r1, [r4, #0]
 800abe0:	f021 0104 	bicge.w	r1, r1, #4
 800abe4:	6021      	strge	r1, [r4, #0]
 800abe6:	b90d      	cbnz	r5, 800abec <_printf_i+0x110>
 800abe8:	2e00      	cmp	r6, #0
 800abea:	d04b      	beq.n	800ac84 <_printf_i+0x1a8>
 800abec:	4616      	mov	r6, r2
 800abee:	fbb5 f1f3 	udiv	r1, r5, r3
 800abf2:	fb03 5711 	mls	r7, r3, r1, r5
 800abf6:	5dc7      	ldrb	r7, [r0, r7]
 800abf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abfc:	462f      	mov	r7, r5
 800abfe:	460d      	mov	r5, r1
 800ac00:	42bb      	cmp	r3, r7
 800ac02:	d9f4      	bls.n	800abee <_printf_i+0x112>
 800ac04:	2b08      	cmp	r3, #8
 800ac06:	d10b      	bne.n	800ac20 <_printf_i+0x144>
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	07df      	lsls	r7, r3, #31
 800ac0c:	d508      	bpl.n	800ac20 <_printf_i+0x144>
 800ac0e:	6923      	ldr	r3, [r4, #16]
 800ac10:	6861      	ldr	r1, [r4, #4]
 800ac12:	4299      	cmp	r1, r3
 800ac14:	bfde      	ittt	le
 800ac16:	2330      	movle	r3, #48	@ 0x30
 800ac18:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac20:	1b92      	subs	r2, r2, r6
 800ac22:	6122      	str	r2, [r4, #16]
 800ac24:	464b      	mov	r3, r9
 800ac26:	aa03      	add	r2, sp, #12
 800ac28:	4621      	mov	r1, r4
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	f8cd a000 	str.w	sl, [sp]
 800ac30:	f7ff fee2 	bl	800a9f8 <_printf_common>
 800ac34:	3001      	adds	r0, #1
 800ac36:	d14a      	bne.n	800acce <_printf_i+0x1f2>
 800ac38:	f04f 30ff 	mov.w	r0, #4294967295
 800ac3c:	b004      	add	sp, #16
 800ac3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	f043 0320 	orr.w	r3, r3, #32
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	2778      	movs	r7, #120	@ 0x78
 800ac4c:	4832      	ldr	r0, [pc, #200]	@ (800ad18 <_printf_i+0x23c>)
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac54:	061f      	lsls	r7, r3, #24
 800ac56:	6831      	ldr	r1, [r6, #0]
 800ac58:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac5c:	d402      	bmi.n	800ac64 <_printf_i+0x188>
 800ac5e:	065f      	lsls	r7, r3, #25
 800ac60:	bf48      	it	mi
 800ac62:	b2ad      	uxthmi	r5, r5
 800ac64:	6031      	str	r1, [r6, #0]
 800ac66:	07d9      	lsls	r1, r3, #31
 800ac68:	bf44      	itt	mi
 800ac6a:	f043 0320 	orrmi.w	r3, r3, #32
 800ac6e:	6023      	strmi	r3, [r4, #0]
 800ac70:	b11d      	cbz	r5, 800ac7a <_printf_i+0x19e>
 800ac72:	2310      	movs	r3, #16
 800ac74:	e7ac      	b.n	800abd0 <_printf_i+0xf4>
 800ac76:	4827      	ldr	r0, [pc, #156]	@ (800ad14 <_printf_i+0x238>)
 800ac78:	e7e9      	b.n	800ac4e <_printf_i+0x172>
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	f023 0320 	bic.w	r3, r3, #32
 800ac80:	6023      	str	r3, [r4, #0]
 800ac82:	e7f6      	b.n	800ac72 <_printf_i+0x196>
 800ac84:	4616      	mov	r6, r2
 800ac86:	e7bd      	b.n	800ac04 <_printf_i+0x128>
 800ac88:	6833      	ldr	r3, [r6, #0]
 800ac8a:	6825      	ldr	r5, [r4, #0]
 800ac8c:	1d18      	adds	r0, r3, #4
 800ac8e:	6961      	ldr	r1, [r4, #20]
 800ac90:	6030      	str	r0, [r6, #0]
 800ac92:	062e      	lsls	r6, r5, #24
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	d501      	bpl.n	800ac9c <_printf_i+0x1c0>
 800ac98:	6019      	str	r1, [r3, #0]
 800ac9a:	e002      	b.n	800aca2 <_printf_i+0x1c6>
 800ac9c:	0668      	lsls	r0, r5, #25
 800ac9e:	d5fb      	bpl.n	800ac98 <_printf_i+0x1bc>
 800aca0:	8019      	strh	r1, [r3, #0]
 800aca2:	2300      	movs	r3, #0
 800aca4:	4616      	mov	r6, r2
 800aca6:	6123      	str	r3, [r4, #16]
 800aca8:	e7bc      	b.n	800ac24 <_printf_i+0x148>
 800acaa:	6833      	ldr	r3, [r6, #0]
 800acac:	2100      	movs	r1, #0
 800acae:	1d1a      	adds	r2, r3, #4
 800acb0:	6032      	str	r2, [r6, #0]
 800acb2:	681e      	ldr	r6, [r3, #0]
 800acb4:	6862      	ldr	r2, [r4, #4]
 800acb6:	4630      	mov	r0, r6
 800acb8:	f000 f980 	bl	800afbc <memchr>
 800acbc:	b108      	cbz	r0, 800acc2 <_printf_i+0x1e6>
 800acbe:	1b80      	subs	r0, r0, r6
 800acc0:	6060      	str	r0, [r4, #4]
 800acc2:	6863      	ldr	r3, [r4, #4]
 800acc4:	6123      	str	r3, [r4, #16]
 800acc6:	2300      	movs	r3, #0
 800acc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800accc:	e7aa      	b.n	800ac24 <_printf_i+0x148>
 800acce:	6923      	ldr	r3, [r4, #16]
 800acd0:	4632      	mov	r2, r6
 800acd2:	4649      	mov	r1, r9
 800acd4:	4640      	mov	r0, r8
 800acd6:	47d0      	blx	sl
 800acd8:	3001      	adds	r0, #1
 800acda:	d0ad      	beq.n	800ac38 <_printf_i+0x15c>
 800acdc:	6823      	ldr	r3, [r4, #0]
 800acde:	079b      	lsls	r3, r3, #30
 800ace0:	d413      	bmi.n	800ad0a <_printf_i+0x22e>
 800ace2:	68e0      	ldr	r0, [r4, #12]
 800ace4:	9b03      	ldr	r3, [sp, #12]
 800ace6:	4298      	cmp	r0, r3
 800ace8:	bfb8      	it	lt
 800acea:	4618      	movlt	r0, r3
 800acec:	e7a6      	b.n	800ac3c <_printf_i+0x160>
 800acee:	2301      	movs	r3, #1
 800acf0:	4632      	mov	r2, r6
 800acf2:	4649      	mov	r1, r9
 800acf4:	4640      	mov	r0, r8
 800acf6:	47d0      	blx	sl
 800acf8:	3001      	adds	r0, #1
 800acfa:	d09d      	beq.n	800ac38 <_printf_i+0x15c>
 800acfc:	3501      	adds	r5, #1
 800acfe:	68e3      	ldr	r3, [r4, #12]
 800ad00:	9903      	ldr	r1, [sp, #12]
 800ad02:	1a5b      	subs	r3, r3, r1
 800ad04:	42ab      	cmp	r3, r5
 800ad06:	dcf2      	bgt.n	800acee <_printf_i+0x212>
 800ad08:	e7eb      	b.n	800ace2 <_printf_i+0x206>
 800ad0a:	2500      	movs	r5, #0
 800ad0c:	f104 0619 	add.w	r6, r4, #25
 800ad10:	e7f5      	b.n	800acfe <_printf_i+0x222>
 800ad12:	bf00      	nop
 800ad14:	0800b22d 	.word	0x0800b22d
 800ad18:	0800b23e 	.word	0x0800b23e

0800ad1c <__sflush_r>:
 800ad1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad24:	0716      	lsls	r6, r2, #28
 800ad26:	4605      	mov	r5, r0
 800ad28:	460c      	mov	r4, r1
 800ad2a:	d454      	bmi.n	800add6 <__sflush_r+0xba>
 800ad2c:	684b      	ldr	r3, [r1, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	dc02      	bgt.n	800ad38 <__sflush_r+0x1c>
 800ad32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dd48      	ble.n	800adca <__sflush_r+0xae>
 800ad38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad3a:	2e00      	cmp	r6, #0
 800ad3c:	d045      	beq.n	800adca <__sflush_r+0xae>
 800ad3e:	2300      	movs	r3, #0
 800ad40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad44:	682f      	ldr	r7, [r5, #0]
 800ad46:	6a21      	ldr	r1, [r4, #32]
 800ad48:	602b      	str	r3, [r5, #0]
 800ad4a:	d030      	beq.n	800adae <__sflush_r+0x92>
 800ad4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	0759      	lsls	r1, r3, #29
 800ad52:	d505      	bpl.n	800ad60 <__sflush_r+0x44>
 800ad54:	6863      	ldr	r3, [r4, #4]
 800ad56:	1ad2      	subs	r2, r2, r3
 800ad58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad5a:	b10b      	cbz	r3, 800ad60 <__sflush_r+0x44>
 800ad5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad5e:	1ad2      	subs	r2, r2, r3
 800ad60:	2300      	movs	r3, #0
 800ad62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad64:	6a21      	ldr	r1, [r4, #32]
 800ad66:	4628      	mov	r0, r5
 800ad68:	47b0      	blx	r6
 800ad6a:	1c43      	adds	r3, r0, #1
 800ad6c:	89a3      	ldrh	r3, [r4, #12]
 800ad6e:	d106      	bne.n	800ad7e <__sflush_r+0x62>
 800ad70:	6829      	ldr	r1, [r5, #0]
 800ad72:	291d      	cmp	r1, #29
 800ad74:	d82b      	bhi.n	800adce <__sflush_r+0xb2>
 800ad76:	4a2a      	ldr	r2, [pc, #168]	@ (800ae20 <__sflush_r+0x104>)
 800ad78:	410a      	asrs	r2, r1
 800ad7a:	07d6      	lsls	r6, r2, #31
 800ad7c:	d427      	bmi.n	800adce <__sflush_r+0xb2>
 800ad7e:	2200      	movs	r2, #0
 800ad80:	04d9      	lsls	r1, r3, #19
 800ad82:	6062      	str	r2, [r4, #4]
 800ad84:	6922      	ldr	r2, [r4, #16]
 800ad86:	6022      	str	r2, [r4, #0]
 800ad88:	d504      	bpl.n	800ad94 <__sflush_r+0x78>
 800ad8a:	1c42      	adds	r2, r0, #1
 800ad8c:	d101      	bne.n	800ad92 <__sflush_r+0x76>
 800ad8e:	682b      	ldr	r3, [r5, #0]
 800ad90:	b903      	cbnz	r3, 800ad94 <__sflush_r+0x78>
 800ad92:	6560      	str	r0, [r4, #84]	@ 0x54
 800ad94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad96:	602f      	str	r7, [r5, #0]
 800ad98:	b1b9      	cbz	r1, 800adca <__sflush_r+0xae>
 800ad9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad9e:	4299      	cmp	r1, r3
 800ada0:	d002      	beq.n	800ada8 <__sflush_r+0x8c>
 800ada2:	4628      	mov	r0, r5
 800ada4:	f7ff fbee 	bl	800a584 <_free_r>
 800ada8:	2300      	movs	r3, #0
 800adaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800adac:	e00d      	b.n	800adca <__sflush_r+0xae>
 800adae:	2301      	movs	r3, #1
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b0      	blx	r6
 800adb4:	4602      	mov	r2, r0
 800adb6:	1c50      	adds	r0, r2, #1
 800adb8:	d1c9      	bne.n	800ad4e <__sflush_r+0x32>
 800adba:	682b      	ldr	r3, [r5, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d0c6      	beq.n	800ad4e <__sflush_r+0x32>
 800adc0:	2b1d      	cmp	r3, #29
 800adc2:	d001      	beq.n	800adc8 <__sflush_r+0xac>
 800adc4:	2b16      	cmp	r3, #22
 800adc6:	d11d      	bne.n	800ae04 <__sflush_r+0xe8>
 800adc8:	602f      	str	r7, [r5, #0]
 800adca:	2000      	movs	r0, #0
 800adcc:	e021      	b.n	800ae12 <__sflush_r+0xf6>
 800adce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800add2:	b21b      	sxth	r3, r3
 800add4:	e01a      	b.n	800ae0c <__sflush_r+0xf0>
 800add6:	690f      	ldr	r7, [r1, #16]
 800add8:	2f00      	cmp	r7, #0
 800adda:	d0f6      	beq.n	800adca <__sflush_r+0xae>
 800addc:	0793      	lsls	r3, r2, #30
 800adde:	680e      	ldr	r6, [r1, #0]
 800ade0:	600f      	str	r7, [r1, #0]
 800ade2:	bf0c      	ite	eq
 800ade4:	694b      	ldreq	r3, [r1, #20]
 800ade6:	2300      	movne	r3, #0
 800ade8:	eba6 0807 	sub.w	r8, r6, r7
 800adec:	608b      	str	r3, [r1, #8]
 800adee:	f1b8 0f00 	cmp.w	r8, #0
 800adf2:	ddea      	ble.n	800adca <__sflush_r+0xae>
 800adf4:	4643      	mov	r3, r8
 800adf6:	463a      	mov	r2, r7
 800adf8:	6a21      	ldr	r1, [r4, #32]
 800adfa:	4628      	mov	r0, r5
 800adfc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800adfe:	47b0      	blx	r6
 800ae00:	2800      	cmp	r0, #0
 800ae02:	dc08      	bgt.n	800ae16 <__sflush_r+0xfa>
 800ae04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae10:	81a3      	strh	r3, [r4, #12]
 800ae12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae16:	4407      	add	r7, r0
 800ae18:	eba8 0800 	sub.w	r8, r8, r0
 800ae1c:	e7e7      	b.n	800adee <__sflush_r+0xd2>
 800ae1e:	bf00      	nop
 800ae20:	dfbffffe 	.word	0xdfbffffe

0800ae24 <_fflush_r>:
 800ae24:	b538      	push	{r3, r4, r5, lr}
 800ae26:	690b      	ldr	r3, [r1, #16]
 800ae28:	4605      	mov	r5, r0
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	b913      	cbnz	r3, 800ae34 <_fflush_r+0x10>
 800ae2e:	2500      	movs	r5, #0
 800ae30:	4628      	mov	r0, r5
 800ae32:	bd38      	pop	{r3, r4, r5, pc}
 800ae34:	b118      	cbz	r0, 800ae3e <_fflush_r+0x1a>
 800ae36:	6a03      	ldr	r3, [r0, #32]
 800ae38:	b90b      	cbnz	r3, 800ae3e <_fflush_r+0x1a>
 800ae3a:	f7ff fa87 	bl	800a34c <__sinit>
 800ae3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d0f3      	beq.n	800ae2e <_fflush_r+0xa>
 800ae46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae48:	07d0      	lsls	r0, r2, #31
 800ae4a:	d404      	bmi.n	800ae56 <_fflush_r+0x32>
 800ae4c:	0599      	lsls	r1, r3, #22
 800ae4e:	d402      	bmi.n	800ae56 <_fflush_r+0x32>
 800ae50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae52:	f7ff fb80 	bl	800a556 <__retarget_lock_acquire_recursive>
 800ae56:	4628      	mov	r0, r5
 800ae58:	4621      	mov	r1, r4
 800ae5a:	f7ff ff5f 	bl	800ad1c <__sflush_r>
 800ae5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae60:	4605      	mov	r5, r0
 800ae62:	07da      	lsls	r2, r3, #31
 800ae64:	d4e4      	bmi.n	800ae30 <_fflush_r+0xc>
 800ae66:	89a3      	ldrh	r3, [r4, #12]
 800ae68:	059b      	lsls	r3, r3, #22
 800ae6a:	d4e1      	bmi.n	800ae30 <_fflush_r+0xc>
 800ae6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae6e:	f7ff fb73 	bl	800a558 <__retarget_lock_release_recursive>
 800ae72:	e7dd      	b.n	800ae30 <_fflush_r+0xc>

0800ae74 <__swbuf_r>:
 800ae74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae76:	460e      	mov	r6, r1
 800ae78:	4614      	mov	r4, r2
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	b118      	cbz	r0, 800ae86 <__swbuf_r+0x12>
 800ae7e:	6a03      	ldr	r3, [r0, #32]
 800ae80:	b90b      	cbnz	r3, 800ae86 <__swbuf_r+0x12>
 800ae82:	f7ff fa63 	bl	800a34c <__sinit>
 800ae86:	69a3      	ldr	r3, [r4, #24]
 800ae88:	60a3      	str	r3, [r4, #8]
 800ae8a:	89a3      	ldrh	r3, [r4, #12]
 800ae8c:	071a      	lsls	r2, r3, #28
 800ae8e:	d501      	bpl.n	800ae94 <__swbuf_r+0x20>
 800ae90:	6923      	ldr	r3, [r4, #16]
 800ae92:	b943      	cbnz	r3, 800aea6 <__swbuf_r+0x32>
 800ae94:	4621      	mov	r1, r4
 800ae96:	4628      	mov	r0, r5
 800ae98:	f000 f82a 	bl	800aef0 <__swsetup_r>
 800ae9c:	b118      	cbz	r0, 800aea6 <__swbuf_r+0x32>
 800ae9e:	f04f 37ff 	mov.w	r7, #4294967295
 800aea2:	4638      	mov	r0, r7
 800aea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aea6:	6823      	ldr	r3, [r4, #0]
 800aea8:	b2f6      	uxtb	r6, r6
 800aeaa:	6922      	ldr	r2, [r4, #16]
 800aeac:	4637      	mov	r7, r6
 800aeae:	1a98      	subs	r0, r3, r2
 800aeb0:	6963      	ldr	r3, [r4, #20]
 800aeb2:	4283      	cmp	r3, r0
 800aeb4:	dc05      	bgt.n	800aec2 <__swbuf_r+0x4e>
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	4628      	mov	r0, r5
 800aeba:	f7ff ffb3 	bl	800ae24 <_fflush_r>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d1ed      	bne.n	800ae9e <__swbuf_r+0x2a>
 800aec2:	68a3      	ldr	r3, [r4, #8]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	60a3      	str	r3, [r4, #8]
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	1c5a      	adds	r2, r3, #1
 800aecc:	6022      	str	r2, [r4, #0]
 800aece:	701e      	strb	r6, [r3, #0]
 800aed0:	1c43      	adds	r3, r0, #1
 800aed2:	6962      	ldr	r2, [r4, #20]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d004      	beq.n	800aee2 <__swbuf_r+0x6e>
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	07db      	lsls	r3, r3, #31
 800aedc:	d5e1      	bpl.n	800aea2 <__swbuf_r+0x2e>
 800aede:	2e0a      	cmp	r6, #10
 800aee0:	d1df      	bne.n	800aea2 <__swbuf_r+0x2e>
 800aee2:	4621      	mov	r1, r4
 800aee4:	4628      	mov	r0, r5
 800aee6:	f7ff ff9d 	bl	800ae24 <_fflush_r>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d0d9      	beq.n	800aea2 <__swbuf_r+0x2e>
 800aeee:	e7d6      	b.n	800ae9e <__swbuf_r+0x2a>

0800aef0 <__swsetup_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4b29      	ldr	r3, [pc, #164]	@ (800af98 <__swsetup_r+0xa8>)
 800aef4:	4605      	mov	r5, r0
 800aef6:	460c      	mov	r4, r1
 800aef8:	6818      	ldr	r0, [r3, #0]
 800aefa:	b118      	cbz	r0, 800af04 <__swsetup_r+0x14>
 800aefc:	6a03      	ldr	r3, [r0, #32]
 800aefe:	b90b      	cbnz	r3, 800af04 <__swsetup_r+0x14>
 800af00:	f7ff fa24 	bl	800a34c <__sinit>
 800af04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af08:	0719      	lsls	r1, r3, #28
 800af0a:	d422      	bmi.n	800af52 <__swsetup_r+0x62>
 800af0c:	06da      	lsls	r2, r3, #27
 800af0e:	d407      	bmi.n	800af20 <__swsetup_r+0x30>
 800af10:	2209      	movs	r2, #9
 800af12:	602a      	str	r2, [r5, #0]
 800af14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af18:	f04f 30ff 	mov.w	r0, #4294967295
 800af1c:	81a3      	strh	r3, [r4, #12]
 800af1e:	e033      	b.n	800af88 <__swsetup_r+0x98>
 800af20:	0758      	lsls	r0, r3, #29
 800af22:	d512      	bpl.n	800af4a <__swsetup_r+0x5a>
 800af24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af26:	b141      	cbz	r1, 800af3a <__swsetup_r+0x4a>
 800af28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af2c:	4299      	cmp	r1, r3
 800af2e:	d002      	beq.n	800af36 <__swsetup_r+0x46>
 800af30:	4628      	mov	r0, r5
 800af32:	f7ff fb27 	bl	800a584 <_free_r>
 800af36:	2300      	movs	r3, #0
 800af38:	6363      	str	r3, [r4, #52]	@ 0x34
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af40:	81a3      	strh	r3, [r4, #12]
 800af42:	2300      	movs	r3, #0
 800af44:	6063      	str	r3, [r4, #4]
 800af46:	6923      	ldr	r3, [r4, #16]
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	f043 0308 	orr.w	r3, r3, #8
 800af50:	81a3      	strh	r3, [r4, #12]
 800af52:	6923      	ldr	r3, [r4, #16]
 800af54:	b94b      	cbnz	r3, 800af6a <__swsetup_r+0x7a>
 800af56:	89a3      	ldrh	r3, [r4, #12]
 800af58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af60:	d003      	beq.n	800af6a <__swsetup_r+0x7a>
 800af62:	4621      	mov	r1, r4
 800af64:	4628      	mov	r0, r5
 800af66:	f000 f85c 	bl	800b022 <__smakebuf_r>
 800af6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af6e:	f013 0201 	ands.w	r2, r3, #1
 800af72:	d00a      	beq.n	800af8a <__swsetup_r+0x9a>
 800af74:	2200      	movs	r2, #0
 800af76:	60a2      	str	r2, [r4, #8]
 800af78:	6962      	ldr	r2, [r4, #20]
 800af7a:	4252      	negs	r2, r2
 800af7c:	61a2      	str	r2, [r4, #24]
 800af7e:	6922      	ldr	r2, [r4, #16]
 800af80:	b942      	cbnz	r2, 800af94 <__swsetup_r+0xa4>
 800af82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af86:	d1c5      	bne.n	800af14 <__swsetup_r+0x24>
 800af88:	bd38      	pop	{r3, r4, r5, pc}
 800af8a:	0799      	lsls	r1, r3, #30
 800af8c:	bf58      	it	pl
 800af8e:	6962      	ldrpl	r2, [r4, #20]
 800af90:	60a2      	str	r2, [r4, #8]
 800af92:	e7f4      	b.n	800af7e <__swsetup_r+0x8e>
 800af94:	2000      	movs	r0, #0
 800af96:	e7f7      	b.n	800af88 <__swsetup_r+0x98>
 800af98:	200000bc 	.word	0x200000bc

0800af9c <_sbrk_r>:
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	2300      	movs	r3, #0
 800afa0:	4d05      	ldr	r5, [pc, #20]	@ (800afb8 <_sbrk_r+0x1c>)
 800afa2:	4604      	mov	r4, r0
 800afa4:	4608      	mov	r0, r1
 800afa6:	602b      	str	r3, [r5, #0]
 800afa8:	f7f6 fb12 	bl	80015d0 <_sbrk>
 800afac:	1c43      	adds	r3, r0, #1
 800afae:	d102      	bne.n	800afb6 <_sbrk_r+0x1a>
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	b103      	cbz	r3, 800afb6 <_sbrk_r+0x1a>
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	bd38      	pop	{r3, r4, r5, pc}
 800afb8:	200017bc 	.word	0x200017bc

0800afbc <memchr>:
 800afbc:	b2c9      	uxtb	r1, r1
 800afbe:	4603      	mov	r3, r0
 800afc0:	4402      	add	r2, r0
 800afc2:	b510      	push	{r4, lr}
 800afc4:	4293      	cmp	r3, r2
 800afc6:	4618      	mov	r0, r3
 800afc8:	d101      	bne.n	800afce <memchr+0x12>
 800afca:	2000      	movs	r0, #0
 800afcc:	e003      	b.n	800afd6 <memchr+0x1a>
 800afce:	7804      	ldrb	r4, [r0, #0]
 800afd0:	3301      	adds	r3, #1
 800afd2:	428c      	cmp	r4, r1
 800afd4:	d1f6      	bne.n	800afc4 <memchr+0x8>
 800afd6:	bd10      	pop	{r4, pc}

0800afd8 <__swhatbuf_r>:
 800afd8:	b570      	push	{r4, r5, r6, lr}
 800afda:	460c      	mov	r4, r1
 800afdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afe0:	b096      	sub	sp, #88	@ 0x58
 800afe2:	4615      	mov	r5, r2
 800afe4:	2900      	cmp	r1, #0
 800afe6:	461e      	mov	r6, r3
 800afe8:	da0c      	bge.n	800b004 <__swhatbuf_r+0x2c>
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	2100      	movs	r1, #0
 800afee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aff2:	bf14      	ite	ne
 800aff4:	2340      	movne	r3, #64	@ 0x40
 800aff6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800affa:	2000      	movs	r0, #0
 800affc:	6031      	str	r1, [r6, #0]
 800affe:	602b      	str	r3, [r5, #0]
 800b000:	b016      	add	sp, #88	@ 0x58
 800b002:	bd70      	pop	{r4, r5, r6, pc}
 800b004:	466a      	mov	r2, sp
 800b006:	f000 f849 	bl	800b09c <_fstat_r>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	dbed      	blt.n	800afea <__swhatbuf_r+0x12>
 800b00e:	9901      	ldr	r1, [sp, #4]
 800b010:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b014:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b018:	4259      	negs	r1, r3
 800b01a:	4159      	adcs	r1, r3
 800b01c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b020:	e7eb      	b.n	800affa <__swhatbuf_r+0x22>

0800b022 <__smakebuf_r>:
 800b022:	898b      	ldrh	r3, [r1, #12]
 800b024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b026:	079d      	lsls	r5, r3, #30
 800b028:	4606      	mov	r6, r0
 800b02a:	460c      	mov	r4, r1
 800b02c:	d507      	bpl.n	800b03e <__smakebuf_r+0x1c>
 800b02e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b032:	6023      	str	r3, [r4, #0]
 800b034:	6123      	str	r3, [r4, #16]
 800b036:	2301      	movs	r3, #1
 800b038:	6163      	str	r3, [r4, #20]
 800b03a:	b003      	add	sp, #12
 800b03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b03e:	ab01      	add	r3, sp, #4
 800b040:	466a      	mov	r2, sp
 800b042:	f7ff ffc9 	bl	800afd8 <__swhatbuf_r>
 800b046:	9f00      	ldr	r7, [sp, #0]
 800b048:	4605      	mov	r5, r0
 800b04a:	4630      	mov	r0, r6
 800b04c:	4639      	mov	r1, r7
 800b04e:	f7ff fb05 	bl	800a65c <_malloc_r>
 800b052:	b948      	cbnz	r0, 800b068 <__smakebuf_r+0x46>
 800b054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b058:	059a      	lsls	r2, r3, #22
 800b05a:	d4ee      	bmi.n	800b03a <__smakebuf_r+0x18>
 800b05c:	f023 0303 	bic.w	r3, r3, #3
 800b060:	f043 0302 	orr.w	r3, r3, #2
 800b064:	81a3      	strh	r3, [r4, #12]
 800b066:	e7e2      	b.n	800b02e <__smakebuf_r+0xc>
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	6020      	str	r0, [r4, #0]
 800b06c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b070:	81a3      	strh	r3, [r4, #12]
 800b072:	9b01      	ldr	r3, [sp, #4]
 800b074:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b078:	b15b      	cbz	r3, 800b092 <__smakebuf_r+0x70>
 800b07a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b07e:	4630      	mov	r0, r6
 800b080:	f000 f81e 	bl	800b0c0 <_isatty_r>
 800b084:	b128      	cbz	r0, 800b092 <__smakebuf_r+0x70>
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	f023 0303 	bic.w	r3, r3, #3
 800b08c:	f043 0301 	orr.w	r3, r3, #1
 800b090:	81a3      	strh	r3, [r4, #12]
 800b092:	89a3      	ldrh	r3, [r4, #12]
 800b094:	431d      	orrs	r5, r3
 800b096:	81a5      	strh	r5, [r4, #12]
 800b098:	e7cf      	b.n	800b03a <__smakebuf_r+0x18>
	...

0800b09c <_fstat_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	2300      	movs	r3, #0
 800b0a0:	4d06      	ldr	r5, [pc, #24]	@ (800b0bc <_fstat_r+0x20>)
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	4608      	mov	r0, r1
 800b0a6:	4611      	mov	r1, r2
 800b0a8:	602b      	str	r3, [r5, #0]
 800b0aa:	f7f6 fa68 	bl	800157e <_fstat>
 800b0ae:	1c43      	adds	r3, r0, #1
 800b0b0:	d102      	bne.n	800b0b8 <_fstat_r+0x1c>
 800b0b2:	682b      	ldr	r3, [r5, #0]
 800b0b4:	b103      	cbz	r3, 800b0b8 <_fstat_r+0x1c>
 800b0b6:	6023      	str	r3, [r4, #0]
 800b0b8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ba:	bf00      	nop
 800b0bc:	200017bc 	.word	0x200017bc

0800b0c0 <_isatty_r>:
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	4d05      	ldr	r5, [pc, #20]	@ (800b0dc <_isatty_r+0x1c>)
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	4608      	mov	r0, r1
 800b0ca:	602b      	str	r3, [r5, #0]
 800b0cc:	f7f6 fa67 	bl	800159e <_isatty>
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	d102      	bne.n	800b0da <_isatty_r+0x1a>
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	b103      	cbz	r3, 800b0da <_isatty_r+0x1a>
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	bd38      	pop	{r3, r4, r5, pc}
 800b0dc:	200017bc 	.word	0x200017bc

0800b0e0 <_init>:
 800b0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e2:	bf00      	nop
 800b0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0e6:	bc08      	pop	{r3}
 800b0e8:	469e      	mov	lr, r3
 800b0ea:	4770      	bx	lr

0800b0ec <_fini>:
 800b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ee:	bf00      	nop
 800b0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0f2:	bc08      	pop	{r3}
 800b0f4:	469e      	mov	lr, r3
 800b0f6:	4770      	bx	lr
