
STM32U575ZIT6Q-gpio-dac-dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afdc  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000557  0800b214  0800b214  0000c214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b76c  0800b76c  0000c76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b774  0800b774  0000c774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b778  0800b778  0000c778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000a4  20000000  0800b77c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008810  200000a4  0800b820  0000d0a4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200088b4  0800b820  0000d8b4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000d0a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f8b1  00000000  00000000  0000d0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c59  00000000  00000000  0002c98b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001940  00000000  00000000  000305e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000139a  00000000  00000000  00031f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003544f  00000000  00000000  000332c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020530  00000000  00000000  00068711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001493a0  00000000  00000000  00088c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d1fe1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000730c  00000000  00000000  001d2024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  001d9330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200000a4 	.word	0x200000a4
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b1fc 	.word	0x0800b1fc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200000a8 	.word	0x200000a8
 8000274:	0800b1fc 	.word	0x0800b1fc

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIOQueue_Config>:
  * @brief  DMA Linked-list GPIOQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_GPIOQueue_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b09c      	sub	sp, #112	@ 0x70
 8000594:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 8000596:	2300      	movs	r3, #0
 8000598:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800059c:	2321      	movs	r3, #33	@ 0x21
 800059e:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_TIM2_UP;
 80005a0:	233c      	movs	r3, #60	@ 0x3c
 80005a2:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ac:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 80005ae:	2308      	movs	r3, #8
 80005b0:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80005ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80005be:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	627b      	str	r3, [r7, #36]	@ 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 80005cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80005d0:	633b      	str	r3, [r7, #48]	@ 0x30
  pNodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 80005d2:	2300      	movs	r3, #0
 80005d4:	643b      	str	r3, [r7, #64]	@ 0x40
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80005d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80005da:	647b      	str	r3, [r7, #68]	@ 0x44
  pNodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM2_TRGO;
 80005dc:	232a      	movs	r3, #42	@ 0x2a
 80005de:	64bb      	str	r3, [r7, #72]	@ 0x48
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pNodeConfig.SrcAddress = (uint32_t) stGPIOVals;
 80005e8:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <MX_GPIOQueue_Config+0xb8>)
 80005ea:	663b      	str	r3, [r7, #96]	@ 0x60
		break;
	case PORTD:
		pNodeConfig.DstAddress = (uint32_t)&(GPIOD->ODR);
		break;
	case PORTE:
		pNodeConfig.DstAddress = (uint32_t)&(GPIOE->ODR);
 80005ec:	4b17      	ldr	r3, [pc, #92]	@ (800064c <MX_GPIOQueue_Config+0xbc>)
 80005ee:	667b      	str	r3, [r7, #100]	@ 0x64
		break;
 80005f0:	bf00      	nop
	default:
		pNodeConfig.DstAddress = (uint32_t)&(GPIOE->ODR);
		break;
}

  pNodeConfig.DataSize = NV * sizeof(uint32_t);
 80005f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f6:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Build GPIOENode Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &stGPIONode);
 80005f8:	463b      	mov	r3, r7
 80005fa:	4915      	ldr	r1, [pc, #84]	@ (8000650 <MX_GPIOQueue_Config+0xc0>)
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 f94f 	bl	80038a0 <HAL_DMAEx_List_BuildNode>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800060a:	4313      	orrs	r3, r2
 800060c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  /* Insert GPIOENode to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&stGPIOQueue, &stGPIONode);
 8000610:	490f      	ldr	r1, [pc, #60]	@ (8000650 <MX_GPIOQueue_Config+0xc0>)
 8000612:	4810      	ldr	r0, [pc, #64]	@ (8000654 <MX_GPIOQueue_Config+0xc4>)
 8000614:	f003 f970 	bl	80038f8 <HAL_DMAEx_List_InsertNode_Tail>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000620:	4313      	orrs	r3, r2
 8000622:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  ret |= HAL_DMAEx_List_SetCircularMode(&stGPIOQueue);
 8000626:	480b      	ldr	r0, [pc, #44]	@ (8000654 <MX_GPIOQueue_Config+0xc4>)
 8000628:	f003 f9de 	bl	80039e8 <HAL_DMAEx_List_SetCircularMode>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000634:	4313      	orrs	r3, r2
 8000636:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

   return ret;
 800063a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800063e:	4618      	mov	r0, r3
 8000640:	3770      	adds	r7, #112	@ 0x70
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20006670 	.word	0x20006670
 800064c:	42021014 	.word	0x42021014
 8000650:	200000c0 	.word	0x200000c0
 8000654:	200000e4 	.word	0x200000e4

08000658 <MX_DACQueue_Config>:
  * @brief  DMA Linked-list DACQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_DACQueue_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b09c      	sub	sp, #112	@ 0x70
 800065c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8000664:	2321      	movs	r3, #33	@ 0x21
 8000666:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_DAC1_CH1;
 8000668:	2302      	movs	r3, #2
 800066a:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000674:	2308      	movs	r3, #8
 8000676:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 800067c:	2302      	movs	r3, #2
 800067e:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8000680:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000684:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800068e:	2300      	movs	r3, #0
 8000690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000692:	2300      	movs	r3, #0
 8000694:	633b      	str	r3, [r7, #48]	@ 0x30
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8000696:	2300      	movs	r3, #0
 8000698:	647b      	str	r3, [r7, #68]	@ 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800069a:	2300      	movs	r3, #0
 800069c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800069e:	2300      	movs	r3, #0
 80006a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pNodeConfig.SrcAddress = (uint32_t)stDACVals;
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_DACQueue_Config+0xa8>)
 80006a4:	663b      	str	r3, [r7, #96]	@ 0x60
  pNodeConfig.DstAddress = (uint32_t)&(DAC1->DOR1);
 80006a6:	4b17      	ldr	r3, [pc, #92]	@ (8000704 <MX_DACQueue_Config+0xac>)
 80006a8:	667b      	str	r3, [r7, #100]	@ 0x64
  pNodeConfig.DataSize = NV * sizeof(uint32_t);
 80006aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ae:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Build DACNode Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &stDACNode);
 80006b0:	463b      	mov	r3, r7
 80006b2:	4915      	ldr	r1, [pc, #84]	@ (8000708 <MX_DACQueue_Config+0xb0>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 f8f3 	bl	80038a0 <HAL_DMAEx_List_BuildNode>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80006c2:	4313      	orrs	r3, r2
 80006c4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  /* Insert DACNode to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&stDACQueue, &stDACNode);
 80006c8:	490f      	ldr	r1, [pc, #60]	@ (8000708 <MX_DACQueue_Config+0xb0>)
 80006ca:	4810      	ldr	r0, [pc, #64]	@ (800070c <MX_DACQueue_Config+0xb4>)
 80006cc:	f003 f914 	bl	80038f8 <HAL_DMAEx_List_InsertNode_Tail>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80006d8:	4313      	orrs	r3, r2
 80006da:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  ret |= HAL_DMAEx_List_SetCircularMode(&stDACQueue);
 80006de:	480b      	ldr	r0, [pc, #44]	@ (800070c <MX_DACQueue_Config+0xb4>)
 80006e0:	f003 f982 	bl	80039e8 <HAL_DMAEx_List_SetCircularMode>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80006ec:	4313      	orrs	r3, r2
 80006ee:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

   return ret;
 80006f2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3770      	adds	r7, #112	@ 0x70
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20004670 	.word	0x20004670
 8000704:	4602182c 	.word	0x4602182c
 8000708:	200000fc 	.word	0x200000fc
 800070c:	20000120 	.word	0x20000120

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f001 fb6b 	bl	8001df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 800071a:	f000 f8b4 	bl	8000886 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f85f 	bl	80007e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b2b      	ldr	r3, [pc, #172]	@ (80007d0 <main+0xc0>)
 8000724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000728:	4a29      	ldr	r2, [pc, #164]	@ (80007d0 <main+0xc0>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000732:	4b27      	ldr	r3, [pc, #156]	@ (80007d0 <main+0xc0>)
 8000734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
//  state = st_disabled;
//  stGetGlobalState(&state);
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000740:	2000      	movs	r0, #0
 8000742:	f001 f903 	bl	800194c <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000746:	2001      	movs	r0, #1
 8000748:	f001 f900 	bl	800194c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800074c:	2002      	movs	r0, #2
 800074e:	f001 f8fd 	bl	800194c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000752:	2101      	movs	r1, #1
 8000754:	2000      	movs	r0, #0
 8000756:	f001 f9dd 	bl	8001b14 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800075a:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <main+0xc4>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000760:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000762:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <main+0xc4>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000768:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <main+0xc4>)
 800076a:	2200      	movs	r2, #0
 800076c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800076e:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <main+0xc4>)
 8000770:	2200      	movs	r2, #0
 8000772:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000774:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <main+0xc4>)
 8000776:	2200      	movs	r2, #0
 8000778:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800077a:	4916      	ldr	r1, [pc, #88]	@ (80007d4 <main+0xc4>)
 800077c:	2000      	movs	r0, #0
 800077e:	f001 fa57 	bl	8001c30 <BSP_COM_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <main+0x7c>
  {
    Error_Handler();
 8000788:	f000 f8ba 	bl	8000900 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 800078c:	4812      	ldr	r0, [pc, #72]	@ (80007d8 <main+0xc8>)
 800078e:	f009 fea1 	bl	800a4d4 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000792:	2000      	movs	r0, #0
 8000794:	f001 f96a 	bl	8001a6c <BSP_LED_On>
  BSP_LED_On(LED_BLUE);
 8000798:	2001      	movs	r0, #1
 800079a:	f001 f967 	bl	8001a6c <BSP_LED_On>
  BSP_LED_On(LED_RED);
 800079e:	2002      	movs	r0, #2
 80007a0:	f001 f964 	bl	8001a6c <BSP_LED_On>
//
//  /* USER CODE END BSP */
//
//  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
  stInitilize();
 80007a4:	f000 faf4 	bl	8000d90 <stInitilize>
  stStartStimulation();
 80007a8:	f000 fb00 	bl	8000dac <stStartStimulation>
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 80007ac:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <main+0xcc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d1fb      	bne.n	80007ac <main+0x9c>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <main+0xcc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f001 f980 	bl	8001ac0 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_BLUE);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f001 f97d 	bl	8001ac0 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 80007c6:	2002      	movs	r0, #2
 80007c8:	f001 f97a 	bl	8001ac0 <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED)
 80007cc:	e7ee      	b.n	80007ac <main+0x9c>
 80007ce:	bf00      	nop
 80007d0:	46020c00 	.word	0x46020c00
 80007d4:	20000138 	.word	0x20000138
 80007d8:	0800b214 	.word	0x0800b214
 80007dc:	20000148 	.word	0x20000148

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09e      	sub	sp, #120	@ 0x78
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0318 	add.w	r3, r7, #24
 80007ea:	2260      	movs	r2, #96	@ 0x60
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f009 fec5 	bl	800a57e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
 8000802:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000804:	2000      	movs	r0, #0
 8000806:	f004 fa5b 	bl	8004cc0 <HAL_PWREx_ControlVoltageScaling>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000810:	f000 f876 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000814:	231a      	movs	r3, #26
 8000816:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081e:	2310      	movs	r3, #16
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000822:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800082c:	2310      	movs	r3, #16
 800082e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000830:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800083a:	2300      	movs	r3, #0
 800083c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 0318 	add.w	r3, r7, #24
 8000842:	4618      	mov	r0, r3
 8000844:	f004 fb38 	bl	8004eb8 <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800084e:	f000 f857 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	231f      	movs	r3, #31
 8000854:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f005 f9fe 	bl	8005c70 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800087a:	f000 f841 	bl	8000900 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3778      	adds	r7, #120	@ 0x78
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800088a:	f004 fb05 	bl	8004e98 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800088e:	2002      	movs	r0, #2
 8000890:	f004 faa2 	bl	8004dd8 <HAL_PWREx_ConfigSupply>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemPower_Config+0x18>
  {
    Error_Handler();
 800089a:	f000 f831 	bl	8000900 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a08      	ldr	r2, [pc, #32]	@ (80008d4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d101      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b6:	f001 facb 	bl	8001e50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2) {
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008c2:	d102      	bne.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x26>
	  BSP_LED_Toggle(LED_BLUE);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f001 f8fb 	bl	8001ac0 <BSP_LED_Toggle>
  }
  /* USER CODE END Callback 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40014800 	.word	0x40014800

080008d8 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <BSP_PB_Callback+0x24>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
  }
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000148 	.word	0x20000148

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <Error_Handler+0x8>

0800090c <st_HALIinitilize>:
// Private function declaration
void st_DACDMAConfig();
void stError_Handler();
// Function implementations

void st_HALIinitilize(){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

	st_GPIO_Init();
 8000910:	f000 f852 	bl	80009b8 <st_GPIO_Init>
	st_GPDMA_Init();
 8000914:	f000 f8c0 	bl	8000a98 <st_GPDMA_Init>
	st_ICACHE_Init();
 8000918:	f000 f93a 	bl	8000b90 <st_ICACHE_Init>
	st_DAC_Init();
 800091c:	f000 f944 	bl	8000ba8 <st_DAC_Init>
	st_TIM_Init();
 8000920:	f000 f996 	bl	8000c50 <st_TIM_Init>

	MX_GPIOQueue_Config();
 8000924:	f7ff fe34 	bl	8000590 <MX_GPIOQueue_Config>
	HAL_DMAEx_List_LinkQ(&hGPDMA1_GPIO, &stGPIOQueue);
 8000928:	490a      	ldr	r1, [pc, #40]	@ (8000954 <st_HALIinitilize+0x48>)
 800092a:	480b      	ldr	r0, [pc, #44]	@ (8000958 <st_HALIinitilize+0x4c>)
 800092c:	f003 f8bc 	bl	8003aa8 <HAL_DMAEx_List_LinkQ>

	MX_DACQueue_Config();
 8000930:	f7ff fe92 	bl	8000658 <MX_DACQueue_Config>
	HAL_DMAEx_List_LinkQ(&hGPDMA1_DAC, &stDACQueue);
 8000934:	4909      	ldr	r1, [pc, #36]	@ (800095c <st_HALIinitilize+0x50>)
 8000936:	480a      	ldr	r0, [pc, #40]	@ (8000960 <st_HALIinitilize+0x54>)
 8000938:	f003 f8b6 	bl	8003aa8 <HAL_DMAEx_List_LinkQ>

	__HAL_LINKDMA(&hdac, DMA_Handle1, hGPDMA1_DAC);
 800093c:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <st_HALIinitilize+0x58>)
 800093e:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <st_HALIinitilize+0x54>)
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <st_HALIinitilize+0x54>)
 8000944:	4a07      	ldr	r2, [pc, #28]	@ (8000964 <st_HALIinitilize+0x58>)
 8000946:	65da      	str	r2, [r3, #92]	@ 0x5c
	HAL_DMAEx_List_Start(&hGPDMA1_GPIO);
 8000948:	4803      	ldr	r0, [pc, #12]	@ (8000958 <st_HALIinitilize+0x4c>)
 800094a:	f002 fea1 	bl	8003690 <HAL_DMAEx_List_Start>

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000e4 	.word	0x200000e4
 8000958:	200002b4 	.word	0x200002b4
 800095c:	20000120 	.word	0x20000120
 8000960:	2000032c 	.word	0x2000032c
 8000964:	20000278 	.word	0x20000278

08000968 <st_DMA_Start>:

void st_DMA_Start(){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af02      	add	r7, sp, #8
	/*  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel11, &GPIOQueue);
	HAL_DMAEx_List_Start(&handle_GPDMA1_Channel11);*/
	// GPIOS and DAC output
	switch (TIM) {
		case T2:
			TIM2->DIER |= (TIM_DIER_UDE) |  TIM_DIER_CC1DE;
 800096e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000978:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800097c:	60d3      	str	r3, [r2, #12]
			break;
 800097e:	bf00      	nop
	// HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)DACVals, NVALS, DAC_ALIGN_12B_R);
	/*  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel10, &DACQueue);
	HAL_DMAEx_List_Start(&handle_GPDMA1_Channel10);*/


	st_DACDMAConfig();
 8000980:	f000 f9b4 	bl	8000cec <st_DACDMAConfig>
	/* Enable DAC selected channel and associated DMA */// &[0] and
 	if (HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &stDACVals[0], GPIO_DAC_SIZE, DAC_ALIGN_12B_R) != HAL_OK)
 8000984:	2300      	movs	r3, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800098c:	4a07      	ldr	r2, [pc, #28]	@ (80009ac <st_DMA_Start+0x44>)
 800098e:	2100      	movs	r1, #0
 8000990:	4807      	ldr	r0, [pc, #28]	@ (80009b0 <st_DMA_Start+0x48>)
 8000992:	f001 fc87 	bl	80022a4 <HAL_DAC_Start_DMA>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <st_DMA_Start+0x38>
	{
		/* Start DMA Error */
		stError_Handler();
 800099c:	f000 f9f2 	bl	8000d84 <stError_Handler>
	}
	HAL_TIM_Base_Start_IT(&htim);//(&htim1, TIM_CHANNEL_1);
 80009a0:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <st_DMA_Start+0x4c>)
 80009a2:	f008 fa5d 	bl	8008e60 <HAL_TIM_Base_Start_IT>
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20004670 	.word	0x20004670
 80009b0:	20000278 	.word	0x20000278
 80009b4:	200003a4 	.word	0x200003a4

080009b8 <st_GPIO_Init>:

void st_DMA_Stop(){
	HAL_TIM_Base_Stop(&htim);
}

void st_GPIO_Init(void){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	@ 0x38
 80009bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0320 	add.w	r3, r7, #32
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = CH0_Pin|CH1_Pin|CH2_Pin|CH3_Pin
 80009ce:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 80009d2:	623b      	str	r3, [r7, #32]
			  |CH4_Pin|CH5_Pin|CH6_Pin|CH7_Pin|TRIGGER_Pin|DIR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	@ 0x2c
			__HAL_RCC_GPIOD_CLK_ENABLE();
			HAL_GPIO_WritePin(GPIOD, GPIO_InitStruct.Pin, GPIO_PIN_RESET);
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
			break;
		case PORTE:
			__HAL_RCC_GPIOE_CLK_ENABLE();
 80009e0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a8c <st_GPIO_Init+0xd4>)
 80009e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009e6:	4a29      	ldr	r2, [pc, #164]	@ (8000a8c <st_GPIO_Init+0xd4>)
 80009e8:	f043 0310 	orr.w	r3, r3, #16
 80009ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009f0:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <st_GPIO_Init+0xd4>)
 80009f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009f6:	f003 0310 	and.w	r3, r3, #16
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
			HAL_GPIO_WritePin(GPIOE, GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 80009fe:	6a3b      	ldr	r3, [r7, #32]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	2200      	movs	r2, #0
 8000a04:	4619      	mov	r1, r3
 8000a06:	4822      	ldr	r0, [pc, #136]	@ (8000a90 <st_GPIO_Init+0xd8>)
 8000a08:	f004 f918 	bl	8004c3c <HAL_GPIO_WritePin>
			HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0c:	f107 0320 	add.w	r3, r7, #32
 8000a10:	4619      	mov	r1, r3
 8000a12:	481f      	ldr	r0, [pc, #124]	@ (8000a90 <st_GPIO_Init+0xd8>)
 8000a14:	f003 fe5c 	bl	80046d0 <HAL_GPIO_Init>
			break;
 8000a18:	bf00      	nop
			__HAL_RCC_GPIOE_CLK_ENABLE();
			HAL_GPIO_WritePin(GPIOF, GPIO_InitStruct.Pin, GPIO_PIN_RESET);
			HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
			break;
	}
	uint8_t iter = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	//uint16_t pins[] = {CH0_Pin, CH1_Pin, CH2_Pin, CH3_Pin, CH4_Pin,CH5_Pin, CH6_Pin,
		//	CH7_Pin, TRIGGER_Pin, DIR_Pin};
	for (iter = 0; iter < MAX_PIN_CNT;iter++){
 8000a20:	2300      	movs	r3, #0
 8000a22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000a26:	e00f      	b.n	8000a48 <st_GPIO_Init+0x90>
		HAL_GPIO_WritePin(GPIOE, pins[iter], GPIO_PIN_SET);
 8000a28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a2c:	4a19      	ldr	r2, [pc, #100]	@ (8000a94 <st_GPIO_Init+0xdc>)
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	2201      	movs	r2, #1
 8000a36:	4619      	mov	r1, r3
 8000a38:	4815      	ldr	r0, [pc, #84]	@ (8000a90 <st_GPIO_Init+0xd8>)
 8000a3a:	f004 f8ff 	bl	8004c3c <HAL_GPIO_WritePin>
	for (iter = 0; iter < MAX_PIN_CNT;iter++){
 8000a3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a42:	3301      	adds	r3, #1
 8000a44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000a48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a4c:	2b09      	cmp	r3, #9
 8000a4e:	d9eb      	bls.n	8000a28 <st_GPIO_Init+0x70>
	}
	for (iter = 0; iter < MAX_PIN_CNT;iter++){
 8000a50:	2300      	movs	r3, #0
 8000a52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000a56:	e00f      	b.n	8000a78 <st_GPIO_Init+0xc0>
		HAL_GPIO_WritePin(GPIOE, pins[iter], GPIO_PIN_RESET);
 8000a58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a94 <st_GPIO_Init+0xdc>)
 8000a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	4809      	ldr	r0, [pc, #36]	@ (8000a90 <st_GPIO_Init+0xd8>)
 8000a6a:	f004 f8e7 	bl	8004c3c <HAL_GPIO_WritePin>
	for (iter = 0; iter < MAX_PIN_CNT;iter++){
 8000a6e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a72:	3301      	adds	r3, #1
 8000a74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000a78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a7c:	2b09      	cmp	r3, #9
 8000a7e:	d9eb      	bls.n	8000a58 <st_GPIO_Init+0xa0>
	}




}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	3738      	adds	r7, #56	@ 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	46020c00 	.word	0x46020c00
 8000a90:	42021000 	.word	0x42021000
 8000a94:	20000000 	.word	0x20000000

08000a98 <st_GPDMA_Init>:

void st_GPDMA_Init(void){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN GPDMA1_Init 0 */

	/* USER CODE END GPDMA1_Init 0 */

	/* Peripheral clock enable */
	__HAL_RCC_GPDMA1_CLK_ENABLE();
 8000a9e:	4b37      	ldr	r3, [pc, #220]	@ (8000b7c <st_GPDMA_Init+0xe4>)
 8000aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aa4:	4a35      	ldr	r2, [pc, #212]	@ (8000b7c <st_GPDMA_Init+0xe4>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000aae:	4b33      	ldr	r3, [pc, #204]	@ (8000b7c <st_GPDMA_Init+0xe4>)
 8000ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]

	/* GPDMA1 interrupt Init */
	switch (GPIO_GPDMA) {
		case st_ch11:
			HAL_NVIC_SetPriority(GPDMA1_Channel11_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2053      	movs	r0, #83	@ 0x53
 8000ac2:	f001 fae5 	bl	8002090 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(GPDMA1_Channel11_IRQn);
 8000ac6:	2053      	movs	r0, #83	@ 0x53
 8000ac8:	f001 fafc 	bl	80020c4 <HAL_NVIC_EnableIRQ>
			hGPDMA1_GPIO.Instance = GPDMA1_Channel11;
 8000acc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b80 <st_GPDMA_Init+0xe8>)
 8000ace:	4a2d      	ldr	r2, [pc, #180]	@ (8000b84 <st_GPDMA_Init+0xec>)
 8000ad0:	601a      	str	r2, [r3, #0]
			break;
 8000ad2:	bf00      	nop
			HAL_NVIC_SetPriority(GPDMA1_Channel11_IRQn, 0, 0);
			HAL_NVIC_EnableIRQ(GPDMA1_Channel11_IRQn);
			hGPDMA1_DAC.Instance = GPDMA1_Channel11;
			break;
		case st_ch10:
			HAL_NVIC_SetPriority(GPDMA1_Channel10_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2052      	movs	r0, #82	@ 0x52
 8000ada:	f001 fad9 	bl	8002090 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(GPDMA1_Channel10_IRQn);
 8000ade:	2052      	movs	r0, #82	@ 0x52
 8000ae0:	f001 faf0 	bl	80020c4 <HAL_NVIC_EnableIRQ>
			hGPDMA1_DAC.Instance = GPDMA1_Channel10;
 8000ae4:	4b28      	ldr	r3, [pc, #160]	@ (8000b88 <st_GPDMA_Init+0xf0>)
 8000ae6:	4a29      	ldr	r2, [pc, #164]	@ (8000b8c <st_GPDMA_Init+0xf4>)
 8000ae8:	601a      	str	r2, [r3, #0]
		default:
			break;
 8000aea:	bf00      	nop

	/* USER CODE BEGIN GPDMA1_Init 1 */

	/* USER CODE END GPDMA1_Init 1 */

	hGPDMA1_GPIO.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 8000aec:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <st_GPDMA_Init+0xe8>)
 8000aee:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000af2:	639a      	str	r2, [r3, #56]	@ 0x38
	hGPDMA1_GPIO.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000af4:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <st_GPDMA_Init+0xe8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	63da      	str	r2, [r3, #60]	@ 0x3c
	hGPDMA1_GPIO.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <st_GPDMA_Init+0xe8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	641a      	str	r2, [r3, #64]	@ 0x40
	hGPDMA1_GPIO.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8000b00:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <st_GPDMA_Init+0xe8>)
 8000b02:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000b06:	645a      	str	r2, [r3, #68]	@ 0x44
	hGPDMA1_GPIO.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <st_GPDMA_Init+0xe8>)
 8000b0a:	2281      	movs	r2, #129	@ 0x81
 8000b0c:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_DMAEx_List_Init(&hGPDMA1_GPIO) != HAL_OK)
 8000b0e:	481c      	ldr	r0, [pc, #112]	@ (8000b80 <st_GPDMA_Init+0xe8>)
 8000b10:	f002 fc92 	bl	8003438 <HAL_DMAEx_List_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <st_GPDMA_Init+0x86>
	{
		stError_Handler();
 8000b1a:	f000 f933 	bl	8000d84 <stError_Handler>
	}
	if (HAL_DMA_ConfigChannelAttributes(&hGPDMA1_GPIO, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b1e:	2110      	movs	r1, #16
 8000b20:	4817      	ldr	r0, [pc, #92]	@ (8000b80 <st_GPDMA_Init+0xe8>)
 8000b22:	f002 fc27 	bl	8003374 <HAL_DMA_ConfigChannelAttributes>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <st_GPDMA_Init+0x98>
	{
		stError_Handler();
 8000b2c:	f000 f92a 	bl	8000d84 <stError_Handler>
	}
	// hGPDMA1_DAC.Instance = DAC_GPDMA;
	hGPDMA1_DAC.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <st_GPDMA_Init+0xf0>)
 8000b32:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000b36:	639a      	str	r2, [r3, #56]	@ 0x38
	hGPDMA1_DAC.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <st_GPDMA_Init+0xf0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	63da      	str	r2, [r3, #60]	@ 0x3c
	hGPDMA1_DAC.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <st_GPDMA_Init+0xf0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	641a      	str	r2, [r3, #64]	@ 0x40
	hGPDMA1_DAC.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8000b44:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <st_GPDMA_Init+0xf0>)
 8000b46:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000b4a:	645a      	str	r2, [r3, #68]	@ 0x44
	hGPDMA1_DAC.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <st_GPDMA_Init+0xf0>)
 8000b4e:	2281      	movs	r2, #129	@ 0x81
 8000b50:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_DMAEx_List_Init(&hGPDMA1_DAC) != HAL_OK)
 8000b52:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <st_GPDMA_Init+0xf0>)
 8000b54:	f002 fc70 	bl	8003438 <HAL_DMAEx_List_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <st_GPDMA_Init+0xca>
	{
		stError_Handler();
 8000b5e:	f000 f911 	bl	8000d84 <stError_Handler>
	}
	if (HAL_DMA_ConfigChannelAttributes(&hGPDMA1_DAC, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b62:	2110      	movs	r1, #16
 8000b64:	4808      	ldr	r0, [pc, #32]	@ (8000b88 <st_GPDMA_Init+0xf0>)
 8000b66:	f002 fc05 	bl	8003374 <HAL_DMA_ConfigChannelAttributes>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <st_GPDMA_Init+0xdc>
	{
		stError_Handler();
 8000b70:	f000 f908 	bl	8000d84 <stError_Handler>
	}
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	46020c00 	.word	0x46020c00
 8000b80:	200002b4 	.word	0x200002b4
 8000b84:	400205d0 	.word	0x400205d0
 8000b88:	2000032c 	.word	0x2000032c
 8000b8c:	40020550 	.word	0x40020550

08000b90 <st_ICACHE_Init>:

void st_ICACHE_Init(void){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	if (HAL_ICACHE_Enable() != HAL_OK)
 8000b94:	f004 f884 	bl	8004ca0 <HAL_ICACHE_Enable>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <st_ICACHE_Init+0x12>
	{
		stError_Handler();
 8000b9e:	f000 f8f1 	bl	8000d84 <stError_Handler>
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <st_DAC_Init>:

void st_DAC_Init(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	@ 0x38
 8000bac:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	2230      	movs	r2, #48	@ 0x30
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f009 fce1 	bl	800a57e <memset>
	DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]

	/** DAC Initialization
	*/
	hdac.Instance = DAC1;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <st_DAC_Init+0xa0>)
 8000bc2:	4a22      	ldr	r2, [pc, #136]	@ (8000c4c <st_DAC_Init+0xa4>)
 8000bc4:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000bc6:	4820      	ldr	r0, [pc, #128]	@ (8000c48 <st_DAC_Init+0xa0>)
 8000bc8:	f001 faf0 	bl	80021ac <HAL_DAC_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <st_DAC_Init+0x2e>
	{
		stError_Handler();
 8000bd2:	f000 f8d7 	bl	8000d84 <stError_Handler>
	}

	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	743b      	strb	r3, [r7, #16]
	sConfig.DAC_SignedFormat = DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	747b      	strb	r3, [r7, #17]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000be6:	230a      	movs	r3, #10
 8000be8:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	623b      	str	r3, [r7, #32]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4812      	ldr	r0, [pc, #72]	@ (8000c48 <st_DAC_Init+0xa0>)
 8000c00:	f001 fdd8 	bl	80027b4 <HAL_DAC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <st_DAC_Init+0x66>
	{
		stError_Handler();
 8000c0a:	f000 f8bb 	bl	8000d84 <stError_Handler>
	}

	/** Configure Autonomous Mode
	*/
	sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
	if (HAL_DACEx_SetConfigAutonomousMode(&hdac, &sAutonomousMode) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4619      	mov	r1, r3
 8000c16:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <st_DAC_Init+0xa0>)
 8000c18:	f002 f8fe 	bl	8002e18 <HAL_DACEx_SetConfigAutonomousMode>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <st_DAC_Init+0x7e>
	{
		stError_Handler();
 8000c22:	f000 f8af 	bl	8000d84 <stError_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	if( HAL_DACEx_SelfCalibrate(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <st_DAC_Init+0xa0>)
 8000c30:	f001 ffc2 	bl	8002bb8 <HAL_DACEx_SelfCalibrate>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <st_DAC_Init+0x96>
	{
		stError_Handler();
 8000c3a:	f000 f8a3 	bl	8000d84 <stError_Handler>
	}
}
 8000c3e:	bf00      	nop
 8000c40:	3738      	adds	r7, #56	@ 0x38
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000278 	.word	0x20000278
 8000c4c:	46021800 	.word	0x46021800

08000c50 <st_TIM_Init>:

void st_TIM_Init(void){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
	// uint32_t clkfreq2 = HAL_RCC_GetPCLK2Freq();

	/* USER CODE END TIM_Init 1 */
	switch (TIM) {
		case T2:
			htim.Instance = TIM2;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <st_TIM_Init+0x98>)
 8000c70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c74:	601a      	str	r2, [r3, #0]
			break;
 8000c76:	bf00      	nop
		default:
			break;
	}

	htim.Init.Prescaler = PSK;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <st_TIM_Init+0x98>)
 8000c7a:	229f      	movs	r2, #159	@ 0x9f
 8000c7c:	605a      	str	r2, [r3, #4]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <st_TIM_Init+0x98>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
	htim.Init.Period = PERIOD;
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <st_TIM_Init+0x98>)
 8000c86:	220a      	movs	r2, #10
 8000c88:	60da      	str	r2, [r3, #12]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <st_TIM_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <st_TIM_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim) != HAL_OK)
 8000c96:	4814      	ldr	r0, [pc, #80]	@ (8000ce8 <st_TIM_Init+0x98>)
 8000c98:	f008 f88a 	bl	8008db0 <HAL_TIM_Base_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <st_TIM_Init+0x56>
	{
		stError_Handler();
 8000ca2:	f000 f86f 	bl	8000d84 <stError_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000caa:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig) != HAL_OK)
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <st_TIM_Init+0x98>)
 8000cb4:	f008 fac4 	bl	8009240 <HAL_TIM_ConfigClockSource>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <st_TIM_Init+0x72>
	{
		stError_Handler();
 8000cbe:	f000 f861 	bl	8000d84 <stError_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cc2:	2320      	movs	r3, #32
 8000cc4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	@ (8000ce8 <st_TIM_Init+0x98>)
 8000cd0:	f008 fd7c 	bl	80097cc <HAL_TIMEx_MasterConfigSynchronization>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <st_TIM_Init+0x8e>
	{
		stError_Handler();
 8000cda:	f000 f853 	bl	8000d84 <stError_Handler>
	}
}
 8000cde:	bf00      	nop
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200003a4 	.word	0x200003a4

08000cec <st_DACDMAConfig>:


void st_DACDMAConfig(){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	@ 0x30
 8000cf0:	af00      	add	r7, sp, #0
	/* Stop DMA transfer */
	if(HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4821      	ldr	r0, [pc, #132]	@ (8000d7c <st_DACDMAConfig+0x90>)
 8000cf6:	f001 fc8f 	bl	8002618 <HAL_DAC_Stop_DMA>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <st_DACDMAConfig+0x18>
	{
		Error_Handler();
 8000d00:	f7ff fdfe 	bl	8000900 <Error_Handler>
	}

	/* Deinitialize the DAC peripheral */
	if(HAL_DAC_DeInit(&hdac) != HAL_OK)
 8000d04:	481d      	ldr	r0, [pc, #116]	@ (8000d7c <st_DACDMAConfig+0x90>)
 8000d06:	f001 faa5 	bl	8002254 <HAL_DAC_DeInit>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <st_DACDMAConfig+0x28>
	{
		stError_Handler();
 8000d10:	f000 f838 	bl	8000d84 <stError_Handler>
	}
	DAC_ChannelConfTypeDef sConfig = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2230      	movs	r2, #48	@ 0x30
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f009 fc2f 	bl	800a57e <memset>

	/* Set DAC instance */
	hdac.Instance = DAC1;
 8000d20:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <st_DACDMAConfig+0x90>)
 8000d22:	4a17      	ldr	r2, [pc, #92]	@ (8000d80 <st_DACDMAConfig+0x94>)
 8000d24:	601a      	str	r2, [r3, #0]

	/* Initialize DAC */
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d26:	4815      	ldr	r0, [pc, #84]	@ (8000d7c <st_DACDMAConfig+0x90>)
 8000d28:	f001 fa40 	bl	80021ac <HAL_DAC_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <st_DACDMAConfig+0x4a>
	{
	/* Initialization Error */
		stError_Handler();
 8000d32:	f000 f827 	bl	8000d84 <stError_Handler>
	}

	/* Config Channel */
	sConfig.DAC_Trigger                 = DAC_TRIGGER_T2_TRGO;
 8000d36:	230a      	movs	r3, #10
 8000d38:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer            = DAC_OUTPUTBUFFER_ENABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
	sConfig.DAC_SampleAndHold           = DAC_SAMPLEANDHOLD_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000d42:	2301      	movs	r3, #1
 8000d44:	61bb      	str	r3, [r7, #24]

	/* DAC Channel configuration */
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <st_DACDMAConfig+0x90>)
 8000d4e:	f001 fd31 	bl	80027b4 <HAL_DAC_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <st_DACDMAConfig+0x70>
	{
		/* Channel configuration Error */
		stError_Handler();
 8000d58:	f000 f814 	bl	8000d84 <stError_Handler>
	}

	/* DAC calibration */
	if (HAL_DACEx_SelfCalibrate(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	@ (8000d7c <st_DACDMAConfig+0x90>)
 8000d64:	f001 ff28 	bl	8002bb8 <HAL_DACEx_SelfCalibrate>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <st_DACDMAConfig+0x86>
	{
		stError_Handler();
 8000d6e:	f000 f809 	bl	8000d84 <stError_Handler>
	/**
	 * ToDo: align frequency with the GPIO_DAC_SIZE values here.
	 *
	 */

}
 8000d72:	bf00      	nop
 8000d74:	3730      	adds	r7, #48	@ 0x30
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000278 	.word	0x20000278
 8000d80:	46021800 	.word	0x46021800

08000d84 <stError_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void stError_Handler()
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <stError_Handler+0x8>

08000d90 <stInitilize>:

void stConfigure(){

}

void stInitilize(){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	stConfigureDefault(st_ramp);
 8000d94:	2001      	movs	r0, #1
 8000d96:	f000 fa21 	bl	80011dc <stConfigureDefault>
	stSetEnableAllChannels(st_enabled);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f000 f8ea 	bl	8000f74 <stSetEnableAllChannels>
	stUpdateVectors();
 8000da0:	f000 f80e 	bl	8000dc0 <stUpdateVectors>
	st_HALIinitilize();
 8000da4:	f7ff fdb2 	bl	800090c <st_HALIinitilize>

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <stStartStimulation>:

void stStartStimulation(){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	stSetGlobalState(st_enabled);
 8000db0:	2001      	movs	r0, #1
 8000db2:	f000 f8cb 	bl	8000f4c <stSetGlobalState>
	st_DMA_Start();
 8000db6:	f7ff fdd7 	bl	8000968 <st_DMA_Start>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <stUpdateVectors>:
void stStopStimulation(){
	stSetGlobalState(st_disabled);
	st_DMA_Stop();
}

void stUpdateVectors(){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8000dc6:	af00      	add	r7, sp, #0
	uint32_t pos = 0, it2,it =0, len  = 0, actCh=0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
	uint32_t gpios_vals[MAX_SIGNAL_LENGTH];
	for(it = 0 ; it < N_CHAN ; it++){
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8000de6:	e098      	b.n	8000f1a <stUpdateVectors+0x15a>
		if(stimulator.channels[it].stActiveState == st_enabled){
 8000de8:	4a55      	ldr	r2, [pc, #340]	@ (8000f40 <stUpdateVectors+0x180>)
 8000dea:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000dee:	f640 014c 	movw	r1, #2124	@ 0x84c
 8000df2:	fb01 f303 	mul.w	r3, r1, r3
 8000df6:	4413      	add	r3, r2
 8000df8:	f603 0344 	addw	r3, r3, #2116	@ 0x844
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	f040 8086 	bne.w	8000f10 <stUpdateVectors+0x150>
			for(it2 = 0; it2< SEP_SIZE; it2++){
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 8000e0a:	bf00      	nop
				stDACVals[pos + it2] = 0;
				stGPIOVals[pos + it2] = 0;
			}
			actCh = stimulator.stStimSequence[it];
 8000e0c:	4a4c      	ldr	r2, [pc, #304]	@ (8000f40 <stUpdateVectors+0x180>)
 8000e0e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000e12:	4413      	add	r3, r2
 8000e14:	f503 4384 	add.w	r3, r3, #16896	@ 0x4200
 8000e18:	3364      	adds	r3, #100	@ 0x64
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
			len = stimulator.channels[actCh].stimulus.lastVal;
 8000e20:	4a47      	ldr	r2, [pc, #284]	@ (8000f40 <stUpdateVectors+0x180>)
 8000e22:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8000e26:	f640 014c 	movw	r1, #2124	@ 0x84c
 8000e2a:	fb01 f303 	mul.w	r3, r1, r3
 8000e2e:	4413      	add	r3, r2
 8000e30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408

			for(it2 = 0 ; it2 < len ; it2++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 8000e40:	e03a      	b.n	8000eb8 <stUpdateVectors+0xf8>
				gpios_vals[it2] = ( (uint32_t) (stimulator.channels[actCh].stimulus.sign[it2]>0) * stimulator.stSignPin)  |  stimulator.stTriggerPin | stimulator.channels[actCh].stPin;
 8000e42:	493f      	ldr	r1, [pc, #252]	@ (8000f40 <stUpdateVectors+0x180>)
 8000e44:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8000e48:	f240 2213 	movw	r2, #531	@ 0x213
 8000e4c:	fb03 f202 	mul.w	r2, r3, r2
 8000e50:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000e54:	4413      	add	r3, r2
 8000e56:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000e5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf14      	ite	ne
 8000e62:	2301      	movne	r3, #1
 8000e64:	2300      	moveq	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b35      	ldr	r3, [pc, #212]	@ (8000f40 <stUpdateVectors+0x180>)
 8000e6c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000e70:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000e74:	fb03 f202 	mul.w	r2, r3, r2
 8000e78:	4b31      	ldr	r3, [pc, #196]	@ (8000f40 <stUpdateVectors+0x180>)
 8000e7a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000e7e:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000e82:	431a      	orrs	r2, r3
 8000e84:	492e      	ldr	r1, [pc, #184]	@ (8000f40 <stUpdateVectors+0x180>)
 8000e86:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8000e8a:	f640 004c 	movw	r0, #2124	@ 0x84c
 8000e8e:	fb00 f303 	mul.w	r3, r0, r3
 8000e92:	440b      	add	r3, r1
 8000e94:	f603 0348 	addw	r3, r3, #2120	@ 0x848
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	ea42 0103 	orr.w	r1, r2, r3
 8000e9e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000ea2:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8000ea6:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8000eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(it2 = 0 ; it2 < len ; it2++)
 8000eae:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 8000eb8:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8000ebc:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d3be      	bcc.n	8000e42 <stUpdateVectors+0x82>

			memcpy(&stDACVals[pos+SEP_SIZE] , stimulator.channels[actCh].stimulus.intensity , len*sizeof(uint32_t));
 8000ec4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4a1e      	ldr	r2, [pc, #120]	@ (8000f44 <stUpdateVectors+0x184>)
 8000ecc:	1898      	adds	r0, r3, r2
 8000ece:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8000ed2:	f640 024c 	movw	r2, #2124	@ 0x84c
 8000ed6:	fb02 f303 	mul.w	r3, r2, r3
 8000eda:	4a19      	ldr	r2, [pc, #100]	@ (8000f40 <stUpdateVectors+0x180>)
 8000edc:	1899      	adds	r1, r3, r2
 8000ede:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	f009 fbce 	bl	800a686 <memcpy>
			memcpy(&stGPIOVals[pos+SEP_SIZE], gpios_vals									, len*sizeof(uint32_t));
 8000eea:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4a15      	ldr	r2, [pc, #84]	@ (8000f48 <stUpdateVectors+0x188>)
 8000ef2:	1898      	adds	r0, r3, r2
 8000ef4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000ef8:	009a      	lsls	r2, r3, #2
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	f009 fbc2 	bl	800a686 <memcpy>
			pos += SEP_SIZE + len;
 8000f02:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8000f06:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000f0a:	4413      	add	r3, r2
 8000f0c:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
	for(it = 0 ; it < N_CHAN ; it++){
 8000f10:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000f14:	3301      	adds	r3, #1
 8000f16:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8000f1a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000f1e:	2b07      	cmp	r3, #7
 8000f20:	f67f af62 	bls.w	8000de8 <stUpdateVectors+0x28>
		}
	}
	stimulator.stStimSize = pos;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <stUpdateVectors+0x180>)
 8000f26:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8000f30:	f8c2 327c 	str.w	r3, [r2, #636]	@ 0x27c
}
 8000f34:	bf00      	nop
 8000f36:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200003f0 	.word	0x200003f0
 8000f44:	20004670 	.word	0x20004670
 8000f48:	20006670 	.word	0x20006670

08000f4c <stSetGlobalState>:

void stSetGlobalState(st_active_t state){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]

	stimulator.stGlobalState = state;
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <stSetGlobalState+0x24>)
 8000f58:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f882 3278 	strb.w	r3, [r2, #632]	@ 0x278

}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	200003f0 	.word	0x200003f0

08000f74 <stSetEnableAllChannels>:

void stGetGlobalState(st_active_t *state){
	*state = stimulator.stGlobalState;
}

void stSetEnableAllChannels(st_active_t state){
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	uint32_t it;
	for(it = 0; it < N_CHAN; it++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e00d      	b.n	8000fa0 <stSetEnableAllChannels+0x2c>
		stimulator.channels[it].stActiveState = state;
 8000f84:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb4 <stSetEnableAllChannels+0x40>)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f640 014c 	movw	r1, #2124	@ 0x84c
 8000f8c:	fb01 f303 	mul.w	r3, r1, r3
 8000f90:	4413      	add	r3, r2
 8000f92:	f603 0344 	addw	r3, r3, #2116	@ 0x844
 8000f96:	79fa      	ldrb	r2, [r7, #7]
 8000f98:	701a      	strb	r2, [r3, #0]
	for(it = 0; it < N_CHAN; it++)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b07      	cmp	r3, #7
 8000fa4:	d9ee      	bls.n	8000f84 <stSetEnableAllChannels+0x10>
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	200003f0 	.word	0x200003f0

08000fb8 <stSetChannelState>:

uint8_t stSetChannelState(uint8_t channel, st_active_t state){
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
	if(channel < N_CHAN){
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b07      	cmp	r3, #7
 8000fd0:	d80b      	bhi.n	8000fea <stSetChannelState+0x32>
		stimulator.channels[channel].stActiveState = state;
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <stSetChannelState+0x48>)
 8000fd6:	f640 014c 	movw	r1, #2124	@ 0x84c
 8000fda:	fb01 f303 	mul.w	r3, r1, r3
 8000fde:	4413      	add	r3, r2
 8000fe0:	f603 0344 	addw	r3, r3, #2116	@ 0x844
 8000fe4:	79ba      	ldrb	r2, [r7, #6]
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	e002      	b.n	8000ff0 <stSetChannelState+0x38>
	}
	else
		res--;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
	return res;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200003f0 	.word	0x200003f0

08001004 <stSetPeriod>:
		}
	return res;
}


uint8_t stSetPeriod(uint32_t period){
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	uint8_t res = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
	if ((period < MAX_PERIOD) && (period >= MIN_PERIOD) )
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001016:	d20a      	bcs.n	800102e <stSetPeriod+0x2a>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d007      	beq.n	800102e <stSetPeriod+0x2a>
		stimulator.stPeriod = period;
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <stSetPeriod+0x4c>)
 8001020:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f8c2 3260 	str.w	r3, [r2, #608]	@ 0x260
 800102c:	e008      	b.n	8001040 <stSetPeriod+0x3c>
	else
	{
		res--;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	3b01      	subs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
		stimulator.stGlobalState = st_undefined;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <stSetPeriod+0x4c>)
 8001036:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800103a:	2202      	movs	r2, #2
 800103c:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278
	}
	return res;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200003f0 	.word	0x200003f0

08001054 <stSetPort>:
		res--;
	return 0;
}

uint8_t stSetPort(uint32_t port)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	uint8_t res = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
	if (port < MAX_PORT)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b09      	cmp	r3, #9
 8001064:	d807      	bhi.n	8001076 <stSetPort+0x22>
		stimulator.stPort = port;
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <stSetPort+0x44>)
 8001068:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800106c:	461a      	mov	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f8c2 326c 	str.w	r3, [r2, #620]	@ 0x26c
 8001074:	e008      	b.n	8001088 <stSetPort+0x34>
	else
	{
		res--;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	3b01      	subs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
		stimulator.stGlobalState = st_undefined;
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <stSetPort+0x44>)
 800107e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001082:	2202      	movs	r2, #2
 8001084:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278
	}
	return res;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	200003f0 	.word	0x200003f0

0800109c <stSetChannelPin>:
		res--;
	return res;
}


uint8_t stSetChannelPin(uint8_t chan,uint32_t pin){
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
	if (chan < N_CHAN){
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b07      	cmp	r3, #7
 80010b0:	d81e      	bhi.n	80010f0 <stSetChannelPin+0x54>
		if(pin < MAX_PIN)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010b8:	d20b      	bcs.n	80010d2 <stSetChannelPin+0x36>
			stimulator.channels[chan].stPin = pin;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	4a17      	ldr	r2, [pc, #92]	@ (800111c <stSetChannelPin+0x80>)
 80010be:	f640 014c 	movw	r1, #2124	@ 0x84c
 80010c2:	fb01 f303 	mul.w	r3, r1, r3
 80010c6:	4413      	add	r3, r2
 80010c8:	f603 0348 	addw	r3, r3, #2120	@ 0x848
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e01c      	b.n	800110c <stSetChannelPin+0x70>
		else
		{
			res-=2;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	3b02      	subs	r3, #2
 80010d6:	73fb      	strb	r3, [r7, #15]
			stimulator.channels[chan].stActiveState = st_undefined;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4a10      	ldr	r2, [pc, #64]	@ (800111c <stSetChannelPin+0x80>)
 80010dc:	f640 014c 	movw	r1, #2124	@ 0x84c
 80010e0:	fb01 f303 	mul.w	r3, r1, r3
 80010e4:	4413      	add	r3, r2
 80010e6:	f603 0344 	addw	r3, r3, #2116	@ 0x844
 80010ea:	2202      	movs	r2, #2
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e00d      	b.n	800110c <stSetChannelPin+0x70>
		}
	}
	else{
		stimulator.channels[chan].stActiveState = st_undefined;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <stSetChannelPin+0x80>)
 80010f4:	f640 014c 	movw	r1, #2124	@ 0x84c
 80010f8:	fb01 f303 	mul.w	r3, r1, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	f603 0344 	addw	r3, r3, #2116	@ 0x844
 8001102:	2202      	movs	r2, #2
 8001104:	701a      	strb	r2, [r3, #0]
		res--;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	3b01      	subs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200003f0 	.word	0x200003f0

08001120 <stSetChannelSignal>:
		res--;
	}

	return res;
}
uint8_t stSetChannelSignal(uint8_t ch, uint32_t sz, uint32_t *values, uint32_t *signs ){
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]
	uint8_t res = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	75fb      	strb	r3, [r7, #23]
	if (ch < N_CHAN){
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b07      	cmp	r3, #7
 8001138:	d83a      	bhi.n	80011b0 <stSetChannelSignal+0x90>
		if(sz <= MAX_SIGNAL_LENGTH){
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001140:	d827      	bhi.n	8001192 <stSetChannelSignal+0x72>
			memcpy(stimulator.channels[ch].stimulus.intensity,values,sz* sizeof(uint32_t));
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	f640 024c 	movw	r2, #2124	@ 0x84c
 8001148:	fb02 f303 	mul.w	r3, r2, r3
 800114c:	4a22      	ldr	r2, [pc, #136]	@ (80011d8 <stSetChannelSignal+0xb8>)
 800114e:	1898      	adds	r0, r3, r2
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	461a      	mov	r2, r3
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f009 fa95 	bl	800a686 <memcpy>
			memcpy(stimulator.channels[ch].stimulus.sign,signs,sz* sizeof(uint32_t));
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	f640 024c 	movw	r2, #2124	@ 0x84c
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800116a:	4a1b      	ldr	r2, [pc, #108]	@ (80011d8 <stSetChannelSignal+0xb8>)
 800116c:	1898      	adds	r0, r3, r2
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	461a      	mov	r2, r3
 8001174:	6839      	ldr	r1, [r7, #0]
 8001176:	f009 fa86 	bl	800a686 <memcpy>
			stimulator.channels[ch].stimulus.lastVal = sz;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	4a16      	ldr	r2, [pc, #88]	@ (80011d8 <stSetChannelSignal+0xb8>)
 800117e:	f640 014c 	movw	r1, #2124	@ 0x84c
 8001182:	fb01 f303 	mul.w	r3, r1, r3
 8001186:	4413      	add	r3, r2
 8001188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e01c      	b.n	80011cc <stSetChannelSignal+0xac>
		}
		else{
			res-=2;
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	3b02      	subs	r3, #2
 8001196:	75fb      	strb	r3, [r7, #23]
			stimulator.channels[ch].stActiveState = st_undefined;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <stSetChannelSignal+0xb8>)
 800119c:	f640 014c 	movw	r1, #2124	@ 0x84c
 80011a0:	fb01 f303 	mul.w	r3, r1, r3
 80011a4:	4413      	add	r3, r2
 80011a6:	f603 0344 	addw	r3, r3, #2116	@ 0x844
 80011aa:	2202      	movs	r2, #2
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	e00d      	b.n	80011cc <stSetChannelSignal+0xac>
		}
	}
	else{
		res--;
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	75fb      	strb	r3, [r7, #23]
		stimulator.channels[ch].stActiveState = st_undefined;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	4a07      	ldr	r2, [pc, #28]	@ (80011d8 <stSetChannelSignal+0xb8>)
 80011ba:	f640 014c 	movw	r1, #2124	@ 0x84c
 80011be:	fb01 f303 	mul.w	r3, r1, r3
 80011c2:	4413      	add	r3, r2
 80011c4:	f603 0344 	addw	r3, r3, #2116	@ 0x844
 80011c8:	2202      	movs	r2, #2
 80011ca:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200003f0 	.word	0x200003f0

080011dc <stConfigureDefault>:

uint8_t stConfigureDefault(st_signal_type type){
 80011dc:	b580      	push	{r7, lr}
 80011de:	f5ad 6d05 	sub.w	sp, sp, #2128	@ 0x850
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4602      	mov	r2, r0
 80011e6:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 80011ea:	f6a3 0349 	subw	r3, r3, #2121	@ 0x849
 80011ee:	701a      	strb	r2, [r3, #0]
	uint8_t ch_it,res = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f887 384e 	strb.w	r3, [r7, #2126]	@ 0x84e

	uint32_t signal[MAX_SIGNAL_LENGTH];
	uint32_t sign[MAX_SIGNAL_LENGTH] = {[0 ... (MAX_SIGNAL_LENGTH-1)] = 1};
 80011f6:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 80011fa:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 80011fe:	4a79      	ldr	r2, [pc, #484]	@ (80013e4 <stConfigureDefault+0x208>)
 8001200:	4618      	mov	r0, r3
 8001202:	4611      	mov	r1, r2
 8001204:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001208:	461a      	mov	r2, r3
 800120a:	f009 fa3c 	bl	800a686 <memcpy>
	char label[MAX_LABEL];

	// Trigger and direction pin
	stimulator.stTriggerPin = TRIGGER_Pin;
 800120e:	4b76      	ldr	r3, [pc, #472]	@ (80013e8 <stConfigureDefault+0x20c>)
 8001210:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001214:	461a      	mov	r2, r3
 8001216:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800121a:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274
	stimulator.stSignPin = DIR_Pin;
 800121e:	4b72      	ldr	r3, [pc, #456]	@ (80013e8 <stConfigureDefault+0x20c>)
 8001220:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001224:	461a      	mov	r2, r3
 8001226:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800122a:	f8c2 3270 	str.w	r3, [r2, #624]	@ 0x270

	res += stSetPort(DEFAULT_PORT);
 800122e:	2004      	movs	r0, #4
 8001230:	f7ff ff10 	bl	8001054 <stSetPort>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	f897 384e 	ldrb.w	r3, [r7, #2126]	@ 0x84e
 800123c:	4413      	add	r3, r2
 800123e:	f887 384e 	strb.w	r3, [r7, #2126]	@ 0x84e
	res += stSetPeriod(MAX_PERIOD-1);
 8001242:	f240 102b 	movw	r0, #299	@ 0x12b
 8001246:	f7ff fedd 	bl	8001004 <stSetPeriod>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	f897 384e 	ldrb.w	r3, [r7, #2126]	@ 0x84e
 8001252:	4413      	add	r3, r2
 8001254:	f887 384e 	strb.w	r3, [r7, #2126]	@ 0x84e
	stSetGlobalState(st_disabled);
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fe77 	bl	8000f4c <stSetGlobalState>


	memset(sign, 0, (MAX_SIGNAL_LENGTH* sizeof(uint32_t)/2));
 800125e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f009 f988 	bl	800a57e <memset>
	memset(signal, 0, (uint32_t) sizeof(signal));
 800126e:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8001272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f009 f980 	bl	800a57e <memset>



	switch (type) {
 800127e:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8001282:	f6a3 0349 	subw	r3, r3, #2121	@ 0x849
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <stConfigureDefault+0xb6>
 800128c:	2b01      	cmp	r3, #1
 800128e:	d012      	beq.n	80012b6 <stConfigureDefault+0xda>
		for(uint32_t it = 0; it < MAX_SIGNAL_LENGTH; it++){
			signal[it] = (2*it*4096/MAX_SIGNAL_LENGTH & 0x0FFF);
			}
		break;
	default:
		break;
 8001290:	e02d      	b.n	80012ee <stConfigureDefault+0x112>
		memset(signal,0xFFAA,(uint32_t) sizeof(signal)*sizeof(uint32_t)/4);
 8001292:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8001296:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800129a:	f64f 71aa 	movw	r1, #65450	@ 0xffaa
 800129e:	4618      	mov	r0, r3
 80012a0:	f009 f96d 	bl	800a57e <memset>
		memset(&signal[(uint32_t) MAX_SIGNAL_LENGTH/2],0xFFAA,(uint32_t) (N_CHAN* sizeof(uint16_t)/4));
 80012a4:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 80012a8:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80012ac:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80012b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
		break;
 80012b4:	e01b      	b.n	80012ee <stConfigureDefault+0x112>
		for(uint32_t it = 0; it < MAX_SIGNAL_LENGTH; it++){
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 80012bc:	e012      	b.n	80012e4 <stConfigureDefault+0x108>
			signal[it] = (2*it*4096/MAX_SIGNAL_LENGTH & 0x0FFF);
 80012be:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 80012c2:	035b      	lsls	r3, r3, #13
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f3c3 010b 	ubfx	r1, r3, #0, #12
 80012ca:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 80012ce:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80012d2:	f8d7 2848 	ldr.w	r2, [r7, #2120]	@ 0x848
 80012d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(uint32_t it = 0; it < MAX_SIGNAL_LENGTH; it++){
 80012da:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 80012de:	3301      	adds	r3, #1
 80012e0:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 80012e4:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 80012e8:	2bff      	cmp	r3, #255	@ 0xff
 80012ea:	d9e8      	bls.n	80012be <stConfigureDefault+0xe2>
		break;
 80012ec:	bf00      	nop
	}

	strcpy(label,"Channel ");
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	4a3e      	ldr	r2, [pc, #248]	@ (80013ec <stConfigureDefault+0x210>)
 80012f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80012f6:	c303      	stmia	r3!, {r0, r1}
 80012f8:	701a      	strb	r2, [r3, #0]
	for (ch_it = 0; ch_it < N_CHAN; ch_it++){
 80012fa:	2300      	movs	r3, #0
 80012fc:	f887 384f 	strb.w	r3, [r7, #2127]	@ 0x84f
 8001300:	e065      	b.n	80013ce <stConfigureDefault+0x1f2>
		stimulator.stStimSequence[ch_it] = ch_it;
 8001302:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 8001306:	4a38      	ldr	r2, [pc, #224]	@ (80013e8 <stConfigureDefault+0x20c>)
 8001308:	4413      	add	r3, r2
 800130a:	f503 4384 	add.w	r3, r3, #16896	@ 0x4200
 800130e:	3364      	adds	r3, #100	@ 0x64
 8001310:	f897 284f 	ldrb.w	r2, [r7, #2127]	@ 0x84f
 8001314:	701a      	strb	r2, [r3, #0]

		res += stSetChannelSignal(ch_it, (MAX_SIGNAL_LENGTH), signal, sign);
 8001316:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800131a:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 800131e:	f897 084f 	ldrb.w	r0, [r7, #2127]	@ 0x84f
 8001322:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001326:	f7ff fefb 	bl	8001120 <stSetChannelSignal>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	f897 384e 	ldrb.w	r3, [r7, #2126]	@ 0x84e
 8001332:	4413      	add	r3, r2
 8001334:	f887 384e 	strb.w	r3, [r7, #2126]	@ 0x84e
		label[8] = (ch_it+48);
 8001338:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 800133c:	3330      	adds	r3, #48	@ 0x30
 800133e:	b2da      	uxtb	r2, r3
 8001340:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8001344:	f6a3 0348 	subw	r3, r3, #2120	@ 0x848
 8001348:	721a      	strb	r2, [r3, #8]
		strcpy(stimulator.channels[ch_it].stLabel , label); // possibly copying garbage
 800134a:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 800134e:	f640 024c 	movw	r2, #2124	@ 0x84c
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800135a:	4a23      	ldr	r2, [pc, #140]	@ (80013e8 <stConfigureDefault+0x20c>)
 800135c:	4413      	add	r3, r2
 800135e:	3304      	adds	r3, #4
 8001360:	f107 0208 	add.w	r2, r7, #8
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f009 f985 	bl	800a676 <strcpy>
		res += stSetChannelPin(ch_it,pins[ch_it]);
 800136c:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 8001370:	4a1f      	ldr	r2, [pc, #124]	@ (80013f0 <stConfigureDefault+0x214>)
 8001372:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001376:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe8d 	bl	800109c <stSetChannelPin>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	f897 384e 	ldrb.w	r3, [r7, #2126]	@ 0x84e
 800138a:	4413      	add	r3, r2
 800138c:	f887 384e 	strb.w	r3, [r7, #2126]	@ 0x84e
		res += stSetChannelState(ch_it, st_disabled);
 8001390:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe0e 	bl	8000fb8 <stSetChannelState>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	f897 384e 	ldrb.w	r3, [r7, #2126]	@ 0x84e
 80013a4:	4413      	add	r3, r2
 80013a6:	f887 384e 	strb.w	r3, [r7, #2126]	@ 0x84e
		stimulator.channels[ch_it].stimulus.lastVal = MAX_SIGNAL_LENGTH;
 80013aa:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 80013ae:	4a0e      	ldr	r2, [pc, #56]	@ (80013e8 <stConfigureDefault+0x20c>)
 80013b0:	f640 014c 	movw	r1, #2124	@ 0x84c
 80013b4:	fb01 f303 	mul.w	r3, r1, r3
 80013b8:	4413      	add	r3, r2
 80013ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013c2:	601a      	str	r2, [r3, #0]
	for (ch_it = 0; ch_it < N_CHAN; ch_it++){
 80013c4:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 80013c8:	3301      	adds	r3, #1
 80013ca:	f887 384f 	strb.w	r3, [r7, #2127]	@ 0x84f
 80013ce:	f897 384f 	ldrb.w	r3, [r7, #2127]	@ 0x84f
 80013d2:	2b07      	cmp	r3, #7
 80013d4:	d995      	bls.n	8001302 <stConfigureDefault+0x126>
	}
	return res;
 80013d6:	f897 384e 	ldrb.w	r3, [r7, #2126]	@ 0x84e
}
 80013da:	4618      	mov	r0, r3
 80013dc:	f507 6705 	add.w	r7, r7, #2128	@ 0x850
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	0800b23c 	.word	0x0800b23c
 80013e8:	200003f0 	.word	0x200003f0
 80013ec:	0800b230 	.word	0x0800b230
 80013f0:	20000000 	.word	0x20000000

080013f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <HAL_MspInit+0x34>)
 80013fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001400:	4a09      	ldr	r2, [pc, #36]	@ (8001428 <HAL_MspInit+0x34>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800140a:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <HAL_MspInit+0x34>)
 800140c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001418:	2004      	movs	r0, #4
 800141a:	f000 fe2e 	bl	800207a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	46020c00 	.word	0x46020c00

0800142c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b0ba      	sub	sp, #232	@ 0xe8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	22c0      	movs	r2, #192	@ 0xc0
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f009 f896 	bl	800a57e <memset>
  if(hdac->Instance==DAC1)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a29      	ldr	r2, [pc, #164]	@ (80014fc <HAL_DAC_MspInit+0xd0>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d14b      	bne.n	80014f4 <HAL_DAC_MspInit+0xc8>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC|RCC_PERIPHCLK_DAC1;
 800145c:	4a28      	ldr	r2, [pc, #160]	@ (8001500 <HAL_DAC_MspInit+0xd4>)
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001466:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800146a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 800146e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001472:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4618      	mov	r0, r3
 800147c:	f005 f800 	bl	8006480 <HAL_RCCEx_PeriphCLKConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_DAC_MspInit+0x5e>
    {
      Error_Handler();
 8001486:	f7ff fa3b 	bl	8000900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800148a:	4b1e      	ldr	r3, [pc, #120]	@ (8001504 <HAL_DAC_MspInit+0xd8>)
 800148c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001490:	4a1c      	ldr	r2, [pc, #112]	@ (8001504 <HAL_DAC_MspInit+0xd8>)
 8001492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001496:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800149a:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <HAL_DAC_MspInit+0xd8>)
 800149c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <HAL_DAC_MspInit+0xd8>)
 80014aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ae:	4a15      	ldr	r2, [pc, #84]	@ (8001504 <HAL_DAC_MspInit+0xd8>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_DAC_MspInit+0xd8>)
 80014ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c6:	2310      	movs	r3, #16
 80014c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014cc:	2303      	movs	r3, #3
 80014ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014dc:	4619      	mov	r1, r3
 80014de:	480a      	ldr	r0, [pc, #40]	@ (8001508 <HAL_DAC_MspInit+0xdc>)
 80014e0:	f003 f8f6 	bl	80046d0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(DAC1_IRQn, 0, 0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	2026      	movs	r0, #38	@ 0x26
 80014ea:	f000 fdd1 	bl	8002090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DAC1_IRQn);
 80014ee:	2026      	movs	r0, #38	@ 0x26
 80014f0:	f000 fde8 	bl	80020c4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80014f4:	bf00      	nop
 80014f6:	37e8      	adds	r7, #232	@ 0xe8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	46021800 	.word	0x46021800
 8001500:	10008000 	.word	0x10008000
 8001504:	46020c00 	.word	0x46020c00
 8001508:	42020000 	.word	0x42020000

0800150c <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <HAL_DAC_MspDeInit+0x38>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10e      	bne.n	800153c <HAL_DAC_MspDeInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspDeInit 0 */

  /* USER CODE END DAC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC1_CLK_DISABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_DAC_MspDeInit+0x3c>)
 8001520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001524:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <HAL_DAC_MspDeInit+0x3c>)
 8001526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800152a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800152e:	2110      	movs	r1, #16
 8001530:	4806      	ldr	r0, [pc, #24]	@ (800154c <HAL_DAC_MspDeInit+0x40>)
 8001532:	f003 faa5 	bl	8004a80 <HAL_GPIO_DeInit>

    /* DAC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(DAC1_IRQn);
 8001536:	2026      	movs	r0, #38	@ 0x26
 8001538:	f000 fdd2 	bl	80020e0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DAC1_MspDeInit 1 */

  /* USER CODE END DAC1_MspDeInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	46021800 	.word	0x46021800
 8001548:	46020c00 	.word	0x46020c00
 800154c:	42020000 	.word	0x42020000

08001550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001560:	d10e      	bne.n	8001580 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001562:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <HAL_TIM_Base_MspInit+0x3c>)
 8001564:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001568:	4a08      	ldr	r2, [pc, #32]	@ (800158c <HAL_TIM_Base_MspInit+0x3c>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001572:	4b06      	ldr	r3, [pc, #24]	@ (800158c <HAL_TIM_Base_MspInit+0x3c>)
 8001574:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	46020c00 	.word	0x46020c00

08001590 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08e      	sub	sp, #56	@ 0x38
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80015a0:	4b2e      	ldr	r3, [pc, #184]	@ (800165c <HAL_InitTick+0xcc>)
 80015a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015a6:	4a2d      	ldr	r2, [pc, #180]	@ (800165c <HAL_InitTick+0xcc>)
 80015a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ac:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80015b0:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <HAL_InitTick+0xcc>)
 80015b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015be:	f107 0210 	add.w	r2, r7, #16
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fe9b 	bl	8006304 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80015ce:	f004 fe71 	bl	80062b4 <HAL_RCC_GetPCLK2Freq>
 80015d2:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015d6:	4a22      	ldr	r2, [pc, #136]	@ (8001660 <HAL_InitTick+0xd0>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	0c9b      	lsrs	r3, r3, #18
 80015de:	3b01      	subs	r3, #1
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80015e2:	4b20      	ldr	r3, [pc, #128]	@ (8001664 <HAL_InitTick+0xd4>)
 80015e4:	4a20      	ldr	r2, [pc, #128]	@ (8001668 <HAL_InitTick+0xd8>)
 80015e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001664 <HAL_InitTick+0xd4>)
 80015ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ee:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80015f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001664 <HAL_InitTick+0xd4>)
 80015f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f4:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80015f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <HAL_InitTick+0xd4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <HAL_InitTick+0xd4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8001602:	4818      	ldr	r0, [pc, #96]	@ (8001664 <HAL_InitTick+0xd4>)
 8001604:	f007 fbd4 	bl	8008db0 <HAL_TIM_Base_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800160e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001612:	2b00      	cmp	r3, #0
 8001614:	d118      	bne.n	8001648 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001616:	4813      	ldr	r0, [pc, #76]	@ (8001664 <HAL_InitTick+0xd4>)
 8001618:	f007 fc22 	bl	8008e60 <HAL_TIM_Base_Start_IT>
 800161c:	4603      	mov	r3, r0
 800161e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001622:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10e      	bne.n	8001648 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d808      	bhi.n	8001642 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	2047      	movs	r0, #71	@ 0x47
 8001636:	f000 fd2b 	bl	8002090 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800163a:	4a0c      	ldr	r2, [pc, #48]	@ (800166c <HAL_InitTick+0xdc>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e002      	b.n	8001648 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001648:	2047      	movs	r0, #71	@ 0x47
 800164a:	f000 fd3b 	bl	80020c4 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800164e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001652:	4618      	mov	r0, r3
 8001654:	3738      	adds	r7, #56	@ 0x38
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	46020c00 	.word	0x46020c00
 8001660:	431bde83 	.word	0x431bde83
 8001664:	20008670 	.word	0x20008670
 8001668:	40014800 	.word	0x40014800
 800166c:	20000040 	.word	0x20000040

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <NMI_Handler+0x4>

08001678 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
	{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800167c:	2200      	movs	r2, #0
 800167e:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 8001682:	4802      	ldr	r0, [pc, #8]	@ (800168c <HardFault_Handler+0x14>)
 8001684:	f003 fada 	bl	8004c3c <HAL_GPIO_WritePin>
//  while (1)
//  {
//    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
//    /* USER CODE END W1_HardFault_IRQn 0 */
//  }
	return;
 8001688:	bf00      	nop
}
 800168a:	bd80      	pop	{r7, pc}
 800168c:	42021000 	.word	0x42021000

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <MemManage_Handler+0x4>

08001698 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f000 fa8d 	bl	8001c04 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <DAC1_IRQHandler>:

/**
  * @brief This function handles DAC1 interrupt.
  */
void DAC1_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DAC1_IRQn 0 */

  /* USER CODE END DAC1_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <DAC1_IRQHandler+0x10>)
 80016f6:	f000 ffdc 	bl	80026b2 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN DAC1_IRQn 1 */

  /* USER CODE END DAC1_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000014c 	.word	0x2000014c

08001704 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <TIM17_IRQHandler+0x10>)
 800170a:	f007 fc49 	bl	8008fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20008670 	.word	0x20008670

08001718 <GPDMA1_Channel10_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 10 global interrupt.
  */
void GPDMA1_Channel10_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 0 */

  /* USER CODE END GPDMA1_Channel10_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel10);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <GPDMA1_Channel10_IRQHandler+0x10>)
 800171e:	f001 fcc8 	bl	80030b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 1 */

  /* USER CODE END GPDMA1_Channel10_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000200 	.word	0x20000200

0800172c <GPDMA1_Channel11_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 11 global interrupt.
  */
void GPDMA1_Channel11_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 0 */

  /* USER CODE END GPDMA1_Channel11_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel11);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <GPDMA1_Channel11_IRQHandler+0x10>)
 8001732:	f001 fcbe 	bl	80030b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 1 */

  /* USER CODE END GPDMA1_Channel11_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000188 	.word	0x20000188

08001740 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001752:	f3af 8000 	nop.w
 8001756:	4601      	mov	r1, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf0      	blt.n	8001752 <_read+0x12>
  }

  return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e009      	b.n	80017a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60ba      	str	r2, [r7, #8]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f000 faaf 	bl	8001cf8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbf1      	blt.n	800178c <_write+0x12>
  }
  return len;
 80017a8:	687b      	ldr	r3, [r7, #4]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_close>:

int _close(int file)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017da:	605a      	str	r2, [r3, #4]
  return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_isatty>:

int _isatty(int file)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	@ (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f008 fee6 	bl	800a61c <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	@ (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200c0000 	.word	0x200c0000
 800187c:	00000400 	.word	0x00000400
 8001880:	200086bc 	.word	0x200086bc
 8001884:	200088b8 	.word	0x200088b8

08001888 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800188c:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <SystemInit+0x68>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001892:	4a17      	ldr	r2, [pc, #92]	@ (80018f0 <SystemInit+0x68>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800189c:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <SystemInit+0x6c>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80018a2:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <SystemInit+0x6c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <SystemInit+0x6c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80018ae:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <SystemInit+0x6c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80018b4:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <SystemInit+0x6c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0e      	ldr	r2, [pc, #56]	@ (80018f4 <SystemInit+0x6c>)
 80018ba:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80018be:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80018c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <SystemInit+0x6c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <SystemInit+0x6c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <SystemInit+0x6c>)
 80018d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <SystemInit+0x6c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018dc:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <SystemInit+0x68>)
 80018de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018e2:	609a      	str	r2, [r3, #8]
  #endif
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00
 80018f4:	46020c00 	.word	0x46020c00

080018f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80018f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001930 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018fc:	f7ff ffc4 	bl	8001888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001900:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001902:	e003      	b.n	800190c <LoopCopyDataInit>

08001904 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001906:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001908:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800190a:	3104      	adds	r1, #4

0800190c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800190c:	480a      	ldr	r0, [pc, #40]	@ (8001938 <LoopForever+0xa>)
	ldr	r3, =_edata
 800190e:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001910:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001912:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001914:	d3f6      	bcc.n	8001904 <CopyDataInit>
	ldr	r2, =_sbss
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001918:	e002      	b.n	8001920 <LoopFillZerobss>

0800191a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800191a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800191c:	f842 3b04 	str.w	r3, [r2], #4

08001920 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001920:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <LoopForever+0x16>)
	cmp	r2, r3
 8001922:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001924:	d3f9      	bcc.n	800191a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001926:	f008 fe7f 	bl	800a628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800192a:	f7fe fef1 	bl	8000710 <main>

0800192e <LoopForever>:

LoopForever:
    b LoopForever
 800192e:	e7fe      	b.n	800192e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001930:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001934:	0800b77c 	.word	0x0800b77c
	ldr	r0, =_sdata
 8001938:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800193c:	200000a4 	.word	0x200000a4
	ldr	r2, =_sbss
 8001940:	200000a4 	.word	0x200000a4
	ldr	r3, = _ebss
 8001944:	200088b4 	.word	0x200088b4

08001948 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC1_IRQHandler>
	...

0800194c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08e      	sub	sp, #56	@ 0x38
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d009      	beq.n	8001978 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d006      	beq.n	8001978 <BSP_LED_Init+0x2c>
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d003      	beq.n	8001978 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001970:	f06f 0301 	mvn.w	r3, #1
 8001974:	637b      	str	r3, [r7, #52]	@ 0x34
 8001976:	e06e      	b.n	8001a56 <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d10f      	bne.n	800199e <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 800197e:	4b38      	ldr	r3, [pc, #224]	@ (8001a60 <BSP_LED_Init+0x114>)
 8001980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001984:	4a36      	ldr	r2, [pc, #216]	@ (8001a60 <BSP_LED_Init+0x114>)
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800198e:	4b34      	ldr	r3, [pc, #208]	@ (8001a60 <BSP_LED_Init+0x114>)
 8001990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	e046      	b.n	8001a2c <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10f      	bne.n	80019c4 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 80019a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a60 <BSP_LED_Init+0x114>)
 80019a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001a60 <BSP_LED_Init+0x114>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a60 <BSP_LED_Init+0x114>)
 80019b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	e033      	b.n	8001a2c <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c4:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <BSP_LED_Init+0x114>)
 80019c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d110      	bne.n	80019f4 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	4b23      	ldr	r3, [pc, #140]	@ (8001a60 <BSP_LED_Init+0x114>)
 80019d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019d8:	4a21      	ldr	r2, [pc, #132]	@ (8001a60 <BSP_LED_Init+0x114>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80019e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a60 <BSP_LED_Init+0x114>)
 80019e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 80019f0:	2301      	movs	r3, #1
 80019f2:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 80019f4:	f003 fa40 	bl	8004e78 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 80019f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d107      	bne.n	8001a0e <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <BSP_LED_Init+0x114>)
 8001a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a04:	4a16      	ldr	r2, [pc, #88]	@ (8001a60 <BSP_LED_Init+0x114>)
 8001a06:	f023 0304 	bic.w	r3, r3, #4
 8001a0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8001a0e:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <BSP_LED_Init+0x114>)
 8001a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a14:	4a12      	ldr	r2, [pc, #72]	@ (8001a60 <BSP_LED_Init+0x114>)
 8001a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <BSP_LED_Init+0x114>)
 8001a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <BSP_LED_Init+0x118>)
 8001a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a34:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4a08      	ldr	r2, [pc, #32]	@ (8001a68 <BSP_LED_Init+0x11c>)
 8001a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4a:	f107 021c 	add.w	r2, r7, #28
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 fe3d 	bl	80046d0 <HAL_GPIO_Init>
  }

  return ret;
 8001a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3738      	adds	r7, #56	@ 0x38
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	46020c00 	.word	0x46020c00
 8001a64:	0800b694 	.word	0x0800b694
 8001a68:	20000028 	.word	0x20000028

08001a6c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d009      	beq.n	8001a94 <BSP_LED_On+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <BSP_LED_On+0x28>
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d003      	beq.n	8001a94 <BSP_LED_On+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a8c:	f06f 0301 	mvn.w	r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	e00b      	b.n	8001aac <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	4a08      	ldr	r2, [pc, #32]	@ (8001ab8 <BSP_LED_On+0x4c>)
 8001a98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	4a07      	ldr	r2, [pc, #28]	@ (8001abc <BSP_LED_On+0x50>)
 8001aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f003 f8c8 	bl	8004c3c <HAL_GPIO_WritePin>
  }

  return ret;
 8001aac:	68fb      	ldr	r3, [r7, #12]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000028 	.word	0x20000028
 8001abc:	0800b694 	.word	0x0800b694

08001ac0 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d009      	beq.n	8001ae8 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <BSP_LED_Toggle+0x28>
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d003      	beq.n	8001ae8 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ae0:	f06f 0301 	mvn.w	r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	e00b      	b.n	8001b00 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	4a08      	ldr	r2, [pc, #32]	@ (8001b0c <BSP_LED_Toggle+0x4c>)
 8001aec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4907      	ldr	r1, [pc, #28]	@ (8001b10 <BSP_LED_Toggle+0x50>)
 8001af4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f003 f8b6 	bl	8004c6c <HAL_GPIO_TogglePin>
  }

  return ret;
 8001b00:	68fb      	ldr	r3, [r7, #12]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000028 	.word	0x20000028
 8001b10:	0800b694 	.word	0x0800b694

08001b14 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460a      	mov	r2, r1
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	4613      	mov	r3, r2
 8001b22:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001b24:	4b30      	ldr	r3, [pc, #192]	@ (8001be8 <BSP_PB_Init+0xd4>)
 8001b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8001be8 <BSP_PB_Init+0xd4>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b34:	4b2c      	ldr	r3, [pc, #176]	@ (8001be8 <BSP_PB_Init+0xd4>)
 8001b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001b42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b46:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10c      	bne.n	8001b70 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	4a23      	ldr	r2, [pc, #140]	@ (8001bec <BSP_PB_Init+0xd8>)
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	f107 020c 	add.w	r2, r7, #12
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 fdb1 	bl	80046d0 <HAL_GPIO_Init>
 8001b6e:	e036      	b.n	8001bde <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001b70:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <BSP_PB_Init+0xdc>)
 8001b72:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	4a1d      	ldr	r2, [pc, #116]	@ (8001bec <BSP_PB_Init+0xd8>)
 8001b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7c:	f107 020c 	add.w	r2, r7, #12
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 fda4 	bl	80046d0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001b88:	79fa      	ldrb	r2, [r7, #7]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4a18      	ldr	r2, [pc, #96]	@ (8001bf4 <BSP_PB_Init+0xe0>)
 8001b94:	441a      	add	r2, r3
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4917      	ldr	r1, [pc, #92]	@ (8001bf8 <BSP_PB_Init+0xe4>)
 8001b9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	f002 fd38 	bl	8004616 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001ba6:	79fa      	ldrb	r2, [r7, #7]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4a10      	ldr	r2, [pc, #64]	@ (8001bf4 <BSP_PB_Init+0xe0>)
 8001bb2:	1898      	adds	r0, r3, r2
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	4a11      	ldr	r2, [pc, #68]	@ (8001bfc <BSP_PB_Init+0xe8>)
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	f002 fcfd 	bl	80045be <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001bc4:	2018      	movs	r0, #24
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <BSP_PB_Init+0xec>)
 8001bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f000 fa5d 	bl	8002090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001bd6:	2318      	movs	r3, #24
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fa73 	bl	80020c4 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	46020c00 	.word	0x46020c00
 8001bec:	20000034 	.word	0x20000034
 8001bf0:	10110000 	.word	0x10110000
 8001bf4:	200086c0 	.word	0x200086c0
 8001bf8:	0800b69c 	.word	0x0800b69c
 8001bfc:	20000038 	.word	0x20000038
 8001c00:	2000003c 	.word	0x2000003c

08001c04 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001c0e:	79fa      	ldrb	r2, [r7, #7]
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <BSP_PB_IRQHandler+0x28>)
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fd0f 	bl	8004640 <HAL_EXTI_IRQHandler>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200086c0 	.word	0x200086c0

08001c30 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c46:	f06f 0301 	mvn.w	r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	e018      	b.n	8001c80 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	2294      	movs	r2, #148	@ 0x94
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
 8001c56:	4a0d      	ldr	r2, [pc, #52]	@ (8001c8c <BSP_COM_Init+0x5c>)
 8001c58:	4413      	add	r3, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f870 	bl	8001d40 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	2294      	movs	r2, #148	@ 0x94
 8001c64:	fb02 f303 	mul.w	r3, r2, r3
 8001c68:	4a08      	ldr	r2, [pc, #32]	@ (8001c8c <BSP_COM_Init+0x5c>)
 8001c6a:	4413      	add	r3, r2
 8001c6c:	6839      	ldr	r1, [r7, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f80e 	bl	8001c90 <MX_USART1_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c7a:	f06f 0303 	mvn.w	r3, #3
 8001c7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001c80:	68fb      	ldr	r3, [r7, #12]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200086cc 	.word	0x200086cc

08001c90 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001c9a:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <MX_USART1_Init+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	220c      	movs	r2, #12
 8001cae:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	895b      	ldrh	r3, [r3, #10]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	891b      	ldrh	r3, [r3, #8]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	899b      	ldrh	r3, [r3, #12]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cdc:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f007 fe79 	bl	80099dc <HAL_UART_Init>
 8001cea:	4603      	mov	r3, r0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000024 	.word	0x20000024

08001cf8 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <__io_putchar+0x30>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	2394      	movs	r3, #148	@ 0x94
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	4a07      	ldr	r2, [pc, #28]	@ (8001d2c <__io_putchar+0x34>)
 8001d0e:	1898      	adds	r0, r3, r2
 8001d10:	1d39      	adds	r1, r7, #4
 8001d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d16:	2201      	movs	r2, #1
 8001d18:	f007 feba 	bl	8009a90 <HAL_UART_Transmit>
  return ch;
 8001d1c:	687b      	ldr	r3, [r7, #4]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20008760 	.word	0x20008760
 8001d2c:	200086cc 	.word	0x200086cc

08001d30 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f7fe fdcf 	bl	80008d8 <BSP_PB_Callback>
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	@ 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001d48:	4b27      	ldr	r3, [pc, #156]	@ (8001de8 <COM1_MspInit+0xa8>)
 8001d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d4e:	4a26      	ldr	r2, [pc, #152]	@ (8001de8 <COM1_MspInit+0xa8>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d58:	4b23      	ldr	r3, [pc, #140]	@ (8001de8 <COM1_MspInit+0xa8>)
 8001d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001d66:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <COM1_MspInit+0xa8>)
 8001d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001de8 <COM1_MspInit+0xa8>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d76:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <COM1_MspInit+0xa8>)
 8001d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001d84:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <COM1_MspInit+0xa8>)
 8001d86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d8a:	4a17      	ldr	r2, [pc, #92]	@ (8001de8 <COM1_MspInit+0xa8>)
 8001d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d90:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <COM1_MspInit+0xa8>)
 8001d96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001da2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001da6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001dac:	2302      	movs	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001db4:	2307      	movs	r3, #7
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480b      	ldr	r0, [pc, #44]	@ (8001dec <COM1_MspInit+0xac>)
 8001dc0:	f002 fc86 	bl	80046d0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001dc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dc8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001dce:	2307      	movs	r3, #7
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4804      	ldr	r0, [pc, #16]	@ (8001dec <COM1_MspInit+0xac>)
 8001dda:	f002 fc79 	bl	80046d0 <HAL_GPIO_Init>
}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	@ 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	46020c00 	.word	0x46020c00
 8001dec:	42020000 	.word	0x42020000

08001df0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <HAL_Init+0x50>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a11      	ldr	r2, [pc, #68]	@ (8001e40 <HAL_Init+0x50>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f000 f93a 	bl	800207a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001e06:	f004 f925 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <HAL_Init+0x54>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	490c      	ldr	r1, [pc, #48]	@ (8001e48 <HAL_Init+0x58>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e4c <HAL_Init+0x5c>)
 8001e1e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e20:	2004      	movs	r0, #4
 8001e22:	f000 f96b 	bl	80020fc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e26:	2007      	movs	r0, #7
 8001e28:	f7ff fbb2 	bl	8001590 <HAL_InitTick>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e002      	b.n	8001e3c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e36:	f7ff fadd 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40022000 	.word	0x40022000
 8001e44:	46020c00 	.word	0x46020c00
 8001e48:	0800b63c 	.word	0x0800b63c
 8001e4c:	20000020 	.word	0x20000020

08001e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_IncTick+0x20>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_IncTick+0x24>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a04      	ldr	r2, [pc, #16]	@ (8001e74 <HAL_IncTick+0x24>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000044 	.word	0x20000044
 8001e74:	20008764 	.word	0x20008764

08001e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	@ (8001e8c <HAL_GetTick+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20008764 	.word	0x20008764

08001e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff ffee 	bl	8001e78 <HAL_GetTick>
 8001e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea8:	d005      	beq.n	8001eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <HAL_Delay+0x44>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eb6:	bf00      	nop
 8001eb8:	f7ff ffde 	bl	8001e78 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d8f7      	bhi.n	8001eb8 <HAL_Delay+0x28>
  {
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000044 	.word	0x20000044

08001ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0a:	4a04      	ldr	r2, [pc, #16]	@ (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	60d3      	str	r3, [r2, #12]
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f24:	4b04      	ldr	r3, [pc, #16]	@ (8001f38 <__NVIC_GetPriorityGrouping+0x18>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	f003 0307 	and.w	r3, r3, #7
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db0b      	blt.n	8001f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	f003 021f 	and.w	r2, r3, #31
 8001f54:	4907      	ldr	r1, [pc, #28]	@ (8001f74 <__NVIC_EnableIRQ+0x38>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db12      	blt.n	8001fb0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	490a      	ldr	r1, [pc, #40]	@ (8001fbc <__NVIC_DisableIRQ+0x44>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	3320      	adds	r3, #32
 8001fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fa4:	f3bf 8f4f 	dsb	sy
}
 8001fa8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001faa:	f3bf 8f6f 	isb	sy
}
 8001fae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	@ (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	@ (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	@ 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
         );
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	@ 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ff28 	bl	8001ed8 <__NVIC_SetPriorityGrouping>
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800209e:	f7ff ff3f 	bl	8001f20 <__NVIC_GetPriorityGrouping>
 80020a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	6978      	ldr	r0, [r7, #20]
 80020aa:	f7ff ffb3 	bl	8002014 <NVIC_EncodePriority>
 80020ae:	4602      	mov	r2, r0
 80020b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff82 	bl	8001fc0 <__NVIC_SetPriority>
}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff32 	bl	8001f3c <__NVIC_EnableIRQ>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff42 	bl	8001f78 <__NVIC_DisableIRQ>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b04      	cmp	r3, #4
 8002108:	d844      	bhi.n	8002194 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800210a:	a201      	add	r2, pc, #4	@ (adr r2, 8002110 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002110:	08002133 	.word	0x08002133
 8002114:	08002151 	.word	0x08002151
 8002118:	08002173 	.word	0x08002173
 800211c:	08002195 	.word	0x08002195
 8002120:	08002125 	.word	0x08002125
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002124:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1e      	ldr	r2, [pc, #120]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6013      	str	r3, [r2, #0]
      break;
 8002130:	e031      	b.n	8002196 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002132:	4b1c      	ldr	r3, [pc, #112]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1b      	ldr	r2, [pc, #108]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800213e:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002144:	4a18      	ldr	r2, [pc, #96]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002146:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800214a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800214e:	e022      	b.n	8002196 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002150:	4b14      	ldr	r3, [pc, #80]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a13      	ldr	r2, [pc, #76]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002156:	f023 0304 	bic.w	r3, r3, #4
 800215a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800215e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002162:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002166:	4a10      	ldr	r2, [pc, #64]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002168:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800216c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002170:	e011      	b.n	8002196 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002172:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a0b      	ldr	r2, [pc, #44]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002178:	f023 0304 	bic.w	r3, r3, #4
 800217c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800217e:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002184:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002188:	4a07      	ldr	r2, [pc, #28]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800218a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800218e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002192:	e000      	b.n	8002196 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002194:	bf00      	nop
  }
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010
 80021a8:	46020c00 	.word	0x46020c00

080021ac <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e034      	b.n	8002228 <HAL_DAC_Init+0x7c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	791b      	ldrb	r3, [r3, #4]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d125      	bne.n	8002214 <HAL_DAC_Init+0x68>
  {
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the DAC Callback settings */
    hdac->ConvCpltCallbackCh1           = HAL_DAC_ConvCpltCallbackCh1;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a19      	ldr	r2, [pc, #100]	@ (8002230 <HAL_DAC_Init+0x84>)
 80021cc:	615a      	str	r2, [r3, #20]
    hdac->ConvHalfCpltCallbackCh1       = HAL_DAC_ConvHalfCpltCallbackCh1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a18      	ldr	r2, [pc, #96]	@ (8002234 <HAL_DAC_Init+0x88>)
 80021d2:	619a      	str	r2, [r3, #24]
    hdac->ErrorCallbackCh1              = HAL_DAC_ErrorCallbackCh1;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a18      	ldr	r2, [pc, #96]	@ (8002238 <HAL_DAC_Init+0x8c>)
 80021d8:	61da      	str	r2, [r3, #28]
    hdac->DMAUnderrunCallbackCh1        = HAL_DAC_DMAUnderrunCallbackCh1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a17      	ldr	r2, [pc, #92]	@ (800223c <HAL_DAC_Init+0x90>)
 80021de:	621a      	str	r2, [r3, #32]

    hdac->ConvCpltCallbackCh2           = HAL_DACEx_ConvCpltCallbackCh2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a17      	ldr	r2, [pc, #92]	@ (8002240 <HAL_DAC_Init+0x94>)
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdac->ConvHalfCpltCallbackCh2       = HAL_DACEx_ConvHalfCpltCallbackCh2;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a16      	ldr	r2, [pc, #88]	@ (8002244 <HAL_DAC_Init+0x98>)
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28
    hdac->ErrorCallbackCh2              = HAL_DACEx_ErrorCallbackCh2;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a16      	ldr	r2, [pc, #88]	@ (8002248 <HAL_DAC_Init+0x9c>)
 80021f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdac->DMAUnderrunCallbackCh2        = HAL_DACEx_DMAUnderrunCallbackCh2;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a15      	ldr	r2, [pc, #84]	@ (800224c <HAL_DAC_Init+0xa0>)
 80021f6:	631a      	str	r2, [r3, #48]	@ 0x30

    if (hdac->MspInitCallback == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <HAL_DAC_Init+0x5a>
    {
      hdac->MspInitCallback             = HAL_DAC_MspInit;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a13      	ldr	r2, [pc, #76]	@ (8002250 <HAL_DAC_Init+0xa4>)
 8002204:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	715a      	strb	r2, [r3, #5]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	08002763 	.word	0x08002763
 8002234:	08002777 	.word	0x08002777
 8002238:	0800278b 	.word	0x0800278b
 800223c:	0800279f 	.word	0x0800279f
 8002240:	08002b67 	.word	0x08002b67
 8002244:	08002b7b 	.word	0x08002b7b
 8002248:	08002b8f 	.word	0x08002b8f
 800224c:	08002ba3 	.word	0x08002ba3
 8002250:	0800142d 	.word	0x0800142d

08002254 <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e017      	b.n	8002296 <HAL_DAC_DeInit+0x42>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2202      	movs	r2, #2
 800226a:	711a      	strb	r2, [r3, #4]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  if (hdac->MspDeInitCallback == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <HAL_DAC_DeInit+0x26>
  {
    hdac->MspDeInitCallback = HAL_DAC_MspDeInit;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <HAL_DAC_DeInit+0x4c>)
 8002278:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	4798      	blx	r3
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	0800150d 	.word	0x0800150d

080022a4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b0a4      	sub	sp, #144	@ 0x90
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e1a4      	b.n	8002606 <HAL_DAC_Start_DMA+0x362>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	795b      	ldrb	r3, [r3, #5]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_DAC_Start_DMA+0x24>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e19e      	b.n	8002606 <HAL_DAC_Start_DMA+0x362>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2202      	movs	r2, #2
 80022d2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d12e      	bne.n	8002338 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4a8b      	ldr	r2, [pc, #556]	@ (800250c <HAL_DAC_Start_DMA+0x268>)
 80022e0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	4a8a      	ldr	r2, [pc, #552]	@ (8002510 <HAL_DAC_Start_DMA+0x26c>)
 80022e8:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4a89      	ldr	r2, [pc, #548]	@ (8002514 <HAL_DAC_Start_DMA+0x270>)
 80022f0:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002300:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002302:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002306:	2b00      	cmp	r3, #0
 8002308:	d004      	beq.n	8002314 <HAL_DAC_Start_DMA+0x70>
 800230a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800230e:	2b04      	cmp	r3, #4
 8002310:	d006      	beq.n	8002320 <HAL_DAC_Start_DMA+0x7c>
 8002312:	e00b      	b.n	800232c <HAL_DAC_Start_DMA+0x88>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3308      	adds	r3, #8
 800231a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 800231e:	e03a      	b.n	8002396 <HAL_DAC_Start_DMA+0xf2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	330c      	adds	r3, #12
 8002326:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 800232a:	e034      	b.n	8002396 <HAL_DAC_Start_DMA+0xf2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	3310      	adds	r3, #16
 8002332:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 8002336:	e02e      	b.n	8002396 <HAL_DAC_Start_DMA+0xf2>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a76      	ldr	r2, [pc, #472]	@ (8002518 <HAL_DAC_Start_DMA+0x274>)
 800233e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a75      	ldr	r2, [pc, #468]	@ (800251c <HAL_DAC_Start_DMA+0x278>)
 8002346:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a74      	ldr	r2, [pc, #464]	@ (8002520 <HAL_DAC_Start_DMA+0x27c>)
 800234e:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800235e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002360:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <HAL_DAC_Start_DMA+0xce>
 8002368:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800236c:	2b04      	cmp	r3, #4
 800236e:	d006      	beq.n	800237e <HAL_DAC_Start_DMA+0xda>
 8002370:	e00b      	b.n	800238a <HAL_DAC_Start_DMA+0xe6>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3314      	adds	r3, #20
 8002378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 800237c:	e00b      	b.n	8002396 <HAL_DAC_Start_DMA+0xf2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	3318      	adds	r3, #24
 8002384:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 8002388:	e005      	b.n	8002396 <HAL_DAC_Start_DMA+0xf2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	331c      	adds	r3, #28
 8002390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 8002394:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d17e      	bne.n	800249a <HAL_DAC_Start_DMA+0x1f6>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    /* Check linkedlist mode */
    if ((hdac->DMA_Handle1->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d04b      	beq.n	8002452 <HAL_DAC_Start_DMA+0x1ae>
    {
      if ((hdac->DMA_Handle1->LinkedListQueue != NULL) && (hdac->DMA_Handle1->LinkedListQueue->Head != NULL))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d044      	beq.n	800244e <HAL_DAC_Start_DMA+0x1aa>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d03e      	beq.n	800244e <HAL_DAC_Start_DMA+0x1aa>
      {
        /* Length should be converted to number of bytes */
        if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hdac->DMA_Handle1->LinkedListQueue->Head) != HAL_OK)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	f107 0318 	add.w	r3, r7, #24
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f001 fa74 	bl	80038cc <HAL_DMAEx_List_GetNodeConfig>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_DAC_Start_DMA+0x14a>
        {
          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e10b      	b.n	8002606 <HAL_DAC_Start_DMA+0x362>
        }

        /* Length should be converted to number of bytes */
        if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80023ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d104      	bne.n	80023fe <HAL_DAC_Start_DMA+0x15a>
        {
          /* Word -> Bytes */
          LengthInBytes = Length * 4U;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80023fc:	e00a      	b.n	8002414 <HAL_DAC_Start_DMA+0x170>
        }
        else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80023fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002400:	2b01      	cmp	r3, #1
 8002402:	d104      	bne.n	800240e <HAL_DAC_Start_DMA+0x16a>
        {
          /* Halfword -> Bytes */
          LengthInBytes = Length * 2U;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800240c:	e002      	b.n	8002414 <HAL_DAC_Start_DMA+0x170>
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          LengthInBytes = Length;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        }

        /* Set DMA data size */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = LengthInBytes;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002420:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = tmpreg;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800243a:	611a      	str	r2, [r3, #16]

        /* Enable the DMA channel */
        status = HAL_DMAEx_List_Start_IT(hdac->DMA_Handle1);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4618      	mov	r0, r3
 8002442:	f001 f999 	bl	8003778 <HAL_DMAEx_List_Start_IT>
 8002446:	4603      	mov	r3, r0
 8002448:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800244c:	e0af      	b.n	80025ae <HAL_DAC_Start_DMA+0x30a>
      }
      else
      {
        /* Return error status */
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e0d9      	b.n	8002606 <HAL_DAC_Start_DMA+0x362>
      }
    }
    else
    {
      /* Length should be converted to number of bytes */
      if (hdac->DMA_Handle1->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d104      	bne.n	8002466 <HAL_DAC_Start_DMA+0x1c2>
      {
        /* Word -> Bytes */
        LengthInBytes = Length * 4U;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002464:	e00c      	b.n	8002480 <HAL_DAC_Start_DMA+0x1dc>
      }
      else if (hdac->DMA_Handle1->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d104      	bne.n	800247a <HAL_DAC_Start_DMA+0x1d6>
      {
        /* Halfword -> Bytes */
        LengthInBytes = Length * 2U;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002478:	e002      	b.n	8002480 <HAL_DAC_Start_DMA+0x1dc>
      }
      else /* Bytes */
      {
        /* Same size already expressed in Bytes */
        LengthInBytes = Length;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }

      /* Enable the DMA channel */
      status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, LengthInBytes);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6898      	ldr	r0, [r3, #8]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800248a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800248e:	f000 fd34 	bl	8002efa <HAL_DMA_Start_IT>
 8002492:	4603      	mov	r3, r0
 8002494:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002498:	e089      	b.n	80025ae <HAL_DAC_Start_DMA+0x30a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80024a8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    /* Check linkedlist mode */
    if ((hdac->DMA_Handle2->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d057      	beq.n	8002568 <HAL_DAC_Start_DMA+0x2c4>
    {
      if ((hdac->DMA_Handle2->LinkedListQueue != NULL) && (hdac->DMA_Handle2->LinkedListQueue->Head != NULL))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d050      	beq.n	8002564 <HAL_DAC_Start_DMA+0x2c0>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d04a      	beq.n	8002564 <HAL_DAC_Start_DMA+0x2c0>
      {
        /* Length should be converted to number of bytes */
        if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hdac->DMA_Handle2->LinkedListQueue->Head) != HAL_OK)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	f107 0318 	add.w	r3, r7, #24
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f001 f9f5 	bl	80038cc <HAL_DMAEx_List_GetNodeConfig>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_DAC_Start_DMA+0x248>
        {
          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e08c      	b.n	8002606 <HAL_DAC_Start_DMA+0x362>
        }

        /* Length should be converted to number of bytes */
        if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80024ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d104      	bne.n	80024fc <HAL_DAC_Start_DMA+0x258>
        {
          /* Word -> Bytes */
          LengthInBytes = Length * 4U;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024fa:	e016      	b.n	800252a <HAL_DAC_Start_DMA+0x286>
        }
        else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80024fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d110      	bne.n	8002524 <HAL_DAC_Start_DMA+0x280>
        {
          /* Halfword -> Bytes */
          LengthInBytes = Length * 2U;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800250a:	e00e      	b.n	800252a <HAL_DAC_Start_DMA+0x286>
 800250c:	08002af5 	.word	0x08002af5
 8002510:	08002b19 	.word	0x08002b19
 8002514:	08002b37 	.word	0x08002b37
 8002518:	08002e89 	.word	0x08002e89
 800251c:	08002ead 	.word	0x08002ead
 8002520:	08002ecb 	.word	0x08002ecb
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          LengthInBytes = Length;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        }

        /* Set DMA data size */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = LengthInBytes;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002536:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = tmpreg;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002550:	611a      	str	r2, [r3, #16]

        /* Enable the DMA channel */
        status = HAL_DMAEx_List_Start_IT(hdac->DMA_Handle2);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	4618      	mov	r0, r3
 8002558:	f001 f90e 	bl	8003778 <HAL_DMAEx_List_Start_IT>
 800255c:	4603      	mov	r3, r0
 800255e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002562:	e024      	b.n	80025ae <HAL_DAC_Start_DMA+0x30a>
      }
      else
      {
        /* Return error status */
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e04e      	b.n	8002606 <HAL_DAC_Start_DMA+0x362>
      }
    }
    else
    {
      /* Length should be converted to number of bytes */
      if (hdac->DMA_Handle2->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d104      	bne.n	800257c <HAL_DAC_Start_DMA+0x2d8>
      {
        /* Word -> Bytes */
        LengthInBytes = Length * 4U;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800257a:	e00c      	b.n	8002596 <HAL_DAC_Start_DMA+0x2f2>
      }
      else if (hdac->DMA_Handle2->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d104      	bne.n	8002590 <HAL_DAC_Start_DMA+0x2ec>
      {
        /* Halfword -> Bytes */
        LengthInBytes = Length * 2U;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800258e:	e002      	b.n	8002596 <HAL_DAC_Start_DMA+0x2f2>
      }
      else /* Bytes */
      {
        /* Same size already expressed in Bytes */
        LengthInBytes = Length;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }

      /* Enable the DMA channel */
      status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, LengthInBytes);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	68d8      	ldr	r0, [r3, #12]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80025a4:	f000 fca9 	bl	8002efa <HAL_DMA_Start_IT>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80025b4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d11c      	bne.n	80025f6 <HAL_DAC_Start_DMA+0x352>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2201      	movs	r2, #1
 80025ca:	409a      	lsls	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002610 <HAL_DAC_Start_DMA+0x36c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	099b      	lsrs	r3, r3, #6
 80025da:	4a0e      	ldr	r2, [pc, #56]	@ (8002614 <HAL_DAC_Start_DMA+0x370>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	099b      	lsrs	r3, r3, #6
 80025e2:	3301      	adds	r3, #1
 80025e4:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80025e6:	e002      	b.n	80025ee <HAL_DAC_Start_DMA+0x34a>
    {
      wait_loop_index--;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f9      	bne.n	80025e8 <HAL_DAC_Start_DMA+0x344>
 80025f4:	e005      	b.n	8002602 <HAL_DAC_Start_DMA+0x35e>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f043 0204 	orr.w	r2, r3, #4
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002602:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8002606:	4618      	mov	r0, r3
 8002608:	3790      	adds	r7, #144	@ 0x90
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000020 	.word	0x20000020
 8002614:	053e2d63 	.word	0x053e2d63

08002618 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e03e      	b.n	80026aa <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6819      	ldr	r1, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43da      	mvns	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	400a      	ands	r2, r1
 8002648:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6819      	ldr	r1, [r3, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2201      	movs	r2, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43da      	mvns	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	400a      	ands	r2, r1
 8002664:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4618      	mov	r0, r3
 8002672:	f000 fca2 	bl	8002fba <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	e00c      	b.n	80026a2 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fc94 	bl	8002fba <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80026a0:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01e      	beq.n	8002712 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d019      	beq.n	8002712 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2204      	movs	r2, #4
 80026e2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002708:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	4798      	blx	r3
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01e      	beq.n	800275a <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d019      	beq.n	800275a <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2204      	movs	r2, #4
 800272a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	f043 0202 	orr.w	r2, r3, #2
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002740:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002750:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	4798      	blx	r3
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	@ 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_DAC_ConfigChannel+0x1c>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e187      	b.n	8002ae4 <HAL_DAC_ConfigChannel+0x330>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	795b      	ldrb	r3, [r3, #5]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_DAC_ConfigChannel+0x32>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e17e      	b.n	8002ae4 <HAL_DAC_ConfigChannel+0x330>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2202      	movs	r2, #2
 80027f0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d17a      	bne.n	80028f0 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80027fa:	f7ff fb3d 	bl	8001e78 <HAL_GetTick>
 80027fe:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d13d      	bne.n	8002882 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002806:	e018      	b.n	800283a <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002808:	f7ff fb36 	bl	8001e78 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d911      	bls.n	800283a <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f043 0208 	orr.w	r2, r3, #8
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2203      	movs	r2, #3
 8002834:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e154      	b.n	8002ae4 <HAL_DAC_ConfigChannel+0x330>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002840:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1df      	bne.n	8002808 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002850:	641a      	str	r2, [r3, #64]	@ 0x40
 8002852:	e020      	b.n	8002896 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002854:	f7ff fb10 	bl	8001e78 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d90f      	bls.n	8002882 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002868:	2b00      	cmp	r3, #0
 800286a:	da0a      	bge.n	8002882 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f043 0208 	orr.w	r2, r3, #8
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2203      	movs	r2, #3
 800287c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e130      	b.n	8002ae4 <HAL_DAC_ConfigChannel+0x330>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002888:	2b00      	cmp	r3, #0
 800288a:	dbe3      	blt.n	8002854 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002894:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	ea02 0103 	and.w	r1, r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	409a      	lsls	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	21ff      	movs	r1, #255	@ 0xff
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	ea02 0103 	and.w	r1, r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	409a      	lsls	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f6:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	655a      	str	r2, [r3, #84]	@ 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d11d      	bne.n	800294a <HAL_DAC_ConfigChannel+0x196>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	221f      	movs	r2, #31
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002926:	4013      	ands	r3, r2
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800293e:	4313      	orrs	r3, r2
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002948:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2207      	movs	r2, #7
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002962:	4013      	ands	r3, r2
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d102      	bne.n	8002974 <HAL_DAC_ConfigChannel+0x1c0>
  {
    connectOnChip = 0x00000000UL;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
 8002972:	e00f      	b.n	8002994 <HAL_DAC_ConfigChannel+0x1e0>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d102      	bne.n	8002982 <HAL_DAC_ConfigChannel+0x1ce>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800297c:	2301      	movs	r3, #1
 800297e:	623b      	str	r3, [r7, #32]
 8002980:	e008      	b.n	8002994 <HAL_DAC_ConfigChannel+0x1e0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d102      	bne.n	8002990 <HAL_DAC_ConfigChannel+0x1dc>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800298a:	2301      	movs	r3, #1
 800298c:	623b      	str	r3, [r7, #32]
 800298e:	e001      	b.n	8002994 <HAL_DAC_ConfigChannel+0x1e0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	6a3a      	ldr	r2, [r7, #32]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b6:	4013      	ands	r3, r2
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	7a1b      	ldrb	r3, [r3, #8]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d102      	bne.n	80029c8 <HAL_DAC_ConfigChannel+0x214>
 80029c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029c6:	e000      	b.n	80029ca <HAL_DAC_ConfigChannel+0x216>
 80029c8:	2300      	movs	r3, #0
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e2:	4013      	ands	r3, r2
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	7a5b      	ldrb	r3, [r3, #9]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d102      	bne.n	80029f4 <HAL_DAC_ConfigChannel+0x240>
 80029ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029f2:	e000      	b.n	80029f6 <HAL_DAC_ConfigChannel+0x242>
 80029f4:	2300      	movs	r3, #0
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d114      	bne.n	8002a36 <HAL_DAC_ConfigChannel+0x282>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002a0c:	f003 fc24 	bl	8006258 <HAL_RCC_GetHCLKFreq>
 8002a10:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4a35      	ldr	r2, [pc, #212]	@ (8002aec <HAL_DAC_ConfigChannel+0x338>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d904      	bls.n	8002a24 <HAL_DAC_ConfigChannel+0x270>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a22:	e00f      	b.n	8002a44 <HAL_DAC_ConfigChannel+0x290>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4a32      	ldr	r2, [pc, #200]	@ (8002af0 <HAL_DAC_ConfigChannel+0x33c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d90a      	bls.n	8002a42 <HAL_DAC_ConfigChannel+0x28e>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a34:	e006      	b.n	8002a44 <HAL_DAC_ConfigChannel+0x290>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a40:	e000      	b.n	8002a44 <HAL_DAC_ConfigChannel+0x290>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002a42:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a52:	4313      	orrs	r3, r2
 8002a54:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6819      	ldr	r1, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	400a      	ands	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a96:	4013      	ands	r3, r2
 8002a98:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6819      	ldr	r1, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	22c0      	movs	r2, #192	@ 0xc0
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43da      	mvns	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3728      	adds	r7, #40	@ 0x28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	09896800 	.word	0x09896800
 8002af0:	04c4b400 	.word	0x04c4b400

08002af4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	4798      	blx	r3
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	711a      	strb	r2, [r3, #4]
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b24:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	4798      	blx	r3
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f043 0204 	orr.w	r2, r3, #4
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	4798      	blx	r3
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	711a      	strb	r2, [r3, #4]
}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_DACEx_SelfCalibrate>:
  * @retval Updates DAC_TrimmingValue. , DAC_UserTrimming set to DAC_UserTrimming
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */
HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	@ 0x28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Check the DAC handle allocation */
  /* Check if DAC running */
  if ((hdac == NULL) || (sConfig == NULL))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_DACEx_SelfCalibrate+0x1e>
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <HAL_DACEx_SelfCalibrate+0x26>
  {
    status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002bdc:	e111      	b.n	8002e02 <HAL_DACEx_SelfCalibrate+0x24a>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	791b      	ldrb	r3, [r3, #4]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d103      	bne.n	8002bf0 <HAL_DACEx_SelfCalibrate+0x38>
  {
    status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002bee:	e108      	b.n	8002e02 <HAL_DACEx_SelfCalibrate+0x24a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	795b      	ldrb	r3, [r3, #5]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_DACEx_SelfCalibrate+0x44>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e104      	b.n	8002e06 <HAL_DACEx_SelfCalibrate+0x24e>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2107      	movs	r1, #7
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6819      	ldr	r1, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	2201      	movs	r2, #1
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	400a      	ands	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]
    /* Wait for ready bit to be de-asserted */
    HAL_Delay(1);
 8002c34:	2001      	movs	r0, #1
 8002c36:	f7ff f92b 	bl	8001e90 <HAL_Delay>

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2207      	movs	r2, #7
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43da      	mvns	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	400a      	ands	r2, r1
 8002c54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6819      	ldr	r1, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c66:	409a      	lsls	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 0x10UL;
 8002c70:	2310      	movs	r3, #16
 8002c72:	623b      	str	r3, [r7, #32]
    delta = 0x08UL;
 8002c74:	2308      	movs	r3, #8
 8002c76:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 8002c78:	e047      	b.n	8002d0a <HAL_DACEx_SelfCalibrate+0x152>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	211f      	movs	r1, #31
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	ea02 0103 	and.w	r1, r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	6a3a      	ldr	r2, [r7, #32]
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Wait minimum time needed between two calibration steps (OTRIM) */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed */
      /*       32 bits register capacity and handle low frequency. */
      wait_loop_index = ((DAC_DELAY_TRIM_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca4:	4b5a      	ldr	r3, [pc, #360]	@ (8002e10 <HAL_DACEx_SelfCalibrate+0x258>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	4a5a      	ldr	r2, [pc, #360]	@ (8002e14 <HAL_DACEx_SelfCalibrate+0x25c>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	099b      	lsrs	r3, r3, #6
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002cbc:	e002      	b.n	8002cc4 <HAL_DACEx_SelfCalibrate+0x10c>
      {
        wait_loop_index--;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f9      	bne.n	8002cbe <HAL_DACEx_SelfCalibrate+0x106>
      }

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	401a      	ands	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d104      	bne.n	8002cfc <HAL_DACEx_SelfCalibrate+0x144>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 8002cf2:	6a3a      	ldr	r2, [r7, #32]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	623b      	str	r3, [r7, #32]
 8002cfa:	e003      	b.n	8002d04 <HAL_DACEx_SelfCalibrate+0x14c>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8002cfc:	6a3a      	ldr	r2, [r7, #32]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	4413      	add	r3, r2
 8002d02:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1UL;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1b4      	bne.n	8002c7a <HAL_DACEx_SelfCalibrate+0xc2>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	211f      	movs	r1, #31
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	ea02 0103 	and.w	r1, r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	6a3a      	ldr	r2, [r7, #32]
 8002d30:	409a      	lsls	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Wait minimum time needed between two calibration steps (OTRIM) */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed */
    /*       32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_TRIM_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d3a:	4b35      	ldr	r3, [pc, #212]	@ (8002e10 <HAL_DACEx_SelfCalibrate+0x258>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	099b      	lsrs	r3, r3, #6
 8002d40:	4a34      	ldr	r2, [pc, #208]	@ (8002e14 <HAL_DACEx_SelfCalibrate+0x25c>)
 8002d42:	fba2 2303 	umull	r2, r3, r2, r3
 8002d46:	099b      	lsrs	r3, r3, #6
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002d52:	e002      	b.n	8002d5a <HAL_DACEx_SelfCalibrate+0x1a2>
    {
      wait_loop_index--;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f9      	bne.n	8002d54 <HAL_DACEx_SelfCalibrate+0x19c>
    }

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d70:	fa01 f303 	lsl.w	r3, r1, r3
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d11a      	bne.n	8002db0 <HAL_DACEx_SelfCalibrate+0x1f8>
    {
      /* Check trimming value below maximum */
      if (trimmingvalue < 0x1FU)
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	2b1e      	cmp	r3, #30
 8002d7e:	d802      	bhi.n	8002d86 <HAL_DACEx_SelfCalibrate+0x1ce>
      {
        /* Trimming is actually one value more */
        trimmingvalue++;
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	3301      	adds	r3, #1
 8002d84:	623b      	str	r3, [r7, #32]
      }
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	211f      	movs	r1, #31
 8002d94:	fa01 f303 	lsl.w	r3, r1, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	ea02 0103 	and.w	r1, r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	409a      	lsls	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6819      	ldr	r1, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43da      	mvns	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	400a      	ands	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	621a      	str	r2, [r3, #32]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	61da      	str	r2, [r3, #28]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2107      	movs	r1, #7
 8002de8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	ea02 0103 	and.w	r1, r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	715a      	strb	r2, [r3, #5]
  }

  return status;
 8002e02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3728      	adds	r7, #40	@ 0x28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000020 	.word	0x20000020
 8002e14:	053e2d63 	.word	0x053e2d63

08002e18 <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle and autonomous mode configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_DACEx_SetConfigAutonomousMode+0x16>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_DACEx_SetConfigAutonomousMode+0x1a>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e024      	b.n	8002e7c <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }

  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	791b      	ldrb	r3, [r3, #4]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d11e      	bne.n	8002e7a <HAL_DACEx_SetConfigAutonomousMode+0x62>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	795b      	ldrb	r3, [r3, #5]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_DACEx_SetConfigAutonomousMode+0x30>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e019      	b.n	8002e7c <HAL_DACEx_SetConfigAutonomousMode+0x64>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2202      	movs	r2, #2
 8002e52:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5a:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e000      	b.n	8002e7c <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }
  else
  {
    return HAL_BUSY;
 8002e7a:	2302      	movs	r3, #2
  }
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	4798      	blx	r3
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	711a      	strb	r2, [r3, #4]
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	4798      	blx	r3
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	f043 0204 	orr.w	r2, r3, #4
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	4798      	blx	r3
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	711a      	strb	r2, [r3, #4]
}
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e04f      	b.n	8002fb2 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_DMA_Start_IT+0x26>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e048      	b.n	8002fb2 <HAL_DMA_Start_IT+0xb8>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d136      	bne.n	8002fa2 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 fa4f 	bl	80033ec <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002f5c:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f74:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f8c:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e007      	b.n	8002fb2 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2240      	movs	r2, #64	@ 0x40
 8002fa6:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002fc2:	f7fe ff59 	bl	8001e78 <HAL_GetTick>
 8002fc6:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06b      	b.n	80030aa <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d008      	beq.n	8002ff0 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e05c      	b.n	80030aa <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0204 	orr.w	r2, r2, #4
 8002ffe:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2205      	movs	r2, #5
 8003004:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003008:	e020      	b.n	800304c <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800300a:	f7fe ff35 	bl	8001e78 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b05      	cmp	r3, #5
 8003016:	d919      	bls.n	800304c <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301c:	f043 0210 	orr.w	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2203      	movs	r2, #3
 8003028:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800303c:	2201      	movs	r2, #1
 800303e:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e02e      	b.n	80030aa <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0d7      	beq.n	800300a <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695a      	ldr	r2, [r3, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0202 	orr.w	r2, r2, #2
 8003068:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2204      	movs	r2, #4
 800306e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800307a:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003094:	2201      	movs	r2, #1
 8003096:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2200      	movs	r2, #0
 800309e:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b086      	sub	sp, #24
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80030c2:	f023 030f 	bic.w	r3, r3, #15
 80030c6:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d0:	3b50      	subs	r3, #80	@ 0x50
 80030d2:	09db      	lsrs	r3, r3, #7
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	2201      	movs	r2, #1
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 813b 	beq.w	8003368 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d011      	beq.n	8003124 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003116:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800312e:	2b00      	cmp	r3, #0
 8003130:	d011      	beq.n	8003156 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003148:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314e:	f043 0202 	orr.w	r2, r3, #2
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d011      	beq.n	8003188 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800317a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003180:	f043 0204 	orr.w	r2, r3, #4
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d011      	beq.n	80031ba <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031ac:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b2:	f043 0208 	orr.w	r2, r3, #8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d013      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00c      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031de:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d04c      	beq.n	8003298 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d045      	beq.n	8003298 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003214:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b04      	cmp	r3, #4
 8003220:	d12e      	bne.n	8003280 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003230:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0202 	orr.w	r2, r2, #2
 8003240:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800324e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325a:	2201      	movs	r2, #1
 800325c:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2200      	movs	r2, #0
 8003264:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003272:	2b00      	cmp	r3, #0
 8003274:	d07a      	beq.n	800336c <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
        }

        return;
 800327e:	e075      	b.n	800336c <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2205      	movs	r2, #5
 8003284:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d039      	beq.n	800331a <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d032      	beq.n	800331a <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d012      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d116      	bne.n	80032f8 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d111      	bne.n	80032f8 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e0:	2201      	movs	r2, #1
 80032e2:	731a      	strb	r2, [r3, #12]
 80032e4:	e008      	b.n	80032f8 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d103      	bne.n	80032f8 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003300:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331e:	2b00      	cmp	r3, #0
 8003320:	d025      	beq.n	800336e <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0202 	orr.w	r2, r2, #2
 8003330:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800334a:	2201      	movs	r2, #1
 800334c:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
 8003366:	e002      	b.n	800336e <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003368:	bf00      	nop
 800336a:	e000      	b.n	800336e <HAL_DMA_IRQHandler+0x2bc>
        return;
 800336c:	bf00      	nop
    }
  }
}
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e02b      	b.n	80033e0 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003390:	f023 030f 	bic.w	r3, r3, #15
 8003394:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339e:	3b50      	subs	r3, #80	@ 0x50
 80033a0:	09db      	lsrs	r3, r3, #7
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2201      	movs	r2, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d012      	beq.n	80033de <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f003 0311 	and.w	r3, r3, #17
 80033be:	2b11      	cmp	r3, #17
 80033c0:	d106      	bne.n	80033d0 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	e006      	b.n	80033de <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	401a      	ands	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003400:	0c1b      	lsrs	r3, r3, #16
 8003402:	041b      	lsls	r3, r3, #16
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	b291      	uxth	r1, r2
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	430b      	orrs	r3, r1
 800340e:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003418:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003440:	f7fe fd1a 	bl	8001e78 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0db      	b.n	8003608 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a6e      	ldr	r2, [pc, #440]	@ (8003610 <HAL_DMAEx_List_Init+0x1d8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	f000 809f 	beq.w	800359a <HAL_DMAEx_List_Init+0x162>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a6c      	ldr	r2, [pc, #432]	@ (8003614 <HAL_DMAEx_List_Init+0x1dc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	f000 8099 	beq.w	800359a <HAL_DMAEx_List_Init+0x162>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a6a      	ldr	r2, [pc, #424]	@ (8003618 <HAL_DMAEx_List_Init+0x1e0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	f000 8093 	beq.w	800359a <HAL_DMAEx_List_Init+0x162>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a68      	ldr	r2, [pc, #416]	@ (800361c <HAL_DMAEx_List_Init+0x1e4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	f000 808d 	beq.w	800359a <HAL_DMAEx_List_Init+0x162>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a66      	ldr	r2, [pc, #408]	@ (8003620 <HAL_DMAEx_List_Init+0x1e8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	f000 8087 	beq.w	800359a <HAL_DMAEx_List_Init+0x162>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a64      	ldr	r2, [pc, #400]	@ (8003624 <HAL_DMAEx_List_Init+0x1ec>)
 8003492:	4293      	cmp	r3, r2
 8003494:	f000 8081 	beq.w	800359a <HAL_DMAEx_List_Init+0x162>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a62      	ldr	r2, [pc, #392]	@ (8003628 <HAL_DMAEx_List_Init+0x1f0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d07b      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a61      	ldr	r2, [pc, #388]	@ (800362c <HAL_DMAEx_List_Init+0x1f4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d076      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a5f      	ldr	r2, [pc, #380]	@ (8003630 <HAL_DMAEx_List_Init+0x1f8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d071      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003634 <HAL_DMAEx_List_Init+0x1fc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d06c      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a5c      	ldr	r2, [pc, #368]	@ (8003638 <HAL_DMAEx_List_Init+0x200>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d067      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a5b      	ldr	r2, [pc, #364]	@ (800363c <HAL_DMAEx_List_Init+0x204>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d062      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a59      	ldr	r2, [pc, #356]	@ (8003640 <HAL_DMAEx_List_Init+0x208>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d05d      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a58      	ldr	r2, [pc, #352]	@ (8003644 <HAL_DMAEx_List_Init+0x20c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d058      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a56      	ldr	r2, [pc, #344]	@ (8003648 <HAL_DMAEx_List_Init+0x210>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d053      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a55      	ldr	r2, [pc, #340]	@ (800364c <HAL_DMAEx_List_Init+0x214>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d04e      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a53      	ldr	r2, [pc, #332]	@ (8003650 <HAL_DMAEx_List_Init+0x218>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d049      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a52      	ldr	r2, [pc, #328]	@ (8003654 <HAL_DMAEx_List_Init+0x21c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d044      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a50      	ldr	r2, [pc, #320]	@ (8003658 <HAL_DMAEx_List_Init+0x220>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d03f      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a4f      	ldr	r2, [pc, #316]	@ (800365c <HAL_DMAEx_List_Init+0x224>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d03a      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a4d      	ldr	r2, [pc, #308]	@ (8003660 <HAL_DMAEx_List_Init+0x228>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d035      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a4c      	ldr	r2, [pc, #304]	@ (8003664 <HAL_DMAEx_List_Init+0x22c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d030      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a4a      	ldr	r2, [pc, #296]	@ (8003668 <HAL_DMAEx_List_Init+0x230>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d02b      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a49      	ldr	r2, [pc, #292]	@ (800366c <HAL_DMAEx_List_Init+0x234>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d026      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a47      	ldr	r2, [pc, #284]	@ (8003670 <HAL_DMAEx_List_Init+0x238>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d021      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a46      	ldr	r2, [pc, #280]	@ (8003674 <HAL_DMAEx_List_Init+0x23c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d01c      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a44      	ldr	r2, [pc, #272]	@ (8003678 <HAL_DMAEx_List_Init+0x240>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d017      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a43      	ldr	r2, [pc, #268]	@ (800367c <HAL_DMAEx_List_Init+0x244>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d012      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a41      	ldr	r2, [pc, #260]	@ (8003680 <HAL_DMAEx_List_Init+0x248>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00d      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a40      	ldr	r2, [pc, #256]	@ (8003684 <HAL_DMAEx_List_Init+0x24c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d008      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a3e      	ldr	r2, [pc, #248]	@ (8003688 <HAL_DMAEx_List_Init+0x250>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d003      	beq.n	800359a <HAL_DMAEx_List_Init+0x162>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a3d      	ldr	r2, [pc, #244]	@ (800368c <HAL_DMAEx_List_Init+0x254>)
 8003598:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0206 	orr.w	r2, r2, #6
 80035b8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80035ba:	e00f      	b.n	80035dc <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80035bc:	f7fe fc5c 	bl	8001e78 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b05      	cmp	r3, #5
 80035c8:	d908      	bls.n	80035dc <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2210      	movs	r2, #16
 80035ce:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2203      	movs	r2, #3
 80035d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e015      	b.n	8003608 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e8      	bne.n	80035bc <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 faf2 	bl	8003bd4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40020050 	.word	0x40020050
 8003614:	50020050 	.word	0x50020050
 8003618:	400200d0 	.word	0x400200d0
 800361c:	500200d0 	.word	0x500200d0
 8003620:	40020150 	.word	0x40020150
 8003624:	50020150 	.word	0x50020150
 8003628:	400201d0 	.word	0x400201d0
 800362c:	500201d0 	.word	0x500201d0
 8003630:	40020250 	.word	0x40020250
 8003634:	50020250 	.word	0x50020250
 8003638:	400202d0 	.word	0x400202d0
 800363c:	500202d0 	.word	0x500202d0
 8003640:	40020350 	.word	0x40020350
 8003644:	50020350 	.word	0x50020350
 8003648:	400203d0 	.word	0x400203d0
 800364c:	500203d0 	.word	0x500203d0
 8003650:	40020450 	.word	0x40020450
 8003654:	50020450 	.word	0x50020450
 8003658:	400204d0 	.word	0x400204d0
 800365c:	500204d0 	.word	0x500204d0
 8003660:	40020550 	.word	0x40020550
 8003664:	50020550 	.word	0x50020550
 8003668:	400205d0 	.word	0x400205d0
 800366c:	500205d0 	.word	0x500205d0
 8003670:	40020650 	.word	0x40020650
 8003674:	50020650 	.word	0x50020650
 8003678:	400206d0 	.word	0x400206d0
 800367c:	500206d0 	.word	0x500206d0
 8003680:	40020750 	.word	0x40020750
 8003684:	50020750 	.word	0x50020750
 8003688:	400207d0 	.word	0x400207d0
 800368c:	500207d0 	.word	0x500207d0

08003690 <HAL_DMAEx_List_Start>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start(DMA_HandleTypeDef *const hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_DMAEx_List_Start+0x16>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_DMAEx_List_Start+0x1a>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e062      	b.n	8003770 <HAL_DMAEx_List_Start+0xe0>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80036b0:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036bc:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d005      	beq.n	80036d0 <HAL_DMAEx_List_Start+0x40>
 80036c4:	7dfb      	ldrb	r3, [r7, #23]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d14a      	bne.n	8003760 <HAL_DMAEx_List_Start+0xd0>
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d047      	beq.n	8003760 <HAL_DMAEx_List_Start+0xd0>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d137      	bne.n	800374c <HAL_DMAEx_List_Start+0xbc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_DMAEx_List_Start+0x5a>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e042      	b.n	8003770 <HAL_DMAEx_List_Start+0xe0>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2202      	movs	r2, #2
 80036f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036fe:	2202      	movs	r2, #2
 8003700:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800370c:	2200      	movs	r2, #0
 800370e:	611a      	str	r2, [r3, #16]

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f107 010c 	add.w	r1, r7, #12
 800371a:	2200      	movs	r2, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fe7f 	bl	8004420 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4619      	mov	r1, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	0c0b      	lsrs	r3, r1, #16
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003740:	4013      	ands	r3, r2
 8003742:	68f9      	ldr	r1, [r7, #12]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	430b      	orrs	r3, r1
 800374a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	e007      	b.n	8003770 <HAL_DMAEx_List_Start+0xe0>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2240      	movs	r2, #64	@ 0x40
 8003764:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_DMAEx_List_Start_IT+0x16>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e082      	b.n	8003898 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003798:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a4:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d005      	beq.n	80037b8 <HAL_DMAEx_List_Start_IT+0x40>
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d16a      	bne.n	8003888 <HAL_DMAEx_List_Start_IT+0x110>
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d067      	beq.n	8003888 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d157      	bne.n	8003874 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_DMAEx_List_Start_IT+0x5a>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e062      	b.n	8003898 <HAL_DMAEx_List_Start_IT+0x120>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e6:	2202      	movs	r2, #2
 80037e8:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003806:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381e:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003836:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f107 010c 	add.w	r1, r7, #12
 8003842:	2200      	movs	r2, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fdeb 	bl	8004420 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	0c0b      	lsrs	r3, r1, #16
 8003858:	041b      	lsls	r3, r3, #16
 800385a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003868:	4013      	ands	r3, r2
 800386a:	68f9      	ldr	r1, [r7, #12]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	430b      	orrs	r3, r1
 8003872:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	e007      	b.n	8003898 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2240      	movs	r2, #64	@ 0x40
 800388c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <HAL_DMAEx_List_BuildNode+0x16>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e004      	b.n	80038c4 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80038ba:	6839      	ldr	r1, [r7, #0]
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fae1 	bl	8003e84 <DMA_List_BuildNode>

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_DMAEx_List_GetNodeConfig+0x16>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e004      	b.n	80038f0 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80038e6:	6839      	ldr	r1, [r7, #0]
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fc23 	bl	8004134 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	@ 0x28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e066      	b.n	80039e0 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d104      	bne.n	8003924 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2204      	movs	r2, #4
 800391e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e05d      	b.n	80039e0 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2200      	movs	r2, #0
 800392a:	6839      	ldr	r1, [r7, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fd0b 	bl	8004348 <DMA_List_CheckNodesBaseAddresses>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d004      	beq.n	8003942 <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2205      	movs	r2, #5
 800393c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e04e      	b.n	80039e0 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2200      	movs	r2, #0
 8003948:	6839      	ldr	r1, [r7, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fd2c 	bl	80043a8 <DMA_List_CheckNodesTypes>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2204      	movs	r2, #4
 800395a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e03f      	b.n	80039e0 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d103      	bne.n	8003970 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e02b      	b.n	80039c8 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003970:	f107 0220 	add.w	r2, r7, #32
 8003974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003978:	4619      	mov	r1, r3
 800397a:	6838      	ldr	r0, [r7, #0]
 800397c:	f000 fd50 	bl	8004420 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003984:	f107 030c 	add.w	r3, r7, #12
 8003988:	461a      	mov	r2, r3
 800398a:	2100      	movs	r1, #0
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fd77 	bl	8004480 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00b      	beq.n	80039b2 <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	461a      	mov	r2, r3
 80039a0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80039a4:	4013      	ands	r3, r2
 80039a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039a8:	6a3a      	ldr	r2, [r7, #32]
 80039aa:	4319      	orrs	r1, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80039b8:	4013      	ands	r3, r2
 80039ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4610      	mov	r0, r2
 80039c0:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80039c2:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 80039c4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3728      	adds	r7, #40	@ 0x28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	@ 0x28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e052      	b.n	8003aa0 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e049      	b.n	8003aa0 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00c      	beq.n	8003a2e <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d101      	bne.n	8003a24 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e03d      	b.n	8003aa0 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2204      	movs	r2, #4
 8003a28:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e038      	b.n	8003aa0 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d104      	bne.n	8003a40 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2204      	movs	r2, #4
 8003a3a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e02f      	b.n	8003aa0 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f107 0220 	add.w	r2, r7, #32
 8003a54:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fce1 	bl	8004420 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003a62:	f107 030c 	add.w	r3, r7, #12
 8003a66:	461a      	mov	r2, r3
 8003a68:	2100      	movs	r1, #0
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fd08 	bl	8004480 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4610      	mov	r0, r2
 8003a82:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003a84:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003a86:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3728      	adds	r7, #40	@ 0x28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <HAL_DMAEx_List_LinkQ+0x16>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e072      	b.n	8003ba8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ac8:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d002      	beq.n	8003adc <HAL_DMAEx_List_LinkQ+0x34>
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	2b05      	cmp	r3, #5
 8003ada:	d108      	bne.n	8003aee <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2240      	movs	r2, #64	@ 0x40
 8003ae0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e05c      	b.n	8003ba8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	7b1b      	ldrb	r3, [r3, #12]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d104      	bne.n	8003b02 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2201      	movs	r2, #1
 8003afc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e052      	b.n	8003ba8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb4 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d022      	beq.n	8003b52 <HAL_DMAEx_List_LinkQ+0xaa>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a29      	ldr	r2, [pc, #164]	@ (8003bb8 <HAL_DMAEx_List_LinkQ+0x110>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01d      	beq.n	8003b52 <HAL_DMAEx_List_LinkQ+0xaa>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a28      	ldr	r2, [pc, #160]	@ (8003bbc <HAL_DMAEx_List_LinkQ+0x114>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d018      	beq.n	8003b52 <HAL_DMAEx_List_LinkQ+0xaa>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a26      	ldr	r2, [pc, #152]	@ (8003bc0 <HAL_DMAEx_List_LinkQ+0x118>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <HAL_DMAEx_List_LinkQ+0xaa>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a25      	ldr	r2, [pc, #148]	@ (8003bc4 <HAL_DMAEx_List_LinkQ+0x11c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00e      	beq.n	8003b52 <HAL_DMAEx_List_LinkQ+0xaa>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a23      	ldr	r2, [pc, #140]	@ (8003bc8 <HAL_DMAEx_List_LinkQ+0x120>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_DMAEx_List_LinkQ+0xaa>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a22      	ldr	r2, [pc, #136]	@ (8003bcc <HAL_DMAEx_List_LinkQ+0x124>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_DMAEx_List_LinkQ+0xaa>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a20      	ldr	r2, [pc, #128]	@ (8003bd0 <HAL_DMAEx_List_LinkQ+0x128>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d101      	bne.n	8003b56 <HAL_DMAEx_List_LinkQ+0xae>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <HAL_DMAEx_List_LinkQ+0xb0>
 8003b56:	2300      	movs	r3, #0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10b      	bne.n	8003b74 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e019      	b.n	8003ba8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b78:	2b81      	cmp	r3, #129	@ 0x81
 8003b7a:	d108      	bne.n	8003b8e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10d      	bne.n	8003ba0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2204      	movs	r2, #4
 8003b88:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e00c      	b.n	8003ba8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2204      	movs	r2, #4
 8003b9a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e003      	b.n	8003ba8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40020650 	.word	0x40020650
 8003bb8:	50020650 	.word	0x50020650
 8003bbc:	400206d0 	.word	0x400206d0
 8003bc0:	500206d0 	.word	0x500206d0
 8003bc4:	40020750 	.word	0x40020750
 8003bc8:	50020750 	.word	0x50020750
 8003bcc:	400207d0 	.word	0x400207d0
 8003bd0:	500207d0 	.word	0x500207d0

08003bd4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a85      	ldr	r2, [pc, #532]	@ (8003e04 <DMA_List_Init+0x230>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	f000 80a0 	beq.w	8003d34 <DMA_List_Init+0x160>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a83      	ldr	r2, [pc, #524]	@ (8003e08 <DMA_List_Init+0x234>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	f000 809a 	beq.w	8003d34 <DMA_List_Init+0x160>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a81      	ldr	r2, [pc, #516]	@ (8003e0c <DMA_List_Init+0x238>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	f000 8094 	beq.w	8003d34 <DMA_List_Init+0x160>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a7f      	ldr	r2, [pc, #508]	@ (8003e10 <DMA_List_Init+0x23c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	f000 808e 	beq.w	8003d34 <DMA_List_Init+0x160>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a7d      	ldr	r2, [pc, #500]	@ (8003e14 <DMA_List_Init+0x240>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	f000 8088 	beq.w	8003d34 <DMA_List_Init+0x160>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a7b      	ldr	r2, [pc, #492]	@ (8003e18 <DMA_List_Init+0x244>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	f000 8082 	beq.w	8003d34 <DMA_List_Init+0x160>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a79      	ldr	r2, [pc, #484]	@ (8003e1c <DMA_List_Init+0x248>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d07c      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a78      	ldr	r2, [pc, #480]	@ (8003e20 <DMA_List_Init+0x24c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d077      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a76      	ldr	r2, [pc, #472]	@ (8003e24 <DMA_List_Init+0x250>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d072      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a75      	ldr	r2, [pc, #468]	@ (8003e28 <DMA_List_Init+0x254>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d06d      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a73      	ldr	r2, [pc, #460]	@ (8003e2c <DMA_List_Init+0x258>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d068      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a72      	ldr	r2, [pc, #456]	@ (8003e30 <DMA_List_Init+0x25c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d063      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a70      	ldr	r2, [pc, #448]	@ (8003e34 <DMA_List_Init+0x260>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d05e      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a6f      	ldr	r2, [pc, #444]	@ (8003e38 <DMA_List_Init+0x264>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d059      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a6d      	ldr	r2, [pc, #436]	@ (8003e3c <DMA_List_Init+0x268>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d054      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a6c      	ldr	r2, [pc, #432]	@ (8003e40 <DMA_List_Init+0x26c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d04f      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a6a      	ldr	r2, [pc, #424]	@ (8003e44 <DMA_List_Init+0x270>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d04a      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a69      	ldr	r2, [pc, #420]	@ (8003e48 <DMA_List_Init+0x274>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d045      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a67      	ldr	r2, [pc, #412]	@ (8003e4c <DMA_List_Init+0x278>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d040      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a66      	ldr	r2, [pc, #408]	@ (8003e50 <DMA_List_Init+0x27c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d03b      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a64      	ldr	r2, [pc, #400]	@ (8003e54 <DMA_List_Init+0x280>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d036      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a63      	ldr	r2, [pc, #396]	@ (8003e58 <DMA_List_Init+0x284>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d031      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a61      	ldr	r2, [pc, #388]	@ (8003e5c <DMA_List_Init+0x288>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d02c      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a60      	ldr	r2, [pc, #384]	@ (8003e60 <DMA_List_Init+0x28c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d027      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a5e      	ldr	r2, [pc, #376]	@ (8003e64 <DMA_List_Init+0x290>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d022      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a5d      	ldr	r2, [pc, #372]	@ (8003e68 <DMA_List_Init+0x294>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d01d      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a5b      	ldr	r2, [pc, #364]	@ (8003e6c <DMA_List_Init+0x298>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d018      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a5a      	ldr	r2, [pc, #360]	@ (8003e70 <DMA_List_Init+0x29c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a58      	ldr	r2, [pc, #352]	@ (8003e74 <DMA_List_Init+0x2a0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a57      	ldr	r2, [pc, #348]	@ (8003e78 <DMA_List_Init+0x2a4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a55      	ldr	r2, [pc, #340]	@ (8003e7c <DMA_List_Init+0x2a8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <DMA_List_Init+0x160>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a54      	ldr	r2, [pc, #336]	@ (8003e80 <DMA_List_Init+0x2ac>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d101      	bne.n	8003d38 <DMA_List_Init+0x164>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <DMA_List_Init+0x166>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d004      	beq.n	8003d48 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2200      	movs	r2, #0
 8003d62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003d6c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2200      	movs	r2, #0
 8003d74:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a36      	ldr	r2, [pc, #216]	@ (8003e64 <DMA_List_Init+0x290>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d022      	beq.n	8003dd6 <DMA_List_Init+0x202>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a34      	ldr	r2, [pc, #208]	@ (8003e68 <DMA_List_Init+0x294>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01d      	beq.n	8003dd6 <DMA_List_Init+0x202>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a33      	ldr	r2, [pc, #204]	@ (8003e6c <DMA_List_Init+0x298>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d018      	beq.n	8003dd6 <DMA_List_Init+0x202>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a31      	ldr	r2, [pc, #196]	@ (8003e70 <DMA_List_Init+0x29c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <DMA_List_Init+0x202>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a30      	ldr	r2, [pc, #192]	@ (8003e74 <DMA_List_Init+0x2a0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00e      	beq.n	8003dd6 <DMA_List_Init+0x202>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8003e78 <DMA_List_Init+0x2a4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d009      	beq.n	8003dd6 <DMA_List_Init+0x202>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2d      	ldr	r2, [pc, #180]	@ (8003e7c <DMA_List_Init+0x2a8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d004      	beq.n	8003dd6 <DMA_List_Init+0x202>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8003e80 <DMA_List_Init+0x2ac>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d101      	bne.n	8003dda <DMA_List_Init+0x206>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <DMA_List_Init+0x208>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2200      	movs	r2, #0
 8003de6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2200      	movs	r2, #0
 8003dee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2200      	movs	r2, #0
 8003df6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	40020050 	.word	0x40020050
 8003e08:	50020050 	.word	0x50020050
 8003e0c:	400200d0 	.word	0x400200d0
 8003e10:	500200d0 	.word	0x500200d0
 8003e14:	40020150 	.word	0x40020150
 8003e18:	50020150 	.word	0x50020150
 8003e1c:	400201d0 	.word	0x400201d0
 8003e20:	500201d0 	.word	0x500201d0
 8003e24:	40020250 	.word	0x40020250
 8003e28:	50020250 	.word	0x50020250
 8003e2c:	400202d0 	.word	0x400202d0
 8003e30:	500202d0 	.word	0x500202d0
 8003e34:	40020350 	.word	0x40020350
 8003e38:	50020350 	.word	0x50020350
 8003e3c:	400203d0 	.word	0x400203d0
 8003e40:	500203d0 	.word	0x500203d0
 8003e44:	40020450 	.word	0x40020450
 8003e48:	50020450 	.word	0x50020450
 8003e4c:	400204d0 	.word	0x400204d0
 8003e50:	500204d0 	.word	0x500204d0
 8003e54:	40020550 	.word	0x40020550
 8003e58:	50020550 	.word	0x50020550
 8003e5c:	400205d0 	.word	0x400205d0
 8003e60:	500205d0 	.word	0x500205d0
 8003e64:	40020650 	.word	0x40020650
 8003e68:	50020650 	.word	0x50020650
 8003e6c:	400206d0 	.word	0x400206d0
 8003e70:	500206d0 	.word	0x500206d0
 8003e74:	40020750 	.word	0x40020750
 8003e78:	50020750 	.word	0x50020750
 8003e7c:	400207d0 	.word	0x400207d0
 8003e80:	500207d0 	.word	0x500207d0

08003e84 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003e96:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8003e9c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003ea2:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8003ea8:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d017      	beq.n	8003eea <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec6:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	051b      	lsls	r3, r3, #20
 8003ed0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003ed4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	3b01      	subs	r3, #1
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003ee2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6859      	ldr	r1, [r3, #4]
 8003ef2:	f240 237f 	movw	r3, #639	@ 0x27f
 8003ef6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f06:	d10c      	bne.n	8003f22 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d011      	beq.n	8003f38 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	e00a      	b.n	8003f38 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f2a:	d105      	bne.n	8003f38 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00f      	beq.n	8003f60 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003f58:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d04e      	beq.n	8004014 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	0419      	lsls	r1, r3, #16
 8003f82:	4b6a      	ldr	r3, [pc, #424]	@ (800412c <DMA_List_BuildNode+0x2a8>)
 8003f84:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003f86:	431a      	orrs	r2, r3
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	da06      	bge.n	8003fa2 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	e005      	b.n	8003fae <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	da06      	bge.n	8003fc4 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	e005      	b.n	8003fd0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	da06      	bge.n	8003fe6 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	e005      	b.n	8003ff2 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	da06      	bge.n	8004008 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	609a      	str	r2, [r3, #8]
 8004006:	e005      	b.n	8004014 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d05d      	beq.n	80040ec <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004034:	2b00      	cmp	r3, #0
 8004036:	da09      	bge.n	800404c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403c:	425b      	negs	r3, r3
 800403e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	615a      	str	r2, [r3, #20]
 800404a:	e005      	b.n	8004058 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004050:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405c:	2b00      	cmp	r3, #0
 800405e:	da0d      	bge.n	800407c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004064:	425b      	negs	r3, r3
 8004066:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	0419      	lsls	r1, r3, #16
 8004070:	4b2f      	ldr	r3, [pc, #188]	@ (8004130 <DMA_List_BuildNode+0x2ac>)
 8004072:	400b      	ands	r3, r1
 8004074:	431a      	orrs	r2, r3
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	615a      	str	r2, [r3, #20]
 800407a:	e009      	b.n	8004090 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004084:	0419      	lsls	r1, r3, #16
 8004086:	4b2a      	ldr	r3, [pc, #168]	@ (8004130 <DMA_List_BuildNode+0x2ac>)
 8004088:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800408a:	431a      	orrs	r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004094:	2b00      	cmp	r3, #0
 8004096:	da08      	bge.n	80040aa <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409c:	425b      	negs	r3, r3
 800409e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	619a      	str	r2, [r3, #24]
 80040a8:	e004      	b.n	80040b4 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ae:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	da0b      	bge.n	80040d4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c0:	425b      	negs	r3, r3
 80040c2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80040cc:	431a      	orrs	r2, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	619a      	str	r2, [r3, #24]
 80040d2:	e007      	b.n	80040e4 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040dc:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80040de:	431a      	orrs	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2200      	movs	r2, #0
 80040e8:	61da      	str	r2, [r3, #28]
 80040ea:	e002      	b.n	80040f2 <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2200      	movs	r2, #0
 80040f0:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d006      	beq.n	8004114 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8004112:	e005      	b.n	8004120 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	621a      	str	r2, [r3, #32]
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	07ff0000 	.word	0x07ff0000
 8004130:	1fff0000 	.word	0x1fff0000

08004134 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	b2da      	uxtb	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0208 	and.w	r2, r3, #8
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0203 	and.w	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004182:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 800418c:	0d1b      	lsrs	r3, r3, #20
 800418e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004192:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4b66      	ldr	r3, [pc, #408]	@ (8004344 <DMA_List_GetNodeConfig+0x210>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ce:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041d6:	60da      	str	r2, [r3, #12]
 80041d8:	e013      	b.n	8004202 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	e002      	b.n	8004202 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 800422a:	0c1b      	lsrs	r3, r3, #16
 800422c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	0c1b      	lsrs	r3, r3, #16
 800425c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004260:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004266:	e002      	b.n	800426e <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d04a      	beq.n	8004320 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	b29b      	uxth	r3, r3
 8004290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004294:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8004296:	89fa      	ldrh	r2, [r7, #14]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042a8:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 80042aa:	89fa      	ldrh	r2, [r7, #14]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c0:	425a      	negs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d004      	beq.n	80042dc <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d6:	425a      	negs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 80042e2:	89fa      	ldrh	r2, [r7, #14]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 80042f0:	89fa      	ldrh	r2, [r7, #14]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d004      	beq.n	800430c <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004306:	425a      	negs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	da11      	bge.n	8004338 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004318:	425a      	negs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 800431e:	e00b      	b.n	8004338 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	0c002000 	.word	0x0c002000

08004348 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4313      	orrs	r3, r2
 800435e:	0c1b      	lsrs	r3, r3, #16
 8004360:	041b      	lsls	r3, r3, #16
 8004362:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	e00a      	b.n	800438a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e004      	b.n	800438a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	041b      	lsls	r3, r3, #16
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	429a      	cmp	r2, r3
 8004394:	d001      	beq.n	800439a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d004      	beq.n	80043c8 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e00e      	b.n	80043e6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d004      	beq.n	80043d8 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e006      	b.n	80043e6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80043f8:	2302      	movs	r3, #2
 80043fa:	e00b      	b.n	8004414 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	429a      	cmp	r2, r3
 800440c:	d001      	beq.n	8004412 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800440e:	2303      	movs	r3, #3
 8004410:	e000      	b.n	8004414 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00c      	beq.n	8004452 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4a0d      	ldr	r2, [pc, #52]	@ (8004478 <DMA_List_GetCLLRNodeInfo+0x58>)
 8004442:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00f      	beq.n	800446a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2207      	movs	r2, #7
 800444e:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004450:	e00b      	b.n	800446a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4a08      	ldr	r2, [pc, #32]	@ (800447c <DMA_List_GetCLLRNodeInfo+0x5c>)
 800445c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2205      	movs	r2, #5
 8004468:	601a      	str	r2, [r3, #0]
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	fe010000 	.word	0xfe010000
 800447c:	f8010000 	.word	0xf8010000

08004480 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8004480:	b480      	push	{r7}
 8004482:	b089      	sub	sp, #36	@ 0x24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d142      	bne.n	800452a <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80044a4:	e01d      	b.n	80044e2 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d107      	bne.n	80044bc <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80044b6:	4013      	ands	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	e00f      	b.n	80044dc <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4413      	add	r3, r2
 80044cc:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80044d4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	3301      	adds	r3, #1
 80044e0:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d3dc      	bcc.n	80044a6 <DMA_List_FindNode+0x26>
 80044ec:	e029      	b.n	8004542 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d107      	bne.n	8004504 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	e00f      	b.n	8004524 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4413      	add	r3, r2
 8004514:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800451c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	3301      	adds	r3, #1
 8004528:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	429a      	cmp	r2, r3
 8004532:	d206      	bcs.n	8004542 <DMA_List_FindNode+0xc2>
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800453a:	4013      	ands	r3, r2
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	429a      	cmp	r2, r3
 8004540:	d1d5      	bne.n	80044ee <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800454e:	4013      	ands	r3, r2
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	429a      	cmp	r2, r3
 8004554:	d001      	beq.n	800455a <DMA_List_FindNode+0xda>
    {
      return 1U;
 8004556:	2301      	movs	r3, #1
 8004558:	e02b      	b.n	80045b2 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	041b      	lsls	r3, r3, #16
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	0c1b      	lsrs	r3, r3, #16
 8004576:	041b      	lsls	r3, r3, #16
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	461a      	mov	r2, r3
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00f      	beq.n	80045b0 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	461a      	mov	r2, r3
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80045a0:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	0c1b      	lsrs	r3, r3, #16
 80045a8:	041b      	lsls	r3, r3, #16
 80045aa:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3724      	adds	r7, #36	@ 0x24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80045be:	b480      	push	{r7}
 80045c0:	b087      	sub	sp, #28
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	460b      	mov	r3, r1
 80045c8:	607a      	str	r2, [r7, #4]
 80045ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80045d0:	7afb      	ldrb	r3, [r7, #11]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d011      	beq.n	80045fa <HAL_EXTI_RegisterCallback+0x3c>
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	dc13      	bgt.n	8004602 <HAL_EXTI_RegisterCallback+0x44>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_EXTI_RegisterCallback+0x26>
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d007      	beq.n	80045f2 <HAL_EXTI_RegisterCallback+0x34>
 80045e2:	e00e      	b.n	8004602 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	609a      	str	r2, [r3, #8]
      break;
 80045f0:	e00a      	b.n	8004608 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	605a      	str	r2, [r3, #4]
      break;
 80045f8:	e006      	b.n	8004608 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	609a      	str	r2, [r3, #8]
      break;
 8004600:	e002      	b.n	8004608 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	75fb      	strb	r3, [r7, #23]
      break;
 8004606:	bf00      	nop
  }

  return status;
 8004608:	7dfb      	ldrb	r3, [r7, #23]
}
 800460a:	4618      	mov	r0, r3
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e003      	b.n	8004632 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004630:	2300      	movs	r3, #0
  }
}
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2201      	movs	r2, #1
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	4b17      	ldr	r3, [pc, #92]	@ (80046c8 <HAL_EXTI_IRQHandler+0x88>)
 800466a:	4413      	add	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4013      	ands	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	4b0d      	ldr	r3, [pc, #52]	@ (80046cc <HAL_EXTI_IRQHandler+0x8c>)
 8004698:	4413      	add	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4013      	ands	r3, r2
 80046a4:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	4798      	blx	r3
    }
  }
}
 80046c0:	bf00      	nop
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	4602200c 	.word	0x4602200c
 80046cc:	46022010 	.word	0x46022010

080046d0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b089      	sub	sp, #36	@ 0x24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80046e2:	e1ba      	b.n	8004a5a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	2101      	movs	r1, #1
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	fa01 f303 	lsl.w	r3, r1, r3
 80046f0:	4013      	ands	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 81aa 	beq.w	8004a54 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a55      	ldr	r2, [pc, #340]	@ (8004858 <HAL_GPIO_Init+0x188>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d15d      	bne.n	80047c4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800470e:	2201      	movs	r2, #1
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43db      	mvns	r3, r3
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	4013      	ands	r3, r2
 800471c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0201 	and.w	r2, r3, #1
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	4313      	orrs	r3, r2
 8004730:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69fa      	ldr	r2, [r7, #28]
 8004736:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004738:	4a48      	ldr	r2, [pc, #288]	@ (800485c <HAL_GPIO_Init+0x18c>)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004740:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004742:	4a46      	ldr	r2, [pc, #280]	@ (800485c <HAL_GPIO_Init+0x18c>)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4413      	add	r3, r2
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	08da      	lsrs	r2, r3, #3
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	3208      	adds	r2, #8
 8004756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800475a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	220f      	movs	r2, #15
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43db      	mvns	r3, r3
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	4013      	ands	r3, r2
 8004770:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	220b      	movs	r2, #11
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	4313      	orrs	r3, r2
 8004784:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	08da      	lsrs	r2, r3, #3
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	3208      	adds	r2, #8
 800478e:	69f9      	ldr	r1, [r7, #28]
 8004790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	2203      	movs	r2, #3
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	2202      	movs	r2, #2
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e067      	b.n	8004894 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d003      	beq.n	80047d4 <HAL_GPIO_Init+0x104>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b12      	cmp	r3, #18
 80047d2:	d145      	bne.n	8004860 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	08da      	lsrs	r2, r3, #3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3208      	adds	r2, #8
 80047dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	220f      	movs	r2, #15
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f003 020f 	and.w	r2, r3, #15
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	4313      	orrs	r3, r2
 8004810:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	08da      	lsrs	r2, r3, #3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3208      	adds	r2, #8
 800481a:	69f9      	ldr	r1, [r7, #28]
 800481c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	2203      	movs	r2, #3
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	43db      	mvns	r3, r3
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	4013      	ands	r3, r2
 8004836:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 0203 	and.w	r2, r3, #3
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	4313      	orrs	r3, r2
 800484c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	e01e      	b.n	8004894 <HAL_GPIO_Init+0x1c4>
 8004856:	bf00      	nop
 8004858:	46020000 	.word	0x46020000
 800485c:	0800b6a0 	.word	0x0800b6a0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	2203      	movs	r2, #3
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	43db      	mvns	r3, r3
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	4013      	ands	r3, r2
 8004876:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 0203 	and.w	r2, r3, #3
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	4313      	orrs	r3, r2
 800488c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d00b      	beq.n	80048b4 <HAL_GPIO_Init+0x1e4>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d007      	beq.n	80048b4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048a8:	2b11      	cmp	r3, #17
 80048aa:	d003      	beq.n	80048b4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b12      	cmp	r3, #18
 80048b2:	d130      	bne.n	8004916 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	2203      	movs	r2, #3
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80048ea:	2201      	movs	r2, #1
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	091b      	lsrs	r3, r3, #4
 8004900:	f003 0201 	and.w	r2, r3, #1
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	4313      	orrs	r3, r2
 800490e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d017      	beq.n	800494e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	2203      	movs	r2, #3
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	69fa      	ldr	r2, [r7, #28]
 8004932:	4013      	ands	r3, r2
 8004934:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	4313      	orrs	r3, r2
 8004946:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d07c      	beq.n	8004a54 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800495a:	4a47      	ldr	r2, [pc, #284]	@ (8004a78 <HAL_GPIO_Init+0x3a8>)
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	089b      	lsrs	r3, r3, #2
 8004960:	3318      	adds	r3, #24
 8004962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004966:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	220f      	movs	r2, #15
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	4013      	ands	r3, r2
 800497c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0a9a      	lsrs	r2, r3, #10
 8004982:	4b3e      	ldr	r3, [pc, #248]	@ (8004a7c <HAL_GPIO_Init+0x3ac>)
 8004984:	4013      	ands	r3, r2
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	f002 0203 	and.w	r2, r2, #3
 800498c:	00d2      	lsls	r2, r2, #3
 800498e:	4093      	lsls	r3, r2
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	4313      	orrs	r3, r2
 8004994:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004996:	4938      	ldr	r1, [pc, #224]	@ (8004a78 <HAL_GPIO_Init+0x3a8>)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	089b      	lsrs	r3, r3, #2
 800499c:	3318      	adds	r3, #24
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80049a4:	4b34      	ldr	r3, [pc, #208]	@ (8004a78 <HAL_GPIO_Init+0x3a8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	4013      	ands	r3, r2
 80049b2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80049c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a78 <HAL_GPIO_Init+0x3a8>)
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80049ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004a78 <HAL_GPIO_Init+0x3a8>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	43db      	mvns	r3, r3
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	4013      	ands	r3, r2
 80049dc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80049f2:	4a21      	ldr	r2, [pc, #132]	@ (8004a78 <HAL_GPIO_Init+0x3a8>)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80049f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004a78 <HAL_GPIO_Init+0x3a8>)
 80049fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	43db      	mvns	r3, r3
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	4013      	ands	r3, r2
 8004a08:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004a1e:	4a16      	ldr	r2, [pc, #88]	@ (8004a78 <HAL_GPIO_Init+0x3a8>)
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004a26:	4b14      	ldr	r3, [pc, #80]	@ (8004a78 <HAL_GPIO_Init+0x3a8>)
 8004a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	43db      	mvns	r3, r3
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	4013      	ands	r3, r2
 8004a36:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8004a78 <HAL_GPIO_Init+0x3a8>)
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	3301      	adds	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f47f ae3d 	bne.w	80046e4 <HAL_GPIO_Init+0x14>
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	3724      	adds	r7, #36	@ 0x24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	46022000 	.word	0x46022000
 8004a7c:	002f7f7f 	.word	0x002f7f7f

08004a80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b089      	sub	sp, #36	@ 0x24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004a92:	e0bc      	b.n	8004c0e <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004a94:	2201      	movs	r2, #1
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80ad 	beq.w	8004c08 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a5e      	ldr	r2, [pc, #376]	@ (8004c2c <HAL_GPIO_DeInit+0x1ac>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d115      	bne.n	8004ae2 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8004ab6:	4a5e      	ldr	r2, [pc, #376]	@ (8004c30 <HAL_GPIO_DeInit+0x1b0>)
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004abe:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004ac0:	4a5b      	ldr	r2, [pc, #364]	@ (8004c30 <HAL_GPIO_DeInit+0x1b0>)
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8004acc:	4b57      	ldr	r3, [pc, #348]	@ (8004c2c <HAL_GPIO_DeInit+0x1ac>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	4954      	ldr	r1, [pc, #336]	@ (8004c2c <HAL_GPIO_DeInit+0x1ac>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]
 8004ae0:	e053      	b.n	8004b8a <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8004ae2:	4a54      	ldr	r2, [pc, #336]	@ (8004c34 <HAL_GPIO_DeInit+0x1b4>)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	089b      	lsrs	r3, r3, #2
 8004ae8:	3318      	adds	r3, #24
 8004aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aee:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	220f      	movs	r2, #15
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4013      	ands	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	0a9a      	lsrs	r2, r3, #10
 8004b08:	4b4b      	ldr	r3, [pc, #300]	@ (8004c38 <HAL_GPIO_DeInit+0x1b8>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	f002 0203 	and.w	r2, r2, #3
 8004b12:	00d2      	lsls	r2, r2, #3
 8004b14:	4093      	lsls	r3, r2
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d136      	bne.n	8004b8a <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8004b1c:	4b45      	ldr	r3, [pc, #276]	@ (8004c34 <HAL_GPIO_DeInit+0x1b4>)
 8004b1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	4943      	ldr	r1, [pc, #268]	@ (8004c34 <HAL_GPIO_DeInit+0x1b4>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8004b2e:	4b41      	ldr	r3, [pc, #260]	@ (8004c34 <HAL_GPIO_DeInit+0x1b4>)
 8004b30:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	43db      	mvns	r3, r3
 8004b38:	493e      	ldr	r1, [pc, #248]	@ (8004c34 <HAL_GPIO_DeInit+0x1b4>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8004b40:	4b3c      	ldr	r3, [pc, #240]	@ (8004c34 <HAL_GPIO_DeInit+0x1b4>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	43db      	mvns	r3, r3
 8004b48:	493a      	ldr	r1, [pc, #232]	@ (8004c34 <HAL_GPIO_DeInit+0x1b4>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8004b4e:	4b39      	ldr	r3, [pc, #228]	@ (8004c34 <HAL_GPIO_DeInit+0x1b4>)
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	43db      	mvns	r3, r3
 8004b56:	4937      	ldr	r1, [pc, #220]	@ (8004c34 <HAL_GPIO_DeInit+0x1b4>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	220f      	movs	r2, #15
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8004b6c:	4a31      	ldr	r2, [pc, #196]	@ (8004c34 <HAL_GPIO_DeInit+0x1b4>)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	089b      	lsrs	r3, r3, #2
 8004b72:	3318      	adds	r3, #24
 8004b74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	43da      	mvns	r2, r3
 8004b7c:	482d      	ldr	r0, [pc, #180]	@ (8004c34 <HAL_GPIO_DeInit+0x1b4>)
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	089b      	lsrs	r3, r3, #2
 8004b82:	400a      	ands	r2, r1
 8004b84:	3318      	adds	r3, #24
 8004b86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	2103      	movs	r1, #3
 8004b94:	fa01 f303 	lsl.w	r3, r1, r3
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	08da      	lsrs	r2, r3, #3
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	3208      	adds	r2, #8
 8004ba6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	220f      	movs	r2, #15
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	08d2      	lsrs	r2, r2, #3
 8004bbe:	4019      	ands	r1, r3
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	3208      	adds	r2, #8
 8004bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	2103      	movs	r1, #3
 8004bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	401a      	ands	r2, r3
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	2101      	movs	r1, #1
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bea:	43db      	mvns	r3, r3
 8004bec:	401a      	ands	r2, r3
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	2103      	movs	r1, #3
 8004bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004c00:	43db      	mvns	r3, r3
 8004c02:	401a      	ands	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	fa22 f303 	lsr.w	r3, r2, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f47f af3c 	bne.w	8004a94 <HAL_GPIO_DeInit+0x14>
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	3724      	adds	r7, #36	@ 0x24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	46020000 	.word	0x46020000
 8004c30:	0800b6a0 	.word	0x0800b6a0
 8004c34:	46022000 	.word	0x46022000
 8004c38:	002f7f7f 	.word	0x002f7f7f

08004c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	807b      	strh	r3, [r7, #2]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c4c:	787b      	ldrb	r3, [r7, #1]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c52:	887a      	ldrh	r2, [r7, #2]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004c58:	e002      	b.n	8004c60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004c5a:	887a      	ldrh	r2, [r7, #2]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c7e:	887a      	ldrh	r2, [r7, #2]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4013      	ands	r3, r2
 8004c84:	041a      	lsls	r2, r3, #16
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	43d9      	mvns	r1, r3
 8004c8a:	887b      	ldrh	r3, [r7, #2]
 8004c8c:	400b      	ands	r3, r1
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	619a      	str	r2, [r3, #24]
}
 8004c94:	bf00      	nop
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004ca4:	4b05      	ldr	r3, [pc, #20]	@ (8004cbc <HAL_ICACHE_Enable+0x1c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a04      	ldr	r2, [pc, #16]	@ (8004cbc <HAL_ICACHE_Enable+0x1c>)
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40030400 	.word	0x40030400

08004cc0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004cc8:	4b39      	ldr	r3, [pc, #228]	@ (8004db0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ccc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cd0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d10b      	bne.n	8004cf2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce0:	d905      	bls.n	8004cee <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004ce2:	4b33      	ldr	r3, [pc, #204]	@ (8004db0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	4a32      	ldr	r2, [pc, #200]	@ (8004db0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cec:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e057      	b.n	8004da2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf8:	d90a      	bls.n	8004d10 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8004db0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	4a2a      	ldr	r2, [pc, #168]	@ (8004db0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d0c:	60d3      	str	r3, [r2, #12]
 8004d0e:	e007      	b.n	8004d20 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004d10:	4b27      	ldr	r3, [pc, #156]	@ (8004db0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004d18:	4925      	ldr	r1, [pc, #148]	@ (8004db0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004d20:	4b24      	ldr	r3, [pc, #144]	@ (8004db4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a24      	ldr	r2, [pc, #144]	@ (8004db8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	099b      	lsrs	r3, r3, #6
 8004d2c:	2232      	movs	r2, #50	@ 0x32
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	4a21      	ldr	r2, [pc, #132]	@ (8004db8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	099b      	lsrs	r3, r3, #6
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004d3e:	e002      	b.n	8004d46 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004d46:	4b1a      	ldr	r3, [pc, #104]	@ (8004db0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f3      	bne.n	8004d40 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01b      	beq.n	8004d96 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004d5e:	4b15      	ldr	r3, [pc, #84]	@ (8004db4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a15      	ldr	r2, [pc, #84]	@ (8004db8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	099b      	lsrs	r3, r3, #6
 8004d6a:	2232      	movs	r2, #50	@ 0x32
 8004d6c:	fb02 f303 	mul.w	r3, r2, r3
 8004d70:	4a11      	ldr	r2, [pc, #68]	@ (8004db8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	099b      	lsrs	r3, r3, #6
 8004d78:	3301      	adds	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004d7c:	e002      	b.n	8004d84 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004d84:	4b0a      	ldr	r3, [pc, #40]	@ (8004db0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f3      	bne.n	8004d7e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e000      	b.n	8004da2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	46020800 	.word	0x46020800
 8004db4:	20000020 	.word	0x20000020
 8004db8:	10624dd3 	.word	0x10624dd3

08004dbc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004dc0:	4b04      	ldr	r3, [pc, #16]	@ (8004dd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	46020800 	.word	0x46020800

08004dd8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004de0:	4b22      	ldr	r3, [pc, #136]	@ (8004e6c <HAL_PWREx_ConfigSupply+0x94>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a22      	ldr	r2, [pc, #136]	@ (8004e70 <HAL_PWREx_ConfigSupply+0x98>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	099b      	lsrs	r3, r3, #6
 8004dec:	2232      	movs	r2, #50	@ 0x32
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	4a1f      	ldr	r2, [pc, #124]	@ (8004e70 <HAL_PWREx_ConfigSupply+0x98>)
 8004df4:	fba2 2303 	umull	r2, r3, r2, r3
 8004df8:	099b      	lsrs	r3, r3, #6
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d113      	bne.n	8004e2c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004e04:	4b1b      	ldr	r3, [pc, #108]	@ (8004e74 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	4a1a      	ldr	r2, [pc, #104]	@ (8004e74 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e0a:	f023 0302 	bic.w	r3, r3, #2
 8004e0e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004e10:	e002      	b.n	8004e18 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004e18:	4b16      	ldr	r3, [pc, #88]	@ (8004e74 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d116      	bne.n	8004e52 <HAL_PWREx_ConfigSupply+0x7a>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f3      	bne.n	8004e12 <HAL_PWREx_ConfigSupply+0x3a>
 8004e2a:	e012      	b.n	8004e52 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004e2c:	4b11      	ldr	r3, [pc, #68]	@ (8004e74 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4a10      	ldr	r2, [pc, #64]	@ (8004e74 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e32:	f043 0302 	orr.w	r3, r3, #2
 8004e36:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004e38:	e002      	b.n	8004e40 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004e40:	4b0c      	ldr	r3, [pc, #48]	@ (8004e74 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <HAL_PWREx_ConfigSupply+0x7a>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f3      	bne.n	8004e3a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e000      	b.n	8004e5e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20000020 	.word	0x20000020
 8004e70:	10624dd3 	.word	0x10624dd3
 8004e74:	46020800 	.word	0x46020800

08004e78 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004e7c:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	4a04      	ldr	r2, [pc, #16]	@ (8004e94 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e82:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e86:	6113      	str	r3, [r2, #16]
}
 8004e88:	bf00      	nop
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	46020800 	.word	0x46020800

08004e98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004e9c:	4b05      	ldr	r3, [pc, #20]	@ (8004eb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	4a04      	ldr	r2, [pc, #16]	@ (8004eb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8004ea8:	bf00      	nop
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	46020800 	.word	0x46020800

08004eb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08e      	sub	sp, #56	@ 0x38
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d102      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f000 bec8 	b.w	8005c62 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed2:	4b99      	ldr	r3, [pc, #612]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
 8004eda:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004edc:	4b96      	ldr	r3, [pc, #600]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 816c 	beq.w	80051cc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <HAL_RCC_OscConfig+0x52>
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	2b0c      	cmp	r3, #12
 8004efe:	f040 80de 	bne.w	80050be <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	f040 80da 	bne.w	80050be <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	f000 bea5 	b.w	8005c62 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f1c:	4b86      	ldr	r3, [pc, #536]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <HAL_RCC_OscConfig+0x7a>
 8004f28:	4b83      	ldr	r3, [pc, #524]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004f30:	e005      	b.n	8004f3e <HAL_RCC_OscConfig+0x86>
 8004f32:	4b81      	ldr	r3, [pc, #516]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f38:	041b      	lsls	r3, r3, #16
 8004f3a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d255      	bcs.n	8004fee <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 fa11 	bl	8006374 <RCC_SetFlashLatencyFromMSIRange>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	f000 be82 	b.w	8005c62 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004f5e:	4b76      	ldr	r3, [pc, #472]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	4a75      	ldr	r2, [pc, #468]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004f64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f68:	6093      	str	r3, [r2, #8]
 8004f6a:	4b73      	ldr	r3, [pc, #460]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	4970      	ldr	r1, [pc, #448]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f80:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004f84:	d309      	bcc.n	8004f9a <HAL_RCC_OscConfig+0xe2>
 8004f86:	4b6c      	ldr	r3, [pc, #432]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f023 021f 	bic.w	r2, r3, #31
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	4969      	ldr	r1, [pc, #420]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60cb      	str	r3, [r1, #12]
 8004f98:	e07e      	b.n	8005098 <HAL_RCC_OscConfig+0x1e0>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	da0a      	bge.n	8004fb8 <HAL_RCC_OscConfig+0x100>
 8004fa2:	4b65      	ldr	r3, [pc, #404]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	015b      	lsls	r3, r3, #5
 8004fb0:	4961      	ldr	r1, [pc, #388]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60cb      	str	r3, [r1, #12]
 8004fb6:	e06f      	b.n	8005098 <HAL_RCC_OscConfig+0x1e0>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc0:	d30a      	bcc.n	8004fd8 <HAL_RCC_OscConfig+0x120>
 8004fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	029b      	lsls	r3, r3, #10
 8004fd0:	4959      	ldr	r1, [pc, #356]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60cb      	str	r3, [r1, #12]
 8004fd6:	e05f      	b.n	8005098 <HAL_RCC_OscConfig+0x1e0>
 8004fd8:	4b57      	ldr	r3, [pc, #348]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	03db      	lsls	r3, r3, #15
 8004fe6:	4954      	ldr	r1, [pc, #336]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60cb      	str	r3, [r1, #12]
 8004fec:	e054      	b.n	8005098 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004fee:	4b52      	ldr	r3, [pc, #328]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	4a51      	ldr	r2, [pc, #324]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004ff4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ff8:	6093      	str	r3, [r2, #8]
 8004ffa:	4b4f      	ldr	r3, [pc, #316]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	494c      	ldr	r1, [pc, #304]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8005008:	4313      	orrs	r3, r2
 800500a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005014:	d309      	bcc.n	800502a <HAL_RCC_OscConfig+0x172>
 8005016:	4b48      	ldr	r3, [pc, #288]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f023 021f 	bic.w	r2, r3, #31
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	4945      	ldr	r1, [pc, #276]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8005024:	4313      	orrs	r3, r2
 8005026:	60cb      	str	r3, [r1, #12]
 8005028:	e028      	b.n	800507c <HAL_RCC_OscConfig+0x1c4>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	2b00      	cmp	r3, #0
 8005030:	da0a      	bge.n	8005048 <HAL_RCC_OscConfig+0x190>
 8005032:	4b41      	ldr	r3, [pc, #260]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	015b      	lsls	r3, r3, #5
 8005040:	493d      	ldr	r1, [pc, #244]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8005042:	4313      	orrs	r3, r2
 8005044:	60cb      	str	r3, [r1, #12]
 8005046:	e019      	b.n	800507c <HAL_RCC_OscConfig+0x1c4>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005050:	d30a      	bcc.n	8005068 <HAL_RCC_OscConfig+0x1b0>
 8005052:	4b39      	ldr	r3, [pc, #228]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	029b      	lsls	r3, r3, #10
 8005060:	4935      	ldr	r1, [pc, #212]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8005062:	4313      	orrs	r3, r2
 8005064:	60cb      	str	r3, [r1, #12]
 8005066:	e009      	b.n	800507c <HAL_RCC_OscConfig+0x1c4>
 8005068:	4b33      	ldr	r3, [pc, #204]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	03db      	lsls	r3, r3, #15
 8005076:	4930      	ldr	r1, [pc, #192]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8005078:	4313      	orrs	r3, r2
 800507a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800507c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10a      	bne.n	8005098 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005086:	4618      	mov	r0, r3
 8005088:	f001 f974 	bl	8006374 <RCC_SetFlashLatencyFromMSIRange>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f000 bde5 	b.w	8005c62 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005098:	f001 f8de 	bl	8006258 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800509c:	4b27      	ldr	r3, [pc, #156]	@ (800513c <HAL_RCC_OscConfig+0x284>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fc fa75 	bl	8001590 <HAL_InitTick>
 80050a6:	4603      	mov	r3, r0
 80050a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80050ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 808a 	beq.w	80051ca <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80050b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050ba:	f000 bdd2 	b.w	8005c62 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d066      	beq.n	8005194 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80050c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80050d2:	f7fc fed1 	bl	8001e78 <HAL_GetTick>
 80050d6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80050d8:	e009      	b.n	80050ee <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050da:	f7fc fecd 	bl	8001e78 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d902      	bls.n	80050ee <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	f000 bdba 	b.w	8005c62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80050ee:	4b12      	ldr	r3, [pc, #72]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0ef      	beq.n	80050da <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80050fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	4a0e      	ldr	r2, [pc, #56]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8005100:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005104:	6093      	str	r3, [r2, #8]
 8005106:	4b0c      	ldr	r3, [pc, #48]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005112:	4909      	ldr	r1, [pc, #36]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8005114:	4313      	orrs	r3, r2
 8005116:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005120:	d30e      	bcc.n	8005140 <HAL_RCC_OscConfig+0x288>
 8005122:	4b05      	ldr	r3, [pc, #20]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f023 021f 	bic.w	r2, r3, #31
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	4902      	ldr	r1, [pc, #8]	@ (8005138 <HAL_RCC_OscConfig+0x280>)
 8005130:	4313      	orrs	r3, r2
 8005132:	60cb      	str	r3, [r1, #12]
 8005134:	e04a      	b.n	80051cc <HAL_RCC_OscConfig+0x314>
 8005136:	bf00      	nop
 8005138:	46020c00 	.word	0x46020c00
 800513c:	20000040 	.word	0x20000040
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005144:	2b00      	cmp	r3, #0
 8005146:	da0a      	bge.n	800515e <HAL_RCC_OscConfig+0x2a6>
 8005148:	4b98      	ldr	r3, [pc, #608]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	015b      	lsls	r3, r3, #5
 8005156:	4995      	ldr	r1, [pc, #596]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005158:	4313      	orrs	r3, r2
 800515a:	60cb      	str	r3, [r1, #12]
 800515c:	e036      	b.n	80051cc <HAL_RCC_OscConfig+0x314>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005166:	d30a      	bcc.n	800517e <HAL_RCC_OscConfig+0x2c6>
 8005168:	4b90      	ldr	r3, [pc, #576]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	029b      	lsls	r3, r3, #10
 8005176:	498d      	ldr	r1, [pc, #564]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005178:	4313      	orrs	r3, r2
 800517a:	60cb      	str	r3, [r1, #12]
 800517c:	e026      	b.n	80051cc <HAL_RCC_OscConfig+0x314>
 800517e:	4b8b      	ldr	r3, [pc, #556]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	03db      	lsls	r3, r3, #15
 800518c:	4987      	ldr	r1, [pc, #540]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	60cb      	str	r3, [r1, #12]
 8005192:	e01b      	b.n	80051cc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005194:	4b85      	ldr	r3, [pc, #532]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a84      	ldr	r2, [pc, #528]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800519a:	f023 0301 	bic.w	r3, r3, #1
 800519e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051a0:	f7fc fe6a 	bl	8001e78 <HAL_GetTick>
 80051a4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80051a6:	e009      	b.n	80051bc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051a8:	f7fc fe66 	bl	8001e78 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d902      	bls.n	80051bc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	f000 bd53 	b.w	8005c62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80051bc:	4b7b      	ldr	r3, [pc, #492]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1ef      	bne.n	80051a8 <HAL_RCC_OscConfig+0x2f0>
 80051c8:	e000      	b.n	80051cc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80051ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 808b 	beq.w	80052f0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80051da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d005      	beq.n	80051ec <HAL_RCC_OscConfig+0x334>
 80051e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e2:	2b0c      	cmp	r3, #12
 80051e4:	d109      	bne.n	80051fa <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d106      	bne.n	80051fa <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d17d      	bne.n	80052f0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	f000 bd34 	b.w	8005c62 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005202:	d106      	bne.n	8005212 <HAL_RCC_OscConfig+0x35a>
 8005204:	4b69      	ldr	r3, [pc, #420]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a68      	ldr	r2, [pc, #416]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800520a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	e041      	b.n	8005296 <HAL_RCC_OscConfig+0x3de>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800521a:	d112      	bne.n	8005242 <HAL_RCC_OscConfig+0x38a>
 800521c:	4b63      	ldr	r3, [pc, #396]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a62      	ldr	r2, [pc, #392]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005222:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	4b60      	ldr	r3, [pc, #384]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a5f      	ldr	r2, [pc, #380]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800522e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	4b5d      	ldr	r3, [pc, #372]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a5c      	ldr	r2, [pc, #368]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800523a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	e029      	b.n	8005296 <HAL_RCC_OscConfig+0x3de>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800524a:	d112      	bne.n	8005272 <HAL_RCC_OscConfig+0x3ba>
 800524c:	4b57      	ldr	r3, [pc, #348]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a56      	ldr	r2, [pc, #344]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005252:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	4b54      	ldr	r3, [pc, #336]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a53      	ldr	r2, [pc, #332]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800525e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	4b51      	ldr	r3, [pc, #324]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a50      	ldr	r2, [pc, #320]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800526a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	e011      	b.n	8005296 <HAL_RCC_OscConfig+0x3de>
 8005272:	4b4e      	ldr	r3, [pc, #312]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a4d      	ldr	r2, [pc, #308]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005278:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	4b4b      	ldr	r3, [pc, #300]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a4a      	ldr	r2, [pc, #296]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005284:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	4b48      	ldr	r3, [pc, #288]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a47      	ldr	r2, [pc, #284]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005290:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005294:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d014      	beq.n	80052c8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800529e:	f7fc fdeb 	bl	8001e78 <HAL_GetTick>
 80052a2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052a4:	e009      	b.n	80052ba <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052a6:	f7fc fde7 	bl	8001e78 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b64      	cmp	r3, #100	@ 0x64
 80052b2:	d902      	bls.n	80052ba <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	f000 bcd4 	b.w	8005c62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052ba:	4b3c      	ldr	r3, [pc, #240]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0ef      	beq.n	80052a6 <HAL_RCC_OscConfig+0x3ee>
 80052c6:	e013      	b.n	80052f0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80052c8:	f7fc fdd6 	bl	8001e78 <HAL_GetTick>
 80052cc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052ce:	e009      	b.n	80052e4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d0:	f7fc fdd2 	bl	8001e78 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b64      	cmp	r3, #100	@ 0x64
 80052dc:	d902      	bls.n	80052e4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	f000 bcbf 	b.w	8005c62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052e4:	4b31      	ldr	r3, [pc, #196]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1ef      	bne.n	80052d0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d05f      	beq.n	80053bc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80052fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d005      	beq.n	800530e <HAL_RCC_OscConfig+0x456>
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	2b0c      	cmp	r3, #12
 8005306:	d114      	bne.n	8005332 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530a:	2b02      	cmp	r3, #2
 800530c:	d111      	bne.n	8005332 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d102      	bne.n	800531c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f000 bca3 	b.w	8005c62 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800531c:	4b23      	ldr	r3, [pc, #140]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	4920      	ldr	r1, [pc, #128]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800532c:	4313      	orrs	r3, r2
 800532e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005330:	e044      	b.n	80053bc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d024      	beq.n	8005384 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800533a:	4b1c      	ldr	r3, [pc, #112]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1b      	ldr	r2, [pc, #108]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005344:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005346:	f7fc fd97 	bl	8001e78 <HAL_GetTick>
 800534a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800534c:	e009      	b.n	8005362 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800534e:	f7fc fd93 	bl	8001e78 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d902      	bls.n	8005362 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	f000 bc80 	b.w	8005c62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005362:	4b12      	ldr	r3, [pc, #72]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0ef      	beq.n	800534e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800536e:	4b0f      	ldr	r3, [pc, #60]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	041b      	lsls	r3, r3, #16
 800537c:	490b      	ldr	r1, [pc, #44]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800537e:	4313      	orrs	r3, r2
 8005380:	610b      	str	r3, [r1, #16]
 8005382:	e01b      	b.n	80053bc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005384:	4b09      	ldr	r3, [pc, #36]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a08      	ldr	r2, [pc, #32]	@ (80053ac <HAL_RCC_OscConfig+0x4f4>)
 800538a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800538e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005390:	f7fc fd72 	bl	8001e78 <HAL_GetTick>
 8005394:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005396:	e00b      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005398:	f7fc fd6e 	bl	8001e78 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d904      	bls.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	f000 bc5b 	b.w	8005c62 <HAL_RCC_OscConfig+0xdaa>
 80053ac:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053b0:	4baf      	ldr	r3, [pc, #700]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ed      	bne.n	8005398 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80c8 	beq.w	800555a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053d0:	4ba7      	ldr	r3, [pc, #668]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 80053d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d111      	bne.n	8005402 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053de:	4ba4      	ldr	r3, [pc, #656]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 80053e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e4:	4aa2      	ldr	r2, [pc, #648]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 80053e6:	f043 0304 	orr.w	r3, r3, #4
 80053ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80053ee:	4ba0      	ldr	r3, [pc, #640]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 80053f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005402:	4b9c      	ldr	r3, [pc, #624]	@ (8005674 <HAL_RCC_OscConfig+0x7bc>)
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d119      	bne.n	8005442 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800540e:	4b99      	ldr	r3, [pc, #612]	@ (8005674 <HAL_RCC_OscConfig+0x7bc>)
 8005410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005412:	4a98      	ldr	r2, [pc, #608]	@ (8005674 <HAL_RCC_OscConfig+0x7bc>)
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800541a:	f7fc fd2d 	bl	8001e78 <HAL_GetTick>
 800541e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005420:	e009      	b.n	8005436 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005422:	f7fc fd29 	bl	8001e78 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d902      	bls.n	8005436 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	f000 bc16 	b.w	8005c62 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005436:	4b8f      	ldr	r3, [pc, #572]	@ (8005674 <HAL_RCC_OscConfig+0x7bc>)
 8005438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0ef      	beq.n	8005422 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d05f      	beq.n	800550a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800544a:	4b89      	ldr	r3, [pc, #548]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 800544c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005450:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800545c:	429a      	cmp	r2, r3
 800545e:	d037      	beq.n	80054d0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d006      	beq.n	8005478 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e3f4      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01b      	beq.n	80054ba <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005482:	4b7b      	ldr	r3, [pc, #492]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 8005484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005488:	4a79      	ldr	r2, [pc, #484]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 800548a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800548e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8005492:	f7fc fcf1 	bl	8001e78 <HAL_GetTick>
 8005496:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800549a:	f7fc fced 	bl	8001e78 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b05      	cmp	r3, #5
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e3da      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80054ac:	4b70      	ldr	r3, [pc, #448]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 80054ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1ef      	bne.n	800549a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80054ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 80054bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054c0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	4969      	ldr	r1, [pc, #420]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80054d0:	4b67      	ldr	r3, [pc, #412]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 80054d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054d6:	4a66      	ldr	r2, [pc, #408]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 80054d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80054e0:	f7fc fcca 	bl	8001e78 <HAL_GetTick>
 80054e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054e8:	f7fc fcc6 	bl	8001e78 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b05      	cmp	r3, #5
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e3b3      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80054fa:	4b5d      	ldr	r3, [pc, #372]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 80054fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005500:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0ef      	beq.n	80054e8 <HAL_RCC_OscConfig+0x630>
 8005508:	e01b      	b.n	8005542 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800550a:	4b59      	ldr	r3, [pc, #356]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 800550c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005510:	4a57      	ldr	r2, [pc, #348]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 8005512:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005516:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800551a:	f7fc fcad 	bl	8001e78 <HAL_GetTick>
 800551e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005522:	f7fc fca9 	bl	8001e78 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b05      	cmp	r3, #5
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e396      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005534:	4b4e      	ldr	r3, [pc, #312]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 8005536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800553a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1ef      	bne.n	8005522 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005542:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005546:	2b01      	cmp	r3, #1
 8005548:	d107      	bne.n	800555a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800554a:	4b49      	ldr	r3, [pc, #292]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 800554c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005550:	4a47      	ldr	r2, [pc, #284]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 8005552:	f023 0304 	bic.w	r3, r3, #4
 8005556:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8111 	beq.w	800578a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005568:	2300      	movs	r3, #0
 800556a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800556e:	4b40      	ldr	r3, [pc, #256]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 8005570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d111      	bne.n	80055a0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800557c:	4b3c      	ldr	r3, [pc, #240]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 800557e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005582:	4a3b      	ldr	r2, [pc, #236]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 8005584:	f043 0304 	orr.w	r3, r3, #4
 8005588:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800558c:	4b38      	ldr	r3, [pc, #224]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 800558e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055a0:	4b34      	ldr	r3, [pc, #208]	@ (8005674 <HAL_RCC_OscConfig+0x7bc>)
 80055a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d118      	bne.n	80055de <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80055ac:	4b31      	ldr	r3, [pc, #196]	@ (8005674 <HAL_RCC_OscConfig+0x7bc>)
 80055ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b0:	4a30      	ldr	r2, [pc, #192]	@ (8005674 <HAL_RCC_OscConfig+0x7bc>)
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055b8:	f7fc fc5e 	bl	8001e78 <HAL_GetTick>
 80055bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c0:	f7fc fc5a 	bl	8001e78 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e347      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055d2:	4b28      	ldr	r3, [pc, #160]	@ (8005674 <HAL_RCC_OscConfig+0x7bc>)
 80055d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0f0      	beq.n	80055c0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01f      	beq.n	800562a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d010      	beq.n	8005618 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80055f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 80055f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 80055fe:	f043 0304 	orr.w	r3, r3, #4
 8005602:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005606:	4b1a      	ldr	r3, [pc, #104]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 8005608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800560c:	4a18      	ldr	r2, [pc, #96]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 800560e:	f043 0301 	orr.w	r3, r3, #1
 8005612:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005616:	e018      	b.n	800564a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005618:	4b15      	ldr	r3, [pc, #84]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 800561a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800561e:	4a14      	ldr	r2, [pc, #80]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005628:	e00f      	b.n	800564a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800562a:	4b11      	ldr	r3, [pc, #68]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 800562c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005630:	4a0f      	ldr	r2, [pc, #60]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800563a:	4b0d      	ldr	r3, [pc, #52]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 800563c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005640:	4a0b      	ldr	r2, [pc, #44]	@ (8005670 <HAL_RCC_OscConfig+0x7b8>)
 8005642:	f023 0304 	bic.w	r3, r3, #4
 8005646:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d057      	beq.n	8005702 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005652:	f7fc fc11 	bl	8001e78 <HAL_GetTick>
 8005656:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005658:	e00e      	b.n	8005678 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565a:	f7fc fc0d 	bl	8001e78 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005668:	4293      	cmp	r3, r2
 800566a:	d905      	bls.n	8005678 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e2f8      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
 8005670:	46020c00 	.word	0x46020c00
 8005674:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005678:	4b9c      	ldr	r3, [pc, #624]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 800567a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0e9      	beq.n	800565a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01b      	beq.n	80056ca <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005692:	4b96      	ldr	r3, [pc, #600]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 8005694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005698:	4a94      	ldr	r2, [pc, #592]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 800569a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056a2:	e00a      	b.n	80056ba <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a4:	f7fc fbe8 	bl	8001e78 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e2d3      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056ba:	4b8c      	ldr	r3, [pc, #560]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80056bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0ed      	beq.n	80056a4 <HAL_RCC_OscConfig+0x7ec>
 80056c8:	e053      	b.n	8005772 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056ca:	4b88      	ldr	r3, [pc, #544]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80056cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056d0:	4a86      	ldr	r2, [pc, #536]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80056d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80056da:	e00a      	b.n	80056f2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056dc:	f7fc fbcc 	bl	8001e78 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e2b7      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80056f2:	4b7e      	ldr	r3, [pc, #504]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80056f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1ed      	bne.n	80056dc <HAL_RCC_OscConfig+0x824>
 8005700:	e037      	b.n	8005772 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005702:	f7fc fbb9 	bl	8001e78 <HAL_GetTick>
 8005706:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005708:	e00a      	b.n	8005720 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570a:	f7fc fbb5 	bl	8001e78 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005718:	4293      	cmp	r3, r2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e2a0      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005720:	4b72      	ldr	r3, [pc, #456]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 8005722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1ed      	bne.n	800570a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800572e:	4b6f      	ldr	r3, [pc, #444]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 8005730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01a      	beq.n	8005772 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800573c:	4b6b      	ldr	r3, [pc, #428]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 800573e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005742:	4a6a      	ldr	r2, [pc, #424]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 8005744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005748:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800574c:	e00a      	b.n	8005764 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574e:	f7fc fb93 	bl	8001e78 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575c:	4293      	cmp	r3, r2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e27e      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005764:	4b61      	ldr	r3, [pc, #388]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 8005766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800576a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1ed      	bne.n	800574e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005772:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005776:	2b01      	cmp	r3, #1
 8005778:	d107      	bne.n	800578a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800577a:	4b5c      	ldr	r3, [pc, #368]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 800577c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005780:	4a5a      	ldr	r2, [pc, #360]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 8005782:	f023 0304 	bic.w	r3, r3, #4
 8005786:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d036      	beq.n	8005804 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579a:	2b00      	cmp	r3, #0
 800579c:	d019      	beq.n	80057d2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800579e:	4b53      	ldr	r3, [pc, #332]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a52      	ldr	r2, [pc, #328]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80057a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80057a8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80057aa:	f7fc fb65 	bl	8001e78 <HAL_GetTick>
 80057ae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057b2:	f7fc fb61 	bl	8001e78 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e24e      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80057c4:	4b49      	ldr	r3, [pc, #292]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCC_OscConfig+0x8fa>
 80057d0:	e018      	b.n	8005804 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80057d2:	4b46      	ldr	r3, [pc, #280]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a45      	ldr	r2, [pc, #276]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80057d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057dc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80057de:	f7fc fb4b 	bl	8001e78 <HAL_GetTick>
 80057e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057e6:	f7fc fb47 	bl	8001e78 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e234      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80057f8:	4b3c      	ldr	r3, [pc, #240]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1f0      	bne.n	80057e6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580c:	2b00      	cmp	r3, #0
 800580e:	d036      	beq.n	800587e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005814:	2b00      	cmp	r3, #0
 8005816:	d019      	beq.n	800584c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005818:	4b34      	ldr	r3, [pc, #208]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a33      	ldr	r2, [pc, #204]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 800581e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005822:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005824:	f7fc fb28 	bl	8001e78 <HAL_GetTick>
 8005828:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800582c:	f7fc fb24 	bl	8001e78 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e211      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800583e:	4b2b      	ldr	r3, [pc, #172]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0x974>
 800584a:	e018      	b.n	800587e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800584c:	4b27      	ldr	r3, [pc, #156]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a26      	ldr	r2, [pc, #152]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 8005852:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005856:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005858:	f7fc fb0e 	bl	8001e78 <HAL_GetTick>
 800585c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005860:	f7fc fb0a 	bl	8001e78 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e1f7      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005872:	4b1e      	ldr	r3, [pc, #120]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f0      	bne.n	8005860 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d07f      	beq.n	800598a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588e:	2b00      	cmp	r3, #0
 8005890:	d062      	beq.n	8005958 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005892:	4b16      	ldr	r3, [pc, #88]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	4a15      	ldr	r2, [pc, #84]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 8005898:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800589c:	6093      	str	r3, [r2, #8]
 800589e:	4b13      	ldr	r3, [pc, #76]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058aa:	4910      	ldr	r1, [pc, #64]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80058b8:	d309      	bcc.n	80058ce <HAL_RCC_OscConfig+0xa16>
 80058ba:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f023 021f 	bic.w	r2, r3, #31
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	4909      	ldr	r1, [pc, #36]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60cb      	str	r3, [r1, #12]
 80058cc:	e02a      	b.n	8005924 <HAL_RCC_OscConfig+0xa6c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	da0c      	bge.n	80058f0 <HAL_RCC_OscConfig+0xa38>
 80058d6:	4b05      	ldr	r3, [pc, #20]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	015b      	lsls	r3, r3, #5
 80058e4:	4901      	ldr	r1, [pc, #4]	@ (80058ec <HAL_RCC_OscConfig+0xa34>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60cb      	str	r3, [r1, #12]
 80058ea:	e01b      	b.n	8005924 <HAL_RCC_OscConfig+0xa6c>
 80058ec:	46020c00 	.word	0x46020c00
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058f8:	d30a      	bcc.n	8005910 <HAL_RCC_OscConfig+0xa58>
 80058fa:	4ba1      	ldr	r3, [pc, #644]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	029b      	lsls	r3, r3, #10
 8005908:	499d      	ldr	r1, [pc, #628]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 800590a:	4313      	orrs	r3, r2
 800590c:	60cb      	str	r3, [r1, #12]
 800590e:	e009      	b.n	8005924 <HAL_RCC_OscConfig+0xa6c>
 8005910:	4b9b      	ldr	r3, [pc, #620]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	03db      	lsls	r3, r3, #15
 800591e:	4998      	ldr	r1, [pc, #608]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005920:	4313      	orrs	r3, r2
 8005922:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005924:	4b96      	ldr	r3, [pc, #600]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a95      	ldr	r2, [pc, #596]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 800592a:	f043 0310 	orr.w	r3, r3, #16
 800592e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005930:	f7fc faa2 	bl	8001e78 <HAL_GetTick>
 8005934:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005938:	f7fc fa9e 	bl	8001e78 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e18b      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800594a:	4b8d      	ldr	r3, [pc, #564]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0f0      	beq.n	8005938 <HAL_RCC_OscConfig+0xa80>
 8005956:	e018      	b.n	800598a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005958:	4b89      	ldr	r3, [pc, #548]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a88      	ldr	r2, [pc, #544]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 800595e:	f023 0310 	bic.w	r3, r3, #16
 8005962:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005964:	f7fc fa88 	bl	8001e78 <HAL_GetTick>
 8005968:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800596c:	f7fc fa84 	bl	8001e78 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e171      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800597e:	4b80      	ldr	r3, [pc, #512]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1f0      	bne.n	800596c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 8166 	beq.w	8005c60 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005994:	2300      	movs	r3, #0
 8005996:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800599a:	4b79      	ldr	r3, [pc, #484]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	f003 030c 	and.w	r3, r3, #12
 80059a2:	2b0c      	cmp	r3, #12
 80059a4:	f000 80f2 	beq.w	8005b8c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	f040 80c5 	bne.w	8005b3c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80059b2:	4b73      	ldr	r3, [pc, #460]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a72      	ldr	r2, [pc, #456]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 80059b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80059be:	f7fc fa5b 	bl	8001e78 <HAL_GetTick>
 80059c2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c6:	f7fc fa57 	bl	8001e78 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e144      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80059d8:	4b69      	ldr	r3, [pc, #420]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1f0      	bne.n	80059c6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e4:	4b66      	ldr	r3, [pc, #408]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 80059e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d111      	bne.n	8005a16 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80059f2:	4b63      	ldr	r3, [pc, #396]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 80059f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059f8:	4a61      	ldr	r2, [pc, #388]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 80059fa:	f043 0304 	orr.w	r3, r3, #4
 80059fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005a02:	4b5f      	ldr	r3, [pc, #380]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005a16:	4b5b      	ldr	r3, [pc, #364]	@ (8005b84 <HAL_RCC_OscConfig+0xccc>)
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a22:	d102      	bne.n	8005a2a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005a24:	2301      	movs	r3, #1
 8005a26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005a2a:	4b56      	ldr	r3, [pc, #344]	@ (8005b84 <HAL_RCC_OscConfig+0xccc>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	4a55      	ldr	r2, [pc, #340]	@ (8005b84 <HAL_RCC_OscConfig+0xccc>)
 8005a30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a34:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005a36:	4b52      	ldr	r3, [pc, #328]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a4a:	3a01      	subs	r2, #1
 8005a4c:	0212      	lsls	r2, r2, #8
 8005a4e:	4311      	orrs	r1, r2
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005a54:	430a      	orrs	r2, r1
 8005a56:	494a      	ldr	r1, [pc, #296]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005a5c:	4b48      	ldr	r3, [pc, #288]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005a5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a60:	4b49      	ldr	r3, [pc, #292]	@ (8005b88 <HAL_RCC_OscConfig+0xcd0>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a68:	3a01      	subs	r2, #1
 8005a6a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005a72:	3a01      	subs	r2, #1
 8005a74:	0252      	lsls	r2, r2, #9
 8005a76:	b292      	uxth	r2, r2
 8005a78:	4311      	orrs	r1, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a7e:	3a01      	subs	r2, #1
 8005a80:	0412      	lsls	r2, r2, #16
 8005a82:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005a86:	4311      	orrs	r1, r2
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005a8c:	3a01      	subs	r2, #1
 8005a8e:	0612      	lsls	r2, r2, #24
 8005a90:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005a94:	430a      	orrs	r2, r1
 8005a96:	493a      	ldr	r1, [pc, #232]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005a9c:	4b38      	ldr	r3, [pc, #224]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa0:	4a37      	ldr	r2, [pc, #220]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005aa2:	f023 0310 	bic.w	r3, r3, #16
 8005aa6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aac:	4a34      	ldr	r2, [pc, #208]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005ab2:	4b33      	ldr	r3, [pc, #204]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab6:	4a32      	ldr	r2, [pc, #200]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005ab8:	f043 0310 	orr.w	r3, r3, #16
 8005abc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005abe:	4b30      	ldr	r3, [pc, #192]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac2:	f023 020c 	bic.w	r2, r3, #12
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aca:	492d      	ldr	r1, [pc, #180]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005ad0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d105      	bne.n	8005ae4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8005b84 <HAL_RCC_OscConfig+0xccc>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	4a29      	ldr	r2, [pc, #164]	@ (8005b84 <HAL_RCC_OscConfig+0xccc>)
 8005ade:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ae2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005ae4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d107      	bne.n	8005afc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005aec:	4b24      	ldr	r3, [pc, #144]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005af2:	4a23      	ldr	r2, [pc, #140]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005af4:	f023 0304 	bic.w	r3, r3, #4
 8005af8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005afc:	4b20      	ldr	r3, [pc, #128]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1f      	ldr	r2, [pc, #124]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b06:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b08:	f7fc f9b6 	bl	8001e78 <HAL_GetTick>
 8005b0c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b10:	f7fc f9b2 	bl	8001e78 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e09f      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b22:	4b17      	ldr	r3, [pc, #92]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0f0      	beq.n	8005b10 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b2e:	4b14      	ldr	r3, [pc, #80]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b32:	4a13      	ldr	r2, [pc, #76]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b38:	6293      	str	r3, [r2, #40]	@ 0x28
 8005b3a:	e091      	b.n	8005c60 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005b3c:	4b10      	ldr	r3, [pc, #64]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a0f      	ldr	r2, [pc, #60]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b46:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b48:	f7fc f996 	bl	8001e78 <HAL_GetTick>
 8005b4c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b50:	f7fc f992 	bl	8001e78 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e07f      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b62:	4b07      	ldr	r3, [pc, #28]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005b6e:	4b04      	ldr	r3, [pc, #16]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b72:	4a03      	ldr	r2, [pc, #12]	@ (8005b80 <HAL_RCC_OscConfig+0xcc8>)
 8005b74:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005b78:	f023 0303 	bic.w	r3, r3, #3
 8005b7c:	6293      	str	r3, [r2, #40]	@ 0x28
 8005b7e:	e06f      	b.n	8005c60 <HAL_RCC_OscConfig+0xda8>
 8005b80:	46020c00 	.word	0x46020c00
 8005b84:	46020800 	.word	0x46020800
 8005b88:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005b8c:	4b37      	ldr	r3, [pc, #220]	@ (8005c6c <HAL_RCC_OscConfig+0xdb4>)
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b90:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b92:	4b36      	ldr	r3, [pc, #216]	@ (8005c6c <HAL_RCC_OscConfig+0xdb4>)
 8005b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b96:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d039      	beq.n	8005c14 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	f003 0203 	and.w	r2, r3, #3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d132      	bne.n	8005c14 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	0a1b      	lsrs	r3, r3, #8
 8005bb2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d129      	bne.n	8005c14 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d122      	bne.n	8005c14 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bd8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d11a      	bne.n	8005c14 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	0a5b      	lsrs	r3, r3, #9
 8005be2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d111      	bne.n	8005c14 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	0c1b      	lsrs	r3, r3, #16
 8005bf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bfc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d108      	bne.n	8005c14 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	0e1b      	lsrs	r3, r3, #24
 8005c06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d001      	beq.n	8005c18 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e024      	b.n	8005c62 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c18:	4b14      	ldr	r3, [pc, #80]	@ (8005c6c <HAL_RCC_OscConfig+0xdb4>)
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1c:	08db      	lsrs	r3, r3, #3
 8005c1e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d01a      	beq.n	8005c60 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005c2a:	4b10      	ldr	r3, [pc, #64]	@ (8005c6c <HAL_RCC_OscConfig+0xdb4>)
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8005c6c <HAL_RCC_OscConfig+0xdb4>)
 8005c30:	f023 0310 	bic.w	r3, r3, #16
 8005c34:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c36:	f7fc f91f 	bl	8001e78 <HAL_GetTick>
 8005c3a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005c3c:	bf00      	nop
 8005c3e:	f7fc f91b 	bl	8001e78 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d0f9      	beq.n	8005c3e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c4e:	4a07      	ldr	r2, [pc, #28]	@ (8005c6c <HAL_RCC_OscConfig+0xdb4>)
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005c54:	4b05      	ldr	r3, [pc, #20]	@ (8005c6c <HAL_RCC_OscConfig+0xdb4>)
 8005c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c58:	4a04      	ldr	r2, [pc, #16]	@ (8005c6c <HAL_RCC_OscConfig+0xdb4>)
 8005c5a:	f043 0310 	orr.w	r3, r3, #16
 8005c5e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3738      	adds	r7, #56	@ 0x38
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	46020c00 	.word	0x46020c00

08005c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e1d9      	b.n	8006038 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c84:	4b9b      	ldr	r3, [pc, #620]	@ (8005ef4 <HAL_RCC_ClockConfig+0x284>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d910      	bls.n	8005cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c92:	4b98      	ldr	r3, [pc, #608]	@ (8005ef4 <HAL_RCC_ClockConfig+0x284>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f023 020f 	bic.w	r2, r3, #15
 8005c9a:	4996      	ldr	r1, [pc, #600]	@ (8005ef4 <HAL_RCC_ClockConfig+0x284>)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca2:	4b94      	ldr	r3, [pc, #592]	@ (8005ef4 <HAL_RCC_ClockConfig+0x284>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d001      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e1c1      	b.n	8006038 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d010      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	4b8c      	ldr	r3, [pc, #560]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d908      	bls.n	8005ce2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005cd0:	4b89      	ldr	r3, [pc, #548]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	4986      	ldr	r1, [pc, #536]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d012      	beq.n	8005d14 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691a      	ldr	r2, [r3, #16]
 8005cf2:	4b81      	ldr	r3, [pc, #516]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	091b      	lsrs	r3, r3, #4
 8005cf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d909      	bls.n	8005d14 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005d00:	4b7d      	ldr	r3, [pc, #500]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	497a      	ldr	r1, [pc, #488]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d010      	beq.n	8005d42 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	4b74      	ldr	r3, [pc, #464]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d908      	bls.n	8005d42 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005d30:	4b71      	ldr	r3, [pc, #452]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	496e      	ldr	r1, [pc, #440]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d010      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	4b69      	ldr	r3, [pc, #420]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d908      	bls.n	8005d70 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005d5e:	4b66      	ldr	r3, [pc, #408]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f023 020f 	bic.w	r2, r3, #15
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	4963      	ldr	r1, [pc, #396]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 80d2 	beq.w	8005f22 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d143      	bne.n	8005e12 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d8a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d110      	bne.n	8005dba <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005d98:	4b57      	ldr	r3, [pc, #348]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d9e:	4a56      	ldr	r2, [pc, #344]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005da0:	f043 0304 	orr.w	r3, r3, #4
 8005da4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005da8:	4b53      	ldr	r3, [pc, #332]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	60bb      	str	r3, [r7, #8]
 8005db4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005db6:	2301      	movs	r3, #1
 8005db8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005dba:	f7fc f85d 	bl	8001e78 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005dc0:	4b4e      	ldr	r3, [pc, #312]	@ (8005efc <HAL_RCC_ClockConfig+0x28c>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00f      	beq.n	8005dec <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005dce:	f7fc f853 	bl	8001e78 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e12b      	b.n	8006038 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005de0:	4b46      	ldr	r3, [pc, #280]	@ (8005efc <HAL_RCC_ClockConfig+0x28c>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0f0      	beq.n	8005dce <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d107      	bne.n	8005e02 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005df2:	4b41      	ldr	r3, [pc, #260]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005df8:	4a3f      	ldr	r2, [pc, #252]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005dfa:	f023 0304 	bic.w	r3, r3, #4
 8005dfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005e02:	4b3d      	ldr	r3, [pc, #244]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d121      	bne.n	8005e52 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e112      	b.n	8006038 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d107      	bne.n	8005e2a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e1a:	4b37      	ldr	r3, [pc, #220]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d115      	bne.n	8005e52 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e106      	b.n	8006038 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d107      	bne.n	8005e42 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005e32:	4b31      	ldr	r3, [pc, #196]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d109      	bne.n	8005e52 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e0fa      	b.n	8006038 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e42:	4b2d      	ldr	r3, [pc, #180]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e0f2      	b.n	8006038 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005e52:	4b29      	ldr	r3, [pc, #164]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	f023 0203 	bic.w	r2, r3, #3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	4926      	ldr	r1, [pc, #152]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005e64:	f7fc f808 	bl	8001e78 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d112      	bne.n	8005e98 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e72:	e00a      	b.n	8005e8a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e74:	f7fc f800 	bl	8001e78 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e0d6      	b.n	8006038 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f003 030c 	and.w	r3, r3, #12
 8005e92:	2b0c      	cmp	r3, #12
 8005e94:	d1ee      	bne.n	8005e74 <HAL_RCC_ClockConfig+0x204>
 8005e96:	e044      	b.n	8005f22 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d112      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ea0:	e00a      	b.n	8005eb8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea2:	f7fb ffe9 	bl	8001e78 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e0bf      	b.n	8006038 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f003 030c 	and.w	r3, r3, #12
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d1ee      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0x232>
 8005ec4:	e02d      	b.n	8005f22 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d123      	bne.n	8005f16 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ece:	e00a      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed0:	f7fb ffd2 	bl	8001e78 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e0a8      	b.n	8006038 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ee6:	4b04      	ldr	r3, [pc, #16]	@ (8005ef8 <HAL_RCC_ClockConfig+0x288>)
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f003 030c 	and.w	r3, r3, #12
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1ee      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x260>
 8005ef2:	e016      	b.n	8005f22 <HAL_RCC_ClockConfig+0x2b2>
 8005ef4:	40022000 	.word	0x40022000
 8005ef8:	46020c00 	.word	0x46020c00
 8005efc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f00:	f7fb ffba 	bl	8001e78 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e090      	b.n	8006038 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f16:	4b4a      	ldr	r3, [pc, #296]	@ (8006040 <HAL_RCC_ClockConfig+0x3d0>)
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	f003 030c 	and.w	r3, r3, #12
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d1ee      	bne.n	8005f00 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d010      	beq.n	8005f50 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	4b43      	ldr	r3, [pc, #268]	@ (8006040 <HAL_RCC_ClockConfig+0x3d0>)
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d208      	bcs.n	8005f50 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005f3e:	4b40      	ldr	r3, [pc, #256]	@ (8006040 <HAL_RCC_ClockConfig+0x3d0>)
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f023 020f 	bic.w	r2, r3, #15
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	493d      	ldr	r1, [pc, #244]	@ (8006040 <HAL_RCC_ClockConfig+0x3d0>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f50:	4b3c      	ldr	r3, [pc, #240]	@ (8006044 <HAL_RCC_ClockConfig+0x3d4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d210      	bcs.n	8005f80 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5e:	4b39      	ldr	r3, [pc, #228]	@ (8006044 <HAL_RCC_ClockConfig+0x3d4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f023 020f 	bic.w	r2, r3, #15
 8005f66:	4937      	ldr	r1, [pc, #220]	@ (8006044 <HAL_RCC_ClockConfig+0x3d4>)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6e:	4b35      	ldr	r3, [pc, #212]	@ (8006044 <HAL_RCC_ClockConfig+0x3d4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d001      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e05b      	b.n	8006038 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d010      	beq.n	8005fae <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	4b2b      	ldr	r3, [pc, #172]	@ (8006040 <HAL_RCC_ClockConfig+0x3d0>)
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d208      	bcs.n	8005fae <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005f9c:	4b28      	ldr	r3, [pc, #160]	@ (8006040 <HAL_RCC_ClockConfig+0x3d0>)
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4925      	ldr	r1, [pc, #148]	@ (8006040 <HAL_RCC_ClockConfig+0x3d0>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d012      	beq.n	8005fe0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	4b20      	ldr	r3, [pc, #128]	@ (8006040 <HAL_RCC_ClockConfig+0x3d0>)
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	091b      	lsrs	r3, r3, #4
 8005fc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d209      	bcs.n	8005fe0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8006040 <HAL_RCC_ClockConfig+0x3d0>)
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	4919      	ldr	r1, [pc, #100]	@ (8006040 <HAL_RCC_ClockConfig+0x3d0>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0310 	and.w	r3, r3, #16
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d010      	beq.n	800600e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	695a      	ldr	r2, [r3, #20]
 8005ff0:	4b13      	ldr	r3, [pc, #76]	@ (8006040 <HAL_RCC_ClockConfig+0x3d0>)
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d208      	bcs.n	800600e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005ffc:	4b10      	ldr	r3, [pc, #64]	@ (8006040 <HAL_RCC_ClockConfig+0x3d0>)
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006000:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	490d      	ldr	r1, [pc, #52]	@ (8006040 <HAL_RCC_ClockConfig+0x3d0>)
 800600a:	4313      	orrs	r3, r2
 800600c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800600e:	f000 f821 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8006012:	4602      	mov	r2, r0
 8006014:	4b0a      	ldr	r3, [pc, #40]	@ (8006040 <HAL_RCC_ClockConfig+0x3d0>)
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f003 030f 	and.w	r3, r3, #15
 800601c:	490a      	ldr	r1, [pc, #40]	@ (8006048 <HAL_RCC_ClockConfig+0x3d8>)
 800601e:	5ccb      	ldrb	r3, [r1, r3]
 8006020:	fa22 f303 	lsr.w	r3, r2, r3
 8006024:	4a09      	ldr	r2, [pc, #36]	@ (800604c <HAL_RCC_ClockConfig+0x3dc>)
 8006026:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006028:	4b09      	ldr	r3, [pc, #36]	@ (8006050 <HAL_RCC_ClockConfig+0x3e0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4618      	mov	r0, r3
 800602e:	f7fb faaf 	bl	8001590 <HAL_InitTick>
 8006032:	4603      	mov	r3, r0
 8006034:	73fb      	strb	r3, [r7, #15]

  return status;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	46020c00 	.word	0x46020c00
 8006044:	40022000 	.word	0x40022000
 8006048:	0800b63c 	.word	0x0800b63c
 800604c:	20000020 	.word	0x20000020
 8006050:	20000040 	.word	0x20000040

08006054 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006054:	b480      	push	{r7}
 8006056:	b08b      	sub	sp, #44	@ 0x2c
 8006058:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006062:	4b78      	ldr	r3, [pc, #480]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f003 030c 	and.w	r3, r3, #12
 800606a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800606c:	4b75      	ldr	r3, [pc, #468]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800606e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <HAL_RCC_GetSysClockFreq+0x34>
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b0c      	cmp	r3, #12
 8006080:	d121      	bne.n	80060c6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d11e      	bne.n	80060c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006088:	4b6e      	ldr	r3, [pc, #440]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d107      	bne.n	80060a4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006094:	4b6b      	ldr	r3, [pc, #428]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800609a:	0b1b      	lsrs	r3, r3, #12
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80060a2:	e005      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80060a4:	4b67      	ldr	r3, [pc, #412]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	0f1b      	lsrs	r3, r3, #28
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80060b0:	4a65      	ldr	r2, [pc, #404]	@ (8006248 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d110      	bne.n	80060e2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060c4:	e00d      	b.n	80060e2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060c6:	4b5f      	ldr	r3, [pc, #380]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f003 030c 	and.w	r3, r3, #12
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d102      	bne.n	80060d8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060d2:	4b5e      	ldr	r3, [pc, #376]	@ (800624c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80060d4:	623b      	str	r3, [r7, #32]
 80060d6:	e004      	b.n	80060e2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b08      	cmp	r3, #8
 80060dc:	d101      	bne.n	80060e2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060de:	4b5b      	ldr	r3, [pc, #364]	@ (800624c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80060e0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b0c      	cmp	r3, #12
 80060e6:	f040 80a5 	bne.w	8006234 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80060ea:	4b56      	ldr	r3, [pc, #344]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80060f4:	4b53      	ldr	r3, [pc, #332]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f8:	0a1b      	lsrs	r3, r3, #8
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	3301      	adds	r3, #1
 8006100:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006102:	4b50      	ldr	r3, [pc, #320]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006106:	091b      	lsrs	r3, r3, #4
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800610e:	4b4d      	ldr	r3, [pc, #308]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006112:	08db      	lsrs	r3, r3, #3
 8006114:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	fb02 f303 	mul.w	r3, r2, r3
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006126:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d003      	beq.n	8006138 <HAL_RCC_GetSysClockFreq+0xe4>
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	2b03      	cmp	r3, #3
 8006134:	d022      	beq.n	800617c <HAL_RCC_GetSysClockFreq+0x128>
 8006136:	e043      	b.n	80061c0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006250 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614a:	4b3e      	ldr	r3, [pc, #248]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800614c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800614e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800615a:	ed97 6a01 	vldr	s12, [r7, #4]
 800615e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8006254 <HAL_RCC_GetSysClockFreq+0x200>
 8006162:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006166:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800616a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800616e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800617a:	e046      	b.n	800620a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006186:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8006250 <HAL_RCC_GetSysClockFreq+0x1fc>
 800618a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800618e:	4b2d      	ldr	r3, [pc, #180]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800619e:	ed97 6a01 	vldr	s12, [r7, #4]
 80061a2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006254 <HAL_RCC_GetSysClockFreq+0x200>
 80061a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061be:	e024      	b.n	800620a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	ee07 3a90 	vmov	s15, r3
 80061d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80061da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e0:	ee07 3a90 	vmov	s15, r3
 80061e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061e8:	ed97 6a01 	vldr	s12, [r7, #4]
 80061ec:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8006254 <HAL_RCC_GetSysClockFreq+0x200>
 80061f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006204:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006208:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800620a:	4b0e      	ldr	r3, [pc, #56]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800620c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800620e:	0e1b      	lsrs	r3, r3, #24
 8006210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006214:	3301      	adds	r3, #1
 8006216:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006222:	edd7 6a07 	vldr	s13, [r7, #28]
 8006226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800622a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800622e:	ee17 3a90 	vmov	r3, s15
 8006232:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006234:	6a3b      	ldr	r3, [r7, #32]
}
 8006236:	4618      	mov	r0, r3
 8006238:	372c      	adds	r7, #44	@ 0x2c
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	46020c00 	.word	0x46020c00
 8006248:	0800b654 	.word	0x0800b654
 800624c:	00f42400 	.word	0x00f42400
 8006250:	4b742400 	.word	0x4b742400
 8006254:	46000000 	.word	0x46000000

08006258 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800625c:	f7ff fefa 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8006260:	4602      	mov	r2, r0
 8006262:	4b07      	ldr	r3, [pc, #28]	@ (8006280 <HAL_RCC_GetHCLKFreq+0x28>)
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	4906      	ldr	r1, [pc, #24]	@ (8006284 <HAL_RCC_GetHCLKFreq+0x2c>)
 800626c:	5ccb      	ldrb	r3, [r1, r3]
 800626e:	fa22 f303 	lsr.w	r3, r2, r3
 8006272:	4a05      	ldr	r2, [pc, #20]	@ (8006288 <HAL_RCC_GetHCLKFreq+0x30>)
 8006274:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006276:	4b04      	ldr	r3, [pc, #16]	@ (8006288 <HAL_RCC_GetHCLKFreq+0x30>)
 8006278:	681b      	ldr	r3, [r3, #0]
}
 800627a:	4618      	mov	r0, r3
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	46020c00 	.word	0x46020c00
 8006284:	0800b63c 	.word	0x0800b63c
 8006288:	20000020 	.word	0x20000020

0800628c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006290:	f7ff ffe2 	bl	8006258 <HAL_RCC_GetHCLKFreq>
 8006294:	4602      	mov	r2, r0
 8006296:	4b05      	ldr	r3, [pc, #20]	@ (80062ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	091b      	lsrs	r3, r3, #4
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	4903      	ldr	r1, [pc, #12]	@ (80062b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062a2:	5ccb      	ldrb	r3, [r1, r3]
 80062a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	46020c00 	.word	0x46020c00
 80062b0:	0800b64c 	.word	0x0800b64c

080062b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80062b8:	f7ff ffce 	bl	8006258 <HAL_RCC_GetHCLKFreq>
 80062bc:	4602      	mov	r2, r0
 80062be:	4b05      	ldr	r3, [pc, #20]	@ (80062d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	0a1b      	lsrs	r3, r3, #8
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	4903      	ldr	r1, [pc, #12]	@ (80062d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062ca:	5ccb      	ldrb	r3, [r1, r3]
 80062cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	46020c00 	.word	0x46020c00
 80062d8:	0800b64c 	.word	0x0800b64c

080062dc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80062e0:	f7ff ffba 	bl	8006258 <HAL_RCC_GetHCLKFreq>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4b05      	ldr	r3, [pc, #20]	@ (80062fc <HAL_RCC_GetPCLK3Freq+0x20>)
 80062e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ea:	091b      	lsrs	r3, r3, #4
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	4903      	ldr	r1, [pc, #12]	@ (8006300 <HAL_RCC_GetPCLK3Freq+0x24>)
 80062f2:	5ccb      	ldrb	r3, [r1, r3]
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	46020c00 	.word	0x46020c00
 8006300:	0800b64c 	.word	0x0800b64c

08006304 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	221f      	movs	r2, #31
 8006312:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006314:	4b15      	ldr	r3, [pc, #84]	@ (800636c <HAL_RCC_GetClockConfig+0x68>)
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f003 0203 	and.w	r2, r3, #3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006320:	4b12      	ldr	r3, [pc, #72]	@ (800636c <HAL_RCC_GetClockConfig+0x68>)
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f003 020f 	and.w	r2, r3, #15
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800632c:	4b0f      	ldr	r3, [pc, #60]	@ (800636c <HAL_RCC_GetClockConfig+0x68>)
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8006338:	4b0c      	ldr	r3, [pc, #48]	@ (800636c <HAL_RCC_GetClockConfig+0x68>)
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	091b      	lsrs	r3, r3, #4
 800633e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8006346:	4b09      	ldr	r3, [pc, #36]	@ (800636c <HAL_RCC_GetClockConfig+0x68>)
 8006348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006352:	4b07      	ldr	r3, [pc, #28]	@ (8006370 <HAL_RCC_GetClockConfig+0x6c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 020f 	and.w	r2, r3, #15
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	601a      	str	r2, [r3, #0]
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	46020c00 	.word	0x46020c00
 8006370:	40022000 	.word	0x40022000

08006374 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800637c:	4b3e      	ldr	r3, [pc, #248]	@ (8006478 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800637e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800638a:	f7fe fd17 	bl	8004dbc <HAL_PWREx_GetVoltageRange>
 800638e:	6178      	str	r0, [r7, #20]
 8006390:	e019      	b.n	80063c6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006392:	4b39      	ldr	r3, [pc, #228]	@ (8006478 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006398:	4a37      	ldr	r2, [pc, #220]	@ (8006478 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800639a:	f043 0304 	orr.w	r3, r3, #4
 800639e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80063a2:	4b35      	ldr	r3, [pc, #212]	@ (8006478 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063b0:	f7fe fd04 	bl	8004dbc <HAL_PWREx_GetVoltageRange>
 80063b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063b6:	4b30      	ldr	r3, [pc, #192]	@ (8006478 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063bc:	4a2e      	ldr	r2, [pc, #184]	@ (8006478 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063be:	f023 0304 	bic.w	r3, r3, #4
 80063c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063cc:	d003      	beq.n	80063d6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063d4:	d109      	bne.n	80063ea <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063dc:	d202      	bcs.n	80063e4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80063de:	2301      	movs	r3, #1
 80063e0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80063e2:	e033      	b.n	800644c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80063e4:	2300      	movs	r3, #0
 80063e6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80063e8:	e030      	b.n	800644c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063f0:	d208      	bcs.n	8006404 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063f8:	d102      	bne.n	8006400 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80063fa:	2303      	movs	r3, #3
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	e025      	b.n	800644c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e035      	b.n	8006470 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800640a:	d90f      	bls.n	800642c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d109      	bne.n	8006426 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006418:	d902      	bls.n	8006420 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800641a:	2300      	movs	r3, #0
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	e015      	b.n	800644c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006420:	2301      	movs	r3, #1
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	e012      	b.n	800644c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006426:	2300      	movs	r3, #0
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	e00f      	b.n	800644c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006432:	d109      	bne.n	8006448 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800643a:	d102      	bne.n	8006442 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800643c:	2301      	movs	r3, #1
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	e004      	b.n	800644c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006442:	2302      	movs	r3, #2
 8006444:	613b      	str	r3, [r7, #16]
 8006446:	e001      	b.n	800644c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006448:	2301      	movs	r3, #1
 800644a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800644c:	4b0b      	ldr	r3, [pc, #44]	@ (800647c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f023 020f 	bic.w	r2, r3, #15
 8006454:	4909      	ldr	r1, [pc, #36]	@ (800647c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800645c:	4b07      	ldr	r3, [pc, #28]	@ (800647c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	429a      	cmp	r2, r3
 8006468:	d001      	beq.n	800646e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	46020c00 	.word	0x46020c00
 800647c:	40022000 	.word	0x40022000

08006480 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006484:	b0b8      	sub	sp, #224	@ 0xe0
 8006486:	af00      	add	r7, sp, #0
 8006488:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800648c:	2300      	movs	r3, #0
 800648e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006492:	2300      	movs	r3, #0
 8006494:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006498:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	f002 0401 	and.w	r4, r2, #1
 80064a4:	2500      	movs	r5, #0
 80064a6:	ea54 0305 	orrs.w	r3, r4, r5
 80064aa:	d00b      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80064ac:	4bca      	ldr	r3, [pc, #808]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064b2:	f023 0103 	bic.w	r1, r3, #3
 80064b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064bc:	4ac6      	ldr	r2, [pc, #792]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064be:	430b      	orrs	r3, r1
 80064c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f002 0802 	and.w	r8, r2, #2
 80064d0:	f04f 0900 	mov.w	r9, #0
 80064d4:	ea58 0309 	orrs.w	r3, r8, r9
 80064d8:	d00b      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80064da:	4bbf      	ldr	r3, [pc, #764]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064e0:	f023 010c 	bic.w	r1, r3, #12
 80064e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ea:	4abb      	ldr	r2, [pc, #748]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064ec:	430b      	orrs	r3, r1
 80064ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fa:	f002 0a04 	and.w	sl, r2, #4
 80064fe:	f04f 0b00 	mov.w	fp, #0
 8006502:	ea5a 030b 	orrs.w	r3, sl, fp
 8006506:	d00b      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006508:	4bb3      	ldr	r3, [pc, #716]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800650a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800650e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006512:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006518:	4aaf      	ldr	r2, [pc, #700]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800651a:	430b      	orrs	r3, r1
 800651c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f002 0308 	and.w	r3, r2, #8
 800652c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006530:	2300      	movs	r3, #0
 8006532:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006536:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800653a:	460b      	mov	r3, r1
 800653c:	4313      	orrs	r3, r2
 800653e:	d00b      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006540:	4ba5      	ldr	r3, [pc, #660]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006546:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800654a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800654e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006550:	4aa1      	ldr	r2, [pc, #644]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006552:	430b      	orrs	r3, r1
 8006554:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006558:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f002 0310 	and.w	r3, r2, #16
 8006564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006568:	2300      	movs	r3, #0
 800656a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800656e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006572:	460b      	mov	r3, r1
 8006574:	4313      	orrs	r3, r2
 8006576:	d00b      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006578:	4b97      	ldr	r3, [pc, #604]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800657a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800657e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006588:	4a93      	ldr	r2, [pc, #588]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800658a:	430b      	orrs	r3, r1
 800658c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006590:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	f002 0320 	and.w	r3, r2, #32
 800659c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065a0:	2300      	movs	r3, #0
 80065a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4313      	orrs	r3, r2
 80065ae:	d00b      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80065b0:	4b89      	ldr	r3, [pc, #548]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065b6:	f023 0107 	bic.w	r1, r3, #7
 80065ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c0:	4a85      	ldr	r2, [pc, #532]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065c2:	430b      	orrs	r3, r1
 80065c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80065d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065d8:	2300      	movs	r3, #0
 80065da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065de:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065e2:	460b      	mov	r3, r1
 80065e4:	4313      	orrs	r3, r2
 80065e6:	d00b      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80065e8:	4b7b      	ldr	r3, [pc, #492]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065ee:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80065f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065f8:	4a77      	ldr	r2, [pc, #476]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065fa:	430b      	orrs	r3, r1
 80065fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006600:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800660c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006610:	2300      	movs	r3, #0
 8006612:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006616:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800661a:	460b      	mov	r3, r1
 800661c:	4313      	orrs	r3, r2
 800661e:	d00b      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006620:	4b6d      	ldr	r3, [pc, #436]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006626:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800662a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800662e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006630:	4a69      	ldr	r2, [pc, #420]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006632:	430b      	orrs	r3, r1
 8006634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006638:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006644:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006648:	2300      	movs	r3, #0
 800664a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800664e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006652:	460b      	mov	r3, r1
 8006654:	4313      	orrs	r3, r2
 8006656:	d00b      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006658:	4b5f      	ldr	r3, [pc, #380]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800665a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800665e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006662:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006668:	4a5b      	ldr	r2, [pc, #364]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800666a:	430b      	orrs	r3, r1
 800666c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006670:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800667c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006680:	2300      	movs	r3, #0
 8006682:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006686:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800668a:	460b      	mov	r3, r1
 800668c:	4313      	orrs	r3, r2
 800668e:	d00b      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006690:	4b51      	ldr	r3, [pc, #324]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006696:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800669a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800669e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066a0:	4a4d      	ldr	r2, [pc, #308]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066a2:	430b      	orrs	r3, r1
 80066a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80066b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066b8:	2300      	movs	r3, #0
 80066ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066be:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80066c2:	460b      	mov	r3, r1
 80066c4:	4313      	orrs	r3, r2
 80066c6:	d00b      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80066c8:	4b43      	ldr	r3, [pc, #268]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066ce:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80066d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066d8:	4a3f      	ldr	r2, [pc, #252]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066da:	430b      	orrs	r3, r1
 80066dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80066ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066f0:	2300      	movs	r3, #0
 80066f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80066fa:	460b      	mov	r3, r1
 80066fc:	4313      	orrs	r3, r2
 80066fe:	d00b      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006700:	4b35      	ldr	r3, [pc, #212]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006706:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800670a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800670e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006710:	4a31      	ldr	r2, [pc, #196]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006712:	430b      	orrs	r3, r1
 8006714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800671c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006720:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006724:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006726:	2300      	movs	r3, #0
 8006728:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800672a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800672e:	460b      	mov	r3, r1
 8006730:	4313      	orrs	r3, r2
 8006732:	d00c      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006734:	4b28      	ldr	r3, [pc, #160]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800673a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800673e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006746:	4a24      	ldr	r2, [pc, #144]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006748:	430b      	orrs	r3, r1
 800674a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800674e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800675a:	673b      	str	r3, [r7, #112]	@ 0x70
 800675c:	2300      	movs	r3, #0
 800675e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006760:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006764:	460b      	mov	r3, r1
 8006766:	4313      	orrs	r3, r2
 8006768:	d04f      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800676a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800676e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006772:	2b80      	cmp	r3, #128	@ 0x80
 8006774:	d02d      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006776:	2b80      	cmp	r3, #128	@ 0x80
 8006778:	d827      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800677a:	2b60      	cmp	r3, #96	@ 0x60
 800677c:	d02e      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800677e:	2b60      	cmp	r3, #96	@ 0x60
 8006780:	d823      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006782:	2b40      	cmp	r3, #64	@ 0x40
 8006784:	d006      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006786:	2b40      	cmp	r3, #64	@ 0x40
 8006788:	d81f      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800678e:	2b20      	cmp	r3, #32
 8006790:	d011      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006792:	e01a      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006794:	4b10      	ldr	r3, [pc, #64]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006798:	4a0f      	ldr	r2, [pc, #60]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800679a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800679e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067a0:	e01d      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067a6:	3308      	adds	r3, #8
 80067a8:	4618      	mov	r0, r3
 80067aa:	f002 f9d1 	bl	8008b50 <RCCEx_PLL2_Config>
 80067ae:	4603      	mov	r3, r0
 80067b0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067b4:	e013      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067ba:	332c      	adds	r3, #44	@ 0x2c
 80067bc:	4618      	mov	r0, r3
 80067be:	f002 fa5f 	bl	8008c80 <RCCEx_PLL3_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067c8:	e009      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80067d0:	e005      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80067d2:	bf00      	nop
 80067d4:	e003      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80067d6:	bf00      	nop
 80067d8:	46020c00 	.word	0x46020c00
        break;
 80067dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067de:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10d      	bne.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80067e6:	4bb6      	ldr	r3, [pc, #728]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80067e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067ec:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80067f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f8:	4ab1      	ldr	r2, [pc, #708]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80067fa:	430b      	orrs	r3, r1
 80067fc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006800:	e003      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006802:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006806:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800680a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006812:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006816:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006818:	2300      	movs	r3, #0
 800681a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800681c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006820:	460b      	mov	r3, r1
 8006822:	4313      	orrs	r3, r2
 8006824:	d053      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006826:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800682a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800682e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006832:	d033      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006838:	d82c      	bhi.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800683a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800683e:	d02f      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006840:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006844:	d826      	bhi.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006846:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800684a:	d008      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800684c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006850:	d820      	bhi.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800685a:	d011      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800685c:	e01a      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800685e:	4b98      	ldr	r3, [pc, #608]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006862:	4a97      	ldr	r2, [pc, #604]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006868:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800686a:	e01a      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800686c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006870:	3308      	adds	r3, #8
 8006872:	4618      	mov	r0, r3
 8006874:	f002 f96c 	bl	8008b50 <RCCEx_PLL2_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800687e:	e010      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006880:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006884:	332c      	adds	r3, #44	@ 0x2c
 8006886:	4618      	mov	r0, r3
 8006888:	f002 f9fa 	bl	8008c80 <RCCEx_PLL3_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006892:	e006      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800689a:	e002      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800689c:	bf00      	nop
 800689e:	e000      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80068a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10d      	bne.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80068aa:	4b85      	ldr	r3, [pc, #532]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80068ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068b0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80068b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068bc:	4a80      	ldr	r2, [pc, #512]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80068be:	430b      	orrs	r3, r1
 80068c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80068c4:	e003      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80068ca:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80068ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80068da:	663b      	str	r3, [r7, #96]	@ 0x60
 80068dc:	2300      	movs	r3, #0
 80068de:	667b      	str	r3, [r7, #100]	@ 0x64
 80068e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80068e4:	460b      	mov	r3, r1
 80068e6:	4313      	orrs	r3, r2
 80068e8:	d046      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80068ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068f2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80068f6:	d028      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80068f8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80068fc:	d821      	bhi.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80068fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006902:	d022      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006904:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006908:	d81b      	bhi.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800690a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800690e:	d01c      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006910:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006914:	d815      	bhi.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800691a:	d008      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800691c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006920:	d80f      	bhi.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006922:	2b00      	cmp	r3, #0
 8006924:	d011      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800692a:	d00e      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800692c:	e009      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800692e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006932:	3308      	adds	r3, #8
 8006934:	4618      	mov	r0, r3
 8006936:	f002 f90b 	bl	8008b50 <RCCEx_PLL2_Config>
 800693a:	4603      	mov	r3, r0
 800693c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006940:	e004      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006948:	e000      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800694a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10d      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006954:	4b5a      	ldr	r3, [pc, #360]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800695a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800695e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006962:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006966:	4a56      	ldr	r2, [pc, #344]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006968:	430b      	orrs	r3, r1
 800696a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800696e:	e003      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006970:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006974:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006978:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006984:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006986:	2300      	movs	r3, #0
 8006988:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800698a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800698e:	460b      	mov	r3, r1
 8006990:	4313      	orrs	r3, r2
 8006992:	d03f      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006994:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800699c:	2b04      	cmp	r3, #4
 800699e:	d81e      	bhi.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80069a0:	a201      	add	r2, pc, #4	@ (adr r2, 80069a8 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80069a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a6:	bf00      	nop
 80069a8:	080069e7 	.word	0x080069e7
 80069ac:	080069bd 	.word	0x080069bd
 80069b0:	080069cb 	.word	0x080069cb
 80069b4:	080069e7 	.word	0x080069e7
 80069b8:	080069e7 	.word	0x080069e7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069bc:	4b40      	ldr	r3, [pc, #256]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80069be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c0:	4a3f      	ldr	r2, [pc, #252]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80069c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069c6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80069c8:	e00e      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069ce:	332c      	adds	r3, #44	@ 0x2c
 80069d0:	4618      	mov	r0, r3
 80069d2:	f002 f955 	bl	8008c80 <RCCEx_PLL3_Config>
 80069d6:	4603      	mov	r3, r0
 80069d8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80069dc:	e004      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80069e4:	e000      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80069e6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80069e8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10d      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80069f0:	4b33      	ldr	r3, [pc, #204]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80069f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069f6:	f023 0107 	bic.w	r1, r3, #7
 80069fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a02:	4a2f      	ldr	r2, [pc, #188]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a04:	430b      	orrs	r3, r1
 8006a06:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006a0a:	e003      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a10:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a20:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a22:	2300      	movs	r3, #0
 8006a24:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a26:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	d04d      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006a30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a3c:	d028      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8006a3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a42:	d821      	bhi.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006a44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a48:	d024      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006a4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a4e:	d81b      	bhi.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006a50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a54:	d00e      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8006a56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a5a:	d815      	bhi.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01b      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a64:	d110      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a66:	4b16      	ldr	r3, [pc, #88]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6a:	4a15      	ldr	r2, [pc, #84]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a70:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006a72:	e012      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a78:	332c      	adds	r3, #44	@ 0x2c
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f002 f900 	bl	8008c80 <RCCEx_PLL3_Config>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006a86:	e008      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006a8e:	e004      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006a90:	bf00      	nop
 8006a92:	e002      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006a94:	bf00      	nop
 8006a96:	e000      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006a98:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a9a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d110      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006aa2:	4b07      	ldr	r3, [pc, #28]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006aa8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006aac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ab4:	4a02      	ldr	r2, [pc, #8]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006abc:	e006      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006abe:	bf00      	nop
 8006ac0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ac8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ada:	2300      	movs	r3, #0
 8006adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ade:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	f000 80b5 	beq.w	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aea:	2300      	movs	r3, #0
 8006aec:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006af0:	4b9d      	ldr	r3, [pc, #628]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006af6:	f003 0304 	and.w	r3, r3, #4
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d113      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006afe:	4b9a      	ldr	r3, [pc, #616]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b04:	4a98      	ldr	r2, [pc, #608]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b06:	f043 0304 	orr.w	r3, r3, #4
 8006b0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006b0e:	4b96      	ldr	r3, [pc, #600]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8006b20:	2301      	movs	r3, #1
 8006b22:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006b26:	4b91      	ldr	r3, [pc, #580]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2a:	4a90      	ldr	r2, [pc, #576]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b2c:	f043 0301 	orr.w	r3, r3, #1
 8006b30:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b32:	f7fb f9a1 	bl	8001e78 <HAL_GetTick>
 8006b36:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b3a:	e00b      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b3c:	f7fb f99c 	bl	8001e78 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d903      	bls.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006b52:	e005      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b54:	4b85      	ldr	r3, [pc, #532]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0ed      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8006b60:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d165      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b68:	4b7f      	ldr	r3, [pc, #508]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d023      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8006b7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b82:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d01b      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b8e:	4b76      	ldr	r3, [pc, #472]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b9c:	4b72      	ldr	r3, [pc, #456]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ba2:	4a71      	ldr	r2, [pc, #452]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ba8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bac:	4b6e      	ldr	r3, [pc, #440]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bb2:	4a6d      	ldr	r2, [pc, #436]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bb8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006bbc:	4a6a      	ldr	r2, [pc, #424]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d019      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd2:	f7fb f951 	bl	8001e78 <HAL_GetTick>
 8006bd6:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bda:	e00d      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bdc:	f7fb f94c 	bl	8001e78 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006be6:	1ad2      	subs	r2, r2, r3
 8006be8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d903      	bls.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8006bf6:	e006      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bf8:	4b5b      	ldr	r3, [pc, #364]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0ea      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8006c06:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10d      	bne.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006c0e:	4b56      	ldr	r3, [pc, #344]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c14:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c20:	4a51      	ldr	r2, [pc, #324]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c22:	430b      	orrs	r3, r1
 8006c24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006c28:	e008      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c2a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c2e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8006c32:	e003      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c34:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c38:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c3c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d107      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c44:	4b48      	ldr	r3, [pc, #288]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c4a:	4a47      	ldr	r2, [pc, #284]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c4c:	f023 0304 	bic.w	r3, r3, #4
 8006c50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006c54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006c60:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c62:	2300      	movs	r3, #0
 8006c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c66:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	d042      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c78:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006c7c:	d022      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8006c7e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006c82:	d81b      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006c84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c88:	d011      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8006c8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c8e:	d815      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d019      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006c94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c98:	d110      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c9e:	3308      	adds	r3, #8
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f001 ff55 	bl	8008b50 <RCCEx_PLL2_Config>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006cac:	e00d      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cae:	4b2e      	ldr	r3, [pc, #184]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cb8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006cba:	e006      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006cc2:	e002      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006cc4:	bf00      	nop
 8006cc6:	e000      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006cc8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006cca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10d      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006cd2:	4b25      	ldr	r3, [pc, #148]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cd8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006cdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ce0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ce4:	4a20      	ldr	r2, [pc, #128]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006ce6:	430b      	orrs	r3, r1
 8006ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006cec:	e003      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cee:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006cf2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006d02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d04:	2300      	movs	r3, #0
 8006d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d08:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	d032      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006d12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d1e:	d00b      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d24:	d804      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d008      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d2e:	d007      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006d36:	e004      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006d38:	bf00      	nop
 8006d3a:	e002      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006d3c:	bf00      	nop
 8006d3e:	e000      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006d40:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d42:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d112      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006d4a:	4b07      	ldr	r3, [pc, #28]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d50:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d5c:	4a02      	ldr	r2, [pc, #8]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d5e:	430b      	orrs	r3, r1
 8006d60:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006d64:	e008      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006d66:	bf00      	nop
 8006d68:	46020c00 	.word	0x46020c00
 8006d6c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d70:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006d74:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006d78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d86:	2300      	movs	r3, #0
 8006d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d8a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4313      	orrs	r3, r2
 8006d92:	d019      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006d94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006da0:	d105      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006da2:	4b88      	ldr	r3, [pc, #544]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	4a87      	ldr	r2, [pc, #540]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dac:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006dae:	4b85      	ldr	r3, [pc, #532]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006db0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006db4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006db8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006dc0:	4a80      	ldr	r2, [pc, #512]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006dc2:	430b      	orrs	r3, r1
 8006dc4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006dc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dda:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006dde:	460b      	mov	r3, r1
 8006de0:	4313      	orrs	r3, r2
 8006de2:	d00c      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006de4:	4b77      	ldr	r3, [pc, #476]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006dee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006df2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006df6:	4973      	ldr	r1, [pc, #460]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006dfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006e0a:	623b      	str	r3, [r7, #32]
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e10:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e14:	460b      	mov	r3, r1
 8006e16:	4313      	orrs	r3, r2
 8006e18:	d00c      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006e1a:	4b6a      	ldr	r3, [pc, #424]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006e24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e2c:	4965      	ldr	r1, [pc, #404]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006e40:	61bb      	str	r3, [r7, #24]
 8006e42:	2300      	movs	r3, #0
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	d00c      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006e50:	4b5c      	ldr	r3, [pc, #368]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e56:	f023 0218 	bic.w	r2, r3, #24
 8006e5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e62:	4958      	ldr	r1, [pc, #352]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006e6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006e76:	613b      	str	r3, [r7, #16]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006e80:	460b      	mov	r3, r1
 8006e82:	4313      	orrs	r3, r2
 8006e84:	d032      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006e86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e92:	d105      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e94:	4b4b      	ldr	r3, [pc, #300]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e98:	4a4a      	ldr	r2, [pc, #296]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e9e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006ea0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ea4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ea8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006eac:	d108      	bne.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006eae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f001 fe4b 	bl	8008b50 <RCCEx_PLL2_Config>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8006ec0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10d      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006eca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ece:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ed2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ed6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006eda:	493a      	ldr	r1, [pc, #232]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006ee2:	e003      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ee8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006eec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006ef8:	60bb      	str	r3, [r7, #8]
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f02:	460b      	mov	r3, r1
 8006f04:	4313      	orrs	r3, r2
 8006f06:	d03a      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006f08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f14:	d00e      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006f16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f1a:	d815      	bhi.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d017      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8006f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f24:	d110      	bne.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f26:	4b27      	ldr	r3, [pc, #156]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2a:	4a26      	ldr	r2, [pc, #152]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f30:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006f32:	e00e      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f38:	3308      	adds	r3, #8
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f001 fe08 	bl	8008b50 <RCCEx_PLL2_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006f46:	e004      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006f4e:	e000      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8006f50:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006f52:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10d      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f60:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006f64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f6c:	4915      	ldr	r1, [pc, #84]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006f74:	e003      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f76:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006f7a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006f7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006f8a:	603b      	str	r3, [r7, #0]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	607b      	str	r3, [r7, #4]
 8006f90:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f94:	460b      	mov	r3, r1
 8006f96:	4313      	orrs	r3, r2
 8006f98:	d00c      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fa0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006fa8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006fac:	4905      	ldr	r1, [pc, #20]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006fb4:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	37e0      	adds	r7, #224	@ 0xe0
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fc2:	bf00      	nop
 8006fc4:	46020c00 	.word	0x46020c00

08006fc8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b089      	sub	sp, #36	@ 0x24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006fd0:	4ba6      	ldr	r3, [pc, #664]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006fda:	4ba4      	ldr	r3, [pc, #656]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006fe4:	4ba1      	ldr	r3, [pc, #644]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe8:	0a1b      	lsrs	r3, r3, #8
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	3301      	adds	r3, #1
 8006ff0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006ff2:	4b9e      	ldr	r3, [pc, #632]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff6:	091b      	lsrs	r3, r3, #4
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006ffe:	4b9b      	ldr	r3, [pc, #620]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007002:	08db      	lsrs	r3, r3, #3
 8007004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	fb02 f303 	mul.w	r3, r2, r3
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007016:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d062      	beq.n	80070e6 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b03      	cmp	r3, #3
 8007024:	f200 8081 	bhi.w	800712a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d024      	beq.n	8007078 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d17a      	bne.n	800712a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007046:	4b89      	ldr	r3, [pc, #548]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800704a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007056:	ed97 6a02 	vldr	s12, [r7, #8]
 800705a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800705e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007062:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800706a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800706e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007072:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007076:	e08f      	b.n	8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007078:	4b7c      	ldr	r3, [pc, #496]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d005      	beq.n	8007090 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007084:	4b79      	ldr	r3, [pc, #484]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	0f1b      	lsrs	r3, r3, #28
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	e006      	b.n	800709e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8007090:	4b76      	ldr	r3, [pc, #472]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007096:	041b      	lsls	r3, r3, #16
 8007098:	0f1b      	lsrs	r3, r3, #28
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	4a76      	ldr	r2, [pc, #472]	@ (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80070a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a4:	ee07 3a90 	vmov	s15, r3
 80070a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	ee07 3a90 	vmov	s15, r3
 80070c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80070c8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80070cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80070dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070e4:	e058      	b.n	8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	ee07 3a90 	vmov	s15, r3
 80070ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80070f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070f8:	4b5c      	ldr	r3, [pc, #368]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007100:	ee07 3a90 	vmov	s15, r3
 8007104:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007108:	ed97 6a02 	vldr	s12, [r7, #8]
 800710c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007110:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007114:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007118:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800711c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007124:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007128:	e036      	b.n	8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800712a:	4b50      	ldr	r3, [pc, #320]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d005      	beq.n	8007142 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8007136:	4b4d      	ldr	r3, [pc, #308]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	0f1b      	lsrs	r3, r3, #28
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	e006      	b.n	8007150 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8007142:	4b4a      	ldr	r3, [pc, #296]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007148:	041b      	lsls	r3, r3, #16
 800714a:	0f1b      	lsrs	r3, r3, #28
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	4a49      	ldr	r2, [pc, #292]	@ (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	ee07 3a90 	vmov	s15, r3
 8007164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007176:	ed97 6a02 	vldr	s12, [r7, #8]
 800717a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800717e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800718a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007196:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007198:	4b34      	ldr	r3, [pc, #208]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800719a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d017      	beq.n	80071d4 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80071a4:	4b31      	ldr	r3, [pc, #196]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80071a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071a8:	0a5b      	lsrs	r3, r3, #9
 80071aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80071b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80071be:	edd7 6a07 	vldr	s13, [r7, #28]
 80071c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ca:	ee17 2a90 	vmov	r2, s15
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	e002      	b.n	80071da <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80071da:	4b24      	ldr	r3, [pc, #144]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80071dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d017      	beq.n	8007216 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80071e6:	4b21      	ldr	r3, [pc, #132]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80071e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ea:	0c1b      	lsrs	r3, r3, #16
 80071ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071f0:	ee07 3a90 	vmov	s15, r3
 80071f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80071f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071fc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007200:	edd7 6a07 	vldr	s13, [r7, #28]
 8007204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800720c:	ee17 2a90 	vmov	r2, s15
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	605a      	str	r2, [r3, #4]
 8007214:	e002      	b.n	800721c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800721c:	4b13      	ldr	r3, [pc, #76]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800721e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007220:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d017      	beq.n	8007258 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007228:	4b10      	ldr	r3, [pc, #64]	@ (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800722a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800722c:	0e1b      	lsrs	r3, r3, #24
 800722e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800723a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800723e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007242:	edd7 6a07 	vldr	s13, [r7, #28]
 8007246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800724a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800724e:	ee17 2a90 	vmov	r2, s15
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007256:	e002      	b.n	800725e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	609a      	str	r2, [r3, #8]
}
 800725e:	bf00      	nop
 8007260:	3724      	adds	r7, #36	@ 0x24
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	46020c00 	.word	0x46020c00
 8007270:	4b742400 	.word	0x4b742400
 8007274:	46000000 	.word	0x46000000
 8007278:	0800b654 	.word	0x0800b654

0800727c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800727c:	b480      	push	{r7}
 800727e:	b089      	sub	sp, #36	@ 0x24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007284:	4ba6      	ldr	r3, [pc, #664]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800728e:	4ba4      	ldr	r3, [pc, #656]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8007298:	4ba1      	ldr	r3, [pc, #644]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800729a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729c:	0a1b      	lsrs	r3, r3, #8
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	3301      	adds	r3, #1
 80072a4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80072a6:	4b9e      	ldr	r3, [pc, #632]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072aa:	091b      	lsrs	r3, r3, #4
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80072b2:	4b9b      	ldr	r3, [pc, #620]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b6:	08db      	lsrs	r3, r3, #3
 80072b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	fb02 f303 	mul.w	r3, r2, r3
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ca:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d062      	beq.n	800739a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	f200 8081 	bhi.w	80073de <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d024      	beq.n	800732c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d17a      	bne.n	80073de <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007524 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80072f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fa:	4b89      	ldr	r3, [pc, #548]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800730a:	ed97 6a02 	vldr	s12, [r7, #8]
 800730e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007528 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007312:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007316:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800731a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800731e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007326:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800732a:	e08f      	b.n	800744c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800732c:	4b7c      	ldr	r3, [pc, #496]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d005      	beq.n	8007344 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007338:	4b79      	ldr	r3, [pc, #484]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	0f1b      	lsrs	r3, r3, #28
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	e006      	b.n	8007352 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8007344:	4b76      	ldr	r3, [pc, #472]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800734a:	041b      	lsls	r3, r3, #16
 800734c:	0f1b      	lsrs	r3, r3, #28
 800734e:	f003 030f 	and.w	r3, r3, #15
 8007352:	4a76      	ldr	r2, [pc, #472]	@ (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007358:	ee07 3a90 	vmov	s15, r3
 800735c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	ee07 3a90 	vmov	s15, r3
 8007374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007378:	ed97 6a02 	vldr	s12, [r7, #8]
 800737c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007528 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007380:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007384:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007388:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800738c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007394:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007398:	e058      	b.n	800744c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	ee07 3a90 	vmov	s15, r3
 80073a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007524 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80073a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ac:	4b5c      	ldr	r3, [pc, #368]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b4:	ee07 3a90 	vmov	s15, r3
 80073b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80073bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80073c0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007528 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80073c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80073c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80073cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80073d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073dc:	e036      	b.n	800744c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80073de:	4b50      	ldr	r3, [pc, #320]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d005      	beq.n	80073f6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80073ea:	4b4d      	ldr	r3, [pc, #308]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	0f1b      	lsrs	r3, r3, #28
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	e006      	b.n	8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80073f6:	4b4a      	ldr	r3, [pc, #296]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073fc:	041b      	lsls	r3, r3, #16
 80073fe:	0f1b      	lsrs	r3, r3, #28
 8007400:	f003 030f 	and.w	r3, r3, #15
 8007404:	4a49      	ldr	r2, [pc, #292]	@ (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	ee07 3a90 	vmov	s15, r3
 8007418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742a:	ed97 6a02 	vldr	s12, [r7, #8]
 800742e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007528 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800743a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800743e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007446:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800744a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800744c:	4b34      	ldr	r3, [pc, #208]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800744e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d017      	beq.n	8007488 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007458:	4b31      	ldr	r3, [pc, #196]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800745a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745c:	0a5b      	lsrs	r3, r3, #9
 800745e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800746a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800746e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007472:	edd7 6a07 	vldr	s13, [r7, #28]
 8007476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800747a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800747e:	ee17 2a90 	vmov	r2, s15
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	e002      	b.n	800748e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800748e:	4b24      	ldr	r3, [pc, #144]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d017      	beq.n	80074ca <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800749a:	4b21      	ldr	r3, [pc, #132]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800749c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800749e:	0c1b      	lsrs	r3, r3, #16
 80074a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074a4:	ee07 3a90 	vmov	s15, r3
 80074a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80074ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074b0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80074b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80074b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c0:	ee17 2a90 	vmov	r2, s15
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	605a      	str	r2, [r3, #4]
 80074c8:	e002      	b.n	80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80074d0:	4b13      	ldr	r3, [pc, #76]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d017      	beq.n	800750c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80074dc:	4b10      	ldr	r3, [pc, #64]	@ (8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e0:	0e1b      	lsrs	r3, r3, #24
 80074e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80074ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074f2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80074f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007502:	ee17 2a90 	vmov	r2, s15
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800750a:	e002      	b.n	8007512 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	609a      	str	r2, [r3, #8]
}
 8007512:	bf00      	nop
 8007514:	3724      	adds	r7, #36	@ 0x24
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	46020c00 	.word	0x46020c00
 8007524:	4b742400 	.word	0x4b742400
 8007528:	46000000 	.word	0x46000000
 800752c:	0800b654 	.word	0x0800b654

08007530 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007530:	b480      	push	{r7}
 8007532:	b089      	sub	sp, #36	@ 0x24
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007538:	4ba6      	ldr	r3, [pc, #664]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800753a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800753c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007540:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007542:	4ba4      	ldr	r3, [pc, #656]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007546:	f003 0303 	and.w	r3, r3, #3
 800754a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800754c:	4ba1      	ldr	r3, [pc, #644]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800754e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007550:	0a1b      	lsrs	r3, r3, #8
 8007552:	f003 030f 	and.w	r3, r3, #15
 8007556:	3301      	adds	r3, #1
 8007558:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800755a:	4b9e      	ldr	r3, [pc, #632]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800755c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755e:	091b      	lsrs	r3, r3, #4
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007566:	4b9b      	ldr	r3, [pc, #620]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800756a:	08db      	lsrs	r3, r3, #3
 800756c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	fb02 f303 	mul.w	r3, r2, r3
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b03      	cmp	r3, #3
 8007586:	d062      	beq.n	800764e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2b03      	cmp	r3, #3
 800758c:	f200 8081 	bhi.w	8007692 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d024      	beq.n	80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2b02      	cmp	r3, #2
 800759a:	d17a      	bne.n	8007692 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80077d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80075aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ae:	4b89      	ldr	r3, [pc, #548]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80075b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80075be:	ed97 6a02 	vldr	s12, [r7, #8]
 80075c2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80075c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80075ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80075ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80075d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075da:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80075de:	e08f      	b.n	8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80075e0:	4b7c      	ldr	r3, [pc, #496]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80075ec:	4b79      	ldr	r3, [pc, #484]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	0f1b      	lsrs	r3, r3, #28
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	e006      	b.n	8007606 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80075f8:	4b76      	ldr	r3, [pc, #472]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80075fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075fe:	041b      	lsls	r3, r3, #16
 8007600:	0f1b      	lsrs	r3, r3, #28
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	4a76      	ldr	r2, [pc, #472]	@ (80077e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8007608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800760c:	ee07 3a90 	vmov	s15, r3
 8007610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	ee07 3a90 	vmov	s15, r3
 8007628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007630:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007640:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007648:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800764c:	e058      	b.n	8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	ee07 3a90 	vmov	s15, r3
 8007654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007658:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80077d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800765c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007660:	4b5c      	ldr	r3, [pc, #368]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007668:	ee07 3a90 	vmov	s15, r3
 800766c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007670:	ed97 6a02 	vldr	s12, [r7, #8]
 8007674:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007678:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800767c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007680:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007684:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007690:	e036      	b.n	8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007692:	4b50      	ldr	r3, [pc, #320]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800769e:	4b4d      	ldr	r3, [pc, #308]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	0f1b      	lsrs	r3, r3, #28
 80076a4:	f003 030f 	and.w	r3, r3, #15
 80076a8:	e006      	b.n	80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80076aa:	4b4a      	ldr	r3, [pc, #296]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076b0:	041b      	lsls	r3, r3, #16
 80076b2:	0f1b      	lsrs	r3, r3, #28
 80076b4:	f003 030f 	and.w	r3, r3, #15
 80076b8:	4a49      	ldr	r2, [pc, #292]	@ (80077e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80076ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	ee07 3a90 	vmov	s15, r3
 80076cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076de:	ed97 6a02 	vldr	s12, [r7, #8]
 80076e2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80076e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80076f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076fe:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007700:	4b34      	ldr	r3, [pc, #208]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d017      	beq.n	800773c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800770c:	4b31      	ldr	r3, [pc, #196]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800770e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007710:	0a5b      	lsrs	r3, r3, #9
 8007712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800771e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007722:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007726:	edd7 6a07 	vldr	s13, [r7, #28]
 800772a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800772e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007732:	ee17 2a90 	vmov	r2, s15
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e002      	b.n	8007742 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007742:	4b24      	ldr	r3, [pc, #144]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d017      	beq.n	800777e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800774e:	4b21      	ldr	r3, [pc, #132]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007752:	0c1b      	lsrs	r3, r3, #16
 8007754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007758:	ee07 3a90 	vmov	s15, r3
 800775c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007760:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007764:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007768:	edd7 6a07 	vldr	s13, [r7, #28]
 800776c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007774:	ee17 2a90 	vmov	r2, s15
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	605a      	str	r2, [r3, #4]
 800777c:	e002      	b.n	8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007784:	4b13      	ldr	r3, [pc, #76]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007788:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d017      	beq.n	80077c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007790:	4b10      	ldr	r3, [pc, #64]	@ (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007794:	0e1b      	lsrs	r3, r3, #24
 8007796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80077a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077a6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077b6:	ee17 2a90 	vmov	r2, s15
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80077be:	e002      	b.n	80077c6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	609a      	str	r2, [r3, #8]
}
 80077c6:	bf00      	nop
 80077c8:	3724      	adds	r7, #36	@ 0x24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	46020c00 	.word	0x46020c00
 80077d8:	4b742400 	.word	0x4b742400
 80077dc:	46000000 	.word	0x46000000
 80077e0:	0800b654 	.word	0x0800b654

080077e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08e      	sub	sp, #56	@ 0x38
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80077ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077f2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80077f6:	430b      	orrs	r3, r1
 80077f8:	d145      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80077fa:	4baa      	ldr	r3, [pc, #680]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80077fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007804:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007806:	4ba7      	ldr	r3, [pc, #668]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b02      	cmp	r3, #2
 8007812:	d108      	bne.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800781a:	d104      	bne.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800781c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007820:	637b      	str	r3, [r7, #52]	@ 0x34
 8007822:	f001 b987 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007826:	4b9f      	ldr	r3, [pc, #636]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800782c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007830:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007834:	d114      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800783c:	d110      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800783e:	4b99      	ldr	r3, [pc, #612]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007848:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800784c:	d103      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800784e:	23fa      	movs	r3, #250	@ 0xfa
 8007850:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007852:	f001 b96f 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007856:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800785a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800785c:	f001 b96a 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007860:	4b90      	ldr	r3, [pc, #576]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007868:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800786c:	d107      	bne.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007874:	d103      	bne.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8007876:	4b8c      	ldr	r3, [pc, #560]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007878:	637b      	str	r3, [r7, #52]	@ 0x34
 800787a:	f001 b95b 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	637b      	str	r3, [r7, #52]	@ 0x34
 8007882:	f001 b957 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800788a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800788e:	430b      	orrs	r3, r1
 8007890:	d151      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007892:	4b84      	ldr	r3, [pc, #528]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007894:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007898:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800789c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	2b80      	cmp	r3, #128	@ 0x80
 80078a2:	d035      	beq.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80078a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a6:	2b80      	cmp	r3, #128	@ 0x80
 80078a8:	d841      	bhi.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80078aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ac:	2b60      	cmp	r3, #96	@ 0x60
 80078ae:	d02a      	beq.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80078b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b2:	2b60      	cmp	r3, #96	@ 0x60
 80078b4:	d83b      	bhi.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	2b40      	cmp	r3, #64	@ 0x40
 80078ba:	d009      	beq.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	2b40      	cmp	r3, #64	@ 0x40
 80078c0:	d835      	bhi.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00c      	beq.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80078c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ca:	2b20      	cmp	r3, #32
 80078cc:	d012      	beq.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80078ce:	e02e      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7ff fb77 	bl	8006fc8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80078da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078de:	f001 b929 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078e2:	f107 0318 	add.w	r3, r7, #24
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff fcc8 	bl	800727c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078f0:	f001 b920 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078f4:	f107 030c 	add.w	r3, r7, #12
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff fe19 	bl	8007530 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007902:	f001 b917 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007906:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800790a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800790c:	f001 b912 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007910:	4b64      	ldr	r3, [pc, #400]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800791c:	d103      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800791e:	4b63      	ldr	r3, [pc, #396]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007920:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007922:	f001 b907 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800792a:	f001 b903 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007932:	f001 b8ff 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800793a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800793e:	430b      	orrs	r3, r1
 8007940:	d158      	bne.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007942:	4b58      	ldr	r3, [pc, #352]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007944:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007948:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800794c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800794e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007954:	d03b      	beq.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800795c:	d846      	bhi.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800795e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007960:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007964:	d02e      	beq.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800796c:	d83e      	bhi.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800796e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007974:	d00b      	beq.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800797c:	d836      	bhi.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800797e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00d      	beq.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800798a:	d012      	beq.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800798c:	e02e      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800798e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007992:	4618      	mov	r0, r3
 8007994:	f7ff fb18 	bl	8006fc8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800799c:	f001 b8ca 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079a0:	f107 0318 	add.w	r3, r7, #24
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7ff fc69 	bl	800727c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079ae:	f001 b8c1 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079b2:	f107 030c 	add.w	r3, r7, #12
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff fdba 	bl	8007530 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079c0:	f001 b8b8 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80079c4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80079c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079ca:	f001 b8b3 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079ce:	4b35      	ldr	r3, [pc, #212]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079da:	d103      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80079dc:	4b33      	ldr	r3, [pc, #204]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80079de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079e0:	f001 b8a8 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079e8:	f001 b8a4 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079f0:	f001 b8a0 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80079f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079f8:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80079fc:	430b      	orrs	r3, r1
 80079fe:	d16e      	bne.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007a00:	4b28      	ldr	r3, [pc, #160]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a06:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007a0a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007a12:	d034      	beq.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8007a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a16:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007a1a:	d85c      	bhi.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a22:	d00b      	beq.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a2a:	d854      	bhi.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d016      	beq.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8007a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a38:	d009      	beq.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007a3a:	e04c      	b.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff fac1 	bl	8006fc8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a4a:	f001 b873 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a4e:	f107 0318 	add.w	r3, r7, #24
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7ff fc12 	bl	800727c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a5c:	f001 b86a 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007a60:	4b10      	ldr	r3, [pc, #64]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a6c:	d103      	bne.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8007a6e:	4b10      	ldr	r3, [pc, #64]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007a70:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a72:	f001 b85f 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a7a:	f001 b85b 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a7e:	4b09      	ldr	r3, [pc, #36]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b20      	cmp	r3, #32
 8007a88:	d121      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a8a:	4b06      	ldr	r3, [pc, #24]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00e      	beq.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8007a96:	4b03      	ldr	r3, [pc, #12]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	0e1b      	lsrs	r3, r3, #24
 8007a9c:	f003 030f 	and.w	r3, r3, #15
 8007aa0:	e00f      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007aa2:	bf00      	nop
 8007aa4:	46020c00 	.word	0x46020c00
 8007aa8:	0007a120 	.word	0x0007a120
 8007aac:	00f42400 	.word	0x00f42400
 8007ab0:	02dc6c00 	.word	0x02dc6c00
 8007ab4:	4ba7      	ldr	r3, [pc, #668]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007ab6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007aba:	041b      	lsls	r3, r3, #16
 8007abc:	0e1b      	lsrs	r3, r3, #24
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	4aa5      	ldr	r2, [pc, #660]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ac8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007aca:	f001 b833 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ad2:	f001 b82f 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ada:	f001 b82b 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ae2:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	d17f      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007aea:	4b9a      	ldr	r3, [pc, #616]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007aec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007af4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d165      	bne.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007afc:	4b95      	ldr	r3, [pc, #596]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b02:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007b06:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8007b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007b0e:	d034      	beq.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b12:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007b16:	d853      	bhi.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b1e:	d00b      	beq.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8007b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b26:	d84b      	bhi.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d016      	beq.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b34:	d009      	beq.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007b36:	e043      	b.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff fa43 	bl	8006fc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b44:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007b46:	f000 bff5 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b4a:	f107 0318 	add.w	r3, r7, #24
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff fb94 	bl	800727c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007b58:	f000 bfec 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007b5c:	4b7d      	ldr	r3, [pc, #500]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b68:	d103      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8007b6a:	4b7c      	ldr	r3, [pc, #496]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007b6c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007b6e:	f000 bfe1 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007b76:	f000 bfdd 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b7a:	4b76      	ldr	r3, [pc, #472]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b20      	cmp	r3, #32
 8007b84:	d118      	bne.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b86:	4b73      	ldr	r3, [pc, #460]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007b92:	4b70      	ldr	r3, [pc, #448]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	0e1b      	lsrs	r3, r3, #24
 8007b98:	f003 030f 	and.w	r3, r3, #15
 8007b9c:	e006      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8007b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ba4:	041b      	lsls	r3, r3, #16
 8007ba6:	0e1b      	lsrs	r3, r3, #24
 8007ba8:	f003 030f 	and.w	r3, r3, #15
 8007bac:	4a6a      	ldr	r2, [pc, #424]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bb2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007bb4:	f000 bfbe 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007bbc:	f000 bfba 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007bc4:	f000 bfb6 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bce:	d108      	bne.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7ff f9f7 	bl	8006fc8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bde:	f000 bfa9 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007be6:	f000 bfa5 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bee:	1e51      	subs	r1, r2, #1
 8007bf0:	430b      	orrs	r3, r1
 8007bf2:	d136      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007bf4:	4b57      	ldr	r3, [pc, #348]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d104      	bne.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007c06:	f7fe fb55 	bl	80062b4 <HAL_RCC_GetPCLK2Freq>
 8007c0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c0c:	f000 bf92 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d104      	bne.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c16:	f7fe fa1d 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8007c1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c1c:	f000 bf8a 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007c20:	4b4c      	ldr	r3, [pc, #304]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c2c:	d106      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d103      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8007c34:	4b4a      	ldr	r3, [pc, #296]	@ (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c38:	f000 bf7c 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007c3c:	4b45      	ldr	r3, [pc, #276]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d107      	bne.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d104      	bne.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8007c50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c56:	f000 bf6d 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c5e:	f000 bf69 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c66:	1e91      	subs	r1, r2, #2
 8007c68:	430b      	orrs	r3, r1
 8007c6a:	d136      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007c6c:	4b39      	ldr	r3, [pc, #228]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c72:	f003 030c 	and.w	r3, r3, #12
 8007c76:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d104      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c7e:	f7fe fb05 	bl	800628c <HAL_RCC_GetPCLK1Freq>
 8007c82:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c84:	f000 bf56 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	d104      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c8e:	f7fe f9e1 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8007c92:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c94:	f000 bf4e 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007c98:	4b2e      	ldr	r3, [pc, #184]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ca4:	d106      	bne.n	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d103      	bne.n	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8007cac:	4b2c      	ldr	r3, [pc, #176]	@ (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cb0:	f000 bf40 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007cb4:	4b27      	ldr	r3, [pc, #156]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d107      	bne.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc4:	2b0c      	cmp	r3, #12
 8007cc6:	d104      	bne.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8007cc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cce:	f000 bf31 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cd6:	f000 bf2d 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cde:	1f11      	subs	r1, r2, #4
 8007ce0:	430b      	orrs	r3, r1
 8007ce2:	d13f      	bne.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007cee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d104      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007cf6:	f7fe fac9 	bl	800628c <HAL_RCC_GetPCLK1Freq>
 8007cfa:	6378      	str	r0, [r7, #52]	@ 0x34
 8007cfc:	f000 bf1a 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d02:	2b10      	cmp	r3, #16
 8007d04:	d104      	bne.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d06:	f7fe f9a5 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8007d0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d0c:	f000 bf12 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007d10:	4b10      	ldr	r3, [pc, #64]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d1c:	d106      	bne.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d20:	2b20      	cmp	r3, #32
 8007d22:	d103      	bne.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8007d24:	4b0e      	ldr	r3, [pc, #56]	@ (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d28:	f000 bf04 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007d2c:	4b09      	ldr	r3, [pc, #36]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d107      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	2b30      	cmp	r3, #48	@ 0x30
 8007d3e:	d104      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8007d40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d46:	f000 bef5 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d4e:	f000 bef1 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007d52:	bf00      	nop
 8007d54:	46020c00 	.word	0x46020c00
 8007d58:	0800b654 	.word	0x0800b654
 8007d5c:	02dc6c00 	.word	0x02dc6c00
 8007d60:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d68:	f1a2 0108 	sub.w	r1, r2, #8
 8007d6c:	430b      	orrs	r3, r1
 8007d6e:	d136      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007d70:	4ba4      	ldr	r3, [pc, #656]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d7a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d104      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d82:	f7fe fa83 	bl	800628c <HAL_RCC_GetPCLK1Freq>
 8007d86:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d88:	f000 bed4 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8e:	2b40      	cmp	r3, #64	@ 0x40
 8007d90:	d104      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d92:	f7fe f95f 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8007d96:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d98:	f000 becc 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007d9c:	4b99      	ldr	r3, [pc, #612]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007da4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007da8:	d106      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	2b80      	cmp	r3, #128	@ 0x80
 8007dae:	d103      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8007db0:	4b95      	ldr	r3, [pc, #596]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007db4:	f000 bebe 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007db8:	4b92      	ldr	r3, [pc, #584]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d107      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc8:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dca:	d104      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8007dcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd2:	f000 beaf 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dda:	f000 beab 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007dde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de2:	f1a2 0110 	sub.w	r1, r2, #16
 8007de6:	430b      	orrs	r3, r1
 8007de8:	d139      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007dea:	4b86      	ldr	r3, [pc, #536]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007df0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007df4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007dfc:	f7fe fa46 	bl	800628c <HAL_RCC_GetPCLK1Freq>
 8007e00:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e02:	f000 be97 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e0c:	d104      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e0e:	f7fe f921 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8007e12:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e14:	f000 be8e 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007e18:	4b7a      	ldr	r3, [pc, #488]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e24:	d107      	bne.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8007e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e2c:	d103      	bne.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8007e2e:	4b76      	ldr	r3, [pc, #472]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e32:	f000 be7f 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007e36:	4b73      	ldr	r3, [pc, #460]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d108      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8007e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e4a:	d104      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8007e4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e52:	f000 be6f 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e5a:	f000 be6b 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e62:	f1a2 0120 	sub.w	r1, r2, #32
 8007e66:	430b      	orrs	r3, r1
 8007e68:	d158      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007e6a:	4b66      	ldr	r3, [pc, #408]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e70:	f003 0307 	and.w	r3, r3, #7
 8007e74:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d104      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007e7c:	f7fe fa2e 	bl	80062dc <HAL_RCC_GetPCLK3Freq>
 8007e80:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e82:	f000 be57 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d104      	bne.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e8c:	f7fe f8e2 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8007e90:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e92:	f000 be4f 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007e96:	4b5b      	ldr	r3, [pc, #364]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ea2:	d106      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d103      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8007eaa:	4b57      	ldr	r3, [pc, #348]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eae:	f000 be41 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007eb2:	4b54      	ldr	r3, [pc, #336]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d107      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d104      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8007ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ecc:	f000 be32 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007ed0:	4b4c      	ldr	r3, [pc, #304]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0320 	and.w	r3, r3, #32
 8007ed8:	2b20      	cmp	r3, #32
 8007eda:	d11b      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8007edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	d118      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ee2:	4b48      	ldr	r3, [pc, #288]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8007eee:	4b45      	ldr	r3, [pc, #276]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	0e1b      	lsrs	r3, r3, #24
 8007ef4:	f003 030f 	and.w	r3, r3, #15
 8007ef8:	e006      	b.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007efa:	4b42      	ldr	r3, [pc, #264]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007efc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f00:	041b      	lsls	r3, r3, #16
 8007f02:	0e1b      	lsrs	r3, r3, #24
 8007f04:	f003 030f 	and.w	r3, r3, #15
 8007f08:	4a40      	ldr	r2, [pc, #256]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f10:	f000 be10 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f18:	f000 be0c 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f20:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007f24:	430b      	orrs	r3, r1
 8007f26:	d173      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007f28:	4b36      	ldr	r3, [pc, #216]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f2e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007f32:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f3a:	d104      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f3c:	f7fe f88a 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8007f40:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f42:	f000 bdf7 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f4c:	d108      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f4e:	f107 0318 	add.w	r3, r7, #24
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff f992 	bl	800727c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f5c:	f000 bdea 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d104      	bne.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007f66:	f7fe f977 	bl	8006258 <HAL_RCC_GetHCLKFreq>
 8007f6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f6c:	f000 bde2 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f72:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007f76:	d122      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007f78:	4b22      	ldr	r3, [pc, #136]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0320 	and.w	r3, r3, #32
 8007f80:	2b20      	cmp	r3, #32
 8007f82:	d118      	bne.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f84:	4b1f      	ldr	r3, [pc, #124]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d005      	beq.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8007f90:	4b1c      	ldr	r3, [pc, #112]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	0e1b      	lsrs	r3, r3, #24
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	e006      	b.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007f9c:	4b19      	ldr	r3, [pc, #100]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007fa2:	041b      	lsls	r3, r3, #16
 8007fa4:	0e1b      	lsrs	r3, r3, #24
 8007fa6:	f003 030f 	and.w	r3, r3, #15
 8007faa:	4a18      	ldr	r2, [pc, #96]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fb2:	f000 bdbf 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fba:	f000 bdbb 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007fbe:	4b11      	ldr	r3, [pc, #68]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fca:	d107      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007fd2:	d103      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8007fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fd8:	f000 bdac 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007fdc:	4b09      	ldr	r3, [pc, #36]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fe8:	d107      	bne.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ff0:	d103      	bne.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8007ff2:	4b05      	ldr	r3, [pc, #20]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff6:	f000 bd9d 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ffe:	f000 bd99 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008002:	bf00      	nop
 8008004:	46020c00 	.word	0x46020c00
 8008008:	00f42400 	.word	0x00f42400
 800800c:	0800b654 	.word	0x0800b654
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008014:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008018:	430b      	orrs	r3, r1
 800801a:	d158      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800801c:	4bad      	ldr	r3, [pc, #692]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800801e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802a:	2b04      	cmp	r3, #4
 800802c:	d84b      	bhi.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800802e:	a201      	add	r2, pc, #4	@ (adr r2, 8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008034:	0800806d 	.word	0x0800806d
 8008038:	08008049 	.word	0x08008049
 800803c:	0800805b 	.word	0x0800805b
 8008040:	08008077 	.word	0x08008077
 8008044:	08008081 	.word	0x08008081
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe ffbb 	bl	8006fc8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008054:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008056:	f000 bd6d 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800805a:	f107 030c 	add.w	r3, r7, #12
 800805e:	4618      	mov	r0, r3
 8008060:	f7ff fa66 	bl	8007530 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008068:	f000 bd64 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800806c:	f7fe f8f4 	bl	8006258 <HAL_RCC_GetHCLKFreq>
 8008070:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008072:	f000 bd5f 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008076:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800807a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800807c:	f000 bd5a 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008080:	4b94      	ldr	r3, [pc, #592]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0320 	and.w	r3, r3, #32
 8008088:	2b20      	cmp	r3, #32
 800808a:	d118      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800808c:	4b91      	ldr	r3, [pc, #580]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d005      	beq.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8008098:	4b8e      	ldr	r3, [pc, #568]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	0e1b      	lsrs	r3, r3, #24
 800809e:	f003 030f 	and.w	r3, r3, #15
 80080a2:	e006      	b.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80080a4:	4b8b      	ldr	r3, [pc, #556]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80080a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080aa:	041b      	lsls	r3, r3, #16
 80080ac:	0e1b      	lsrs	r3, r3, #24
 80080ae:	f003 030f 	and.w	r3, r3, #15
 80080b2:	4a89      	ldr	r2, [pc, #548]	@ (80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80080b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080b8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80080ba:	f000 bd3b 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080c2:	f000 bd37 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080ca:	f000 bd33 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80080ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d2:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80080d6:	430b      	orrs	r3, r1
 80080d8:	d167      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80080da:	4b7e      	ldr	r3, [pc, #504]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80080dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080e0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80080e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80080e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080ec:	d036      	beq.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80080ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080f4:	d855      	bhi.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80080f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080fc:	d029      	beq.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80080fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008100:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008104:	d84d      	bhi.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8008106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008108:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800810c:	d013      	beq.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008114:	d845      	bhi.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	2b00      	cmp	r3, #0
 800811a:	d015      	beq.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800811c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008122:	d13e      	bne.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe ff4d 	bl	8006fc8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800812e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008130:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008132:	f000 bcff 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008136:	f107 030c 	add.w	r3, r7, #12
 800813a:	4618      	mov	r0, r3
 800813c:	f7ff f9f8 	bl	8007530 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008144:	f000 bcf6 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008148:	f7fe f886 	bl	8006258 <HAL_RCC_GetHCLKFreq>
 800814c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800814e:	f000 bcf1 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008152:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008156:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008158:	f000 bcec 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800815c:	4b5d      	ldr	r3, [pc, #372]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b20      	cmp	r3, #32
 8008166:	d118      	bne.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008168:	4b5a      	ldr	r3, [pc, #360]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d005      	beq.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8008174:	4b57      	ldr	r3, [pc, #348]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	0e1b      	lsrs	r3, r3, #24
 800817a:	f003 030f 	and.w	r3, r3, #15
 800817e:	e006      	b.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8008180:	4b54      	ldr	r3, [pc, #336]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008182:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008186:	041b      	lsls	r3, r3, #16
 8008188:	0e1b      	lsrs	r3, r3, #24
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	4a52      	ldr	r2, [pc, #328]	@ (80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008194:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008196:	f000 bccd 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800819e:	f000 bcc9 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081a6:	f000 bcc5 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80081aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ae:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80081b2:	430b      	orrs	r3, r1
 80081b4:	d14c      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80081b6:	4b47      	ldr	r3, [pc, #284]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80081c0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80081c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d104      	bne.n	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80081c8:	f7fe f860 	bl	800628c <HAL_RCC_GetPCLK1Freq>
 80081cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80081ce:	f000 bcb1 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80081d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081d8:	d104      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80081da:	f7fd ff3b 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 80081de:	6378      	str	r0, [r7, #52]	@ 0x34
 80081e0:	f000 bca8 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80081e4:	4b3b      	ldr	r3, [pc, #236]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081f0:	d107      	bne.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081f8:	d103      	bne.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80081fa:	4b38      	ldr	r3, [pc, #224]	@ (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80081fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081fe:	f000 bc99 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8008202:	4b34      	ldr	r3, [pc, #208]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0320 	and.w	r3, r3, #32
 800820a:	2b20      	cmp	r3, #32
 800820c:	d11c      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800820e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008210:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008214:	d118      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008216:	4b2f      	ldr	r3, [pc, #188]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d005      	beq.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8008222:	4b2c      	ldr	r3, [pc, #176]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	0e1b      	lsrs	r3, r3, #24
 8008228:	f003 030f 	and.w	r3, r3, #15
 800822c:	e006      	b.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800822e:	4b29      	ldr	r3, [pc, #164]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008234:	041b      	lsls	r3, r3, #16
 8008236:	0e1b      	lsrs	r3, r3, #24
 8008238:	f003 030f 	and.w	r3, r3, #15
 800823c:	4a26      	ldr	r2, [pc, #152]	@ (80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800823e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008242:	637b      	str	r3, [r7, #52]	@ 0x34
 8008244:	f000 bc76 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	637b      	str	r3, [r7, #52]	@ 0x34
 800824c:	f000 bc72 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008254:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8008258:	430b      	orrs	r3, r1
 800825a:	d152      	bne.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800825c:	4b1d      	ldr	r3, [pc, #116]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800825e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008262:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008266:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826a:	2b00      	cmp	r3, #0
 800826c:	d104      	bne.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800826e:	f7fe f80d 	bl	800628c <HAL_RCC_GetPCLK1Freq>
 8008272:	6378      	str	r0, [r7, #52]	@ 0x34
 8008274:	f000 bc5e 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8008278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800827e:	d104      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008280:	f7fd fee8 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8008284:	6378      	str	r0, [r7, #52]	@ 0x34
 8008286:	f000 bc55 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800828a:	4b12      	ldr	r3, [pc, #72]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008296:	d107      	bne.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8008298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800829e:	d103      	bne.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 80082a0:	4b0e      	ldr	r3, [pc, #56]	@ (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80082a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082a4:	f000 bc46 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80082a8:	4b0a      	ldr	r3, [pc, #40]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0320 	and.w	r3, r3, #32
 80082b0:	2b20      	cmp	r3, #32
 80082b2:	d122      	bne.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 80082b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082ba:	d11e      	bne.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082bc:	4b05      	ldr	r3, [pc, #20]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 80082c8:	4b02      	ldr	r3, [pc, #8]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	0e1b      	lsrs	r3, r3, #24
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	e00c      	b.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 80082d4:	46020c00 	.word	0x46020c00
 80082d8:	0800b654 	.word	0x0800b654
 80082dc:	00f42400 	.word	0x00f42400
 80082e0:	4ba1      	ldr	r3, [pc, #644]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80082e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082e6:	041b      	lsls	r3, r3, #16
 80082e8:	0e1b      	lsrs	r3, r3, #24
 80082ea:	f003 030f 	and.w	r3, r3, #15
 80082ee:	4a9f      	ldr	r2, [pc, #636]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082f6:	f000 bc1d 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80082fe:	f000 bc19 	b.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8008302:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008306:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800830a:	430b      	orrs	r3, r1
 800830c:	d151      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800830e:	4b96      	ldr	r3, [pc, #600]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008310:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008314:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008318:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800831a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831c:	2bc0      	cmp	r3, #192	@ 0xc0
 800831e:	d024      	beq.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008322:	2bc0      	cmp	r3, #192	@ 0xc0
 8008324:	d842      	bhi.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8008326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008328:	2b80      	cmp	r3, #128	@ 0x80
 800832a:	d00d      	beq.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800832c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832e:	2b80      	cmp	r3, #128	@ 0x80
 8008330:	d83c      	bhi.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8008332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8008338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833a:	2b40      	cmp	r3, #64	@ 0x40
 800833c:	d011      	beq.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800833e:	e035      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8008340:	f7fd ffcc 	bl	80062dc <HAL_RCC_GetPCLK3Freq>
 8008344:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008346:	e3f5      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008348:	4b87      	ldr	r3, [pc, #540]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008354:	d102      	bne.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8008356:	4b86      	ldr	r3, [pc, #536]	@ (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008358:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800835a:	e3eb      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008360:	e3e8      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008362:	f7fd fe77 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8008366:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008368:	e3e4      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800836a:	4b7f      	ldr	r3, [pc, #508]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0320 	and.w	r3, r3, #32
 8008372:	2b20      	cmp	r3, #32
 8008374:	d117      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008376:	4b7c      	ldr	r3, [pc, #496]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d005      	beq.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8008382:	4b79      	ldr	r3, [pc, #484]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	0e1b      	lsrs	r3, r3, #24
 8008388:	f003 030f 	and.w	r3, r3, #15
 800838c:	e006      	b.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800838e:	4b76      	ldr	r3, [pc, #472]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008390:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008394:	041b      	lsls	r3, r3, #16
 8008396:	0e1b      	lsrs	r3, r3, #24
 8008398:	f003 030f 	and.w	r3, r3, #15
 800839c:	4a73      	ldr	r2, [pc, #460]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800839e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80083a4:	e3c6      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80083a6:	2300      	movs	r3, #0
 80083a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083aa:	e3c3      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083b0:	e3c0      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80083b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083b6:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80083ba:	430b      	orrs	r3, r1
 80083bc:	d147      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80083be:	4b6a      	ldr	r3, [pc, #424]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80083c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80083ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d103      	bne.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80083d0:	f7fd ff5c 	bl	800628c <HAL_RCC_GetPCLK1Freq>
 80083d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80083d6:	e3ad      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80083d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083de:	d103      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80083e0:	f7fd fe38 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 80083e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80083e6:	e3a5      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80083e8:	4b5f      	ldr	r3, [pc, #380]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083f4:	d106      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80083f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083fc:	d102      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 80083fe:	4b5c      	ldr	r3, [pc, #368]	@ (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008400:	637b      	str	r3, [r7, #52]	@ 0x34
 8008402:	e397      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8008404:	4b58      	ldr	r3, [pc, #352]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0320 	and.w	r3, r3, #32
 800840c:	2b20      	cmp	r3, #32
 800840e:	d11b      	bne.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8008410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008412:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008416:	d117      	bne.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008418:	4b53      	ldr	r3, [pc, #332]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d005      	beq.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8008424:	4b50      	ldr	r3, [pc, #320]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	0e1b      	lsrs	r3, r3, #24
 800842a:	f003 030f 	and.w	r3, r3, #15
 800842e:	e006      	b.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8008430:	4b4d      	ldr	r3, [pc, #308]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008432:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008436:	041b      	lsls	r3, r3, #16
 8008438:	0e1b      	lsrs	r3, r3, #24
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	4a4b      	ldr	r2, [pc, #300]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008444:	637b      	str	r3, [r7, #52]	@ 0x34
 8008446:	e375      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8008448:	2300      	movs	r3, #0
 800844a:	637b      	str	r3, [r7, #52]	@ 0x34
 800844c:	e372      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800844e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008452:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008456:	430b      	orrs	r3, r1
 8008458:	d164      	bne.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800845a:	4b43      	ldr	r3, [pc, #268]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800845c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008460:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008464:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8008466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008468:	2b00      	cmp	r3, #0
 800846a:	d120      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800846c:	4b3e      	ldr	r3, [pc, #248]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b20      	cmp	r3, #32
 8008476:	d117      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008478:	4b3b      	ldr	r3, [pc, #236]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d005      	beq.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8008484:	4b38      	ldr	r3, [pc, #224]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	0e1b      	lsrs	r3, r3, #24
 800848a:	f003 030f 	and.w	r3, r3, #15
 800848e:	e006      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8008490:	4b35      	ldr	r3, [pc, #212]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008496:	041b      	lsls	r3, r3, #16
 8008498:	0e1b      	lsrs	r3, r3, #24
 800849a:	f003 030f 	and.w	r3, r3, #15
 800849e:	4a33      	ldr	r2, [pc, #204]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80084a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a6:	e345      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80084ac:	e342      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80084ae:	4b2e      	ldr	r3, [pc, #184]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084bc:	d112      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084c4:	d10e      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084c6:	4b28      	ldr	r3, [pc, #160]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084d4:	d102      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80084d6:	23fa      	movs	r3, #250	@ 0xfa
 80084d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084da:	e32b      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80084dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80084e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084e2:	e327      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80084e4:	4b20      	ldr	r3, [pc, #128]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084f0:	d106      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80084f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084f8:	d102      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80084fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80084fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80084fe:	e319      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008500:	4b19      	ldr	r3, [pc, #100]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b02      	cmp	r3, #2
 800850c:	d107      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800850e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008510:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008514:	d103      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8008516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800851a:	637b      	str	r3, [r7, #52]	@ 0x34
 800851c:	e30a      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800851e:	2300      	movs	r3, #0
 8008520:	637b      	str	r3, [r7, #52]	@ 0x34
 8008522:	e307      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008528:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800852c:	430b      	orrs	r3, r1
 800852e:	d16b      	bne.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008530:	4b0d      	ldr	r3, [pc, #52]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008532:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008536:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800853a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800853c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853e:	2b00      	cmp	r3, #0
 8008540:	d127      	bne.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008542:	4b09      	ldr	r3, [pc, #36]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0320 	and.w	r3, r3, #32
 800854a:	2b20      	cmp	r3, #32
 800854c:	d11e      	bne.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800854e:	4b06      	ldr	r3, [pc, #24]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00c      	beq.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 800855a:	4b03      	ldr	r3, [pc, #12]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	0e1b      	lsrs	r3, r3, #24
 8008560:	f003 030f 	and.w	r3, r3, #15
 8008564:	e00d      	b.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8008566:	bf00      	nop
 8008568:	46020c00 	.word	0x46020c00
 800856c:	0800b654 	.word	0x0800b654
 8008570:	00f42400 	.word	0x00f42400
 8008574:	4b94      	ldr	r3, [pc, #592]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800857a:	041b      	lsls	r3, r3, #16
 800857c:	0e1b      	lsrs	r3, r3, #24
 800857e:	f003 030f 	and.w	r3, r3, #15
 8008582:	4a92      	ldr	r2, [pc, #584]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008588:	637b      	str	r3, [r7, #52]	@ 0x34
 800858a:	e2d3      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800858c:	2300      	movs	r3, #0
 800858e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008590:	e2d0      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008592:	4b8d      	ldr	r3, [pc, #564]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800859c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085a0:	d112      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085a8:	d10e      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085aa:	4b87      	ldr	r3, [pc, #540]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80085ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085b8:	d102      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 80085ba:	23fa      	movs	r3, #250	@ 0xfa
 80085bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085be:	e2b9      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80085c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80085c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085c6:	e2b5      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80085c8:	4b7f      	ldr	r3, [pc, #508]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085d4:	d106      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 80085d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085dc:	d102      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 80085de:	4b7c      	ldr	r3, [pc, #496]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e2:	e2a7      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80085e4:	4b78      	ldr	r3, [pc, #480]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80085e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d107      	bne.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 80085f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80085f8:	d103      	bne.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 80085fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008600:	e298      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	637b      	str	r3, [r7, #52]	@ 0x34
 8008606:	e295      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800860c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008610:	430b      	orrs	r3, r1
 8008612:	d147      	bne.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008614:	4b6c      	ldr	r3, [pc, #432]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800861a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800861e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008622:	2b00      	cmp	r3, #0
 8008624:	d103      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008626:	f7fd fe31 	bl	800628c <HAL_RCC_GetPCLK1Freq>
 800862a:	6378      	str	r0, [r7, #52]	@ 0x34
 800862c:	e282      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800862e:	4b66      	ldr	r3, [pc, #408]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008638:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800863c:	d112      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 800863e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008640:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008644:	d10e      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008646:	4b60      	ldr	r3, [pc, #384]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800864c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008650:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008654:	d102      	bne.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8008656:	23fa      	movs	r3, #250	@ 0xfa
 8008658:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800865a:	e26b      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800865c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008660:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008662:	e267      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008664:	4b58      	ldr	r3, [pc, #352]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800866c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008670:	d106      	bne.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008678:	d102      	bne.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 800867a:	4b55      	ldr	r3, [pc, #340]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800867c:	637b      	str	r3, [r7, #52]	@ 0x34
 800867e:	e259      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008680:	4b51      	ldr	r3, [pc, #324]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b02      	cmp	r3, #2
 800868c:	d107      	bne.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008694:	d103      	bne.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8008696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800869a:	637b      	str	r3, [r7, #52]	@ 0x34
 800869c:	e24a      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086a2:	e247      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80086a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086a8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80086ac:	430b      	orrs	r3, r1
 80086ae:	d12d      	bne.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80086b0:	4b45      	ldr	r3, [pc, #276]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086b6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80086ba:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80086bc:	4b42      	ldr	r3, [pc, #264]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086c8:	d105      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80086ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d102      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 80086d0:	4b3f      	ldr	r3, [pc, #252]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086d4:	e22e      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80086d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086dc:	d107      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe fc70 	bl	8006fc8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80086e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ec:	e222      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80086ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086f4:	d107      	bne.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086f6:	f107 0318 	add.w	r3, r7, #24
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fe fdbe 	bl	800727c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	637b      	str	r3, [r7, #52]	@ 0x34
 8008704:	e216      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008706:	2300      	movs	r3, #0
 8008708:	637b      	str	r3, [r7, #52]	@ 0x34
 800870a:	e213      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800870c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008710:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8008714:	430b      	orrs	r3, r1
 8008716:	d15d      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008718:	4b2b      	ldr	r3, [pc, #172]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800871a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800871e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008722:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008726:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800872a:	d028      	beq.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 800872c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008732:	d845      	bhi.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008736:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800873a:	d013      	beq.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 800873c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008742:	d83d      	bhi.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008746:	2b00      	cmp	r3, #0
 8008748:	d004      	beq.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800874a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008750:	d004      	beq.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8008752:	e035      	b.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008754:	f7fd fdae 	bl	80062b4 <HAL_RCC_GetPCLK2Freq>
 8008758:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800875a:	e1eb      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800875c:	f7fd fc7a 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8008760:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008762:	e1e7      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008764:	4b18      	ldr	r3, [pc, #96]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800876c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008770:	d102      	bne.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8008772:	4b17      	ldr	r3, [pc, #92]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008774:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008776:	e1dd      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800877c:	e1da      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800877e:	4b12      	ldr	r3, [pc, #72]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0320 	and.w	r3, r3, #32
 8008786:	2b20      	cmp	r3, #32
 8008788:	d117      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800878a:	4b0f      	ldr	r3, [pc, #60]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d005      	beq.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8008796:	4b0c      	ldr	r3, [pc, #48]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	0e1b      	lsrs	r3, r3, #24
 800879c:	f003 030f 	and.w	r3, r3, #15
 80087a0:	e006      	b.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 80087a2:	4b09      	ldr	r3, [pc, #36]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80087a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087a8:	041b      	lsls	r3, r3, #16
 80087aa:	0e1b      	lsrs	r3, r3, #24
 80087ac:	f003 030f 	and.w	r3, r3, #15
 80087b0:	4a06      	ldr	r2, [pc, #24]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80087b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087b8:	e1bc      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087be:	e1b9      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087c4:	e1b6      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80087c6:	bf00      	nop
 80087c8:	46020c00 	.word	0x46020c00
 80087cc:	0800b654 	.word	0x0800b654
 80087d0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80087d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087d8:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80087dc:	430b      	orrs	r3, r1
 80087de:	d156      	bne.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80087e0:	4ba5      	ldr	r3, [pc, #660]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80087e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80087e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80087ea:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80087ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80087f2:	d028      	beq.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 80087f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80087fa:	d845      	bhi.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80087fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008802:	d013      	beq.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8008804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008806:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800880a:	d83d      	bhi.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880e:	2b00      	cmp	r3, #0
 8008810:	d004      	beq.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008818:	d004      	beq.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800881a:	e035      	b.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800881c:	f7fd fd36 	bl	800628c <HAL_RCC_GetPCLK1Freq>
 8008820:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008822:	e187      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008824:	f7fd fc16 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8008828:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800882a:	e183      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800882c:	4b92      	ldr	r3, [pc, #584]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008838:	d102      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800883a:	4b90      	ldr	r3, [pc, #576]	@ (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800883c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800883e:	e179      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008844:	e176      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008846:	4b8c      	ldr	r3, [pc, #560]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0320 	and.w	r3, r3, #32
 800884e:	2b20      	cmp	r3, #32
 8008850:	d117      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008852:	4b89      	ldr	r3, [pc, #548]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d005      	beq.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800885e:	4b86      	ldr	r3, [pc, #536]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	0e1b      	lsrs	r3, r3, #24
 8008864:	f003 030f 	and.w	r3, r3, #15
 8008868:	e006      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800886a:	4b83      	ldr	r3, [pc, #524]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800886c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008870:	041b      	lsls	r3, r3, #16
 8008872:	0e1b      	lsrs	r3, r3, #24
 8008874:	f003 030f 	and.w	r3, r3, #15
 8008878:	4a81      	ldr	r2, [pc, #516]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800887a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800887e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008880:	e158      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008886:	e155      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800888c:	e152      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800888e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008892:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8008896:	430b      	orrs	r3, r1
 8008898:	d177      	bne.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800889a:	4b77      	ldr	r3, [pc, #476]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800889c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088a0:	f003 0318 	and.w	r3, r3, #24
 80088a4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	2b18      	cmp	r3, #24
 80088aa:	d86b      	bhi.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80088ac:	a201      	add	r2, pc, #4	@ (adr r2, 80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80088ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b2:	bf00      	nop
 80088b4:	08008919 	.word	0x08008919
 80088b8:	08008985 	.word	0x08008985
 80088bc:	08008985 	.word	0x08008985
 80088c0:	08008985 	.word	0x08008985
 80088c4:	08008985 	.word	0x08008985
 80088c8:	08008985 	.word	0x08008985
 80088cc:	08008985 	.word	0x08008985
 80088d0:	08008985 	.word	0x08008985
 80088d4:	08008921 	.word	0x08008921
 80088d8:	08008985 	.word	0x08008985
 80088dc:	08008985 	.word	0x08008985
 80088e0:	08008985 	.word	0x08008985
 80088e4:	08008985 	.word	0x08008985
 80088e8:	08008985 	.word	0x08008985
 80088ec:	08008985 	.word	0x08008985
 80088f0:	08008985 	.word	0x08008985
 80088f4:	08008929 	.word	0x08008929
 80088f8:	08008985 	.word	0x08008985
 80088fc:	08008985 	.word	0x08008985
 8008900:	08008985 	.word	0x08008985
 8008904:	08008985 	.word	0x08008985
 8008908:	08008985 	.word	0x08008985
 800890c:	08008985 	.word	0x08008985
 8008910:	08008985 	.word	0x08008985
 8008914:	08008943 	.word	0x08008943
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008918:	f7fd fce0 	bl	80062dc <HAL_RCC_GetPCLK3Freq>
 800891c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800891e:	e109      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008920:	f7fd fb98 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8008924:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008926:	e105      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008928:	4b53      	ldr	r3, [pc, #332]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008934:	d102      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8008936:	4b51      	ldr	r3, [pc, #324]	@ (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8008938:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800893a:	e0fb      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800893c:	2300      	movs	r3, #0
 800893e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008940:	e0f8      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008942:	4b4d      	ldr	r3, [pc, #308]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0320 	and.w	r3, r3, #32
 800894a:	2b20      	cmp	r3, #32
 800894c:	d117      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800894e:	4b4a      	ldr	r3, [pc, #296]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d005      	beq.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800895a:	4b47      	ldr	r3, [pc, #284]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	0e1b      	lsrs	r3, r3, #24
 8008960:	f003 030f 	and.w	r3, r3, #15
 8008964:	e006      	b.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8008966:	4b44      	ldr	r3, [pc, #272]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800896c:	041b      	lsls	r3, r3, #16
 800896e:	0e1b      	lsrs	r3, r3, #24
 8008970:	f003 030f 	and.w	r3, r3, #15
 8008974:	4a42      	ldr	r2, [pc, #264]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800897a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800897c:	e0da      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008982:	e0d7      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008988:	e0d4      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800898a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800898e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8008992:	430b      	orrs	r3, r1
 8008994:	d155      	bne.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008996:	4b38      	ldr	r3, [pc, #224]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008998:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800899c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80089a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80089a8:	d013      	beq.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80089aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80089b0:	d844      	bhi.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80089b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089b8:	d013      	beq.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089c0:	d83c      	bhi.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80089c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d014      	beq.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 80089c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089ce:	d014      	beq.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 80089d0:	e034      	b.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089d2:	f107 0318 	add.w	r3, r7, #24
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe fc50 	bl	800727c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089e0:	e0a8      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe faee 	bl	8006fc8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80089ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089f0:	e0a0      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80089f2:	f7fd fb2f 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 80089f6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80089f8:	e09c      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80089fa:	4b1f      	ldr	r3, [pc, #124]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 0320 	and.w	r3, r3, #32
 8008a02:	2b20      	cmp	r3, #32
 8008a04:	d117      	bne.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a06:	4b1c      	ldr	r3, [pc, #112]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8008a12:	4b19      	ldr	r3, [pc, #100]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	0e1b      	lsrs	r3, r3, #24
 8008a18:	f003 030f 	and.w	r3, r3, #15
 8008a1c:	e006      	b.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8008a1e:	4b16      	ldr	r3, [pc, #88]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a24:	041b      	lsls	r3, r3, #16
 8008a26:	0e1b      	lsrs	r3, r3, #24
 8008a28:	f003 030f 	and.w	r3, r3, #15
 8008a2c:	4a14      	ldr	r2, [pc, #80]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a32:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a34:	e07e      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008a36:	2300      	movs	r3, #0
 8008a38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a3a:	e07b      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a40:	e078      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a46:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	d138      	bne.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a58:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008a5a:	4b07      	ldr	r3, [pc, #28]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d10d      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10a      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8008a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a74:	e05e      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008a76:	bf00      	nop
 8008a78:	46020c00 	.word	0x46020c00
 8008a7c:	00f42400 	.word	0x00f42400
 8008a80:	0800b654 	.word	0x0800b654
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008a84:	4b2e      	ldr	r3, [pc, #184]	@ (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a92:	d112      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8008a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a9a:	d10e      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a9c:	4b28      	ldr	r3, [pc, #160]	@ (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008aa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aaa:	d102      	bne.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8008aac:	23fa      	movs	r3, #250	@ 0xfa
 8008aae:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ab0:	e040      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008ab2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008ab6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ab8:	e03c      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008aba:	2300      	movs	r3, #0
 8008abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008abe:	e039      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ac4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008ac8:	430b      	orrs	r3, r1
 8008aca:	d131      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008acc:	4b1c      	ldr	r3, [pc, #112]	@ (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008ace:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ad2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008ad6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008ad8:	4b19      	ldr	r3, [pc, #100]	@ (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ae0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ae4:	d105      	bne.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d102      	bne.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8008aec:	4b15      	ldr	r3, [pc, #84]	@ (8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8008aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af0:	e020      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008af2:	4b13      	ldr	r3, [pc, #76]	@ (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008afe:	d106      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8008b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b06:	d102      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008b08:	4b0f      	ldr	r3, [pc, #60]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8008b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b0c:	e012      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b1a:	d106      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b22:	d102      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8008b24:	4b09      	ldr	r3, [pc, #36]	@ (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b28:	e004      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b2e:	e001      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8008b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3738      	adds	r7, #56	@ 0x38
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	46020c00 	.word	0x46020c00
 8008b44:	02dc6c00 	.word	0x02dc6c00
 8008b48:	016e3600 	.word	0x016e3600
 8008b4c:	00f42400 	.word	0x00f42400

08008b50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008b58:	4b47      	ldr	r3, [pc, #284]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a46      	ldr	r2, [pc, #280]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008b5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b62:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b64:	f7f9 f988 	bl	8001e78 <HAL_GetTick>
 8008b68:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b6a:	e008      	b.n	8008b7e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b6c:	f7f9 f984 	bl	8001e78 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d901      	bls.n	8008b7e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e077      	b.n	8008c6e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1f0      	bne.n	8008b6c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008b92:	f023 0303 	bic.w	r3, r3, #3
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	6811      	ldr	r1, [r2, #0]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	6852      	ldr	r2, [r2, #4]
 8008b9e:	3a01      	subs	r2, #1
 8008ba0:	0212      	lsls	r2, r2, #8
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	4934      	ldr	r1, [pc, #208]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008baa:	4b33      	ldr	r3, [pc, #204]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008bac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bae:	4b33      	ldr	r3, [pc, #204]	@ (8008c7c <RCCEx_PLL2_Config+0x12c>)
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	6892      	ldr	r2, [r2, #8]
 8008bb6:	3a01      	subs	r2, #1
 8008bb8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	68d2      	ldr	r2, [r2, #12]
 8008bc0:	3a01      	subs	r2, #1
 8008bc2:	0252      	lsls	r2, r2, #9
 8008bc4:	b292      	uxth	r2, r2
 8008bc6:	4311      	orrs	r1, r2
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	6912      	ldr	r2, [r2, #16]
 8008bcc:	3a01      	subs	r2, #1
 8008bce:	0412      	lsls	r2, r2, #16
 8008bd0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008bd4:	4311      	orrs	r1, r2
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	6952      	ldr	r2, [r2, #20]
 8008bda:	3a01      	subs	r2, #1
 8008bdc:	0612      	lsls	r2, r2, #24
 8008bde:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008be2:	430a      	orrs	r2, r1
 8008be4:	4924      	ldr	r1, [pc, #144]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008be6:	4313      	orrs	r3, r2
 8008be8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008bea:	4b23      	ldr	r3, [pc, #140]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bee:	f023 020c 	bic.w	r2, r3, #12
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	4920      	ldr	r1, [pc, #128]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	491c      	ldr	r1, [pc, #112]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008c10:	f023 0310 	bic.w	r3, r3, #16
 8008c14:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c16:	4b18      	ldr	r3, [pc, #96]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c1e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	69d2      	ldr	r2, [r2, #28]
 8008c26:	00d2      	lsls	r2, r2, #3
 8008c28:	4913      	ldr	r1, [pc, #76]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008c2e:	4b12      	ldr	r3, [pc, #72]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c32:	4a11      	ldr	r2, [pc, #68]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008c34:	f043 0310 	orr.w	r3, r3, #16
 8008c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008c40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c44:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c46:	f7f9 f917 	bl	8001e78 <HAL_GetTick>
 8008c4a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c4c:	e008      	b.n	8008c60 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c4e:	f7f9 f913 	bl	8001e78 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d901      	bls.n	8008c60 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e006      	b.n	8008c6e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c60:	4b05      	ldr	r3, [pc, #20]	@ (8008c78 <RCCEx_PLL2_Config+0x128>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0f0      	beq.n	8008c4e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0

}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	46020c00 	.word	0x46020c00
 8008c7c:	80800000 	.word	0x80800000

08008c80 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008c88:	4b47      	ldr	r3, [pc, #284]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a46      	ldr	r2, [pc, #280]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008c8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c92:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c94:	f7f9 f8f0 	bl	8001e78 <HAL_GetTick>
 8008c98:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c9a:	e008      	b.n	8008cae <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c9c:	f7f9 f8ec 	bl	8001e78 <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d901      	bls.n	8008cae <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e077      	b.n	8008d9e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cae:	4b3e      	ldr	r3, [pc, #248]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1f0      	bne.n	8008c9c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008cba:	4b3b      	ldr	r3, [pc, #236]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cbe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008cc2:	f023 0303 	bic.w	r3, r3, #3
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	6811      	ldr	r1, [r2, #0]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	6852      	ldr	r2, [r2, #4]
 8008cce:	3a01      	subs	r2, #1
 8008cd0:	0212      	lsls	r2, r2, #8
 8008cd2:	430a      	orrs	r2, r1
 8008cd4:	4934      	ldr	r1, [pc, #208]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	630b      	str	r3, [r1, #48]	@ 0x30
 8008cda:	4b33      	ldr	r3, [pc, #204]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008cdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cde:	4b33      	ldr	r3, [pc, #204]	@ (8008dac <RCCEx_PLL3_Config+0x12c>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	6892      	ldr	r2, [r2, #8]
 8008ce6:	3a01      	subs	r2, #1
 8008ce8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	68d2      	ldr	r2, [r2, #12]
 8008cf0:	3a01      	subs	r2, #1
 8008cf2:	0252      	lsls	r2, r2, #9
 8008cf4:	b292      	uxth	r2, r2
 8008cf6:	4311      	orrs	r1, r2
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	6912      	ldr	r2, [r2, #16]
 8008cfc:	3a01      	subs	r2, #1
 8008cfe:	0412      	lsls	r2, r2, #16
 8008d00:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008d04:	4311      	orrs	r1, r2
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	6952      	ldr	r2, [r2, #20]
 8008d0a:	3a01      	subs	r2, #1
 8008d0c:	0612      	lsls	r2, r2, #24
 8008d0e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008d12:	430a      	orrs	r2, r1
 8008d14:	4924      	ldr	r1, [pc, #144]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008d1a:	4b23      	ldr	r3, [pc, #140]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d1e:	f023 020c 	bic.w	r2, r3, #12
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	4920      	ldr	r1, [pc, #128]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008d2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a1b      	ldr	r3, [r3, #32]
 8008d34:	491c      	ldr	r1, [pc, #112]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008d40:	f023 0310 	bic.w	r3, r3, #16
 8008d44:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d46:	4b18      	ldr	r3, [pc, #96]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d4e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	69d2      	ldr	r2, [r2, #28]
 8008d56:	00d2      	lsls	r2, r2, #3
 8008d58:	4913      	ldr	r1, [pc, #76]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008d5e:	4b12      	ldr	r3, [pc, #72]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d62:	4a11      	ldr	r2, [pc, #68]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008d64:	f043 0310 	orr.w	r3, r3, #16
 8008d68:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d74:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d76:	f7f9 f87f 	bl	8001e78 <HAL_GetTick>
 8008d7a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d7c:	e008      	b.n	8008d90 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d7e:	f7f9 f87b 	bl	8001e78 <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d901      	bls.n	8008d90 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e006      	b.n	8008d9e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d90:	4b05      	ldr	r3, [pc, #20]	@ (8008da8 <RCCEx_PLL3_Config+0x128>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d0f0      	beq.n	8008d7e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	46020c00 	.word	0x46020c00
 8008dac:	80800000 	.word	0x80800000

08008db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e049      	b.n	8008e56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d106      	bne.n	8008ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7f8 fbba 	bl	8001550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2202      	movs	r2, #2
 8008de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	3304      	adds	r3, #4
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f000 fb50 	bl	8009494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
	...

08008e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d001      	beq.n	8008e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e072      	b.n	8008f5e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68da      	ldr	r2, [r3, #12]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f042 0201 	orr.w	r2, r2, #1
 8008e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a35      	ldr	r2, [pc, #212]	@ (8008f6c <HAL_TIM_Base_Start_IT+0x10c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d040      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0xbc>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a34      	ldr	r2, [pc, #208]	@ (8008f70 <HAL_TIM_Base_Start_IT+0x110>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d03b      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0xbc>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eac:	d036      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0xbc>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008eb6:	d031      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0xbc>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8008f74 <HAL_TIM_Base_Start_IT+0x114>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d02c      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0xbc>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8008f78 <HAL_TIM_Base_Start_IT+0x118>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d027      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0xbc>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8008f7c <HAL_TIM_Base_Start_IT+0x11c>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d022      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0xbc>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a29      	ldr	r2, [pc, #164]	@ (8008f80 <HAL_TIM_Base_Start_IT+0x120>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d01d      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0xbc>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a27      	ldr	r2, [pc, #156]	@ (8008f84 <HAL_TIM_Base_Start_IT+0x124>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d018      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0xbc>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a26      	ldr	r2, [pc, #152]	@ (8008f88 <HAL_TIM_Base_Start_IT+0x128>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d013      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0xbc>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a24      	ldr	r2, [pc, #144]	@ (8008f8c <HAL_TIM_Base_Start_IT+0x12c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00e      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0xbc>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a23      	ldr	r2, [pc, #140]	@ (8008f90 <HAL_TIM_Base_Start_IT+0x130>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d009      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0xbc>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a21      	ldr	r2, [pc, #132]	@ (8008f94 <HAL_TIM_Base_Start_IT+0x134>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d004      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0xbc>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a20      	ldr	r2, [pc, #128]	@ (8008f98 <HAL_TIM_Base_Start_IT+0x138>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d115      	bne.n	8008f48 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	689a      	ldr	r2, [r3, #8]
 8008f22:	4b1e      	ldr	r3, [pc, #120]	@ (8008f9c <HAL_TIM_Base_Start_IT+0x13c>)
 8008f24:	4013      	ands	r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b06      	cmp	r3, #6
 8008f2c:	d015      	beq.n	8008f5a <HAL_TIM_Base_Start_IT+0xfa>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f34:	d011      	beq.n	8008f5a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f042 0201 	orr.w	r2, r2, #1
 8008f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f46:	e008      	b.n	8008f5a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0201 	orr.w	r2, r2, #1
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	e000      	b.n	8008f5c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	40012c00 	.word	0x40012c00
 8008f70:	50012c00 	.word	0x50012c00
 8008f74:	40000400 	.word	0x40000400
 8008f78:	50000400 	.word	0x50000400
 8008f7c:	40000800 	.word	0x40000800
 8008f80:	50000800 	.word	0x50000800
 8008f84:	40000c00 	.word	0x40000c00
 8008f88:	50000c00 	.word	0x50000c00
 8008f8c:	40013400 	.word	0x40013400
 8008f90:	50013400 	.word	0x50013400
 8008f94:	40014000 	.word	0x40014000
 8008f98:	50014000 	.word	0x50014000
 8008f9c:	00010007 	.word	0x00010007

08008fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d020      	beq.n	8009004 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f003 0302 	and.w	r3, r3, #2
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d01b      	beq.n	8009004 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f06f 0202 	mvn.w	r2, #2
 8008fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	f003 0303 	and.w	r3, r3, #3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d003      	beq.n	8008ff2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fa34 	bl	8009458 <HAL_TIM_IC_CaptureCallback>
 8008ff0:	e005      	b.n	8008ffe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fa26 	bl	8009444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fa37 	bl	800946c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	f003 0304 	and.w	r3, r3, #4
 800900a:	2b00      	cmp	r3, #0
 800900c:	d020      	beq.n	8009050 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f003 0304 	and.w	r3, r3, #4
 8009014:	2b00      	cmp	r3, #0
 8009016:	d01b      	beq.n	8009050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f06f 0204 	mvn.w	r2, #4
 8009020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2202      	movs	r2, #2
 8009026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fa0e 	bl	8009458 <HAL_TIM_IC_CaptureCallback>
 800903c:	e005      	b.n	800904a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fa00 	bl	8009444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fa11 	bl	800946c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f003 0308 	and.w	r3, r3, #8
 8009056:	2b00      	cmp	r3, #0
 8009058:	d020      	beq.n	800909c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f003 0308 	and.w	r3, r3, #8
 8009060:	2b00      	cmp	r3, #0
 8009062:	d01b      	beq.n	800909c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f06f 0208 	mvn.w	r2, #8
 800906c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2204      	movs	r2, #4
 8009072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	f003 0303 	and.w	r3, r3, #3
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f9e8 	bl	8009458 <HAL_TIM_IC_CaptureCallback>
 8009088:	e005      	b.n	8009096 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f9da 	bl	8009444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f9eb 	bl	800946c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	f003 0310 	and.w	r3, r3, #16
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d020      	beq.n	80090e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f003 0310 	and.w	r3, r3, #16
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d01b      	beq.n	80090e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f06f 0210 	mvn.w	r2, #16
 80090b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2208      	movs	r2, #8
 80090be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f9c2 	bl	8009458 <HAL_TIM_IC_CaptureCallback>
 80090d4:	e005      	b.n	80090e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f9b4 	bl	8009444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f9c5 	bl	800946c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00c      	beq.n	800910c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f003 0301 	and.w	r3, r3, #1
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d007      	beq.n	800910c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f06f 0201 	mvn.w	r2, #1
 8009104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7f7 fbcc 	bl	80008a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009112:	2b00      	cmp	r3, #0
 8009114:	d104      	bne.n	8009120 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00c      	beq.n	800913a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009126:	2b00      	cmp	r3, #0
 8009128:	d007      	beq.n	800913a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fc15 	bl	8009964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00c      	beq.n	800915e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800914a:	2b00      	cmp	r3, #0
 800914c:	d007      	beq.n	800915e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fc0d 	bl	8009978 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00c      	beq.n	8009182 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800916e:	2b00      	cmp	r3, #0
 8009170:	d007      	beq.n	8009182 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800917a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f97f 	bl	8009480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	f003 0320 	and.w	r3, r3, #32
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00c      	beq.n	80091a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f003 0320 	and.w	r3, r3, #32
 8009192:	2b00      	cmp	r3, #0
 8009194:	d007      	beq.n	80091a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f06f 0220 	mvn.w	r2, #32
 800919e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fbd5 	bl	8009950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00c      	beq.n	80091ca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d007      	beq.n	80091ca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80091c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fbe1 	bl	800998c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00c      	beq.n	80091ee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d007      	beq.n	80091ee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80091e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fbd9 	bl	80099a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00c      	beq.n	8009212 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d007      	beq.n	8009212 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800920a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fbd1 	bl	80099b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00c      	beq.n	8009236 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009222:	2b00      	cmp	r3, #0
 8009224:	d007      	beq.n	8009236 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800922e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fbc9 	bl	80099c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009236:	bf00      	nop
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009254:	2b01      	cmp	r3, #1
 8009256:	d101      	bne.n	800925c <HAL_TIM_ConfigClockSource+0x1c>
 8009258:	2302      	movs	r3, #2
 800925a:	e0e6      	b.n	800942a <HAL_TIM_ConfigClockSource+0x1ea>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2202      	movs	r2, #2
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800927a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800927e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a67      	ldr	r2, [pc, #412]	@ (8009434 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009296:	4293      	cmp	r3, r2
 8009298:	f000 80b1 	beq.w	80093fe <HAL_TIM_ConfigClockSource+0x1be>
 800929c:	4a65      	ldr	r2, [pc, #404]	@ (8009434 <HAL_TIM_ConfigClockSource+0x1f4>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	f200 80b6 	bhi.w	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
 80092a4:	4a64      	ldr	r2, [pc, #400]	@ (8009438 <HAL_TIM_ConfigClockSource+0x1f8>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	f000 80a9 	beq.w	80093fe <HAL_TIM_ConfigClockSource+0x1be>
 80092ac:	4a62      	ldr	r2, [pc, #392]	@ (8009438 <HAL_TIM_ConfigClockSource+0x1f8>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	f200 80ae 	bhi.w	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
 80092b4:	4a61      	ldr	r2, [pc, #388]	@ (800943c <HAL_TIM_ConfigClockSource+0x1fc>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	f000 80a1 	beq.w	80093fe <HAL_TIM_ConfigClockSource+0x1be>
 80092bc:	4a5f      	ldr	r2, [pc, #380]	@ (800943c <HAL_TIM_ConfigClockSource+0x1fc>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	f200 80a6 	bhi.w	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
 80092c4:	4a5e      	ldr	r2, [pc, #376]	@ (8009440 <HAL_TIM_ConfigClockSource+0x200>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	f000 8099 	beq.w	80093fe <HAL_TIM_ConfigClockSource+0x1be>
 80092cc:	4a5c      	ldr	r2, [pc, #368]	@ (8009440 <HAL_TIM_ConfigClockSource+0x200>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	f200 809e 	bhi.w	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
 80092d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092d8:	f000 8091 	beq.w	80093fe <HAL_TIM_ConfigClockSource+0x1be>
 80092dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092e0:	f200 8096 	bhi.w	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
 80092e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092e8:	f000 8089 	beq.w	80093fe <HAL_TIM_ConfigClockSource+0x1be>
 80092ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092f0:	f200 808e 	bhi.w	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
 80092f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092f8:	d03e      	beq.n	8009378 <HAL_TIM_ConfigClockSource+0x138>
 80092fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092fe:	f200 8087 	bhi.w	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
 8009302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009306:	f000 8086 	beq.w	8009416 <HAL_TIM_ConfigClockSource+0x1d6>
 800930a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800930e:	d87f      	bhi.n	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
 8009310:	2b70      	cmp	r3, #112	@ 0x70
 8009312:	d01a      	beq.n	800934a <HAL_TIM_ConfigClockSource+0x10a>
 8009314:	2b70      	cmp	r3, #112	@ 0x70
 8009316:	d87b      	bhi.n	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
 8009318:	2b60      	cmp	r3, #96	@ 0x60
 800931a:	d050      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x17e>
 800931c:	2b60      	cmp	r3, #96	@ 0x60
 800931e:	d877      	bhi.n	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
 8009320:	2b50      	cmp	r3, #80	@ 0x50
 8009322:	d03c      	beq.n	800939e <HAL_TIM_ConfigClockSource+0x15e>
 8009324:	2b50      	cmp	r3, #80	@ 0x50
 8009326:	d873      	bhi.n	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
 8009328:	2b40      	cmp	r3, #64	@ 0x40
 800932a:	d058      	beq.n	80093de <HAL_TIM_ConfigClockSource+0x19e>
 800932c:	2b40      	cmp	r3, #64	@ 0x40
 800932e:	d86f      	bhi.n	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
 8009330:	2b30      	cmp	r3, #48	@ 0x30
 8009332:	d064      	beq.n	80093fe <HAL_TIM_ConfigClockSource+0x1be>
 8009334:	2b30      	cmp	r3, #48	@ 0x30
 8009336:	d86b      	bhi.n	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
 8009338:	2b20      	cmp	r3, #32
 800933a:	d060      	beq.n	80093fe <HAL_TIM_ConfigClockSource+0x1be>
 800933c:	2b20      	cmp	r3, #32
 800933e:	d867      	bhi.n	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
 8009340:	2b00      	cmp	r3, #0
 8009342:	d05c      	beq.n	80093fe <HAL_TIM_ConfigClockSource+0x1be>
 8009344:	2b10      	cmp	r3, #16
 8009346:	d05a      	beq.n	80093fe <HAL_TIM_ConfigClockSource+0x1be>
 8009348:	e062      	b.n	8009410 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800935a:	f000 fa17 	bl	800978c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800936c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	609a      	str	r2, [r3, #8]
      break;
 8009376:	e04f      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009388:	f000 fa00 	bl	800978c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	689a      	ldr	r2, [r3, #8]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800939a:	609a      	str	r2, [r3, #8]
      break;
 800939c:	e03c      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093aa:	461a      	mov	r2, r3
 80093ac:	f000 f972 	bl	8009694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2150      	movs	r1, #80	@ 0x50
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 f9cb 	bl	8009752 <TIM_ITRx_SetConfig>
      break;
 80093bc:	e02c      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093ca:	461a      	mov	r2, r3
 80093cc:	f000 f991 	bl	80096f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2160      	movs	r1, #96	@ 0x60
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 f9bb 	bl	8009752 <TIM_ITRx_SetConfig>
      break;
 80093dc:	e01c      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ea:	461a      	mov	r2, r3
 80093ec:	f000 f952 	bl	8009694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2140      	movs	r1, #64	@ 0x40
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 f9ab 	bl	8009752 <TIM_ITRx_SetConfig>
      break;
 80093fc:	e00c      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4619      	mov	r1, r3
 8009408:	4610      	mov	r0, r2
 800940a:	f000 f9a2 	bl	8009752 <TIM_ITRx_SetConfig>
      break;
 800940e:	e003      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	73fb      	strb	r3, [r7, #15]
      break;
 8009414:	e000      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8009416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009428:	7bfb      	ldrb	r3, [r7, #15]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	00100070 	.word	0x00100070
 8009438:	00100040 	.word	0x00100040
 800943c:	00100030 	.word	0x00100030
 8009440:	00100020 	.word	0x00100020

08009444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a6b      	ldr	r2, [pc, #428]	@ (8009654 <TIM_Base_SetConfig+0x1c0>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d02b      	beq.n	8009504 <TIM_Base_SetConfig+0x70>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a6a      	ldr	r2, [pc, #424]	@ (8009658 <TIM_Base_SetConfig+0x1c4>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d027      	beq.n	8009504 <TIM_Base_SetConfig+0x70>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094ba:	d023      	beq.n	8009504 <TIM_Base_SetConfig+0x70>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094c2:	d01f      	beq.n	8009504 <TIM_Base_SetConfig+0x70>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a65      	ldr	r2, [pc, #404]	@ (800965c <TIM_Base_SetConfig+0x1c8>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d01b      	beq.n	8009504 <TIM_Base_SetConfig+0x70>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a64      	ldr	r2, [pc, #400]	@ (8009660 <TIM_Base_SetConfig+0x1cc>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d017      	beq.n	8009504 <TIM_Base_SetConfig+0x70>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a63      	ldr	r2, [pc, #396]	@ (8009664 <TIM_Base_SetConfig+0x1d0>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d013      	beq.n	8009504 <TIM_Base_SetConfig+0x70>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a62      	ldr	r2, [pc, #392]	@ (8009668 <TIM_Base_SetConfig+0x1d4>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d00f      	beq.n	8009504 <TIM_Base_SetConfig+0x70>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a61      	ldr	r2, [pc, #388]	@ (800966c <TIM_Base_SetConfig+0x1d8>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d00b      	beq.n	8009504 <TIM_Base_SetConfig+0x70>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a60      	ldr	r2, [pc, #384]	@ (8009670 <TIM_Base_SetConfig+0x1dc>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d007      	beq.n	8009504 <TIM_Base_SetConfig+0x70>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a5f      	ldr	r2, [pc, #380]	@ (8009674 <TIM_Base_SetConfig+0x1e0>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d003      	beq.n	8009504 <TIM_Base_SetConfig+0x70>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a5e      	ldr	r2, [pc, #376]	@ (8009678 <TIM_Base_SetConfig+0x1e4>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d108      	bne.n	8009516 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800950a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	4313      	orrs	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a4e      	ldr	r2, [pc, #312]	@ (8009654 <TIM_Base_SetConfig+0x1c0>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d043      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a4d      	ldr	r2, [pc, #308]	@ (8009658 <TIM_Base_SetConfig+0x1c4>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d03f      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800952c:	d03b      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009534:	d037      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a48      	ldr	r2, [pc, #288]	@ (800965c <TIM_Base_SetConfig+0x1c8>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d033      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a47      	ldr	r2, [pc, #284]	@ (8009660 <TIM_Base_SetConfig+0x1cc>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d02f      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a46      	ldr	r2, [pc, #280]	@ (8009664 <TIM_Base_SetConfig+0x1d0>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d02b      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a45      	ldr	r2, [pc, #276]	@ (8009668 <TIM_Base_SetConfig+0x1d4>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d027      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a44      	ldr	r2, [pc, #272]	@ (800966c <TIM_Base_SetConfig+0x1d8>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d023      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a43      	ldr	r2, [pc, #268]	@ (8009670 <TIM_Base_SetConfig+0x1dc>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d01f      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a42      	ldr	r2, [pc, #264]	@ (8009674 <TIM_Base_SetConfig+0x1e0>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d01b      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a41      	ldr	r2, [pc, #260]	@ (8009678 <TIM_Base_SetConfig+0x1e4>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d017      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a40      	ldr	r2, [pc, #256]	@ (800967c <TIM_Base_SetConfig+0x1e8>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d013      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a3f      	ldr	r2, [pc, #252]	@ (8009680 <TIM_Base_SetConfig+0x1ec>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d00f      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a3e      	ldr	r2, [pc, #248]	@ (8009684 <TIM_Base_SetConfig+0x1f0>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d00b      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a3d      	ldr	r2, [pc, #244]	@ (8009688 <TIM_Base_SetConfig+0x1f4>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d007      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a3c      	ldr	r2, [pc, #240]	@ (800968c <TIM_Base_SetConfig+0x1f8>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d003      	beq.n	80095a6 <TIM_Base_SetConfig+0x112>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a3b      	ldr	r2, [pc, #236]	@ (8009690 <TIM_Base_SetConfig+0x1fc>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d108      	bne.n	80095b8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	689a      	ldr	r2, [r3, #8]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a1e      	ldr	r2, [pc, #120]	@ (8009654 <TIM_Base_SetConfig+0x1c0>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d023      	beq.n	8009626 <TIM_Base_SetConfig+0x192>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009658 <TIM_Base_SetConfig+0x1c4>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d01f      	beq.n	8009626 <TIM_Base_SetConfig+0x192>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a22      	ldr	r2, [pc, #136]	@ (8009674 <TIM_Base_SetConfig+0x1e0>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d01b      	beq.n	8009626 <TIM_Base_SetConfig+0x192>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a21      	ldr	r2, [pc, #132]	@ (8009678 <TIM_Base_SetConfig+0x1e4>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d017      	beq.n	8009626 <TIM_Base_SetConfig+0x192>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a20      	ldr	r2, [pc, #128]	@ (800967c <TIM_Base_SetConfig+0x1e8>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d013      	beq.n	8009626 <TIM_Base_SetConfig+0x192>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a1f      	ldr	r2, [pc, #124]	@ (8009680 <TIM_Base_SetConfig+0x1ec>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d00f      	beq.n	8009626 <TIM_Base_SetConfig+0x192>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a1e      	ldr	r2, [pc, #120]	@ (8009684 <TIM_Base_SetConfig+0x1f0>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d00b      	beq.n	8009626 <TIM_Base_SetConfig+0x192>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a1d      	ldr	r2, [pc, #116]	@ (8009688 <TIM_Base_SetConfig+0x1f4>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d007      	beq.n	8009626 <TIM_Base_SetConfig+0x192>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a1c      	ldr	r2, [pc, #112]	@ (800968c <TIM_Base_SetConfig+0x1f8>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d003      	beq.n	8009626 <TIM_Base_SetConfig+0x192>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a1b      	ldr	r2, [pc, #108]	@ (8009690 <TIM_Base_SetConfig+0x1fc>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d103      	bne.n	800962e <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	691a      	ldr	r2, [r3, #16]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f043 0204 	orr.w	r2, r3, #4
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	601a      	str	r2, [r3, #0]
}
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	40012c00 	.word	0x40012c00
 8009658:	50012c00 	.word	0x50012c00
 800965c:	40000400 	.word	0x40000400
 8009660:	50000400 	.word	0x50000400
 8009664:	40000800 	.word	0x40000800
 8009668:	50000800 	.word	0x50000800
 800966c:	40000c00 	.word	0x40000c00
 8009670:	50000c00 	.word	0x50000c00
 8009674:	40013400 	.word	0x40013400
 8009678:	50013400 	.word	0x50013400
 800967c:	40014000 	.word	0x40014000
 8009680:	50014000 	.word	0x50014000
 8009684:	40014400 	.word	0x40014400
 8009688:	50014400 	.word	0x50014400
 800968c:	40014800 	.word	0x40014800
 8009690:	50014800 	.word	0x50014800

08009694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009694:	b480      	push	{r7}
 8009696:	b087      	sub	sp, #28
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6a1b      	ldr	r3, [r3, #32]
 80096a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	f023 0201 	bic.w	r2, r3, #1
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	011b      	lsls	r3, r3, #4
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f023 030a 	bic.w	r3, r3, #10
 80096d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	621a      	str	r2, [r3, #32]
}
 80096e6:	bf00      	nop
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b087      	sub	sp, #28
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	60b9      	str	r1, [r7, #8]
 80096fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6a1b      	ldr	r3, [r3, #32]
 8009702:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6a1b      	ldr	r3, [r3, #32]
 8009708:	f023 0210 	bic.w	r2, r3, #16
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800971c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	031b      	lsls	r3, r3, #12
 8009722:	693a      	ldr	r2, [r7, #16]
 8009724:	4313      	orrs	r3, r2
 8009726:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800972e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	011b      	lsls	r3, r3, #4
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	4313      	orrs	r3, r2
 8009738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	621a      	str	r2, [r3, #32]
}
 8009746:	bf00      	nop
 8009748:	371c      	adds	r7, #28
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009752:	b480      	push	{r7}
 8009754:	b085      	sub	sp, #20
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800976c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4313      	orrs	r3, r2
 8009774:	f043 0307 	orr.w	r3, r3, #7
 8009778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	609a      	str	r2, [r3, #8]
}
 8009780:	bf00      	nop
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800978c:	b480      	push	{r7}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	021a      	lsls	r2, r3, #8
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	431a      	orrs	r2, r3
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	697a      	ldr	r2, [r7, #20]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	697a      	ldr	r2, [r7, #20]
 80097be:	609a      	str	r2, [r3, #8]
}
 80097c0:	bf00      	nop
 80097c2:	371c      	adds	r7, #28
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d101      	bne.n	80097e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097e0:	2302      	movs	r3, #2
 80097e2:	e097      	b.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2202      	movs	r2, #2
 80097f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a45      	ldr	r2, [pc, #276]	@ (8009920 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d00e      	beq.n	800982c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a44      	ldr	r2, [pc, #272]	@ (8009924 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d009      	beq.n	800982c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a42      	ldr	r2, [pc, #264]	@ (8009928 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d004      	beq.n	800982c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a41      	ldr	r2, [pc, #260]	@ (800992c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d108      	bne.n	800983e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009832:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	4313      	orrs	r3, r2
 800983c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009844:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009848:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	4313      	orrs	r3, r2
 8009852:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a2f      	ldr	r2, [pc, #188]	@ (8009920 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d040      	beq.n	80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a2e      	ldr	r2, [pc, #184]	@ (8009924 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d03b      	beq.n	80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009878:	d036      	beq.n	80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009882:	d031      	beq.n	80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a29      	ldr	r2, [pc, #164]	@ (8009930 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d02c      	beq.n	80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a28      	ldr	r2, [pc, #160]	@ (8009934 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d027      	beq.n	80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a26      	ldr	r2, [pc, #152]	@ (8009938 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d022      	beq.n	80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a25      	ldr	r2, [pc, #148]	@ (800993c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d01d      	beq.n	80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a23      	ldr	r2, [pc, #140]	@ (8009940 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d018      	beq.n	80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a22      	ldr	r2, [pc, #136]	@ (8009944 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d013      	beq.n	80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a18      	ldr	r2, [pc, #96]	@ (8009928 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d00e      	beq.n	80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a17      	ldr	r2, [pc, #92]	@ (800992c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d009      	beq.n	80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a1b      	ldr	r2, [pc, #108]	@ (8009948 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d004      	beq.n	80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a1a      	ldr	r2, [pc, #104]	@ (800994c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d10c      	bne.n	8009902 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	40012c00 	.word	0x40012c00
 8009924:	50012c00 	.word	0x50012c00
 8009928:	40013400 	.word	0x40013400
 800992c:	50013400 	.word	0x50013400
 8009930:	40000400 	.word	0x40000400
 8009934:	50000400 	.word	0x50000400
 8009938:	40000800 	.word	0x40000800
 800993c:	50000800 	.word	0x50000800
 8009940:	40000c00 	.word	0x40000c00
 8009944:	50000c00 	.word	0x50000c00
 8009948:	40014000 	.word	0x40014000
 800994c:	50014000 	.word	0x50014000

08009950 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d101      	bne.n	80099ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e042      	b.n	8009a74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d106      	bne.n	8009a06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f83b 	bl	8009a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2224      	movs	r2, #36	@ 0x24
 8009a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f022 0201 	bic.w	r2, r2, #1
 8009a1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d002      	beq.n	8009a2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fa72 	bl	8009f10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f8cd 	bl	8009bcc <UART_SetConfig>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d101      	bne.n	8009a3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e01b      	b.n	8009a74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	685a      	ldr	r2, [r3, #4]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689a      	ldr	r2, [r3, #8]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f042 0201 	orr.w	r2, r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 faf1 	bl	800a054 <UART_CheckIdleState>
 8009a72:	4603      	mov	r3, r0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08a      	sub	sp, #40	@ 0x28
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aa6:	2b20      	cmp	r3, #32
 8009aa8:	f040 808b 	bne.w	8009bc2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <HAL_UART_Transmit+0x28>
 8009ab2:	88fb      	ldrh	r3, [r7, #6]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e083      	b.n	8009bc4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ac6:	2b80      	cmp	r3, #128	@ 0x80
 8009ac8:	d107      	bne.n	8009ada <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	689a      	ldr	r2, [r3, #8]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009ad8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2221      	movs	r2, #33	@ 0x21
 8009ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009aea:	f7f8 f9c5 	bl	8001e78 <HAL_GetTick>
 8009aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	88fa      	ldrh	r2, [r7, #6]
 8009af4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	88fa      	ldrh	r2, [r7, #6]
 8009afc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b08:	d108      	bne.n	8009b1c <HAL_UART_Transmit+0x8c>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d104      	bne.n	8009b1c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009b12:	2300      	movs	r3, #0
 8009b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	61bb      	str	r3, [r7, #24]
 8009b1a:	e003      	b.n	8009b24 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b20:	2300      	movs	r3, #0
 8009b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b24:	e030      	b.n	8009b88 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2180      	movs	r1, #128	@ 0x80
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 fb39 	bl	800a1a8 <UART_WaitOnFlagUntilTimeout>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d005      	beq.n	8009b48 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2220      	movs	r2, #32
 8009b40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e03d      	b.n	8009bc4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10b      	bne.n	8009b66 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	3302      	adds	r3, #2
 8009b62:	61bb      	str	r3, [r7, #24]
 8009b64:	e007      	b.n	8009b76 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	781a      	ldrb	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	3301      	adds	r3, #1
 8009b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1c8      	bne.n	8009b26 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2140      	movs	r1, #64	@ 0x40
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f000 fb02 	bl	800a1a8 <UART_WaitOnFlagUntilTimeout>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d005      	beq.n	8009bb6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2220      	movs	r2, #32
 8009bae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e006      	b.n	8009bc4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2220      	movs	r2, #32
 8009bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e000      	b.n	8009bc4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009bc2:	2302      	movs	r3, #2
  }
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3720      	adds	r7, #32
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bd0:	b094      	sub	sp, #80	@ 0x50
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	4b7e      	ldr	r3, [pc, #504]	@ (8009ddc <UART_SetConfig+0x210>)
 8009be2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be6:	689a      	ldr	r2, [r3, #8]
 8009be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	431a      	orrs	r2, r3
 8009bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf0:	695b      	ldr	r3, [r3, #20]
 8009bf2:	431a      	orrs	r2, r3
 8009bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf6:	69db      	ldr	r3, [r3, #28]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4977      	ldr	r1, [pc, #476]	@ (8009de0 <UART_SetConfig+0x214>)
 8009c04:	4019      	ands	r1, r3
 8009c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c0c:	430b      	orrs	r3, r1
 8009c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c1c:	68d9      	ldr	r1, [r3, #12]
 8009c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	ea40 0301 	orr.w	r3, r0, r1
 8009c26:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	4b6a      	ldr	r3, [pc, #424]	@ (8009ddc <UART_SetConfig+0x210>)
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d009      	beq.n	8009c4c <UART_SetConfig+0x80>
 8009c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	4b69      	ldr	r3, [pc, #420]	@ (8009de4 <UART_SetConfig+0x218>)
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d004      	beq.n	8009c4c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c44:	6a1a      	ldr	r2, [r3, #32]
 8009c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009c56:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c60:	430b      	orrs	r3, r1
 8009c62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c6a:	f023 000f 	bic.w	r0, r3, #15
 8009c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c70:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	ea40 0301 	orr.w	r3, r0, r1
 8009c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	4b59      	ldr	r3, [pc, #356]	@ (8009de8 <UART_SetConfig+0x21c>)
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d102      	bne.n	8009c8c <UART_SetConfig+0xc0>
 8009c86:	2301      	movs	r3, #1
 8009c88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c8a:	e029      	b.n	8009ce0 <UART_SetConfig+0x114>
 8009c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	4b56      	ldr	r3, [pc, #344]	@ (8009dec <UART_SetConfig+0x220>)
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d102      	bne.n	8009c9c <UART_SetConfig+0xd0>
 8009c96:	2302      	movs	r3, #2
 8009c98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c9a:	e021      	b.n	8009ce0 <UART_SetConfig+0x114>
 8009c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	4b53      	ldr	r3, [pc, #332]	@ (8009df0 <UART_SetConfig+0x224>)
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d102      	bne.n	8009cac <UART_SetConfig+0xe0>
 8009ca6:	2304      	movs	r3, #4
 8009ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009caa:	e019      	b.n	8009ce0 <UART_SetConfig+0x114>
 8009cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	4b50      	ldr	r3, [pc, #320]	@ (8009df4 <UART_SetConfig+0x228>)
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d102      	bne.n	8009cbc <UART_SetConfig+0xf0>
 8009cb6:	2308      	movs	r3, #8
 8009cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cba:	e011      	b.n	8009ce0 <UART_SetConfig+0x114>
 8009cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8009df8 <UART_SetConfig+0x22c>)
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d102      	bne.n	8009ccc <UART_SetConfig+0x100>
 8009cc6:	2310      	movs	r3, #16
 8009cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cca:	e009      	b.n	8009ce0 <UART_SetConfig+0x114>
 8009ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	4b42      	ldr	r3, [pc, #264]	@ (8009ddc <UART_SetConfig+0x210>)
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d102      	bne.n	8009cdc <UART_SetConfig+0x110>
 8009cd6:	2320      	movs	r3, #32
 8009cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cda:	e001      	b.n	8009ce0 <UART_SetConfig+0x114>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8009ddc <UART_SetConfig+0x210>)
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d005      	beq.n	8009cf6 <UART_SetConfig+0x12a>
 8009cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	4b3d      	ldr	r3, [pc, #244]	@ (8009de4 <UART_SetConfig+0x218>)
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	f040 8085 	bne.w	8009e00 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	623b      	str	r3, [r7, #32]
 8009cfc:	627a      	str	r2, [r7, #36]	@ 0x24
 8009cfe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009d02:	f7fd fd6f 	bl	80077e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d06:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 80e8 	beq.w	8009ee0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d14:	4a39      	ldr	r2, [pc, #228]	@ (8009dfc <UART_SetConfig+0x230>)
 8009d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d22:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	005b      	lsls	r3, r3, #1
 8009d2c:	4413      	add	r3, r2
 8009d2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d305      	bcc.n	8009d40 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d903      	bls.n	8009d48 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009d46:	e048      	b.n	8009dda <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	61bb      	str	r3, [r7, #24]
 8009d4e:	61fa      	str	r2, [r7, #28]
 8009d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d54:	4a29      	ldr	r2, [pc, #164]	@ (8009dfc <UART_SetConfig+0x230>)
 8009d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	613b      	str	r3, [r7, #16]
 8009d60:	617a      	str	r2, [r7, #20]
 8009d62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009d66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d6a:	f7f6 fa85 	bl	8000278 <__aeabi_uldivmod>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	4610      	mov	r0, r2
 8009d74:	4619      	mov	r1, r3
 8009d76:	f04f 0200 	mov.w	r2, #0
 8009d7a:	f04f 0300 	mov.w	r3, #0
 8009d7e:	020b      	lsls	r3, r1, #8
 8009d80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d84:	0202      	lsls	r2, r0, #8
 8009d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d88:	6849      	ldr	r1, [r1, #4]
 8009d8a:	0849      	lsrs	r1, r1, #1
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	460c      	mov	r4, r1
 8009d90:	4605      	mov	r5, r0
 8009d92:	eb12 0804 	adds.w	r8, r2, r4
 8009d96:	eb43 0905 	adc.w	r9, r3, r5
 8009d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	60bb      	str	r3, [r7, #8]
 8009da2:	60fa      	str	r2, [r7, #12]
 8009da4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009da8:	4640      	mov	r0, r8
 8009daa:	4649      	mov	r1, r9
 8009dac:	f7f6 fa64 	bl	8000278 <__aeabi_uldivmod>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4613      	mov	r3, r2
 8009db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dbe:	d308      	bcc.n	8009dd2 <UART_SetConfig+0x206>
 8009dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dc6:	d204      	bcs.n	8009dd2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8009dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009dce:	60da      	str	r2, [r3, #12]
 8009dd0:	e003      	b.n	8009dda <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009dd8:	e082      	b.n	8009ee0 <UART_SetConfig+0x314>
 8009dda:	e081      	b.n	8009ee0 <UART_SetConfig+0x314>
 8009ddc:	46002400 	.word	0x46002400
 8009de0:	cfff69f3 	.word	0xcfff69f3
 8009de4:	56002400 	.word	0x56002400
 8009de8:	40013800 	.word	0x40013800
 8009dec:	40004400 	.word	0x40004400
 8009df0:	40004800 	.word	0x40004800
 8009df4:	40004c00 	.word	0x40004c00
 8009df8:	40005000 	.word	0x40005000
 8009dfc:	0800b720 	.word	0x0800b720
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e02:	69db      	ldr	r3, [r3, #28]
 8009e04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e08:	d13c      	bne.n	8009e84 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	603b      	str	r3, [r7, #0]
 8009e10:	607a      	str	r2, [r7, #4]
 8009e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e16:	f7fd fce5 	bl	80077e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e1a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d05e      	beq.n	8009ee0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e26:	4a39      	ldr	r2, [pc, #228]	@ (8009f0c <UART_SetConfig+0x340>)
 8009e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e30:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e34:	005a      	lsls	r2, r3, #1
 8009e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	085b      	lsrs	r3, r3, #1
 8009e3c:	441a      	add	r2, r3
 8009e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e4a:	2b0f      	cmp	r3, #15
 8009e4c:	d916      	bls.n	8009e7c <UART_SetConfig+0x2b0>
 8009e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e54:	d212      	bcs.n	8009e7c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	f023 030f 	bic.w	r3, r3, #15
 8009e5e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e62:	085b      	lsrs	r3, r3, #1
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	f003 0307 	and.w	r3, r3, #7
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009e78:	60da      	str	r2, [r3, #12]
 8009e7a:	e031      	b.n	8009ee0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009e82:	e02d      	b.n	8009ee0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009e84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e86:	2200      	movs	r2, #0
 8009e88:	469a      	mov	sl, r3
 8009e8a:	4693      	mov	fp, r2
 8009e8c:	4650      	mov	r0, sl
 8009e8e:	4659      	mov	r1, fp
 8009e90:	f7fd fca8 	bl	80077e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e94:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d021      	beq.n	8009ee0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8009f0c <UART_SetConfig+0x340>)
 8009ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eaa:	fbb3 f2f2 	udiv	r2, r3, r2
 8009eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	085b      	lsrs	r3, r3, #1
 8009eb4:	441a      	add	r2, r3
 8009eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ec2:	2b0f      	cmp	r3, #15
 8009ec4:	d909      	bls.n	8009eda <UART_SetConfig+0x30e>
 8009ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ecc:	d205      	bcs.n	8009eda <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	60da      	str	r2, [r3, #12]
 8009ed8:	e002      	b.n	8009ee0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eea:	2201      	movs	r2, #1
 8009eec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef8:	2200      	movs	r2, #0
 8009efa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009efc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3750      	adds	r7, #80	@ 0x50
 8009f04:	46bd      	mov	sp, r7
 8009f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f0a:	bf00      	nop
 8009f0c:	0800b720 	.word	0x0800b720

08009f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1c:	f003 0308 	and.w	r3, r3, #8
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00a      	beq.n	8009f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	430a      	orrs	r2, r1
 8009f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3e:	f003 0301 	and.w	r3, r3, #1
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00a      	beq.n	8009f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f60:	f003 0302 	and.w	r3, r3, #2
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00a      	beq.n	8009f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f82:	f003 0304 	and.w	r3, r3, #4
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00a      	beq.n	8009fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa4:	f003 0310 	and.w	r3, r3, #16
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00a      	beq.n	8009fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc6:	f003 0320 	and.w	r3, r3, #32
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00a      	beq.n	8009fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d01a      	beq.n	800a026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	430a      	orrs	r2, r1
 800a004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a00a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a00e:	d10a      	bne.n	800a026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a02a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00a      	beq.n	800a048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	430a      	orrs	r2, r1
 800a046:	605a      	str	r2, [r3, #4]
  }
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b098      	sub	sp, #96	@ 0x60
 800a058:	af02      	add	r7, sp, #8
 800a05a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a064:	f7f7 ff08 	bl	8001e78 <HAL_GetTick>
 800a068:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 0308 	and.w	r3, r3, #8
 800a074:	2b08      	cmp	r3, #8
 800a076:	d12f      	bne.n	800a0d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a078:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a080:	2200      	movs	r2, #0
 800a082:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f88e 	bl	800a1a8 <UART_WaitOnFlagUntilTimeout>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d022      	beq.n	800a0d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09a:	e853 3f00 	ldrex	r3, [r3]
 800a09e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0b8:	e841 2300 	strex	r3, r2, [r1]
 800a0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1e6      	bne.n	800a092 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	e063      	b.n	800a1a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0304 	and.w	r3, r3, #4
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d149      	bne.n	800a17a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f857 	bl	800a1a8 <UART_WaitOnFlagUntilTimeout>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d03c      	beq.n	800a17a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a108:	e853 3f00 	ldrex	r3, [r3]
 800a10c:	623b      	str	r3, [r7, #32]
   return(result);
 800a10e:	6a3b      	ldr	r3, [r7, #32]
 800a110:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a114:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a11e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a120:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a126:	e841 2300 	strex	r3, r2, [r1]
 800a12a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1e6      	bne.n	800a100 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3308      	adds	r3, #8
 800a138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	e853 3f00 	ldrex	r3, [r3]
 800a140:	60fb      	str	r3, [r7, #12]
   return(result);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f023 0301 	bic.w	r3, r3, #1
 800a148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	3308      	adds	r3, #8
 800a150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a152:	61fa      	str	r2, [r7, #28]
 800a154:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a156:	69b9      	ldr	r1, [r7, #24]
 800a158:	69fa      	ldr	r2, [r7, #28]
 800a15a:	e841 2300 	strex	r3, r2, [r1]
 800a15e:	617b      	str	r3, [r7, #20]
   return(result);
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e5      	bne.n	800a132 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2220      	movs	r2, #32
 800a16a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e012      	b.n	800a1a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2220      	movs	r2, #32
 800a17e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2220      	movs	r2, #32
 800a186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3758      	adds	r7, #88	@ 0x58
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	603b      	str	r3, [r7, #0]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1b8:	e04f      	b.n	800a25a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c0:	d04b      	beq.n	800a25a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1c2:	f7f7 fe59 	bl	8001e78 <HAL_GetTick>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	69ba      	ldr	r2, [r7, #24]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d302      	bcc.n	800a1d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d101      	bne.n	800a1dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e04e      	b.n	800a27a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0304 	and.w	r3, r3, #4
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d037      	beq.n	800a25a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2b80      	cmp	r3, #128	@ 0x80
 800a1ee:	d034      	beq.n	800a25a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	2b40      	cmp	r3, #64	@ 0x40
 800a1f4:	d031      	beq.n	800a25a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	69db      	ldr	r3, [r3, #28]
 800a1fc:	f003 0308 	and.w	r3, r3, #8
 800a200:	2b08      	cmp	r3, #8
 800a202:	d110      	bne.n	800a226 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2208      	movs	r2, #8
 800a20a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f000 f838 	bl	800a282 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2208      	movs	r2, #8
 800a216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e029      	b.n	800a27a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	69db      	ldr	r3, [r3, #28]
 800a22c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a234:	d111      	bne.n	800a25a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a23e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 f81e 	bl	800a282 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2220      	movs	r2, #32
 800a24a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a256:	2303      	movs	r3, #3
 800a258:	e00f      	b.n	800a27a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	69da      	ldr	r2, [r3, #28]
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	4013      	ands	r3, r2
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	429a      	cmp	r2, r3
 800a268:	bf0c      	ite	eq
 800a26a:	2301      	moveq	r3, #1
 800a26c:	2300      	movne	r3, #0
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	461a      	mov	r2, r3
 800a272:	79fb      	ldrb	r3, [r7, #7]
 800a274:	429a      	cmp	r2, r3
 800a276:	d0a0      	beq.n	800a1ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a282:	b480      	push	{r7}
 800a284:	b095      	sub	sp, #84	@ 0x54
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a292:	e853 3f00 	ldrex	r3, [r3]
 800a296:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a29e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2b0:	e841 2300 	strex	r3, r2, [r1]
 800a2b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1e6      	bne.n	800a28a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3308      	adds	r3, #8
 800a2c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	e853 3f00 	ldrex	r3, [r3]
 800a2ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2d2:	f023 0301 	bic.w	r3, r3, #1
 800a2d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3308      	adds	r3, #8
 800a2de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2e8:	e841 2300 	strex	r3, r2, [r1]
 800a2ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1e3      	bne.n	800a2bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d118      	bne.n	800a32e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	e853 3f00 	ldrex	r3, [r3]
 800a308:	60bb      	str	r3, [r7, #8]
   return(result);
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	f023 0310 	bic.w	r3, r3, #16
 800a310:	647b      	str	r3, [r7, #68]	@ 0x44
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a31a:	61bb      	str	r3, [r7, #24]
 800a31c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31e:	6979      	ldr	r1, [r7, #20]
 800a320:	69ba      	ldr	r2, [r7, #24]
 800a322:	e841 2300 	strex	r3, r2, [r1]
 800a326:	613b      	str	r3, [r7, #16]
   return(result);
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1e6      	bne.n	800a2fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2220      	movs	r2, #32
 800a332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a342:	bf00      	nop
 800a344:	3754      	adds	r7, #84	@ 0x54
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
	...

0800a350 <std>:
 800a350:	2300      	movs	r3, #0
 800a352:	b510      	push	{r4, lr}
 800a354:	4604      	mov	r4, r0
 800a356:	6083      	str	r3, [r0, #8]
 800a358:	8181      	strh	r1, [r0, #12]
 800a35a:	4619      	mov	r1, r3
 800a35c:	6643      	str	r3, [r0, #100]	@ 0x64
 800a35e:	81c2      	strh	r2, [r0, #14]
 800a360:	2208      	movs	r2, #8
 800a362:	6183      	str	r3, [r0, #24]
 800a364:	e9c0 3300 	strd	r3, r3, [r0]
 800a368:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a36c:	305c      	adds	r0, #92	@ 0x5c
 800a36e:	f000 f906 	bl	800a57e <memset>
 800a372:	4b0d      	ldr	r3, [pc, #52]	@ (800a3a8 <std+0x58>)
 800a374:	6224      	str	r4, [r4, #32]
 800a376:	6263      	str	r3, [r4, #36]	@ 0x24
 800a378:	4b0c      	ldr	r3, [pc, #48]	@ (800a3ac <std+0x5c>)
 800a37a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a37c:	4b0c      	ldr	r3, [pc, #48]	@ (800a3b0 <std+0x60>)
 800a37e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a380:	4b0c      	ldr	r3, [pc, #48]	@ (800a3b4 <std+0x64>)
 800a382:	6323      	str	r3, [r4, #48]	@ 0x30
 800a384:	4b0c      	ldr	r3, [pc, #48]	@ (800a3b8 <std+0x68>)
 800a386:	429c      	cmp	r4, r3
 800a388:	d006      	beq.n	800a398 <std+0x48>
 800a38a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a38e:	4294      	cmp	r4, r2
 800a390:	d002      	beq.n	800a398 <std+0x48>
 800a392:	33d0      	adds	r3, #208	@ 0xd0
 800a394:	429c      	cmp	r4, r3
 800a396:	d105      	bne.n	800a3a4 <std+0x54>
 800a398:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3a0:	f000 b966 	b.w	800a670 <__retarget_lock_init_recursive>
 800a3a4:	bd10      	pop	{r4, pc}
 800a3a6:	bf00      	nop
 800a3a8:	0800a4f9 	.word	0x0800a4f9
 800a3ac:	0800a51b 	.word	0x0800a51b
 800a3b0:	0800a553 	.word	0x0800a553
 800a3b4:	0800a577 	.word	0x0800a577
 800a3b8:	20008768 	.word	0x20008768

0800a3bc <stdio_exit_handler>:
 800a3bc:	4a02      	ldr	r2, [pc, #8]	@ (800a3c8 <stdio_exit_handler+0xc>)
 800a3be:	4903      	ldr	r1, [pc, #12]	@ (800a3cc <stdio_exit_handler+0x10>)
 800a3c0:	4803      	ldr	r0, [pc, #12]	@ (800a3d0 <stdio_exit_handler+0x14>)
 800a3c2:	f000 b869 	b.w	800a498 <_fwalk_sglue>
 800a3c6:	bf00      	nop
 800a3c8:	20000048 	.word	0x20000048
 800a3cc:	0800af41 	.word	0x0800af41
 800a3d0:	20000058 	.word	0x20000058

0800a3d4 <cleanup_stdio>:
 800a3d4:	6841      	ldr	r1, [r0, #4]
 800a3d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a408 <cleanup_stdio+0x34>)
 800a3d8:	4299      	cmp	r1, r3
 800a3da:	b510      	push	{r4, lr}
 800a3dc:	4604      	mov	r4, r0
 800a3de:	d001      	beq.n	800a3e4 <cleanup_stdio+0x10>
 800a3e0:	f000 fdae 	bl	800af40 <_fflush_r>
 800a3e4:	68a1      	ldr	r1, [r4, #8]
 800a3e6:	4b09      	ldr	r3, [pc, #36]	@ (800a40c <cleanup_stdio+0x38>)
 800a3e8:	4299      	cmp	r1, r3
 800a3ea:	d002      	beq.n	800a3f2 <cleanup_stdio+0x1e>
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f000 fda7 	bl	800af40 <_fflush_r>
 800a3f2:	68e1      	ldr	r1, [r4, #12]
 800a3f4:	4b06      	ldr	r3, [pc, #24]	@ (800a410 <cleanup_stdio+0x3c>)
 800a3f6:	4299      	cmp	r1, r3
 800a3f8:	d004      	beq.n	800a404 <cleanup_stdio+0x30>
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a400:	f000 bd9e 	b.w	800af40 <_fflush_r>
 800a404:	bd10      	pop	{r4, pc}
 800a406:	bf00      	nop
 800a408:	20008768 	.word	0x20008768
 800a40c:	200087d0 	.word	0x200087d0
 800a410:	20008838 	.word	0x20008838

0800a414 <global_stdio_init.part.0>:
 800a414:	b510      	push	{r4, lr}
 800a416:	4b0b      	ldr	r3, [pc, #44]	@ (800a444 <global_stdio_init.part.0+0x30>)
 800a418:	2104      	movs	r1, #4
 800a41a:	4c0b      	ldr	r4, [pc, #44]	@ (800a448 <global_stdio_init.part.0+0x34>)
 800a41c:	4a0b      	ldr	r2, [pc, #44]	@ (800a44c <global_stdio_init.part.0+0x38>)
 800a41e:	4620      	mov	r0, r4
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	2200      	movs	r2, #0
 800a424:	f7ff ff94 	bl	800a350 <std>
 800a428:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a42c:	2201      	movs	r2, #1
 800a42e:	2109      	movs	r1, #9
 800a430:	f7ff ff8e 	bl	800a350 <std>
 800a434:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a438:	2202      	movs	r2, #2
 800a43a:	2112      	movs	r1, #18
 800a43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a440:	f7ff bf86 	b.w	800a350 <std>
 800a444:	200088a0 	.word	0x200088a0
 800a448:	20008768 	.word	0x20008768
 800a44c:	0800a3bd 	.word	0x0800a3bd

0800a450 <__sfp_lock_acquire>:
 800a450:	4801      	ldr	r0, [pc, #4]	@ (800a458 <__sfp_lock_acquire+0x8>)
 800a452:	f000 b90e 	b.w	800a672 <__retarget_lock_acquire_recursive>
 800a456:	bf00      	nop
 800a458:	200088a9 	.word	0x200088a9

0800a45c <__sfp_lock_release>:
 800a45c:	4801      	ldr	r0, [pc, #4]	@ (800a464 <__sfp_lock_release+0x8>)
 800a45e:	f000 b909 	b.w	800a674 <__retarget_lock_release_recursive>
 800a462:	bf00      	nop
 800a464:	200088a9 	.word	0x200088a9

0800a468 <__sinit>:
 800a468:	b510      	push	{r4, lr}
 800a46a:	4604      	mov	r4, r0
 800a46c:	f7ff fff0 	bl	800a450 <__sfp_lock_acquire>
 800a470:	6a23      	ldr	r3, [r4, #32]
 800a472:	b11b      	cbz	r3, 800a47c <__sinit+0x14>
 800a474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a478:	f7ff bff0 	b.w	800a45c <__sfp_lock_release>
 800a47c:	4b04      	ldr	r3, [pc, #16]	@ (800a490 <__sinit+0x28>)
 800a47e:	6223      	str	r3, [r4, #32]
 800a480:	4b04      	ldr	r3, [pc, #16]	@ (800a494 <__sinit+0x2c>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1f5      	bne.n	800a474 <__sinit+0xc>
 800a488:	f7ff ffc4 	bl	800a414 <global_stdio_init.part.0>
 800a48c:	e7f2      	b.n	800a474 <__sinit+0xc>
 800a48e:	bf00      	nop
 800a490:	0800a3d5 	.word	0x0800a3d5
 800a494:	200088a0 	.word	0x200088a0

0800a498 <_fwalk_sglue>:
 800a498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a49c:	4607      	mov	r7, r0
 800a49e:	4688      	mov	r8, r1
 800a4a0:	4614      	mov	r4, r2
 800a4a2:	2600      	movs	r6, #0
 800a4a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4a8:	f1b9 0901 	subs.w	r9, r9, #1
 800a4ac:	d505      	bpl.n	800a4ba <_fwalk_sglue+0x22>
 800a4ae:	6824      	ldr	r4, [r4, #0]
 800a4b0:	2c00      	cmp	r4, #0
 800a4b2:	d1f7      	bne.n	800a4a4 <_fwalk_sglue+0xc>
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ba:	89ab      	ldrh	r3, [r5, #12]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d907      	bls.n	800a4d0 <_fwalk_sglue+0x38>
 800a4c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	d003      	beq.n	800a4d0 <_fwalk_sglue+0x38>
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	4638      	mov	r0, r7
 800a4cc:	47c0      	blx	r8
 800a4ce:	4306      	orrs	r6, r0
 800a4d0:	3568      	adds	r5, #104	@ 0x68
 800a4d2:	e7e9      	b.n	800a4a8 <_fwalk_sglue+0x10>

0800a4d4 <iprintf>:
 800a4d4:	b40f      	push	{r0, r1, r2, r3}
 800a4d6:	b507      	push	{r0, r1, r2, lr}
 800a4d8:	4906      	ldr	r1, [pc, #24]	@ (800a4f4 <iprintf+0x20>)
 800a4da:	ab04      	add	r3, sp, #16
 800a4dc:	6808      	ldr	r0, [r1, #0]
 800a4de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4e2:	6881      	ldr	r1, [r0, #8]
 800a4e4:	9301      	str	r3, [sp, #4]
 800a4e6:	f000 f9fd 	bl	800a8e4 <_vfiprintf_r>
 800a4ea:	b003      	add	sp, #12
 800a4ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4f0:	b004      	add	sp, #16
 800a4f2:	4770      	bx	lr
 800a4f4:	20000054 	.word	0x20000054

0800a4f8 <__sread>:
 800a4f8:	b510      	push	{r4, lr}
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a500:	f000 f868 	bl	800a5d4 <_read_r>
 800a504:	2800      	cmp	r0, #0
 800a506:	bfab      	itete	ge
 800a508:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a50a:	89a3      	ldrhlt	r3, [r4, #12]
 800a50c:	181b      	addge	r3, r3, r0
 800a50e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a512:	bfac      	ite	ge
 800a514:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a516:	81a3      	strhlt	r3, [r4, #12]
 800a518:	bd10      	pop	{r4, pc}

0800a51a <__swrite>:
 800a51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a51e:	461f      	mov	r7, r3
 800a520:	898b      	ldrh	r3, [r1, #12]
 800a522:	4605      	mov	r5, r0
 800a524:	460c      	mov	r4, r1
 800a526:	05db      	lsls	r3, r3, #23
 800a528:	4616      	mov	r6, r2
 800a52a:	d505      	bpl.n	800a538 <__swrite+0x1e>
 800a52c:	2302      	movs	r3, #2
 800a52e:	2200      	movs	r2, #0
 800a530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a534:	f000 f83c 	bl	800a5b0 <_lseek_r>
 800a538:	89a3      	ldrh	r3, [r4, #12]
 800a53a:	4632      	mov	r2, r6
 800a53c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a540:	4628      	mov	r0, r5
 800a542:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a546:	81a3      	strh	r3, [r4, #12]
 800a548:	463b      	mov	r3, r7
 800a54a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a54e:	f000 b853 	b.w	800a5f8 <_write_r>

0800a552 <__sseek>:
 800a552:	b510      	push	{r4, lr}
 800a554:	460c      	mov	r4, r1
 800a556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a55a:	f000 f829 	bl	800a5b0 <_lseek_r>
 800a55e:	1c43      	adds	r3, r0, #1
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	bf15      	itete	ne
 800a564:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a566:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a56a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a56e:	81a3      	strheq	r3, [r4, #12]
 800a570:	bf18      	it	ne
 800a572:	81a3      	strhne	r3, [r4, #12]
 800a574:	bd10      	pop	{r4, pc}

0800a576 <__sclose>:
 800a576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a57a:	f000 b809 	b.w	800a590 <_close_r>

0800a57e <memset>:
 800a57e:	4402      	add	r2, r0
 800a580:	4603      	mov	r3, r0
 800a582:	4293      	cmp	r3, r2
 800a584:	d100      	bne.n	800a588 <memset+0xa>
 800a586:	4770      	bx	lr
 800a588:	f803 1b01 	strb.w	r1, [r3], #1
 800a58c:	e7f9      	b.n	800a582 <memset+0x4>
	...

0800a590 <_close_r>:
 800a590:	b538      	push	{r3, r4, r5, lr}
 800a592:	2300      	movs	r3, #0
 800a594:	4d05      	ldr	r5, [pc, #20]	@ (800a5ac <_close_r+0x1c>)
 800a596:	4604      	mov	r4, r0
 800a598:	4608      	mov	r0, r1
 800a59a:	602b      	str	r3, [r5, #0]
 800a59c:	f7f7 f909 	bl	80017b2 <_close>
 800a5a0:	1c43      	adds	r3, r0, #1
 800a5a2:	d102      	bne.n	800a5aa <_close_r+0x1a>
 800a5a4:	682b      	ldr	r3, [r5, #0]
 800a5a6:	b103      	cbz	r3, 800a5aa <_close_r+0x1a>
 800a5a8:	6023      	str	r3, [r4, #0]
 800a5aa:	bd38      	pop	{r3, r4, r5, pc}
 800a5ac:	200088a4 	.word	0x200088a4

0800a5b0 <_lseek_r>:
 800a5b0:	b538      	push	{r3, r4, r5, lr}
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	4d06      	ldr	r5, [pc, #24]	@ (800a5d0 <_lseek_r+0x20>)
 800a5b6:	4608      	mov	r0, r1
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	602a      	str	r2, [r5, #0]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	f7f7 f91e 	bl	8001800 <_lseek>
 800a5c4:	1c43      	adds	r3, r0, #1
 800a5c6:	d102      	bne.n	800a5ce <_lseek_r+0x1e>
 800a5c8:	682b      	ldr	r3, [r5, #0]
 800a5ca:	b103      	cbz	r3, 800a5ce <_lseek_r+0x1e>
 800a5cc:	6023      	str	r3, [r4, #0]
 800a5ce:	bd38      	pop	{r3, r4, r5, pc}
 800a5d0:	200088a4 	.word	0x200088a4

0800a5d4 <_read_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	4d06      	ldr	r5, [pc, #24]	@ (800a5f4 <_read_r+0x20>)
 800a5da:	4608      	mov	r0, r1
 800a5dc:	4611      	mov	r1, r2
 800a5de:	2200      	movs	r2, #0
 800a5e0:	602a      	str	r2, [r5, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f7f7 f8ac 	bl	8001740 <_read>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d102      	bne.n	800a5f2 <_read_r+0x1e>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	b103      	cbz	r3, 800a5f2 <_read_r+0x1e>
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	200088a4 	.word	0x200088a4

0800a5f8 <_write_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	4d06      	ldr	r5, [pc, #24]	@ (800a618 <_write_r+0x20>)
 800a5fe:	4608      	mov	r0, r1
 800a600:	4611      	mov	r1, r2
 800a602:	2200      	movs	r2, #0
 800a604:	602a      	str	r2, [r5, #0]
 800a606:	461a      	mov	r2, r3
 800a608:	f7f7 f8b7 	bl	800177a <_write>
 800a60c:	1c43      	adds	r3, r0, #1
 800a60e:	d102      	bne.n	800a616 <_write_r+0x1e>
 800a610:	682b      	ldr	r3, [r5, #0]
 800a612:	b103      	cbz	r3, 800a616 <_write_r+0x1e>
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	bd38      	pop	{r3, r4, r5, pc}
 800a618:	200088a4 	.word	0x200088a4

0800a61c <__errno>:
 800a61c:	4b01      	ldr	r3, [pc, #4]	@ (800a624 <__errno+0x8>)
 800a61e:	6818      	ldr	r0, [r3, #0]
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	20000054 	.word	0x20000054

0800a628 <__libc_init_array>:
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	4d0d      	ldr	r5, [pc, #52]	@ (800a660 <__libc_init_array+0x38>)
 800a62c:	2600      	movs	r6, #0
 800a62e:	4c0d      	ldr	r4, [pc, #52]	@ (800a664 <__libc_init_array+0x3c>)
 800a630:	1b64      	subs	r4, r4, r5
 800a632:	10a4      	asrs	r4, r4, #2
 800a634:	42a6      	cmp	r6, r4
 800a636:	d109      	bne.n	800a64c <__libc_init_array+0x24>
 800a638:	4d0b      	ldr	r5, [pc, #44]	@ (800a668 <__libc_init_array+0x40>)
 800a63a:	2600      	movs	r6, #0
 800a63c:	4c0b      	ldr	r4, [pc, #44]	@ (800a66c <__libc_init_array+0x44>)
 800a63e:	f000 fddd 	bl	800b1fc <_init>
 800a642:	1b64      	subs	r4, r4, r5
 800a644:	10a4      	asrs	r4, r4, #2
 800a646:	42a6      	cmp	r6, r4
 800a648:	d105      	bne.n	800a656 <__libc_init_array+0x2e>
 800a64a:	bd70      	pop	{r4, r5, r6, pc}
 800a64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a650:	3601      	adds	r6, #1
 800a652:	4798      	blx	r3
 800a654:	e7ee      	b.n	800a634 <__libc_init_array+0xc>
 800a656:	f855 3b04 	ldr.w	r3, [r5], #4
 800a65a:	3601      	adds	r6, #1
 800a65c:	4798      	blx	r3
 800a65e:	e7f2      	b.n	800a646 <__libc_init_array+0x1e>
 800a660:	0800b774 	.word	0x0800b774
 800a664:	0800b774 	.word	0x0800b774
 800a668:	0800b774 	.word	0x0800b774
 800a66c:	0800b778 	.word	0x0800b778

0800a670 <__retarget_lock_init_recursive>:
 800a670:	4770      	bx	lr

0800a672 <__retarget_lock_acquire_recursive>:
 800a672:	4770      	bx	lr

0800a674 <__retarget_lock_release_recursive>:
 800a674:	4770      	bx	lr

0800a676 <strcpy>:
 800a676:	4603      	mov	r3, r0
 800a678:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a67c:	f803 2b01 	strb.w	r2, [r3], #1
 800a680:	2a00      	cmp	r2, #0
 800a682:	d1f9      	bne.n	800a678 <strcpy+0x2>
 800a684:	4770      	bx	lr

0800a686 <memcpy>:
 800a686:	440a      	add	r2, r1
 800a688:	1e43      	subs	r3, r0, #1
 800a68a:	4291      	cmp	r1, r2
 800a68c:	d100      	bne.n	800a690 <memcpy+0xa>
 800a68e:	4770      	bx	lr
 800a690:	b510      	push	{r4, lr}
 800a692:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a696:	4291      	cmp	r1, r2
 800a698:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a69c:	d1f9      	bne.n	800a692 <memcpy+0xc>
 800a69e:	bd10      	pop	{r4, pc}

0800a6a0 <_free_r>:
 800a6a0:	b538      	push	{r3, r4, r5, lr}
 800a6a2:	4605      	mov	r5, r0
 800a6a4:	2900      	cmp	r1, #0
 800a6a6:	d041      	beq.n	800a72c <_free_r+0x8c>
 800a6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6ac:	1f0c      	subs	r4, r1, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	bfb8      	it	lt
 800a6b2:	18e4      	addlt	r4, r4, r3
 800a6b4:	f000 f8e0 	bl	800a878 <__malloc_lock>
 800a6b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a730 <_free_r+0x90>)
 800a6ba:	6813      	ldr	r3, [r2, #0]
 800a6bc:	b933      	cbnz	r3, 800a6cc <_free_r+0x2c>
 800a6be:	6063      	str	r3, [r4, #4]
 800a6c0:	6014      	str	r4, [r2, #0]
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6c8:	f000 b8dc 	b.w	800a884 <__malloc_unlock>
 800a6cc:	42a3      	cmp	r3, r4
 800a6ce:	d908      	bls.n	800a6e2 <_free_r+0x42>
 800a6d0:	6820      	ldr	r0, [r4, #0]
 800a6d2:	1821      	adds	r1, r4, r0
 800a6d4:	428b      	cmp	r3, r1
 800a6d6:	bf01      	itttt	eq
 800a6d8:	6819      	ldreq	r1, [r3, #0]
 800a6da:	685b      	ldreq	r3, [r3, #4]
 800a6dc:	1809      	addeq	r1, r1, r0
 800a6de:	6021      	streq	r1, [r4, #0]
 800a6e0:	e7ed      	b.n	800a6be <_free_r+0x1e>
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	b10b      	cbz	r3, 800a6ec <_free_r+0x4c>
 800a6e8:	42a3      	cmp	r3, r4
 800a6ea:	d9fa      	bls.n	800a6e2 <_free_r+0x42>
 800a6ec:	6811      	ldr	r1, [r2, #0]
 800a6ee:	1850      	adds	r0, r2, r1
 800a6f0:	42a0      	cmp	r0, r4
 800a6f2:	d10b      	bne.n	800a70c <_free_r+0x6c>
 800a6f4:	6820      	ldr	r0, [r4, #0]
 800a6f6:	4401      	add	r1, r0
 800a6f8:	1850      	adds	r0, r2, r1
 800a6fa:	6011      	str	r1, [r2, #0]
 800a6fc:	4283      	cmp	r3, r0
 800a6fe:	d1e0      	bne.n	800a6c2 <_free_r+0x22>
 800a700:	6818      	ldr	r0, [r3, #0]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	4408      	add	r0, r1
 800a706:	6053      	str	r3, [r2, #4]
 800a708:	6010      	str	r0, [r2, #0]
 800a70a:	e7da      	b.n	800a6c2 <_free_r+0x22>
 800a70c:	d902      	bls.n	800a714 <_free_r+0x74>
 800a70e:	230c      	movs	r3, #12
 800a710:	602b      	str	r3, [r5, #0]
 800a712:	e7d6      	b.n	800a6c2 <_free_r+0x22>
 800a714:	6820      	ldr	r0, [r4, #0]
 800a716:	1821      	adds	r1, r4, r0
 800a718:	428b      	cmp	r3, r1
 800a71a:	bf02      	ittt	eq
 800a71c:	6819      	ldreq	r1, [r3, #0]
 800a71e:	685b      	ldreq	r3, [r3, #4]
 800a720:	1809      	addeq	r1, r1, r0
 800a722:	6063      	str	r3, [r4, #4]
 800a724:	bf08      	it	eq
 800a726:	6021      	streq	r1, [r4, #0]
 800a728:	6054      	str	r4, [r2, #4]
 800a72a:	e7ca      	b.n	800a6c2 <_free_r+0x22>
 800a72c:	bd38      	pop	{r3, r4, r5, pc}
 800a72e:	bf00      	nop
 800a730:	200088b0 	.word	0x200088b0

0800a734 <sbrk_aligned>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	4e0f      	ldr	r6, [pc, #60]	@ (800a774 <sbrk_aligned+0x40>)
 800a738:	460c      	mov	r4, r1
 800a73a:	4605      	mov	r5, r0
 800a73c:	6831      	ldr	r1, [r6, #0]
 800a73e:	b911      	cbnz	r1, 800a746 <sbrk_aligned+0x12>
 800a740:	f000 fcba 	bl	800b0b8 <_sbrk_r>
 800a744:	6030      	str	r0, [r6, #0]
 800a746:	4621      	mov	r1, r4
 800a748:	4628      	mov	r0, r5
 800a74a:	f000 fcb5 	bl	800b0b8 <_sbrk_r>
 800a74e:	1c43      	adds	r3, r0, #1
 800a750:	d103      	bne.n	800a75a <sbrk_aligned+0x26>
 800a752:	f04f 34ff 	mov.w	r4, #4294967295
 800a756:	4620      	mov	r0, r4
 800a758:	bd70      	pop	{r4, r5, r6, pc}
 800a75a:	1cc4      	adds	r4, r0, #3
 800a75c:	f024 0403 	bic.w	r4, r4, #3
 800a760:	42a0      	cmp	r0, r4
 800a762:	d0f8      	beq.n	800a756 <sbrk_aligned+0x22>
 800a764:	1a21      	subs	r1, r4, r0
 800a766:	4628      	mov	r0, r5
 800a768:	f000 fca6 	bl	800b0b8 <_sbrk_r>
 800a76c:	3001      	adds	r0, #1
 800a76e:	d1f2      	bne.n	800a756 <sbrk_aligned+0x22>
 800a770:	e7ef      	b.n	800a752 <sbrk_aligned+0x1e>
 800a772:	bf00      	nop
 800a774:	200088ac 	.word	0x200088ac

0800a778 <_malloc_r>:
 800a778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a77c:	1ccd      	adds	r5, r1, #3
 800a77e:	4606      	mov	r6, r0
 800a780:	f025 0503 	bic.w	r5, r5, #3
 800a784:	3508      	adds	r5, #8
 800a786:	2d0c      	cmp	r5, #12
 800a788:	bf38      	it	cc
 800a78a:	250c      	movcc	r5, #12
 800a78c:	2d00      	cmp	r5, #0
 800a78e:	db01      	blt.n	800a794 <_malloc_r+0x1c>
 800a790:	42a9      	cmp	r1, r5
 800a792:	d904      	bls.n	800a79e <_malloc_r+0x26>
 800a794:	230c      	movs	r3, #12
 800a796:	6033      	str	r3, [r6, #0]
 800a798:	2000      	movs	r0, #0
 800a79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a79e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a874 <_malloc_r+0xfc>
 800a7a2:	f000 f869 	bl	800a878 <__malloc_lock>
 800a7a6:	f8d8 3000 	ldr.w	r3, [r8]
 800a7aa:	461c      	mov	r4, r3
 800a7ac:	bb44      	cbnz	r4, 800a800 <_malloc_r+0x88>
 800a7ae:	4629      	mov	r1, r5
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f7ff ffbf 	bl	800a734 <sbrk_aligned>
 800a7b6:	1c43      	adds	r3, r0, #1
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	d158      	bne.n	800a86e <_malloc_r+0xf6>
 800a7bc:	f8d8 4000 	ldr.w	r4, [r8]
 800a7c0:	4627      	mov	r7, r4
 800a7c2:	2f00      	cmp	r7, #0
 800a7c4:	d143      	bne.n	800a84e <_malloc_r+0xd6>
 800a7c6:	2c00      	cmp	r4, #0
 800a7c8:	d04b      	beq.n	800a862 <_malloc_r+0xea>
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	eb04 0903 	add.w	r9, r4, r3
 800a7d4:	f000 fc70 	bl	800b0b8 <_sbrk_r>
 800a7d8:	4581      	cmp	r9, r0
 800a7da:	d142      	bne.n	800a862 <_malloc_r+0xea>
 800a7dc:	6821      	ldr	r1, [r4, #0]
 800a7de:	4630      	mov	r0, r6
 800a7e0:	1a6d      	subs	r5, r5, r1
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	f7ff ffa6 	bl	800a734 <sbrk_aligned>
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	d03a      	beq.n	800a862 <_malloc_r+0xea>
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	442b      	add	r3, r5
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	f8d8 3000 	ldr.w	r3, [r8]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	bb62      	cbnz	r2, 800a854 <_malloc_r+0xdc>
 800a7fa:	f8c8 7000 	str.w	r7, [r8]
 800a7fe:	e00f      	b.n	800a820 <_malloc_r+0xa8>
 800a800:	6822      	ldr	r2, [r4, #0]
 800a802:	1b52      	subs	r2, r2, r5
 800a804:	d420      	bmi.n	800a848 <_malloc_r+0xd0>
 800a806:	2a0b      	cmp	r2, #11
 800a808:	d917      	bls.n	800a83a <_malloc_r+0xc2>
 800a80a:	1961      	adds	r1, r4, r5
 800a80c:	42a3      	cmp	r3, r4
 800a80e:	6025      	str	r5, [r4, #0]
 800a810:	bf18      	it	ne
 800a812:	6059      	strne	r1, [r3, #4]
 800a814:	6863      	ldr	r3, [r4, #4]
 800a816:	bf08      	it	eq
 800a818:	f8c8 1000 	streq.w	r1, [r8]
 800a81c:	5162      	str	r2, [r4, r5]
 800a81e:	604b      	str	r3, [r1, #4]
 800a820:	4630      	mov	r0, r6
 800a822:	f000 f82f 	bl	800a884 <__malloc_unlock>
 800a826:	f104 000b 	add.w	r0, r4, #11
 800a82a:	1d23      	adds	r3, r4, #4
 800a82c:	f020 0007 	bic.w	r0, r0, #7
 800a830:	1ac2      	subs	r2, r0, r3
 800a832:	bf1c      	itt	ne
 800a834:	1a1b      	subne	r3, r3, r0
 800a836:	50a3      	strne	r3, [r4, r2]
 800a838:	e7af      	b.n	800a79a <_malloc_r+0x22>
 800a83a:	6862      	ldr	r2, [r4, #4]
 800a83c:	42a3      	cmp	r3, r4
 800a83e:	bf0c      	ite	eq
 800a840:	f8c8 2000 	streq.w	r2, [r8]
 800a844:	605a      	strne	r2, [r3, #4]
 800a846:	e7eb      	b.n	800a820 <_malloc_r+0xa8>
 800a848:	4623      	mov	r3, r4
 800a84a:	6864      	ldr	r4, [r4, #4]
 800a84c:	e7ae      	b.n	800a7ac <_malloc_r+0x34>
 800a84e:	463c      	mov	r4, r7
 800a850:	687f      	ldr	r7, [r7, #4]
 800a852:	e7b6      	b.n	800a7c2 <_malloc_r+0x4a>
 800a854:	461a      	mov	r2, r3
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	42a3      	cmp	r3, r4
 800a85a:	d1fb      	bne.n	800a854 <_malloc_r+0xdc>
 800a85c:	2300      	movs	r3, #0
 800a85e:	6053      	str	r3, [r2, #4]
 800a860:	e7de      	b.n	800a820 <_malloc_r+0xa8>
 800a862:	230c      	movs	r3, #12
 800a864:	4630      	mov	r0, r6
 800a866:	6033      	str	r3, [r6, #0]
 800a868:	f000 f80c 	bl	800a884 <__malloc_unlock>
 800a86c:	e794      	b.n	800a798 <_malloc_r+0x20>
 800a86e:	6005      	str	r5, [r0, #0]
 800a870:	e7d6      	b.n	800a820 <_malloc_r+0xa8>
 800a872:	bf00      	nop
 800a874:	200088b0 	.word	0x200088b0

0800a878 <__malloc_lock>:
 800a878:	4801      	ldr	r0, [pc, #4]	@ (800a880 <__malloc_lock+0x8>)
 800a87a:	f7ff befa 	b.w	800a672 <__retarget_lock_acquire_recursive>
 800a87e:	bf00      	nop
 800a880:	200088a8 	.word	0x200088a8

0800a884 <__malloc_unlock>:
 800a884:	4801      	ldr	r0, [pc, #4]	@ (800a88c <__malloc_unlock+0x8>)
 800a886:	f7ff bef5 	b.w	800a674 <__retarget_lock_release_recursive>
 800a88a:	bf00      	nop
 800a88c:	200088a8 	.word	0x200088a8

0800a890 <__sfputc_r>:
 800a890:	6893      	ldr	r3, [r2, #8]
 800a892:	3b01      	subs	r3, #1
 800a894:	2b00      	cmp	r3, #0
 800a896:	6093      	str	r3, [r2, #8]
 800a898:	b410      	push	{r4}
 800a89a:	da08      	bge.n	800a8ae <__sfputc_r+0x1e>
 800a89c:	6994      	ldr	r4, [r2, #24]
 800a89e:	42a3      	cmp	r3, r4
 800a8a0:	db01      	blt.n	800a8a6 <__sfputc_r+0x16>
 800a8a2:	290a      	cmp	r1, #10
 800a8a4:	d103      	bne.n	800a8ae <__sfputc_r+0x1e>
 800a8a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8aa:	f000 bb71 	b.w	800af90 <__swbuf_r>
 800a8ae:	6813      	ldr	r3, [r2, #0]
 800a8b0:	1c58      	adds	r0, r3, #1
 800a8b2:	6010      	str	r0, [r2, #0]
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	7019      	strb	r1, [r3, #0]
 800a8b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <__sfputs_r>:
 800a8be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c0:	4606      	mov	r6, r0
 800a8c2:	460f      	mov	r7, r1
 800a8c4:	4614      	mov	r4, r2
 800a8c6:	18d5      	adds	r5, r2, r3
 800a8c8:	42ac      	cmp	r4, r5
 800a8ca:	d101      	bne.n	800a8d0 <__sfputs_r+0x12>
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	e007      	b.n	800a8e0 <__sfputs_r+0x22>
 800a8d0:	463a      	mov	r2, r7
 800a8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	f7ff ffda 	bl	800a890 <__sfputc_r>
 800a8dc:	1c43      	adds	r3, r0, #1
 800a8de:	d1f3      	bne.n	800a8c8 <__sfputs_r+0xa>
 800a8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8e4 <_vfiprintf_r>:
 800a8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e8:	460d      	mov	r5, r1
 800a8ea:	b09d      	sub	sp, #116	@ 0x74
 800a8ec:	4614      	mov	r4, r2
 800a8ee:	4698      	mov	r8, r3
 800a8f0:	4606      	mov	r6, r0
 800a8f2:	b118      	cbz	r0, 800a8fc <_vfiprintf_r+0x18>
 800a8f4:	6a03      	ldr	r3, [r0, #32]
 800a8f6:	b90b      	cbnz	r3, 800a8fc <_vfiprintf_r+0x18>
 800a8f8:	f7ff fdb6 	bl	800a468 <__sinit>
 800a8fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8fe:	07d9      	lsls	r1, r3, #31
 800a900:	d405      	bmi.n	800a90e <_vfiprintf_r+0x2a>
 800a902:	89ab      	ldrh	r3, [r5, #12]
 800a904:	059a      	lsls	r2, r3, #22
 800a906:	d402      	bmi.n	800a90e <_vfiprintf_r+0x2a>
 800a908:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a90a:	f7ff feb2 	bl	800a672 <__retarget_lock_acquire_recursive>
 800a90e:	89ab      	ldrh	r3, [r5, #12]
 800a910:	071b      	lsls	r3, r3, #28
 800a912:	d501      	bpl.n	800a918 <_vfiprintf_r+0x34>
 800a914:	692b      	ldr	r3, [r5, #16]
 800a916:	b99b      	cbnz	r3, 800a940 <_vfiprintf_r+0x5c>
 800a918:	4629      	mov	r1, r5
 800a91a:	4630      	mov	r0, r6
 800a91c:	f000 fb76 	bl	800b00c <__swsetup_r>
 800a920:	b170      	cbz	r0, 800a940 <_vfiprintf_r+0x5c>
 800a922:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a924:	07dc      	lsls	r4, r3, #31
 800a926:	d504      	bpl.n	800a932 <_vfiprintf_r+0x4e>
 800a928:	f04f 30ff 	mov.w	r0, #4294967295
 800a92c:	b01d      	add	sp, #116	@ 0x74
 800a92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a932:	89ab      	ldrh	r3, [r5, #12]
 800a934:	0598      	lsls	r0, r3, #22
 800a936:	d4f7      	bmi.n	800a928 <_vfiprintf_r+0x44>
 800a938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a93a:	f7ff fe9b 	bl	800a674 <__retarget_lock_release_recursive>
 800a93e:	e7f3      	b.n	800a928 <_vfiprintf_r+0x44>
 800a940:	2300      	movs	r3, #0
 800a942:	f8cd 800c 	str.w	r8, [sp, #12]
 800a946:	f04f 0901 	mov.w	r9, #1
 800a94a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800ab00 <_vfiprintf_r+0x21c>
 800a94e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a950:	2320      	movs	r3, #32
 800a952:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a956:	2330      	movs	r3, #48	@ 0x30
 800a958:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a95c:	4623      	mov	r3, r4
 800a95e:	469a      	mov	sl, r3
 800a960:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a964:	b10a      	cbz	r2, 800a96a <_vfiprintf_r+0x86>
 800a966:	2a25      	cmp	r2, #37	@ 0x25
 800a968:	d1f9      	bne.n	800a95e <_vfiprintf_r+0x7a>
 800a96a:	ebba 0b04 	subs.w	fp, sl, r4
 800a96e:	d00b      	beq.n	800a988 <_vfiprintf_r+0xa4>
 800a970:	465b      	mov	r3, fp
 800a972:	4622      	mov	r2, r4
 800a974:	4629      	mov	r1, r5
 800a976:	4630      	mov	r0, r6
 800a978:	f7ff ffa1 	bl	800a8be <__sfputs_r>
 800a97c:	3001      	adds	r0, #1
 800a97e:	f000 80a7 	beq.w	800aad0 <_vfiprintf_r+0x1ec>
 800a982:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a984:	445a      	add	r2, fp
 800a986:	9209      	str	r2, [sp, #36]	@ 0x24
 800a988:	f89a 3000 	ldrb.w	r3, [sl]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 809f 	beq.w	800aad0 <_vfiprintf_r+0x1ec>
 800a992:	2300      	movs	r3, #0
 800a994:	f04f 32ff 	mov.w	r2, #4294967295
 800a998:	f10a 0a01 	add.w	sl, sl, #1
 800a99c:	9304      	str	r3, [sp, #16]
 800a99e:	9307      	str	r3, [sp, #28]
 800a9a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9aa:	4654      	mov	r4, sl
 800a9ac:	2205      	movs	r2, #5
 800a9ae:	4854      	ldr	r0, [pc, #336]	@ (800ab00 <_vfiprintf_r+0x21c>)
 800a9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9b4:	f000 fb90 	bl	800b0d8 <memchr>
 800a9b8:	9a04      	ldr	r2, [sp, #16]
 800a9ba:	b9d8      	cbnz	r0, 800a9f4 <_vfiprintf_r+0x110>
 800a9bc:	06d1      	lsls	r1, r2, #27
 800a9be:	bf44      	itt	mi
 800a9c0:	2320      	movmi	r3, #32
 800a9c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9c6:	0713      	lsls	r3, r2, #28
 800a9c8:	bf44      	itt	mi
 800a9ca:	232b      	movmi	r3, #43	@ 0x2b
 800a9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a9d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9d6:	d015      	beq.n	800aa04 <_vfiprintf_r+0x120>
 800a9d8:	9a07      	ldr	r2, [sp, #28]
 800a9da:	4654      	mov	r4, sl
 800a9dc:	2000      	movs	r0, #0
 800a9de:	f04f 0c0a 	mov.w	ip, #10
 800a9e2:	4621      	mov	r1, r4
 800a9e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9e8:	3b30      	subs	r3, #48	@ 0x30
 800a9ea:	2b09      	cmp	r3, #9
 800a9ec:	d94b      	bls.n	800aa86 <_vfiprintf_r+0x1a2>
 800a9ee:	b1b0      	cbz	r0, 800aa1e <_vfiprintf_r+0x13a>
 800a9f0:	9207      	str	r2, [sp, #28]
 800a9f2:	e014      	b.n	800aa1e <_vfiprintf_r+0x13a>
 800a9f4:	eba0 0308 	sub.w	r3, r0, r8
 800a9f8:	46a2      	mov	sl, r4
 800a9fa:	fa09 f303 	lsl.w	r3, r9, r3
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	9304      	str	r3, [sp, #16]
 800aa02:	e7d2      	b.n	800a9aa <_vfiprintf_r+0xc6>
 800aa04:	9b03      	ldr	r3, [sp, #12]
 800aa06:	1d19      	adds	r1, r3, #4
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	9103      	str	r1, [sp, #12]
 800aa0e:	bfbb      	ittet	lt
 800aa10:	425b      	neglt	r3, r3
 800aa12:	f042 0202 	orrlt.w	r2, r2, #2
 800aa16:	9307      	strge	r3, [sp, #28]
 800aa18:	9307      	strlt	r3, [sp, #28]
 800aa1a:	bfb8      	it	lt
 800aa1c:	9204      	strlt	r2, [sp, #16]
 800aa1e:	7823      	ldrb	r3, [r4, #0]
 800aa20:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa22:	d10a      	bne.n	800aa3a <_vfiprintf_r+0x156>
 800aa24:	7863      	ldrb	r3, [r4, #1]
 800aa26:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa28:	d132      	bne.n	800aa90 <_vfiprintf_r+0x1ac>
 800aa2a:	9b03      	ldr	r3, [sp, #12]
 800aa2c:	3402      	adds	r4, #2
 800aa2e:	1d1a      	adds	r2, r3, #4
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa36:	9203      	str	r2, [sp, #12]
 800aa38:	9305      	str	r3, [sp, #20]
 800aa3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab10 <_vfiprintf_r+0x22c>
 800aa3e:	2203      	movs	r2, #3
 800aa40:	7821      	ldrb	r1, [r4, #0]
 800aa42:	4650      	mov	r0, sl
 800aa44:	f000 fb48 	bl	800b0d8 <memchr>
 800aa48:	b138      	cbz	r0, 800aa5a <_vfiprintf_r+0x176>
 800aa4a:	eba0 000a 	sub.w	r0, r0, sl
 800aa4e:	2240      	movs	r2, #64	@ 0x40
 800aa50:	9b04      	ldr	r3, [sp, #16]
 800aa52:	3401      	adds	r4, #1
 800aa54:	4082      	lsls	r2, r0
 800aa56:	4313      	orrs	r3, r2
 800aa58:	9304      	str	r3, [sp, #16]
 800aa5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa5e:	2206      	movs	r2, #6
 800aa60:	4828      	ldr	r0, [pc, #160]	@ (800ab04 <_vfiprintf_r+0x220>)
 800aa62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa66:	f000 fb37 	bl	800b0d8 <memchr>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d03f      	beq.n	800aaee <_vfiprintf_r+0x20a>
 800aa6e:	4b26      	ldr	r3, [pc, #152]	@ (800ab08 <_vfiprintf_r+0x224>)
 800aa70:	bb1b      	cbnz	r3, 800aaba <_vfiprintf_r+0x1d6>
 800aa72:	9b03      	ldr	r3, [sp, #12]
 800aa74:	3307      	adds	r3, #7
 800aa76:	f023 0307 	bic.w	r3, r3, #7
 800aa7a:	3308      	adds	r3, #8
 800aa7c:	9303      	str	r3, [sp, #12]
 800aa7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa80:	443b      	add	r3, r7
 800aa82:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa84:	e76a      	b.n	800a95c <_vfiprintf_r+0x78>
 800aa86:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa8a:	460c      	mov	r4, r1
 800aa8c:	2001      	movs	r0, #1
 800aa8e:	e7a8      	b.n	800a9e2 <_vfiprintf_r+0xfe>
 800aa90:	2300      	movs	r3, #0
 800aa92:	3401      	adds	r4, #1
 800aa94:	f04f 0c0a 	mov.w	ip, #10
 800aa98:	4619      	mov	r1, r3
 800aa9a:	9305      	str	r3, [sp, #20]
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaa2:	3a30      	subs	r2, #48	@ 0x30
 800aaa4:	2a09      	cmp	r2, #9
 800aaa6:	d903      	bls.n	800aab0 <_vfiprintf_r+0x1cc>
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d0c6      	beq.n	800aa3a <_vfiprintf_r+0x156>
 800aaac:	9105      	str	r1, [sp, #20]
 800aaae:	e7c4      	b.n	800aa3a <_vfiprintf_r+0x156>
 800aab0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aab4:	4604      	mov	r4, r0
 800aab6:	2301      	movs	r3, #1
 800aab8:	e7f0      	b.n	800aa9c <_vfiprintf_r+0x1b8>
 800aaba:	ab03      	add	r3, sp, #12
 800aabc:	462a      	mov	r2, r5
 800aabe:	a904      	add	r1, sp, #16
 800aac0:	4630      	mov	r0, r6
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	4b11      	ldr	r3, [pc, #68]	@ (800ab0c <_vfiprintf_r+0x228>)
 800aac6:	f3af 8000 	nop.w
 800aaca:	4607      	mov	r7, r0
 800aacc:	1c78      	adds	r0, r7, #1
 800aace:	d1d6      	bne.n	800aa7e <_vfiprintf_r+0x19a>
 800aad0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aad2:	07d9      	lsls	r1, r3, #31
 800aad4:	d405      	bmi.n	800aae2 <_vfiprintf_r+0x1fe>
 800aad6:	89ab      	ldrh	r3, [r5, #12]
 800aad8:	059a      	lsls	r2, r3, #22
 800aada:	d402      	bmi.n	800aae2 <_vfiprintf_r+0x1fe>
 800aadc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aade:	f7ff fdc9 	bl	800a674 <__retarget_lock_release_recursive>
 800aae2:	89ab      	ldrh	r3, [r5, #12]
 800aae4:	065b      	lsls	r3, r3, #25
 800aae6:	f53f af1f 	bmi.w	800a928 <_vfiprintf_r+0x44>
 800aaea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aaec:	e71e      	b.n	800a92c <_vfiprintf_r+0x48>
 800aaee:	ab03      	add	r3, sp, #12
 800aaf0:	462a      	mov	r2, r5
 800aaf2:	a904      	add	r1, sp, #16
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	4b04      	ldr	r3, [pc, #16]	@ (800ab0c <_vfiprintf_r+0x228>)
 800aafa:	f000 f87d 	bl	800abf8 <_printf_i>
 800aafe:	e7e4      	b.n	800aaca <_vfiprintf_r+0x1e6>
 800ab00:	0800b738 	.word	0x0800b738
 800ab04:	0800b742 	.word	0x0800b742
 800ab08:	00000000 	.word	0x00000000
 800ab0c:	0800a8bf 	.word	0x0800a8bf
 800ab10:	0800b73e 	.word	0x0800b73e

0800ab14 <_printf_common>:
 800ab14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab18:	4616      	mov	r6, r2
 800ab1a:	4698      	mov	r8, r3
 800ab1c:	688a      	ldr	r2, [r1, #8]
 800ab1e:	4607      	mov	r7, r0
 800ab20:	690b      	ldr	r3, [r1, #16]
 800ab22:	460c      	mov	r4, r1
 800ab24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	bfb8      	it	lt
 800ab2c:	4613      	movlt	r3, r2
 800ab2e:	6033      	str	r3, [r6, #0]
 800ab30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab34:	b10a      	cbz	r2, 800ab3a <_printf_common+0x26>
 800ab36:	3301      	adds	r3, #1
 800ab38:	6033      	str	r3, [r6, #0]
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	0699      	lsls	r1, r3, #26
 800ab3e:	bf42      	ittt	mi
 800ab40:	6833      	ldrmi	r3, [r6, #0]
 800ab42:	3302      	addmi	r3, #2
 800ab44:	6033      	strmi	r3, [r6, #0]
 800ab46:	6825      	ldr	r5, [r4, #0]
 800ab48:	f015 0506 	ands.w	r5, r5, #6
 800ab4c:	d106      	bne.n	800ab5c <_printf_common+0x48>
 800ab4e:	f104 0a19 	add.w	sl, r4, #25
 800ab52:	68e3      	ldr	r3, [r4, #12]
 800ab54:	6832      	ldr	r2, [r6, #0]
 800ab56:	1a9b      	subs	r3, r3, r2
 800ab58:	42ab      	cmp	r3, r5
 800ab5a:	dc2b      	bgt.n	800abb4 <_printf_common+0xa0>
 800ab5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab60:	6822      	ldr	r2, [r4, #0]
 800ab62:	3b00      	subs	r3, #0
 800ab64:	bf18      	it	ne
 800ab66:	2301      	movne	r3, #1
 800ab68:	0692      	lsls	r2, r2, #26
 800ab6a:	d430      	bmi.n	800abce <_printf_common+0xba>
 800ab6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab70:	4641      	mov	r1, r8
 800ab72:	4638      	mov	r0, r7
 800ab74:	47c8      	blx	r9
 800ab76:	3001      	adds	r0, #1
 800ab78:	d023      	beq.n	800abc2 <_printf_common+0xae>
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	341a      	adds	r4, #26
 800ab7e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ab82:	f003 0306 	and.w	r3, r3, #6
 800ab86:	2b04      	cmp	r3, #4
 800ab88:	bf0a      	itet	eq
 800ab8a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800ab8e:	2500      	movne	r5, #0
 800ab90:	6833      	ldreq	r3, [r6, #0]
 800ab92:	f04f 0600 	mov.w	r6, #0
 800ab96:	bf08      	it	eq
 800ab98:	1aed      	subeq	r5, r5, r3
 800ab9a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ab9e:	bf08      	it	eq
 800aba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aba4:	4293      	cmp	r3, r2
 800aba6:	bfc4      	itt	gt
 800aba8:	1a9b      	subgt	r3, r3, r2
 800abaa:	18ed      	addgt	r5, r5, r3
 800abac:	42b5      	cmp	r5, r6
 800abae:	d11a      	bne.n	800abe6 <_printf_common+0xd2>
 800abb0:	2000      	movs	r0, #0
 800abb2:	e008      	b.n	800abc6 <_printf_common+0xb2>
 800abb4:	2301      	movs	r3, #1
 800abb6:	4652      	mov	r2, sl
 800abb8:	4641      	mov	r1, r8
 800abba:	4638      	mov	r0, r7
 800abbc:	47c8      	blx	r9
 800abbe:	3001      	adds	r0, #1
 800abc0:	d103      	bne.n	800abca <_printf_common+0xb6>
 800abc2:	f04f 30ff 	mov.w	r0, #4294967295
 800abc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abca:	3501      	adds	r5, #1
 800abcc:	e7c1      	b.n	800ab52 <_printf_common+0x3e>
 800abce:	18e1      	adds	r1, r4, r3
 800abd0:	1c5a      	adds	r2, r3, #1
 800abd2:	2030      	movs	r0, #48	@ 0x30
 800abd4:	3302      	adds	r3, #2
 800abd6:	4422      	add	r2, r4
 800abd8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800abe0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800abe4:	e7c2      	b.n	800ab6c <_printf_common+0x58>
 800abe6:	2301      	movs	r3, #1
 800abe8:	4622      	mov	r2, r4
 800abea:	4641      	mov	r1, r8
 800abec:	4638      	mov	r0, r7
 800abee:	47c8      	blx	r9
 800abf0:	3001      	adds	r0, #1
 800abf2:	d0e6      	beq.n	800abc2 <_printf_common+0xae>
 800abf4:	3601      	adds	r6, #1
 800abf6:	e7d9      	b.n	800abac <_printf_common+0x98>

0800abf8 <_printf_i>:
 800abf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abfc:	7e0f      	ldrb	r7, [r1, #24]
 800abfe:	4691      	mov	r9, r2
 800ac00:	4680      	mov	r8, r0
 800ac02:	460c      	mov	r4, r1
 800ac04:	2f78      	cmp	r7, #120	@ 0x78
 800ac06:	469a      	mov	sl, r3
 800ac08:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac0e:	d807      	bhi.n	800ac20 <_printf_i+0x28>
 800ac10:	2f62      	cmp	r7, #98	@ 0x62
 800ac12:	d80a      	bhi.n	800ac2a <_printf_i+0x32>
 800ac14:	2f00      	cmp	r7, #0
 800ac16:	f000 80d2 	beq.w	800adbe <_printf_i+0x1c6>
 800ac1a:	2f58      	cmp	r7, #88	@ 0x58
 800ac1c:	f000 80b9 	beq.w	800ad92 <_printf_i+0x19a>
 800ac20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac28:	e03a      	b.n	800aca0 <_printf_i+0xa8>
 800ac2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac2e:	2b15      	cmp	r3, #21
 800ac30:	d8f6      	bhi.n	800ac20 <_printf_i+0x28>
 800ac32:	a101      	add	r1, pc, #4	@ (adr r1, 800ac38 <_printf_i+0x40>)
 800ac34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac38:	0800ac91 	.word	0x0800ac91
 800ac3c:	0800aca5 	.word	0x0800aca5
 800ac40:	0800ac21 	.word	0x0800ac21
 800ac44:	0800ac21 	.word	0x0800ac21
 800ac48:	0800ac21 	.word	0x0800ac21
 800ac4c:	0800ac21 	.word	0x0800ac21
 800ac50:	0800aca5 	.word	0x0800aca5
 800ac54:	0800ac21 	.word	0x0800ac21
 800ac58:	0800ac21 	.word	0x0800ac21
 800ac5c:	0800ac21 	.word	0x0800ac21
 800ac60:	0800ac21 	.word	0x0800ac21
 800ac64:	0800ada5 	.word	0x0800ada5
 800ac68:	0800accf 	.word	0x0800accf
 800ac6c:	0800ad5f 	.word	0x0800ad5f
 800ac70:	0800ac21 	.word	0x0800ac21
 800ac74:	0800ac21 	.word	0x0800ac21
 800ac78:	0800adc7 	.word	0x0800adc7
 800ac7c:	0800ac21 	.word	0x0800ac21
 800ac80:	0800accf 	.word	0x0800accf
 800ac84:	0800ac21 	.word	0x0800ac21
 800ac88:	0800ac21 	.word	0x0800ac21
 800ac8c:	0800ad67 	.word	0x0800ad67
 800ac90:	6833      	ldr	r3, [r6, #0]
 800ac92:	1d1a      	adds	r2, r3, #4
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	6032      	str	r2, [r6, #0]
 800ac98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aca0:	2301      	movs	r3, #1
 800aca2:	e09d      	b.n	800ade0 <_printf_i+0x1e8>
 800aca4:	6833      	ldr	r3, [r6, #0]
 800aca6:	6820      	ldr	r0, [r4, #0]
 800aca8:	1d19      	adds	r1, r3, #4
 800acaa:	6031      	str	r1, [r6, #0]
 800acac:	0606      	lsls	r6, r0, #24
 800acae:	d501      	bpl.n	800acb4 <_printf_i+0xbc>
 800acb0:	681d      	ldr	r5, [r3, #0]
 800acb2:	e003      	b.n	800acbc <_printf_i+0xc4>
 800acb4:	0645      	lsls	r5, r0, #25
 800acb6:	d5fb      	bpl.n	800acb0 <_printf_i+0xb8>
 800acb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800acbc:	2d00      	cmp	r5, #0
 800acbe:	da03      	bge.n	800acc8 <_printf_i+0xd0>
 800acc0:	232d      	movs	r3, #45	@ 0x2d
 800acc2:	426d      	negs	r5, r5
 800acc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acc8:	4859      	ldr	r0, [pc, #356]	@ (800ae30 <_printf_i+0x238>)
 800acca:	230a      	movs	r3, #10
 800accc:	e011      	b.n	800acf2 <_printf_i+0xfa>
 800acce:	6821      	ldr	r1, [r4, #0]
 800acd0:	6833      	ldr	r3, [r6, #0]
 800acd2:	0608      	lsls	r0, r1, #24
 800acd4:	f853 5b04 	ldr.w	r5, [r3], #4
 800acd8:	d402      	bmi.n	800ace0 <_printf_i+0xe8>
 800acda:	0649      	lsls	r1, r1, #25
 800acdc:	bf48      	it	mi
 800acde:	b2ad      	uxthmi	r5, r5
 800ace0:	2f6f      	cmp	r7, #111	@ 0x6f
 800ace2:	6033      	str	r3, [r6, #0]
 800ace4:	4852      	ldr	r0, [pc, #328]	@ (800ae30 <_printf_i+0x238>)
 800ace6:	bf14      	ite	ne
 800ace8:	230a      	movne	r3, #10
 800acea:	2308      	moveq	r3, #8
 800acec:	2100      	movs	r1, #0
 800acee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800acf2:	6866      	ldr	r6, [r4, #4]
 800acf4:	2e00      	cmp	r6, #0
 800acf6:	60a6      	str	r6, [r4, #8]
 800acf8:	bfa2      	ittt	ge
 800acfa:	6821      	ldrge	r1, [r4, #0]
 800acfc:	f021 0104 	bicge.w	r1, r1, #4
 800ad00:	6021      	strge	r1, [r4, #0]
 800ad02:	b90d      	cbnz	r5, 800ad08 <_printf_i+0x110>
 800ad04:	2e00      	cmp	r6, #0
 800ad06:	d04b      	beq.n	800ada0 <_printf_i+0x1a8>
 800ad08:	4616      	mov	r6, r2
 800ad0a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad0e:	fb03 5711 	mls	r7, r3, r1, r5
 800ad12:	5dc7      	ldrb	r7, [r0, r7]
 800ad14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad18:	462f      	mov	r7, r5
 800ad1a:	460d      	mov	r5, r1
 800ad1c:	42bb      	cmp	r3, r7
 800ad1e:	d9f4      	bls.n	800ad0a <_printf_i+0x112>
 800ad20:	2b08      	cmp	r3, #8
 800ad22:	d10b      	bne.n	800ad3c <_printf_i+0x144>
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	07df      	lsls	r7, r3, #31
 800ad28:	d508      	bpl.n	800ad3c <_printf_i+0x144>
 800ad2a:	6923      	ldr	r3, [r4, #16]
 800ad2c:	6861      	ldr	r1, [r4, #4]
 800ad2e:	4299      	cmp	r1, r3
 800ad30:	bfde      	ittt	le
 800ad32:	2330      	movle	r3, #48	@ 0x30
 800ad34:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad38:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad3c:	1b92      	subs	r2, r2, r6
 800ad3e:	6122      	str	r2, [r4, #16]
 800ad40:	464b      	mov	r3, r9
 800ad42:	aa03      	add	r2, sp, #12
 800ad44:	4621      	mov	r1, r4
 800ad46:	4640      	mov	r0, r8
 800ad48:	f8cd a000 	str.w	sl, [sp]
 800ad4c:	f7ff fee2 	bl	800ab14 <_printf_common>
 800ad50:	3001      	adds	r0, #1
 800ad52:	d14a      	bne.n	800adea <_printf_i+0x1f2>
 800ad54:	f04f 30ff 	mov.w	r0, #4294967295
 800ad58:	b004      	add	sp, #16
 800ad5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	f043 0320 	orr.w	r3, r3, #32
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	2778      	movs	r7, #120	@ 0x78
 800ad68:	4832      	ldr	r0, [pc, #200]	@ (800ae34 <_printf_i+0x23c>)
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad70:	061f      	lsls	r7, r3, #24
 800ad72:	6831      	ldr	r1, [r6, #0]
 800ad74:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad78:	d402      	bmi.n	800ad80 <_printf_i+0x188>
 800ad7a:	065f      	lsls	r7, r3, #25
 800ad7c:	bf48      	it	mi
 800ad7e:	b2ad      	uxthmi	r5, r5
 800ad80:	6031      	str	r1, [r6, #0]
 800ad82:	07d9      	lsls	r1, r3, #31
 800ad84:	bf44      	itt	mi
 800ad86:	f043 0320 	orrmi.w	r3, r3, #32
 800ad8a:	6023      	strmi	r3, [r4, #0]
 800ad8c:	b11d      	cbz	r5, 800ad96 <_printf_i+0x19e>
 800ad8e:	2310      	movs	r3, #16
 800ad90:	e7ac      	b.n	800acec <_printf_i+0xf4>
 800ad92:	4827      	ldr	r0, [pc, #156]	@ (800ae30 <_printf_i+0x238>)
 800ad94:	e7e9      	b.n	800ad6a <_printf_i+0x172>
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	f023 0320 	bic.w	r3, r3, #32
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	e7f6      	b.n	800ad8e <_printf_i+0x196>
 800ada0:	4616      	mov	r6, r2
 800ada2:	e7bd      	b.n	800ad20 <_printf_i+0x128>
 800ada4:	6833      	ldr	r3, [r6, #0]
 800ada6:	6825      	ldr	r5, [r4, #0]
 800ada8:	1d18      	adds	r0, r3, #4
 800adaa:	6961      	ldr	r1, [r4, #20]
 800adac:	6030      	str	r0, [r6, #0]
 800adae:	062e      	lsls	r6, r5, #24
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	d501      	bpl.n	800adb8 <_printf_i+0x1c0>
 800adb4:	6019      	str	r1, [r3, #0]
 800adb6:	e002      	b.n	800adbe <_printf_i+0x1c6>
 800adb8:	0668      	lsls	r0, r5, #25
 800adba:	d5fb      	bpl.n	800adb4 <_printf_i+0x1bc>
 800adbc:	8019      	strh	r1, [r3, #0]
 800adbe:	2300      	movs	r3, #0
 800adc0:	4616      	mov	r6, r2
 800adc2:	6123      	str	r3, [r4, #16]
 800adc4:	e7bc      	b.n	800ad40 <_printf_i+0x148>
 800adc6:	6833      	ldr	r3, [r6, #0]
 800adc8:	2100      	movs	r1, #0
 800adca:	1d1a      	adds	r2, r3, #4
 800adcc:	6032      	str	r2, [r6, #0]
 800adce:	681e      	ldr	r6, [r3, #0]
 800add0:	6862      	ldr	r2, [r4, #4]
 800add2:	4630      	mov	r0, r6
 800add4:	f000 f980 	bl	800b0d8 <memchr>
 800add8:	b108      	cbz	r0, 800adde <_printf_i+0x1e6>
 800adda:	1b80      	subs	r0, r0, r6
 800addc:	6060      	str	r0, [r4, #4]
 800adde:	6863      	ldr	r3, [r4, #4]
 800ade0:	6123      	str	r3, [r4, #16]
 800ade2:	2300      	movs	r3, #0
 800ade4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ade8:	e7aa      	b.n	800ad40 <_printf_i+0x148>
 800adea:	6923      	ldr	r3, [r4, #16]
 800adec:	4632      	mov	r2, r6
 800adee:	4649      	mov	r1, r9
 800adf0:	4640      	mov	r0, r8
 800adf2:	47d0      	blx	sl
 800adf4:	3001      	adds	r0, #1
 800adf6:	d0ad      	beq.n	800ad54 <_printf_i+0x15c>
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	079b      	lsls	r3, r3, #30
 800adfc:	d413      	bmi.n	800ae26 <_printf_i+0x22e>
 800adfe:	68e0      	ldr	r0, [r4, #12]
 800ae00:	9b03      	ldr	r3, [sp, #12]
 800ae02:	4298      	cmp	r0, r3
 800ae04:	bfb8      	it	lt
 800ae06:	4618      	movlt	r0, r3
 800ae08:	e7a6      	b.n	800ad58 <_printf_i+0x160>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	4632      	mov	r2, r6
 800ae0e:	4649      	mov	r1, r9
 800ae10:	4640      	mov	r0, r8
 800ae12:	47d0      	blx	sl
 800ae14:	3001      	adds	r0, #1
 800ae16:	d09d      	beq.n	800ad54 <_printf_i+0x15c>
 800ae18:	3501      	adds	r5, #1
 800ae1a:	68e3      	ldr	r3, [r4, #12]
 800ae1c:	9903      	ldr	r1, [sp, #12]
 800ae1e:	1a5b      	subs	r3, r3, r1
 800ae20:	42ab      	cmp	r3, r5
 800ae22:	dcf2      	bgt.n	800ae0a <_printf_i+0x212>
 800ae24:	e7eb      	b.n	800adfe <_printf_i+0x206>
 800ae26:	2500      	movs	r5, #0
 800ae28:	f104 0619 	add.w	r6, r4, #25
 800ae2c:	e7f5      	b.n	800ae1a <_printf_i+0x222>
 800ae2e:	bf00      	nop
 800ae30:	0800b749 	.word	0x0800b749
 800ae34:	0800b75a 	.word	0x0800b75a

0800ae38 <__sflush_r>:
 800ae38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae40:	0716      	lsls	r6, r2, #28
 800ae42:	4605      	mov	r5, r0
 800ae44:	460c      	mov	r4, r1
 800ae46:	d454      	bmi.n	800aef2 <__sflush_r+0xba>
 800ae48:	684b      	ldr	r3, [r1, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	dc02      	bgt.n	800ae54 <__sflush_r+0x1c>
 800ae4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	dd48      	ble.n	800aee6 <__sflush_r+0xae>
 800ae54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae56:	2e00      	cmp	r6, #0
 800ae58:	d045      	beq.n	800aee6 <__sflush_r+0xae>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae60:	682f      	ldr	r7, [r5, #0]
 800ae62:	6a21      	ldr	r1, [r4, #32]
 800ae64:	602b      	str	r3, [r5, #0]
 800ae66:	d030      	beq.n	800aeca <__sflush_r+0x92>
 800ae68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae6a:	89a3      	ldrh	r3, [r4, #12]
 800ae6c:	0759      	lsls	r1, r3, #29
 800ae6e:	d505      	bpl.n	800ae7c <__sflush_r+0x44>
 800ae70:	6863      	ldr	r3, [r4, #4]
 800ae72:	1ad2      	subs	r2, r2, r3
 800ae74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae76:	b10b      	cbz	r3, 800ae7c <__sflush_r+0x44>
 800ae78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae7a:	1ad2      	subs	r2, r2, r3
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae80:	6a21      	ldr	r1, [r4, #32]
 800ae82:	4628      	mov	r0, r5
 800ae84:	47b0      	blx	r6
 800ae86:	1c43      	adds	r3, r0, #1
 800ae88:	89a3      	ldrh	r3, [r4, #12]
 800ae8a:	d106      	bne.n	800ae9a <__sflush_r+0x62>
 800ae8c:	6829      	ldr	r1, [r5, #0]
 800ae8e:	291d      	cmp	r1, #29
 800ae90:	d82b      	bhi.n	800aeea <__sflush_r+0xb2>
 800ae92:	4a2a      	ldr	r2, [pc, #168]	@ (800af3c <__sflush_r+0x104>)
 800ae94:	410a      	asrs	r2, r1
 800ae96:	07d6      	lsls	r6, r2, #31
 800ae98:	d427      	bmi.n	800aeea <__sflush_r+0xb2>
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	04d9      	lsls	r1, r3, #19
 800ae9e:	6062      	str	r2, [r4, #4]
 800aea0:	6922      	ldr	r2, [r4, #16]
 800aea2:	6022      	str	r2, [r4, #0]
 800aea4:	d504      	bpl.n	800aeb0 <__sflush_r+0x78>
 800aea6:	1c42      	adds	r2, r0, #1
 800aea8:	d101      	bne.n	800aeae <__sflush_r+0x76>
 800aeaa:	682b      	ldr	r3, [r5, #0]
 800aeac:	b903      	cbnz	r3, 800aeb0 <__sflush_r+0x78>
 800aeae:	6560      	str	r0, [r4, #84]	@ 0x54
 800aeb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aeb2:	602f      	str	r7, [r5, #0]
 800aeb4:	b1b9      	cbz	r1, 800aee6 <__sflush_r+0xae>
 800aeb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aeba:	4299      	cmp	r1, r3
 800aebc:	d002      	beq.n	800aec4 <__sflush_r+0x8c>
 800aebe:	4628      	mov	r0, r5
 800aec0:	f7ff fbee 	bl	800a6a0 <_free_r>
 800aec4:	2300      	movs	r3, #0
 800aec6:	6363      	str	r3, [r4, #52]	@ 0x34
 800aec8:	e00d      	b.n	800aee6 <__sflush_r+0xae>
 800aeca:	2301      	movs	r3, #1
 800aecc:	4628      	mov	r0, r5
 800aece:	47b0      	blx	r6
 800aed0:	4602      	mov	r2, r0
 800aed2:	1c50      	adds	r0, r2, #1
 800aed4:	d1c9      	bne.n	800ae6a <__sflush_r+0x32>
 800aed6:	682b      	ldr	r3, [r5, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d0c6      	beq.n	800ae6a <__sflush_r+0x32>
 800aedc:	2b1d      	cmp	r3, #29
 800aede:	d001      	beq.n	800aee4 <__sflush_r+0xac>
 800aee0:	2b16      	cmp	r3, #22
 800aee2:	d11d      	bne.n	800af20 <__sflush_r+0xe8>
 800aee4:	602f      	str	r7, [r5, #0]
 800aee6:	2000      	movs	r0, #0
 800aee8:	e021      	b.n	800af2e <__sflush_r+0xf6>
 800aeea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeee:	b21b      	sxth	r3, r3
 800aef0:	e01a      	b.n	800af28 <__sflush_r+0xf0>
 800aef2:	690f      	ldr	r7, [r1, #16]
 800aef4:	2f00      	cmp	r7, #0
 800aef6:	d0f6      	beq.n	800aee6 <__sflush_r+0xae>
 800aef8:	0793      	lsls	r3, r2, #30
 800aefa:	680e      	ldr	r6, [r1, #0]
 800aefc:	600f      	str	r7, [r1, #0]
 800aefe:	bf0c      	ite	eq
 800af00:	694b      	ldreq	r3, [r1, #20]
 800af02:	2300      	movne	r3, #0
 800af04:	eba6 0807 	sub.w	r8, r6, r7
 800af08:	608b      	str	r3, [r1, #8]
 800af0a:	f1b8 0f00 	cmp.w	r8, #0
 800af0e:	ddea      	ble.n	800aee6 <__sflush_r+0xae>
 800af10:	4643      	mov	r3, r8
 800af12:	463a      	mov	r2, r7
 800af14:	6a21      	ldr	r1, [r4, #32]
 800af16:	4628      	mov	r0, r5
 800af18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af1a:	47b0      	blx	r6
 800af1c:	2800      	cmp	r0, #0
 800af1e:	dc08      	bgt.n	800af32 <__sflush_r+0xfa>
 800af20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af28:	f04f 30ff 	mov.w	r0, #4294967295
 800af2c:	81a3      	strh	r3, [r4, #12]
 800af2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af32:	4407      	add	r7, r0
 800af34:	eba8 0800 	sub.w	r8, r8, r0
 800af38:	e7e7      	b.n	800af0a <__sflush_r+0xd2>
 800af3a:	bf00      	nop
 800af3c:	dfbffffe 	.word	0xdfbffffe

0800af40 <_fflush_r>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	690b      	ldr	r3, [r1, #16]
 800af44:	4605      	mov	r5, r0
 800af46:	460c      	mov	r4, r1
 800af48:	b913      	cbnz	r3, 800af50 <_fflush_r+0x10>
 800af4a:	2500      	movs	r5, #0
 800af4c:	4628      	mov	r0, r5
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	b118      	cbz	r0, 800af5a <_fflush_r+0x1a>
 800af52:	6a03      	ldr	r3, [r0, #32]
 800af54:	b90b      	cbnz	r3, 800af5a <_fflush_r+0x1a>
 800af56:	f7ff fa87 	bl	800a468 <__sinit>
 800af5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d0f3      	beq.n	800af4a <_fflush_r+0xa>
 800af62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af64:	07d0      	lsls	r0, r2, #31
 800af66:	d404      	bmi.n	800af72 <_fflush_r+0x32>
 800af68:	0599      	lsls	r1, r3, #22
 800af6a:	d402      	bmi.n	800af72 <_fflush_r+0x32>
 800af6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af6e:	f7ff fb80 	bl	800a672 <__retarget_lock_acquire_recursive>
 800af72:	4628      	mov	r0, r5
 800af74:	4621      	mov	r1, r4
 800af76:	f7ff ff5f 	bl	800ae38 <__sflush_r>
 800af7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af7c:	4605      	mov	r5, r0
 800af7e:	07da      	lsls	r2, r3, #31
 800af80:	d4e4      	bmi.n	800af4c <_fflush_r+0xc>
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	059b      	lsls	r3, r3, #22
 800af86:	d4e1      	bmi.n	800af4c <_fflush_r+0xc>
 800af88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af8a:	f7ff fb73 	bl	800a674 <__retarget_lock_release_recursive>
 800af8e:	e7dd      	b.n	800af4c <_fflush_r+0xc>

0800af90 <__swbuf_r>:
 800af90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af92:	460e      	mov	r6, r1
 800af94:	4614      	mov	r4, r2
 800af96:	4605      	mov	r5, r0
 800af98:	b118      	cbz	r0, 800afa2 <__swbuf_r+0x12>
 800af9a:	6a03      	ldr	r3, [r0, #32]
 800af9c:	b90b      	cbnz	r3, 800afa2 <__swbuf_r+0x12>
 800af9e:	f7ff fa63 	bl	800a468 <__sinit>
 800afa2:	69a3      	ldr	r3, [r4, #24]
 800afa4:	60a3      	str	r3, [r4, #8]
 800afa6:	89a3      	ldrh	r3, [r4, #12]
 800afa8:	071a      	lsls	r2, r3, #28
 800afaa:	d501      	bpl.n	800afb0 <__swbuf_r+0x20>
 800afac:	6923      	ldr	r3, [r4, #16]
 800afae:	b943      	cbnz	r3, 800afc2 <__swbuf_r+0x32>
 800afb0:	4621      	mov	r1, r4
 800afb2:	4628      	mov	r0, r5
 800afb4:	f000 f82a 	bl	800b00c <__swsetup_r>
 800afb8:	b118      	cbz	r0, 800afc2 <__swbuf_r+0x32>
 800afba:	f04f 37ff 	mov.w	r7, #4294967295
 800afbe:	4638      	mov	r0, r7
 800afc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	b2f6      	uxtb	r6, r6
 800afc6:	6922      	ldr	r2, [r4, #16]
 800afc8:	4637      	mov	r7, r6
 800afca:	1a98      	subs	r0, r3, r2
 800afcc:	6963      	ldr	r3, [r4, #20]
 800afce:	4283      	cmp	r3, r0
 800afd0:	dc05      	bgt.n	800afde <__swbuf_r+0x4e>
 800afd2:	4621      	mov	r1, r4
 800afd4:	4628      	mov	r0, r5
 800afd6:	f7ff ffb3 	bl	800af40 <_fflush_r>
 800afda:	2800      	cmp	r0, #0
 800afdc:	d1ed      	bne.n	800afba <__swbuf_r+0x2a>
 800afde:	68a3      	ldr	r3, [r4, #8]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	60a3      	str	r3, [r4, #8]
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	1c5a      	adds	r2, r3, #1
 800afe8:	6022      	str	r2, [r4, #0]
 800afea:	701e      	strb	r6, [r3, #0]
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	6962      	ldr	r2, [r4, #20]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d004      	beq.n	800affe <__swbuf_r+0x6e>
 800aff4:	89a3      	ldrh	r3, [r4, #12]
 800aff6:	07db      	lsls	r3, r3, #31
 800aff8:	d5e1      	bpl.n	800afbe <__swbuf_r+0x2e>
 800affa:	2e0a      	cmp	r6, #10
 800affc:	d1df      	bne.n	800afbe <__swbuf_r+0x2e>
 800affe:	4621      	mov	r1, r4
 800b000:	4628      	mov	r0, r5
 800b002:	f7ff ff9d 	bl	800af40 <_fflush_r>
 800b006:	2800      	cmp	r0, #0
 800b008:	d0d9      	beq.n	800afbe <__swbuf_r+0x2e>
 800b00a:	e7d6      	b.n	800afba <__swbuf_r+0x2a>

0800b00c <__swsetup_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4b29      	ldr	r3, [pc, #164]	@ (800b0b4 <__swsetup_r+0xa8>)
 800b010:	4605      	mov	r5, r0
 800b012:	460c      	mov	r4, r1
 800b014:	6818      	ldr	r0, [r3, #0]
 800b016:	b118      	cbz	r0, 800b020 <__swsetup_r+0x14>
 800b018:	6a03      	ldr	r3, [r0, #32]
 800b01a:	b90b      	cbnz	r3, 800b020 <__swsetup_r+0x14>
 800b01c:	f7ff fa24 	bl	800a468 <__sinit>
 800b020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b024:	0719      	lsls	r1, r3, #28
 800b026:	d422      	bmi.n	800b06e <__swsetup_r+0x62>
 800b028:	06da      	lsls	r2, r3, #27
 800b02a:	d407      	bmi.n	800b03c <__swsetup_r+0x30>
 800b02c:	2209      	movs	r2, #9
 800b02e:	602a      	str	r2, [r5, #0]
 800b030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b034:	f04f 30ff 	mov.w	r0, #4294967295
 800b038:	81a3      	strh	r3, [r4, #12]
 800b03a:	e033      	b.n	800b0a4 <__swsetup_r+0x98>
 800b03c:	0758      	lsls	r0, r3, #29
 800b03e:	d512      	bpl.n	800b066 <__swsetup_r+0x5a>
 800b040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b042:	b141      	cbz	r1, 800b056 <__swsetup_r+0x4a>
 800b044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b048:	4299      	cmp	r1, r3
 800b04a:	d002      	beq.n	800b052 <__swsetup_r+0x46>
 800b04c:	4628      	mov	r0, r5
 800b04e:	f7ff fb27 	bl	800a6a0 <_free_r>
 800b052:	2300      	movs	r3, #0
 800b054:	6363      	str	r3, [r4, #52]	@ 0x34
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b05c:	81a3      	strh	r3, [r4, #12]
 800b05e:	2300      	movs	r3, #0
 800b060:	6063      	str	r3, [r4, #4]
 800b062:	6923      	ldr	r3, [r4, #16]
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	f043 0308 	orr.w	r3, r3, #8
 800b06c:	81a3      	strh	r3, [r4, #12]
 800b06e:	6923      	ldr	r3, [r4, #16]
 800b070:	b94b      	cbnz	r3, 800b086 <__swsetup_r+0x7a>
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b07c:	d003      	beq.n	800b086 <__swsetup_r+0x7a>
 800b07e:	4621      	mov	r1, r4
 800b080:	4628      	mov	r0, r5
 800b082:	f000 f85c 	bl	800b13e <__smakebuf_r>
 800b086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b08a:	f013 0201 	ands.w	r2, r3, #1
 800b08e:	d00a      	beq.n	800b0a6 <__swsetup_r+0x9a>
 800b090:	2200      	movs	r2, #0
 800b092:	60a2      	str	r2, [r4, #8]
 800b094:	6962      	ldr	r2, [r4, #20]
 800b096:	4252      	negs	r2, r2
 800b098:	61a2      	str	r2, [r4, #24]
 800b09a:	6922      	ldr	r2, [r4, #16]
 800b09c:	b942      	cbnz	r2, 800b0b0 <__swsetup_r+0xa4>
 800b09e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b0a2:	d1c5      	bne.n	800b030 <__swsetup_r+0x24>
 800b0a4:	bd38      	pop	{r3, r4, r5, pc}
 800b0a6:	0799      	lsls	r1, r3, #30
 800b0a8:	bf58      	it	pl
 800b0aa:	6962      	ldrpl	r2, [r4, #20]
 800b0ac:	60a2      	str	r2, [r4, #8]
 800b0ae:	e7f4      	b.n	800b09a <__swsetup_r+0x8e>
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	e7f7      	b.n	800b0a4 <__swsetup_r+0x98>
 800b0b4:	20000054 	.word	0x20000054

0800b0b8 <_sbrk_r>:
 800b0b8:	b538      	push	{r3, r4, r5, lr}
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	4d05      	ldr	r5, [pc, #20]	@ (800b0d4 <_sbrk_r+0x1c>)
 800b0be:	4604      	mov	r4, r0
 800b0c0:	4608      	mov	r0, r1
 800b0c2:	602b      	str	r3, [r5, #0]
 800b0c4:	f7f6 fbaa 	bl	800181c <_sbrk>
 800b0c8:	1c43      	adds	r3, r0, #1
 800b0ca:	d102      	bne.n	800b0d2 <_sbrk_r+0x1a>
 800b0cc:	682b      	ldr	r3, [r5, #0]
 800b0ce:	b103      	cbz	r3, 800b0d2 <_sbrk_r+0x1a>
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	bd38      	pop	{r3, r4, r5, pc}
 800b0d4:	200088a4 	.word	0x200088a4

0800b0d8 <memchr>:
 800b0d8:	b2c9      	uxtb	r1, r1
 800b0da:	4603      	mov	r3, r0
 800b0dc:	4402      	add	r2, r0
 800b0de:	b510      	push	{r4, lr}
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	d101      	bne.n	800b0ea <memchr+0x12>
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	e003      	b.n	800b0f2 <memchr+0x1a>
 800b0ea:	7804      	ldrb	r4, [r0, #0]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	428c      	cmp	r4, r1
 800b0f0:	d1f6      	bne.n	800b0e0 <memchr+0x8>
 800b0f2:	bd10      	pop	{r4, pc}

0800b0f4 <__swhatbuf_r>:
 800b0f4:	b570      	push	{r4, r5, r6, lr}
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0fc:	b096      	sub	sp, #88	@ 0x58
 800b0fe:	4615      	mov	r5, r2
 800b100:	2900      	cmp	r1, #0
 800b102:	461e      	mov	r6, r3
 800b104:	da0c      	bge.n	800b120 <__swhatbuf_r+0x2c>
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	2100      	movs	r1, #0
 800b10a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b10e:	bf14      	ite	ne
 800b110:	2340      	movne	r3, #64	@ 0x40
 800b112:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b116:	2000      	movs	r0, #0
 800b118:	6031      	str	r1, [r6, #0]
 800b11a:	602b      	str	r3, [r5, #0]
 800b11c:	b016      	add	sp, #88	@ 0x58
 800b11e:	bd70      	pop	{r4, r5, r6, pc}
 800b120:	466a      	mov	r2, sp
 800b122:	f000 f849 	bl	800b1b8 <_fstat_r>
 800b126:	2800      	cmp	r0, #0
 800b128:	dbed      	blt.n	800b106 <__swhatbuf_r+0x12>
 800b12a:	9901      	ldr	r1, [sp, #4]
 800b12c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b130:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b134:	4259      	negs	r1, r3
 800b136:	4159      	adcs	r1, r3
 800b138:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b13c:	e7eb      	b.n	800b116 <__swhatbuf_r+0x22>

0800b13e <__smakebuf_r>:
 800b13e:	898b      	ldrh	r3, [r1, #12]
 800b140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b142:	079d      	lsls	r5, r3, #30
 800b144:	4606      	mov	r6, r0
 800b146:	460c      	mov	r4, r1
 800b148:	d507      	bpl.n	800b15a <__smakebuf_r+0x1c>
 800b14a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b14e:	6023      	str	r3, [r4, #0]
 800b150:	6123      	str	r3, [r4, #16]
 800b152:	2301      	movs	r3, #1
 800b154:	6163      	str	r3, [r4, #20]
 800b156:	b003      	add	sp, #12
 800b158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b15a:	ab01      	add	r3, sp, #4
 800b15c:	466a      	mov	r2, sp
 800b15e:	f7ff ffc9 	bl	800b0f4 <__swhatbuf_r>
 800b162:	9f00      	ldr	r7, [sp, #0]
 800b164:	4605      	mov	r5, r0
 800b166:	4630      	mov	r0, r6
 800b168:	4639      	mov	r1, r7
 800b16a:	f7ff fb05 	bl	800a778 <_malloc_r>
 800b16e:	b948      	cbnz	r0, 800b184 <__smakebuf_r+0x46>
 800b170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b174:	059a      	lsls	r2, r3, #22
 800b176:	d4ee      	bmi.n	800b156 <__smakebuf_r+0x18>
 800b178:	f023 0303 	bic.w	r3, r3, #3
 800b17c:	f043 0302 	orr.w	r3, r3, #2
 800b180:	81a3      	strh	r3, [r4, #12]
 800b182:	e7e2      	b.n	800b14a <__smakebuf_r+0xc>
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	6020      	str	r0, [r4, #0]
 800b188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b18c:	81a3      	strh	r3, [r4, #12]
 800b18e:	9b01      	ldr	r3, [sp, #4]
 800b190:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b194:	b15b      	cbz	r3, 800b1ae <__smakebuf_r+0x70>
 800b196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b19a:	4630      	mov	r0, r6
 800b19c:	f000 f81e 	bl	800b1dc <_isatty_r>
 800b1a0:	b128      	cbz	r0, 800b1ae <__smakebuf_r+0x70>
 800b1a2:	89a3      	ldrh	r3, [r4, #12]
 800b1a4:	f023 0303 	bic.w	r3, r3, #3
 800b1a8:	f043 0301 	orr.w	r3, r3, #1
 800b1ac:	81a3      	strh	r3, [r4, #12]
 800b1ae:	89a3      	ldrh	r3, [r4, #12]
 800b1b0:	431d      	orrs	r5, r3
 800b1b2:	81a5      	strh	r5, [r4, #12]
 800b1b4:	e7cf      	b.n	800b156 <__smakebuf_r+0x18>
	...

0800b1b8 <_fstat_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	4d06      	ldr	r5, [pc, #24]	@ (800b1d8 <_fstat_r+0x20>)
 800b1be:	4604      	mov	r4, r0
 800b1c0:	4608      	mov	r0, r1
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	602b      	str	r3, [r5, #0]
 800b1c6:	f7f6 fb00 	bl	80017ca <_fstat>
 800b1ca:	1c43      	adds	r3, r0, #1
 800b1cc:	d102      	bne.n	800b1d4 <_fstat_r+0x1c>
 800b1ce:	682b      	ldr	r3, [r5, #0]
 800b1d0:	b103      	cbz	r3, 800b1d4 <_fstat_r+0x1c>
 800b1d2:	6023      	str	r3, [r4, #0]
 800b1d4:	bd38      	pop	{r3, r4, r5, pc}
 800b1d6:	bf00      	nop
 800b1d8:	200088a4 	.word	0x200088a4

0800b1dc <_isatty_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	2300      	movs	r3, #0
 800b1e0:	4d05      	ldr	r5, [pc, #20]	@ (800b1f8 <_isatty_r+0x1c>)
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	4608      	mov	r0, r1
 800b1e6:	602b      	str	r3, [r5, #0]
 800b1e8:	f7f6 faff 	bl	80017ea <_isatty>
 800b1ec:	1c43      	adds	r3, r0, #1
 800b1ee:	d102      	bne.n	800b1f6 <_isatty_r+0x1a>
 800b1f0:	682b      	ldr	r3, [r5, #0]
 800b1f2:	b103      	cbz	r3, 800b1f6 <_isatty_r+0x1a>
 800b1f4:	6023      	str	r3, [r4, #0]
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}
 800b1f8:	200088a4 	.word	0x200088a4

0800b1fc <_init>:
 800b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fe:	bf00      	nop
 800b200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b202:	bc08      	pop	{r3}
 800b204:	469e      	mov	lr, r3
 800b206:	4770      	bx	lr

0800b208 <_fini>:
 800b208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20a:	bf00      	nop
 800b20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b20e:	bc08      	pop	{r3}
 800b210:	469e      	mov	lr, r3
 800b212:	4770      	bx	lr
