
STM32U575ZIT6Q-gpio-dac-dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b008  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036b  0800b240  0800b240  0000c240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b5ac  0800b5ac  0000c5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b5b4  0800b5b4  0000c5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b5b8  0800b5b8  0000c5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000a4  20000000  0800b5bc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c10  200000a4  0800b660  0000d0a4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20004cb4  0800b660  0000dcb4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000d0a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f988  00000000  00000000  0000d0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c9f  00000000  00000000  0002ca62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001940  00000000  00000000  00030708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000139a  00000000  00000000  00032048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035437  00000000  00000000  000333e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020516  00000000  00000000  00068819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014938f  00000000  00000000  00088d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d20be  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007308  00000000  00000000  001d2104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  001d940c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200000a4 	.word	0x200000a4
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b228 	.word	0x0800b228

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200000a8 	.word	0x200000a8
 8000274:	0800b228 	.word	0x0800b228

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIOQueue_Config>:
  * @brief  DMA Linked-list GPIOQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_GPIOQueue_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b09c      	sub	sp, #112	@ 0x70
 8000594:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 8000596:	2300      	movs	r3, #0
 8000598:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800059c:	2321      	movs	r3, #33	@ 0x21
 800059e:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_TIM2_UP;
 80005a0:	233c      	movs	r3, #60	@ 0x3c
 80005a2:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ac:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 80005ae:	2308      	movs	r3, #8
 80005b0:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80005ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80005be:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	627b      	str	r3, [r7, #36]	@ 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 80005cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80005d0:	633b      	str	r3, [r7, #48]	@ 0x30
  pNodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 80005d2:	2300      	movs	r3, #0
 80005d4:	643b      	str	r3, [r7, #64]	@ 0x40
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80005d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80005da:	647b      	str	r3, [r7, #68]	@ 0x44
  pNodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM2_TRGO;
 80005dc:	232a      	movs	r3, #42	@ 0x2a
 80005de:	64bb      	str	r3, [r7, #72]	@ 0x48
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pNodeConfig.SrcAddress = stGPIOVals;
 80005e8:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <MX_GPIOQueue_Config+0xb8>)
 80005ea:	663b      	str	r3, [r7, #96]	@ 0x60
		break;
	case PORTD:
		pNodeConfig.DstAddress = (uint32_t)&(GPIOD->ODR);
		break;
	case PORTE:
		pNodeConfig.DstAddress = (uint32_t)&(GPIOE->ODR);
 80005ec:	4b17      	ldr	r3, [pc, #92]	@ (800064c <MX_GPIOQueue_Config+0xbc>)
 80005ee:	667b      	str	r3, [r7, #100]	@ 0x64
		break;
 80005f0:	bf00      	nop
	default:
		pNodeConfig.DstAddress = (uint32_t)&(GPIOE->ODR);
		break;
}

  pNodeConfig.DataSize = NV * 4;
 80005f2:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80005f6:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Build GPIOENode Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &stGPIONode);
 80005f8:	463b      	mov	r3, r7
 80005fa:	4915      	ldr	r1, [pc, #84]	@ (8000650 <MX_GPIOQueue_Config+0xc0>)
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 f965 	bl	80038cc <HAL_DMAEx_List_BuildNode>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800060a:	4313      	orrs	r3, r2
 800060c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  /* Insert GPIOENode to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&stGPIOQueue, &stGPIONode);
 8000610:	490f      	ldr	r1, [pc, #60]	@ (8000650 <MX_GPIOQueue_Config+0xc0>)
 8000612:	4810      	ldr	r0, [pc, #64]	@ (8000654 <MX_GPIOQueue_Config+0xc4>)
 8000614:	f003 f986 	bl	8003924 <HAL_DMAEx_List_InsertNode_Tail>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000620:	4313      	orrs	r3, r2
 8000622:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  ret |= HAL_DMAEx_List_SetCircularMode(&stGPIOQueue);
 8000626:	480b      	ldr	r0, [pc, #44]	@ (8000654 <MX_GPIOQueue_Config+0xc4>)
 8000628:	f003 f9f4 	bl	8003a14 <HAL_DMAEx_List_SetCircularMode>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000634:	4313      	orrs	r3, r2
 8000636:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

   return ret;
 800063a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800063e:	4618      	mov	r0, r3
 8000640:	3770      	adds	r7, #112	@ 0x70
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20003870 	.word	0x20003870
 800064c:	42021014 	.word	0x42021014
 8000650:	200000c0 	.word	0x200000c0
 8000654:	200000e4 	.word	0x200000e4

08000658 <MX_DACQueue_Config>:
  * @brief  DMA Linked-list DACQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_DACQueue_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b09c      	sub	sp, #112	@ 0x70
 800065c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8000664:	2321      	movs	r3, #33	@ 0x21
 8000666:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_DAC1_CH1;
 8000668:	2302      	movs	r3, #2
 800066a:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000674:	2308      	movs	r3, #8
 8000676:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 800067c:	2302      	movs	r3, #2
 800067e:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8000680:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000684:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800068e:	2300      	movs	r3, #0
 8000690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000692:	2300      	movs	r3, #0
 8000694:	633b      	str	r3, [r7, #48]	@ 0x30
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8000696:	2300      	movs	r3, #0
 8000698:	647b      	str	r3, [r7, #68]	@ 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800069a:	2300      	movs	r3, #0
 800069c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800069e:	2300      	movs	r3, #0
 80006a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pNodeConfig.SrcAddress = stDACVals;
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_DACQueue_Config+0xa8>)
 80006a4:	663b      	str	r3, [r7, #96]	@ 0x60
  pNodeConfig.DstAddress = (uint32_t)&(DAC1->DOR1);
 80006a6:	4b17      	ldr	r3, [pc, #92]	@ (8000704 <MX_DACQueue_Config+0xac>)
 80006a8:	667b      	str	r3, [r7, #100]	@ 0x64
  pNodeConfig.DataSize = NV * 4;
 80006aa:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80006ae:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Build DACNode Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &stDACNode);
 80006b0:	463b      	mov	r3, r7
 80006b2:	4915      	ldr	r1, [pc, #84]	@ (8000708 <MX_DACQueue_Config+0xb0>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 f909 	bl	80038cc <HAL_DMAEx_List_BuildNode>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80006c2:	4313      	orrs	r3, r2
 80006c4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  /* Insert DACNode to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&stDACQueue, &stDACNode);
 80006c8:	490f      	ldr	r1, [pc, #60]	@ (8000708 <MX_DACQueue_Config+0xb0>)
 80006ca:	4810      	ldr	r0, [pc, #64]	@ (800070c <MX_DACQueue_Config+0xb4>)
 80006cc:	f003 f92a 	bl	8003924 <HAL_DMAEx_List_InsertNode_Tail>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80006d8:	4313      	orrs	r3, r2
 80006da:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  ret |= HAL_DMAEx_List_SetCircularMode(&stDACQueue);
 80006de:	480b      	ldr	r0, [pc, #44]	@ (800070c <MX_DACQueue_Config+0xb4>)
 80006e0:	f003 f998 	bl	8003a14 <HAL_DMAEx_List_SetCircularMode>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80006ec:	4313      	orrs	r3, r2
 80006ee:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

   return ret;
 80006f2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3770      	adds	r7, #112	@ 0x70
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20002670 	.word	0x20002670
 8000704:	4602182c 	.word	0x4602182c
 8000708:	200000fc 	.word	0x200000fc
 800070c:	20000120 	.word	0x20000120

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f001 fb81 	bl	8001e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 800071a:	f000 f8b4 	bl	8000886 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f85f 	bl	80007e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b2b      	ldr	r3, [pc, #172]	@ (80007d0 <main+0xc0>)
 8000724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000728:	4a29      	ldr	r2, [pc, #164]	@ (80007d0 <main+0xc0>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000732:	4b27      	ldr	r3, [pc, #156]	@ (80007d0 <main+0xc0>)
 8000734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
//  state = st_disabled;
//  stGetGlobalState(&state);
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000740:	2000      	movs	r0, #0
 8000742:	f001 f919 	bl	8001978 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000746:	2001      	movs	r0, #1
 8000748:	f001 f916 	bl	8001978 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800074c:	2002      	movs	r0, #2
 800074e:	f001 f913 	bl	8001978 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000752:	2101      	movs	r1, #1
 8000754:	2000      	movs	r0, #0
 8000756:	f001 f9f3 	bl	8001b40 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800075a:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <main+0xc4>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000760:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000762:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <main+0xc4>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000768:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <main+0xc4>)
 800076a:	2200      	movs	r2, #0
 800076c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800076e:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <main+0xc4>)
 8000770:	2200      	movs	r2, #0
 8000772:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000774:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <main+0xc4>)
 8000776:	2200      	movs	r2, #0
 8000778:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800077a:	4916      	ldr	r1, [pc, #88]	@ (80007d4 <main+0xc4>)
 800077c:	2000      	movs	r0, #0
 800077e:	f001 fa6d 	bl	8001c5c <BSP_COM_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <main+0x7c>
  {
    Error_Handler();
 8000788:	f000 f8ba 	bl	8000900 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 800078c:	4812      	ldr	r0, [pc, #72]	@ (80007d8 <main+0xc8>)
 800078e:	f009 feb7 	bl	800a500 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000792:	2000      	movs	r0, #0
 8000794:	f001 f980 	bl	8001a98 <BSP_LED_On>
  BSP_LED_On(LED_BLUE);
 8000798:	2001      	movs	r0, #1
 800079a:	f001 f97d 	bl	8001a98 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 800079e:	2002      	movs	r0, #2
 80007a0:	f001 f97a 	bl	8001a98 <BSP_LED_On>
//
//  /* USER CODE END BSP */
//
//  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
  stInitilize();
 80007a4:	f000 faf8 	bl	8000d98 <stInitilize>
  stStartStimulation();
 80007a8:	f000 fb0c 	bl	8000dc4 <stStartStimulation>
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 80007ac:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <main+0xcc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d1fb      	bne.n	80007ac <main+0x9c>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <main+0xcc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f001 f996 	bl	8001aec <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_BLUE);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f001 f993 	bl	8001aec <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 80007c6:	2002      	movs	r0, #2
 80007c8:	f001 f990 	bl	8001aec <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED)
 80007cc:	e7ee      	b.n	80007ac <main+0x9c>
 80007ce:	bf00      	nop
 80007d0:	46020c00 	.word	0x46020c00
 80007d4:	20000138 	.word	0x20000138
 80007d8:	0800b240 	.word	0x0800b240
 80007dc:	20000148 	.word	0x20000148

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09e      	sub	sp, #120	@ 0x78
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0318 	add.w	r3, r7, #24
 80007ea:	2260      	movs	r2, #96	@ 0x60
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f009 fedb 	bl	800a5aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
 8000802:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000804:	2000      	movs	r0, #0
 8000806:	f004 fa71 	bl	8004cec <HAL_PWREx_ControlVoltageScaling>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000810:	f000 f876 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000814:	231a      	movs	r3, #26
 8000816:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081e:	2310      	movs	r3, #16
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000822:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800082c:	2310      	movs	r3, #16
 800082e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000830:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800083a:	2300      	movs	r3, #0
 800083c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 0318 	add.w	r3, r7, #24
 8000842:	4618      	mov	r0, r3
 8000844:	f004 fb4e 	bl	8004ee4 <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800084e:	f000 f857 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	231f      	movs	r3, #31
 8000854:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f005 fa14 	bl	8005c9c <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800087a:	f000 f841 	bl	8000900 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3778      	adds	r7, #120	@ 0x78
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800088a:	f004 fb1b 	bl	8004ec4 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800088e:	2002      	movs	r0, #2
 8000890:	f004 fab8 	bl	8004e04 <HAL_PWREx_ConfigSupply>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemPower_Config+0x18>
  {
    Error_Handler();
 800089a:	f000 f831 	bl	8000900 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a08      	ldr	r2, [pc, #32]	@ (80008d4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d101      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b6:	f001 fae1 	bl	8001e7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2) {
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008c2:	d102      	bne.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x26>
	  BSP_LED_Toggle(LED_BLUE);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f001 f911 	bl	8001aec <BSP_LED_Toggle>
  }
  /* USER CODE END Callback 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40014800 	.word	0x40014800

080008d8 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <BSP_PB_Callback+0x24>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
  }
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000148 	.word	0x20000148

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <Error_Handler+0x8>

0800090c <st_Iinitilize>:
// Private function declaration
void st_DACDMAConfig();

// Function implementations

void st_Iinitilize(){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

	st_GPIO_Init();
 8000910:	f000 f83e 	bl	8000990 <st_GPIO_Init>
	st_GPDMA_Init();
 8000914:	f000 f8b4 	bl	8000a80 <st_GPDMA_Init>
	st_ICACHE_Init();
 8000918:	f000 f92e 	bl	8000b78 <st_ICACHE_Init>
	st_DAC_Init();
 800091c:	f000 f938 	bl	8000b90 <st_DAC_Init>
	st_TIM_Init();
 8000920:	f000 f984 	bl	8000c2c <st_TIM_Init>
	// a partir de aca se caga.
	MX_GPIOQueue_Config();
 8000924:	f7ff fe34 	bl	8000590 <MX_GPIOQueue_Config>
	HAL_DMAEx_List_LinkQ(&hGPDMA1_GPIO, &stGPIOQueue);
 8000928:	490a      	ldr	r1, [pc, #40]	@ (8000954 <st_Iinitilize+0x48>)
 800092a:	480b      	ldr	r0, [pc, #44]	@ (8000958 <st_Iinitilize+0x4c>)
 800092c:	f003 f8d2 	bl	8003ad4 <HAL_DMAEx_List_LinkQ>
	HAL_DMAEx_List_Start(&hGPDMA1_GPIO);
 8000930:	4809      	ldr	r0, [pc, #36]	@ (8000958 <st_Iinitilize+0x4c>)
 8000932:	f002 fec3 	bl	80036bc <HAL_DMAEx_List_Start>

	MX_DACQueue_Config();
 8000936:	f7ff fe8f 	bl	8000658 <MX_DACQueue_Config>
	HAL_DMAEx_List_LinkQ(&hGPDMA1_DAC, &stDACQueue);
 800093a:	4908      	ldr	r1, [pc, #32]	@ (800095c <st_Iinitilize+0x50>)
 800093c:	4808      	ldr	r0, [pc, #32]	@ (8000960 <st_Iinitilize+0x54>)
 800093e:	f003 f8c9 	bl	8003ad4 <HAL_DMAEx_List_LinkQ>
	__HAL_LINKDMA(&hdac, DMA_Handle1, hGPDMA1_DAC);
 8000942:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <st_Iinitilize+0x58>)
 8000944:	4a06      	ldr	r2, [pc, #24]	@ (8000960 <st_Iinitilize+0x54>)
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <st_Iinitilize+0x54>)
 800094a:	4a06      	ldr	r2, [pc, #24]	@ (8000964 <st_Iinitilize+0x58>)
 800094c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000e4 	.word	0x200000e4
 8000958:	200002b4 	.word	0x200002b4
 800095c:	20000120 	.word	0x20000120
 8000960:	2000032c 	.word	0x2000032c
 8000964:	20000278 	.word	0x20000278

08000968 <st_DMA_Start>:

void st_DMA_Start(){
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	/*  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel11, &GPIOQueue);
	HAL_DMAEx_List_Start(&handle_GPDMA1_Channel11);*/
	// GPIOS and DAC output
	switch (TIM) {
		case T2:
			TIM2->DIER |= (TIM_DIER_UDE) |  TIM_DIER_CC1DE;
 800096c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000976:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800097a:	60d3      	str	r3, [r2, #12]
			break;
 800097c:	bf00      	nop

	//HAL_DMA_Start(&handle_GPDMA1_Channel10,  (uint32_t *)DACVals, (uint32_t)&(DAC1->DOR1), 16);
	// HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)DACVals, NVALS, DAC_ALIGN_12B_R);
	/*  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel10, &DACQueue);
	HAL_DMAEx_List_Start(&handle_GPDMA1_Channel10);*/
	st_DACDMAConfig();
 800097e:	f000 f9a9 	bl	8000cd4 <st_DACDMAConfig>

	//Review starting from here. Also DAC output is not being shown.
	HAL_TIM_Base_Start_IT(&htim);//(&htim1, TIM_CHANNEL_1);
 8000982:	4802      	ldr	r0, [pc, #8]	@ (800098c <st_DMA_Start+0x24>)
 8000984:	f008 fa82 	bl	8008e8c <HAL_TIM_Base_Start_IT>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200003a4 	.word	0x200003a4

08000990 <st_GPIO_Init>:

void st_DMA_Stop(){
	HAL_TIM_Base_Stop(&htim);
}

void st_GPIO_Init(void){
 8000990:	b5b0      	push	{r4, r5, r7, lr}
 8000992:	b092      	sub	sp, #72	@ 0x48
 8000994:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = CH0_Pin|CH1_Pin|CH2_Pin|CH3_Pin
 80009a6:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 80009aa:	633b      	str	r3, [r7, #48]	@ 0x30
			  |CH4_Pin|CH5_Pin|CH6_Pin|CH7_Pin|TRIGGER_Pin|DIR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			HAL_GPIO_WritePin(GPIOD, CH0_Pin|CH1_Pin|CH2_Pin|CH3_Pin
									  |CH4_Pin|CH5_Pin|CH6_Pin|CH7_Pin|TRIGGER_Pin|DIR_Pin, GPIO_PIN_RESET);
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
			break;
		case PORTE:
			__HAL_RCC_GPIOE_CLK_ENABLE();
 80009b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000a74 <st_GPIO_Init+0xe4>)
 80009ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009be:	4a2d      	ldr	r2, [pc, #180]	@ (8000a74 <st_GPIO_Init+0xe4>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <st_GPIO_Init+0xe4>)
 80009ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ce:	f003 0310 	and.w	r3, r3, #16
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
			HAL_GPIO_WritePin(GPIOE, CH0_Pin|CH1_Pin|CH2_Pin|CH3_Pin
 80009d6:	2200      	movs	r2, #0
 80009d8:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 80009dc:	4826      	ldr	r0, [pc, #152]	@ (8000a78 <st_GPIO_Init+0xe8>)
 80009de:	f004 f943 	bl	8004c68 <HAL_GPIO_WritePin>
									  |CH4_Pin|CH5_Pin|CH6_Pin|CH7_Pin|TRIGGER_Pin|DIR_Pin, GPIO_PIN_RESET);
			HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009e6:	4619      	mov	r1, r3
 80009e8:	4823      	ldr	r0, [pc, #140]	@ (8000a78 <st_GPIO_Init+0xe8>)
 80009ea:	f003 fe87 	bl	80046fc <HAL_GPIO_Init>
			break;
 80009ee:	bf00      	nop
			HAL_GPIO_WritePin(GPIOF, CH0_Pin|CH1_Pin|CH2_Pin|CH3_Pin
									  |CH4_Pin|CH5_Pin|CH6_Pin|CH7_Pin|TRIGGER_Pin|DIR_Pin, GPIO_PIN_RESET);
			HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
			break;
	}
	uint8_t iter = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint16_t pins[] = {CH0_Pin, CH1_Pin, CH2_Pin, CH3_Pin, CH4_Pin,CH5_Pin, CH6_Pin,
 80009f6:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <st_GPIO_Init+0xec>)
 80009f8:	f107 041c 	add.w	r4, r7, #28
 80009fc:	461d      	mov	r5, r3
 80009fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a02:	682b      	ldr	r3, [r5, #0]
 8000a04:	6023      	str	r3, [r4, #0]
			CH7_Pin, TRIGGER_Pin, DIR_Pin};
	for (iter = 0; iter < 10;iter++){
 8000a06:	2300      	movs	r3, #0
 8000a08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000a0c:	e010      	b.n	8000a30 <st_GPIO_Init+0xa0>
		HAL_GPIO_WritePin(GPIOE, pins[iter], GPIO_PIN_SET);
 8000a0e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	3348      	adds	r3, #72	@ 0x48
 8000a16:	443b      	add	r3, r7
 8000a18:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4815      	ldr	r0, [pc, #84]	@ (8000a78 <st_GPIO_Init+0xe8>)
 8000a22:	f004 f921 	bl	8004c68 <HAL_GPIO_WritePin>
	for (iter = 0; iter < 10;iter++){
 8000a26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000a30:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a34:	2b09      	cmp	r3, #9
 8000a36:	d9ea      	bls.n	8000a0e <st_GPIO_Init+0x7e>
	}
	for (iter = 0; iter < 10;iter++){
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000a3e:	e010      	b.n	8000a62 <st_GPIO_Init+0xd2>
		HAL_GPIO_WritePin(GPIOE, pins[iter], GPIO_PIN_RESET);
 8000a40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	3348      	adds	r3, #72	@ 0x48
 8000a48:	443b      	add	r3, r7
 8000a4a:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4619      	mov	r1, r3
 8000a52:	4809      	ldr	r0, [pc, #36]	@ (8000a78 <st_GPIO_Init+0xe8>)
 8000a54:	f004 f908 	bl	8004c68 <HAL_GPIO_WritePin>
	for (iter = 0; iter < 10;iter++){
 8000a58:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000a62:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a66:	2b09      	cmp	r3, #9
 8000a68:	d9ea      	bls.n	8000a40 <st_GPIO_Init+0xb0>
	}




}
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	3748      	adds	r7, #72	@ 0x48
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bdb0      	pop	{r4, r5, r7, pc}
 8000a74:	46020c00 	.word	0x46020c00
 8000a78:	42021000 	.word	0x42021000
 8000a7c:	0800b25c 	.word	0x0800b25c

08000a80 <st_GPDMA_Init>:

void st_GPDMA_Init(void){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN GPDMA1_Init 0 */

	/* USER CODE END GPDMA1_Init 0 */

	/* Peripheral clock enable */
	__HAL_RCC_GPDMA1_CLK_ENABLE();
 8000a86:	4b37      	ldr	r3, [pc, #220]	@ (8000b64 <st_GPDMA_Init+0xe4>)
 8000a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8c:	4a35      	ldr	r2, [pc, #212]	@ (8000b64 <st_GPDMA_Init+0xe4>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000a96:	4b33      	ldr	r3, [pc, #204]	@ (8000b64 <st_GPDMA_Init+0xe4>)
 8000a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]

	/* GPDMA1 interrupt Init */
	switch (GPIO_GPDMA) {
		case st_ch11:
			HAL_NVIC_SetPriority(GPDMA1_Channel11_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2053      	movs	r0, #83	@ 0x53
 8000aaa:	f001 fb07 	bl	80020bc <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(GPDMA1_Channel11_IRQn);
 8000aae:	2053      	movs	r0, #83	@ 0x53
 8000ab0:	f001 fb1e 	bl	80020f0 <HAL_NVIC_EnableIRQ>
			hGPDMA1_GPIO.Instance = GPDMA1_Channel11;
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b68 <st_GPDMA_Init+0xe8>)
 8000ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8000b6c <st_GPDMA_Init+0xec>)
 8000ab8:	601a      	str	r2, [r3, #0]
			break;
 8000aba:	bf00      	nop
			HAL_NVIC_SetPriority(GPDMA1_Channel11_IRQn, 0, 0);
			HAL_NVIC_EnableIRQ(GPDMA1_Channel11_IRQn);
			hGPDMA1_DAC.Instance = GPDMA1_Channel11;
			break;
		case st_ch10:
			HAL_NVIC_SetPriority(GPDMA1_Channel10_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2052      	movs	r0, #82	@ 0x52
 8000ac2:	f001 fafb 	bl	80020bc <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(GPDMA1_Channel10_IRQn);
 8000ac6:	2052      	movs	r0, #82	@ 0x52
 8000ac8:	f001 fb12 	bl	80020f0 <HAL_NVIC_EnableIRQ>
			hGPDMA1_DAC.Instance = GPDMA1_Channel10;
 8000acc:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <st_GPDMA_Init+0xf0>)
 8000ace:	4a29      	ldr	r2, [pc, #164]	@ (8000b74 <st_GPDMA_Init+0xf4>)
 8000ad0:	601a      	str	r2, [r3, #0]
		default:
			break;
 8000ad2:	bf00      	nop

	/* USER CODE BEGIN GPDMA1_Init 1 */

	/* USER CODE END GPDMA1_Init 1 */

	hGPDMA1_GPIO.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 8000ad4:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <st_GPDMA_Init+0xe8>)
 8000ad6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000ada:	639a      	str	r2, [r3, #56]	@ 0x38
	hGPDMA1_GPIO.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000adc:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <st_GPDMA_Init+0xe8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	63da      	str	r2, [r3, #60]	@ 0x3c
	hGPDMA1_GPIO.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	@ (8000b68 <st_GPDMA_Init+0xe8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	641a      	str	r2, [r3, #64]	@ 0x40
	hGPDMA1_GPIO.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <st_GPDMA_Init+0xe8>)
 8000aea:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000aee:	645a      	str	r2, [r3, #68]	@ 0x44
	hGPDMA1_GPIO.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <st_GPDMA_Init+0xe8>)
 8000af2:	2281      	movs	r2, #129	@ 0x81
 8000af4:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_DMAEx_List_Init(&hGPDMA1_GPIO) != HAL_OK)
 8000af6:	481c      	ldr	r0, [pc, #112]	@ (8000b68 <st_GPDMA_Init+0xe8>)
 8000af8:	f002 fcb4 	bl	8003464 <HAL_DMAEx_List_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <st_GPDMA_Init+0x86>
	{
		stError_Handler();
 8000b02:	f000 f943 	bl	8000d8c <stError_Handler>
	}
	if (HAL_DMA_ConfigChannelAttributes(&hGPDMA1_GPIO, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b06:	2110      	movs	r1, #16
 8000b08:	4817      	ldr	r0, [pc, #92]	@ (8000b68 <st_GPDMA_Init+0xe8>)
 8000b0a:	f002 fc49 	bl	80033a0 <HAL_DMA_ConfigChannelAttributes>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <st_GPDMA_Init+0x98>
	{
		stError_Handler();
 8000b14:	f000 f93a 	bl	8000d8c <stError_Handler>
	}
	// hGPDMA1_DAC.Instance = DAC_GPDMA;
	hGPDMA1_DAC.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 8000b18:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <st_GPDMA_Init+0xf0>)
 8000b1a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000b1e:	639a      	str	r2, [r3, #56]	@ 0x38
	hGPDMA1_DAC.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000b20:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <st_GPDMA_Init+0xf0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	63da      	str	r2, [r3, #60]	@ 0x3c
	hGPDMA1_DAC.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <st_GPDMA_Init+0xf0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	641a      	str	r2, [r3, #64]	@ 0x40
	hGPDMA1_DAC.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8000b2c:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <st_GPDMA_Init+0xf0>)
 8000b2e:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000b32:	645a      	str	r2, [r3, #68]	@ 0x44
	hGPDMA1_DAC.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <st_GPDMA_Init+0xf0>)
 8000b36:	2281      	movs	r2, #129	@ 0x81
 8000b38:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_DMAEx_List_Init(&hGPDMA1_DAC) != HAL_OK)
 8000b3a:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <st_GPDMA_Init+0xf0>)
 8000b3c:	f002 fc92 	bl	8003464 <HAL_DMAEx_List_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <st_GPDMA_Init+0xca>
	{
		stError_Handler();
 8000b46:	f000 f921 	bl	8000d8c <stError_Handler>
	}
	if (HAL_DMA_ConfigChannelAttributes(&hGPDMA1_DAC, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	4808      	ldr	r0, [pc, #32]	@ (8000b70 <st_GPDMA_Init+0xf0>)
 8000b4e:	f002 fc27 	bl	80033a0 <HAL_DMA_ConfigChannelAttributes>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <st_GPDMA_Init+0xdc>
	{
		stError_Handler();
 8000b58:	f000 f918 	bl	8000d8c <stError_Handler>
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	46020c00 	.word	0x46020c00
 8000b68:	200002b4 	.word	0x200002b4
 8000b6c:	400205d0 	.word	0x400205d0
 8000b70:	2000032c 	.word	0x2000032c
 8000b74:	40020550 	.word	0x40020550

08000b78 <st_ICACHE_Init>:

void st_ICACHE_Init(void){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	if (HAL_ICACHE_Enable() != HAL_OK)
 8000b7c:	f004 f8a6 	bl	8004ccc <HAL_ICACHE_Enable>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <st_ICACHE_Init+0x12>
	{
		stError_Handler();
 8000b86:	f000 f901 	bl	8000d8c <stError_Handler>
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <st_DAC_Init>:

void st_DAC_Init(void){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	@ 0x38
 8000b94:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	2230      	movs	r2, #48	@ 0x30
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f009 fd03 	bl	800a5aa <memset>
	DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]

	/** DAC Initialization
	*/
	hdac.Instance = DAC1;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <st_DAC_Init+0x94>)
 8000baa:	4a1f      	ldr	r2, [pc, #124]	@ (8000c28 <st_DAC_Init+0x98>)
 8000bac:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000bae:	481d      	ldr	r0, [pc, #116]	@ (8000c24 <st_DAC_Init+0x94>)
 8000bb0:	f001 fb12 	bl	80021d8 <HAL_DAC_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <st_DAC_Init+0x2e>
	{
		stError_Handler();
 8000bba:	f000 f8e7 	bl	8000d8c <stError_Handler>
	}

	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	743b      	strb	r3, [r7, #16]
	sConfig.DAC_SignedFormat = DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	747b      	strb	r3, [r7, #17]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bce:	230a      	movs	r3, #10
 8000bd0:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	623b      	str	r3, [r7, #32]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	2200      	movs	r2, #0
 8000be4:	4619      	mov	r1, r3
 8000be6:	480f      	ldr	r0, [pc, #60]	@ (8000c24 <st_DAC_Init+0x94>)
 8000be8:	f001 fdfa 	bl	80027e0 <HAL_DAC_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <st_DAC_Init+0x66>
	{
		stError_Handler();
 8000bf2:	f000 f8cb 	bl	8000d8c <stError_Handler>
	}

	/** Configure Autonomous Mode
	*/
	sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
	if (HAL_DACEx_SetConfigAutonomousMode(&hdac, &sAutonomousMode) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4809      	ldr	r0, [pc, #36]	@ (8000c24 <st_DAC_Init+0x94>)
 8000c00:	f002 f920 	bl	8002e44 <HAL_DACEx_SetConfigAutonomousMode>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <st_DAC_Init+0x7e>
	{
		stError_Handler();
 8000c0a:	f000 f8bf 	bl	8000d8c <stError_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	HAL_DACEx_SelfCalibrate(&hdac, &sConfig, DAC_CHANNEL_1);
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	2200      	movs	r2, #0
 8000c14:	4619      	mov	r1, r3
 8000c16:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <st_DAC_Init+0x94>)
 8000c18:	f001 ffe4 	bl	8002be4 <HAL_DACEx_SelfCalibrate>
}
 8000c1c:	bf00      	nop
 8000c1e:	3738      	adds	r7, #56	@ 0x38
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000278 	.word	0x20000278
 8000c28:	46021800 	.word	0x46021800

08000c2c <st_TIM_Init>:

void st_TIM_Init(void){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	@ 0x28
 8000c30:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */
	uint32_t clkfreq1 = HAL_RCC_GetPCLK1Freq();
 8000c4a:	f005 fb35 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8000c4e:	6278      	str	r0, [r7, #36]	@ 0x24
	uint32_t clkfreq2 = HAL_RCC_GetPCLK2Freq();
 8000c50:	f005 fb46 	bl	80062e0 <HAL_RCC_GetPCLK2Freq>
 8000c54:	6238      	str	r0, [r7, #32]

	/* USER CODE END TIM_Init 1 */
	switch (TIM) {
		case T2:
			htim.Instance = TIM2;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <st_TIM_Init+0xa4>)
 8000c58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c5c:	601a      	str	r2, [r3, #0]
			break;
 8000c5e:	bf00      	nop
		default:
			break;
	}

	htim.Init.Prescaler = PSK;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <st_TIM_Init+0xa4>)
 8000c62:	229f      	movs	r2, #159	@ 0x9f
 8000c64:	605a      	str	r2, [r3, #4]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <st_TIM_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
	htim.Init.Period = PERIOD;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <st_TIM_Init+0xa4>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	60da      	str	r2, [r3, #12]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <st_TIM_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <st_TIM_Init+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim) != HAL_OK)
 8000c7e:	4814      	ldr	r0, [pc, #80]	@ (8000cd0 <st_TIM_Init+0xa4>)
 8000c80:	f008 f8ac 	bl	8008ddc <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <st_TIM_Init+0x62>
	{
		stError_Handler();
 8000c8a:	f000 f87f 	bl	8000d8c <stError_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c92:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig) != HAL_OK)
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <st_TIM_Init+0xa4>)
 8000c9c:	f008 fae6 	bl	800926c <HAL_TIM_ConfigClockSource>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <st_TIM_Init+0x7e>
	{
		stError_Handler();
 8000ca6:	f000 f871 	bl	8000d8c <stError_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000caa:	2320      	movs	r3, #32
 8000cac:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	@ (8000cd0 <st_TIM_Init+0xa4>)
 8000cb8:	f008 fd9e 	bl	80097f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <st_TIM_Init+0x9a>
	{
		stError_Handler();
 8000cc2:	f000 f863 	bl	8000d8c <stError_Handler>
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	@ 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200003a4 	.word	0x200003a4

08000cd4 <st_DACDMAConfig>:


void st_DACDMAConfig(){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08e      	sub	sp, #56	@ 0x38
 8000cd8:	af02      	add	r7, sp, #8
	/* Stop DMA transfer */
	if(HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4828      	ldr	r0, [pc, #160]	@ (8000d80 <st_DACDMAConfig+0xac>)
 8000cde:	f001 fcb1 	bl	8002644 <HAL_DAC_Stop_DMA>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <st_DACDMAConfig+0x18>
	{
		Error_Handler();
 8000ce8:	f7ff fe0a 	bl	8000900 <Error_Handler>
	}

	/* Deinitialize the DAC peripheral */
	if(HAL_DAC_DeInit(&hdac) != HAL_OK)
 8000cec:	4824      	ldr	r0, [pc, #144]	@ (8000d80 <st_DACDMAConfig+0xac>)
 8000cee:	f001 fac7 	bl	8002280 <HAL_DAC_DeInit>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <st_DACDMAConfig+0x28>
	{
		stError_Handler();
 8000cf8:	f000 f848 	bl	8000d8c <stError_Handler>
	}
	DAC_ChannelConfTypeDef sConfig = {0};
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2230      	movs	r2, #48	@ 0x30
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f009 fc51 	bl	800a5aa <memset>

	/* Set DAC instance */
	hdac.Instance = DAC1;
 8000d08:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <st_DACDMAConfig+0xac>)
 8000d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000d84 <st_DACDMAConfig+0xb0>)
 8000d0c:	601a      	str	r2, [r3, #0]

	/* Initialize DAC */
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d0e:	481c      	ldr	r0, [pc, #112]	@ (8000d80 <st_DACDMAConfig+0xac>)
 8000d10:	f001 fa62 	bl	80021d8 <HAL_DAC_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <st_DACDMAConfig+0x4a>
	{
	/* Initialization Error */
		stError_Handler();
 8000d1a:	f000 f837 	bl	8000d8c <stError_Handler>
	}

	/* Config Channel */
	sConfig.DAC_Trigger                 = DAC_TRIGGER_T2_TRGO;
 8000d1e:	230a      	movs	r3, #10
 8000d20:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer            = DAC_OUTPUTBUFFER_ENABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
	sConfig.DAC_SampleAndHold           = DAC_SAMPLEANDHOLD_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61bb      	str	r3, [r7, #24]

	/* DAC Channel configuration */
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	4619      	mov	r1, r3
 8000d34:	4812      	ldr	r0, [pc, #72]	@ (8000d80 <st_DACDMAConfig+0xac>)
 8000d36:	f001 fd53 	bl	80027e0 <HAL_DAC_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <st_DACDMAConfig+0x70>
	{
		/* Channel configuration Error */
		stError_Handler();
 8000d40:	f000 f824 	bl	8000d8c <stError_Handler>
	}

	/* DAC calibration */
	if (HAL_DACEx_SelfCalibrate(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d44:	463b      	mov	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <st_DACDMAConfig+0xac>)
 8000d4c:	f001 ff4a 	bl	8002be4 <HAL_DACEx_SelfCalibrate>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <st_DACDMAConfig+0x86>
	{
		stError_Handler();
 8000d56:	f000 f819 	bl	8000d8c <stError_Handler>
	/**
	 * ToDo: align frequency with the GPIO_DAC_SIZE values here.
	 *
	 */
	/* Enable DAC selected channel and associated DMA */
	if (HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &stDACVals[0], GPIO_DAC_SIZE, DAC_ALIGN_12B_R) != HAL_OK)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 8000d62:	4a09      	ldr	r2, [pc, #36]	@ (8000d88 <st_DACDMAConfig+0xb4>)
 8000d64:	2100      	movs	r1, #0
 8000d66:	4806      	ldr	r0, [pc, #24]	@ (8000d80 <st_DACDMAConfig+0xac>)
 8000d68:	f001 fab2 	bl	80022d0 <HAL_DAC_Start_DMA>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <st_DACDMAConfig+0xa2>
	{
		/* Start DMA Error */
		stError_Handler();
 8000d72:	f000 f80b 	bl	8000d8c <stError_Handler>
	}
}
 8000d76:	bf00      	nop
 8000d78:	3730      	adds	r7, #48	@ 0x30
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000278 	.word	0x20000278
 8000d84:	46021800 	.word	0x46021800
 8000d88:	20002670 	.word	0x20002670

08000d8c <stError_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void stError_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <stError_Handler+0x8>

08000d98 <stInitilize>:

void stConfigure(){

}

void stInitilize(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	stConfigureDefault(st_ramp);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f000 fa4b 	bl	8001238 <stConfigureDefault>
	stimulator.stGlobalState = st_enabled;
 8000da2:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <stInitilize+0x28>)
 8000da4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278

	stSetEnableAllChannels(st_enabled);
 8000dae:	2001      	movs	r0, #1
 8000db0:	f000 f910 	bl	8000fd4 <stSetEnableAllChannels>
	stUpdateVectors();
 8000db4:	f000 f80c 	bl	8000dd0 <stUpdateVectors>
	st_Iinitilize();
 8000db8:	f7ff fda8 	bl	800090c <st_Iinitilize>


}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200003f0 	.word	0x200003f0

08000dc4 <stStartStimulation>:

void stStartStimulation(){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

	st_DMA_Start();
 8000dc8:	f7ff fdce 	bl	8000968 <st_DMA_Start>
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <stUpdateVectors>:
void stStopStimulation(){

	st_DMA_Stop();
}

void stUpdateVectors(){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8000dd6:	af00      	add	r7, sp, #0
	uint32_t pos = 0, it2,it =0, len  = 0, actCh=0,actGPIOVal = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
	uint32_t gpios_vals[MAX_SIGNAL_LENGTH];
	if (stimulator.stGlobalState == st_enabled){
 8000df6:	4b6a      	ldr	r3, [pc, #424]	@ (8000fa0 <stUpdateVectors+0x1d0>)
 8000df8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000dfc:	f893 3278 	ldrb.w	r3, [r3, #632]	@ 0x278
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	f040 80c7 	bne.w	8000f94 <stUpdateVectors+0x1c4>
		for(it = 0 ; it < CHAN_LENGTH ; it++){
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000e0c:	e0b5      	b.n	8000f7a <stUpdateVectors+0x1aa>
			if(stimulator.channels[it].stActiveState == st_enabled){
 8000e0e:	4a64      	ldr	r2, [pc, #400]	@ (8000fa0 <stUpdateVectors+0x1d0>)
 8000e10:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000e14:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000e18:	fb01 f303 	mul.w	r3, r1, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	f040 80a3 	bne.w	8000f70 <stUpdateVectors+0x1a0>
				stDACVals[pos] = 0;
 8000e2a:	4a5e      	ldr	r2, [pc, #376]	@ (8000fa4 <stUpdateVectors+0x1d4>)
 8000e2c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000e30:	2100      	movs	r1, #0
 8000e32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				stGPIOVals[pos] = 0;
 8000e36:	4a5c      	ldr	r2, [pc, #368]	@ (8000fa8 <stUpdateVectors+0x1d8>)
 8000e38:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				actGPIOVal = stimulator.channels[actCh].stPin | stimulator.stTriggerPin;
 8000e42:	4a57      	ldr	r2, [pc, #348]	@ (8000fa0 <stUpdateVectors+0x1d0>)
 8000e44:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000e48:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000e4c:	fb01 f303 	mul.w	r3, r1, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	f503 6389 	add.w	r3, r3, #1096	@ 0x448
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b51      	ldr	r3, [pc, #324]	@ (8000fa0 <stUpdateVectors+0x1d0>)
 8000e5a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000e5e:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000e62:	4313      	orrs	r3, r2
 8000e64:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
				actCh = stimulator.stStimSequence[it];
 8000e68:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa0 <stUpdateVectors+0x1d0>)
 8000e6a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000e6e:	4413      	add	r3, r2
 8000e70:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 8000e74:	3324      	adds	r3, #36	@ 0x24
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
				len = stimulator.channels[actCh].stimulus.lastVal;
 8000e7c:	4a48      	ldr	r2, [pc, #288]	@ (8000fa0 <stUpdateVectors+0x1d0>)
 8000e7e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000e82:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000e86:	fb01 f303 	mul.w	r3, r1, r3
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204

				for(it2 = 0 ; it2<len ; it2++){
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8000e9c:	e039      	b.n	8000f12 <stUpdateVectors+0x142>
					gpios_vals[it2] = ( (uint32_t) (stimulator.channels[actCh].stimulus.sign[it2]>0) * stimulator.stSignPin)  |  stimulator.stTriggerPin | stimulator.channels[actCh].stPin;
 8000e9e:	4940      	ldr	r1, [pc, #256]	@ (8000fa0 <stUpdateVectors+0x1d0>)
 8000ea0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000ea4:	f240 1213 	movw	r2, #275	@ 0x113
 8000ea8:	fb03 f202 	mul.w	r2, r3, r2
 8000eac:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8000eb0:	4413      	add	r3, r2
 8000eb2:	3380      	adds	r3, #128	@ 0x80
 8000eb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bf14      	ite	ne
 8000ebc:	2301      	movne	r3, #1
 8000ebe:	2300      	moveq	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b36      	ldr	r3, [pc, #216]	@ (8000fa0 <stUpdateVectors+0x1d0>)
 8000ec6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000eca:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000ece:	fb03 f202 	mul.w	r2, r3, r2
 8000ed2:	4b33      	ldr	r3, [pc, #204]	@ (8000fa0 <stUpdateVectors+0x1d0>)
 8000ed4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000ed8:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000edc:	431a      	orrs	r2, r3
 8000ede:	4930      	ldr	r1, [pc, #192]	@ (8000fa0 <stUpdateVectors+0x1d0>)
 8000ee0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000ee4:	f240 404c 	movw	r0, #1100	@ 0x44c
 8000ee8:	fb00 f303 	mul.w	r3, r0, r3
 8000eec:	440b      	add	r3, r1
 8000eee:	f503 6389 	add.w	r3, r3, #1096	@ 0x448
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	ea42 0103 	orr.w	r1, r2, r3
 8000ef8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000efc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8000f00:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8000f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for(it2 = 0 ; it2<len ; it2++){
 8000f08:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8000f12:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8000f16:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d3bf      	bcc.n	8000e9e <stUpdateVectors+0xce>
				}
				memcpy(&stDACVals[pos+1],stimulator.channels[actCh].stimulus.intensity,len*sizeof(uint32_t));
 8000f1e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000f22:	3301      	adds	r3, #1
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa4 <stUpdateVectors+0x1d4>)
 8000f28:	1898      	adds	r0, r3, r2
 8000f2a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000f2e:	f240 424c 	movw	r2, #1100	@ 0x44c
 8000f32:	fb02 f303 	mul.w	r3, r2, r3
 8000f36:	4a1a      	ldr	r2, [pc, #104]	@ (8000fa0 <stUpdateVectors+0x1d0>)
 8000f38:	1899      	adds	r1, r3, r2
 8000f3a:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	461a      	mov	r2, r3
 8000f42:	f009 fbb6 	bl	800a6b2 <memcpy>
				memcpy(&stGPIOVals[pos+1],gpios_vals,len*sizeof(uint32_t));
 8000f46:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4a16      	ldr	r2, [pc, #88]	@ (8000fa8 <stUpdateVectors+0x1d8>)
 8000f50:	1898      	adds	r0, r3, r2
 8000f52:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000f56:	009a      	lsls	r2, r3, #2
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f009 fba9 	bl	800a6b2 <memcpy>
				pos+= 1+len;
 8000f60:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8000f64:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000f68:	4413      	add	r3, r2
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		for(it = 0 ; it < CHAN_LENGTH ; it++){
 8000f70:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f74:	3301      	adds	r3, #1
 8000f76:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000f7a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f7e:	2b07      	cmp	r3, #7
 8000f80:	f67f af45 	bls.w	8000e0e <stUpdateVectors+0x3e>
			}
		}
		stimulator.stStimSize = pos;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <stUpdateVectors+0x1d0>)
 8000f86:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000f90:	f8c2 327c 	str.w	r3, [r2, #636]	@ 0x27c
	}
}
 8000f94:	bf00      	nop
 8000f96:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200003f0 	.word	0x200003f0
 8000fa4:	20002670 	.word	0x20002670
 8000fa8:	20003870 	.word	0x20003870

08000fac <stSetGlobalState>:



void stSetGlobalState(st_active_t state){
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]

	stimulator.stGlobalState = state;
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <stSetGlobalState+0x24>)
 8000fb8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f882 3278 	strb.w	r3, [r2, #632]	@ 0x278

}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	200003f0 	.word	0x200003f0

08000fd4 <stSetEnableAllChannels>:

void stGetGlobalState(st_active_t *state){
	*state = stimulator.stGlobalState;
}

void stSetEnableAllChannels(st_active_t state){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
	uint32_t it;
	for(it = 0; it < CHAN_LENGTH; it++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	e00d      	b.n	8001000 <stSetEnableAllChannels+0x2c>
		stimulator.channels[it].stActiveState = state;
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8001014 <stSetEnableAllChannels+0x40>)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000fec:	fb01 f303 	mul.w	r3, r1, r3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	701a      	strb	r2, [r3, #0]
	for(it = 0; it < CHAN_LENGTH; it++)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b07      	cmp	r3, #7
 8001004:	d9ee      	bls.n	8000fe4 <stSetEnableAllChannels+0x10>
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	200003f0 	.word	0x200003f0

08001018 <stSetChannelState>:

uint8_t stSetChannelState(uint8_t channel, st_active_t state){
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
	if(channel < CHAN_LENGTH){
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b07      	cmp	r3, #7
 8001030:	d80b      	bhi.n	800104a <stSetChannelState+0x32>
		stimulator.channels[channel].stActiveState = state;
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <stSetChannelState+0x48>)
 8001036:	f240 414c 	movw	r1, #1100	@ 0x44c
 800103a:	fb01 f303 	mul.w	r3, r1, r3
 800103e:	4413      	add	r3, r2
 8001040:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8001044:	79ba      	ldrb	r2, [r7, #6]
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e002      	b.n	8001050 <stSetChannelState+0x38>
	}
	else
		res--;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	3b01      	subs	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
	return res;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200003f0 	.word	0x200003f0

08001064 <stSetPeriod>:
		}
	return res;
}


uint8_t stSetPeriod(uint32_t period){
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	uint8_t res = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]
	if ((period < MAX_PERIOD) && (period >= MIN_PERIOD) )
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001076:	d20a      	bcs.n	800108e <stSetPeriod+0x2a>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <stSetPeriod+0x2a>
		stimulator.stPeriod = period;
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <stSetPeriod+0x4c>)
 8001080:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001084:	461a      	mov	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f8c2 3260 	str.w	r3, [r2, #608]	@ 0x260
 800108c:	e008      	b.n	80010a0 <stSetPeriod+0x3c>
	else
	{
		res--;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	3b01      	subs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
		stimulator.stGlobalState = st_undefined;
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <stSetPeriod+0x4c>)
 8001096:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800109a:	2202      	movs	r2, #2
 800109c:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278
	}
	return res;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	200003f0 	.word	0x200003f0

080010b4 <stSetPort>:
		res--;
	return 0;
}

uint8_t stSetPort(uint32_t port)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	uint8_t res = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
	if (port < MAX_PORT)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d807      	bhi.n	80010d6 <stSetPort+0x22>
		stimulator.stPort = port;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <stSetPort+0x44>)
 80010c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f8c2 326c 	str.w	r3, [r2, #620]	@ 0x26c
 80010d4:	e008      	b.n	80010e8 <stSetPort+0x34>
	else
	{
		res--;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	3b01      	subs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
		stimulator.stGlobalState = st_undefined;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <stSetPort+0x44>)
 80010de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80010e2:	2202      	movs	r2, #2
 80010e4:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278
	}
	return res;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200003f0 	.word	0x200003f0

080010fc <stSetChannelPin>:
		res--;
	return res;
}


uint8_t stSetChannelPin(uint8_t chan,uint32_t pin){
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]
	if (chan < CHAN_LENGTH){
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b07      	cmp	r3, #7
 8001110:	d81e      	bhi.n	8001150 <stSetChannelPin+0x54>
		if(pin < MAX_PIN)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001118:	d20b      	bcs.n	8001132 <stSetChannelPin+0x36>
			stimulator.channels[chan].stPin = pin;
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4a17      	ldr	r2, [pc, #92]	@ (800117c <stSetChannelPin+0x80>)
 800111e:	f240 414c 	movw	r1, #1100	@ 0x44c
 8001122:	fb01 f303 	mul.w	r3, r1, r3
 8001126:	4413      	add	r3, r2
 8001128:	f503 6389 	add.w	r3, r3, #1096	@ 0x448
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	e01c      	b.n	800116c <stSetChannelPin+0x70>
		else
		{
			res-=2;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	3b02      	subs	r3, #2
 8001136:	73fb      	strb	r3, [r7, #15]
			stimulator.channels[chan].stActiveState = st_undefined;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4a10      	ldr	r2, [pc, #64]	@ (800117c <stSetChannelPin+0x80>)
 800113c:	f240 414c 	movw	r1, #1100	@ 0x44c
 8001140:	fb01 f303 	mul.w	r3, r1, r3
 8001144:	4413      	add	r3, r2
 8001146:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800114a:	2202      	movs	r2, #2
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	e00d      	b.n	800116c <stSetChannelPin+0x70>
		}
	}
	else{
		stimulator.channels[chan].stActiveState = st_undefined;
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <stSetChannelPin+0x80>)
 8001154:	f240 414c 	movw	r1, #1100	@ 0x44c
 8001158:	fb01 f303 	mul.w	r3, r1, r3
 800115c:	4413      	add	r3, r2
 800115e:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8001162:	2202      	movs	r2, #2
 8001164:	701a      	strb	r2, [r3, #0]
		res--;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	3b01      	subs	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	200003f0 	.word	0x200003f0

08001180 <stSetChannelSignal>:
		res--;
	}

	return res;
}
uint8_t stSetChannelSignal(uint8_t ch, uint32_t sz, uint32_t *values, uint32_t *signs ){
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
	uint8_t res = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	75fb      	strb	r3, [r7, #23]
	if (ch < CHAN_LENGTH){
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b07      	cmp	r3, #7
 8001198:	d839      	bhi.n	800120e <stSetChannelSignal+0x8e>
		if(sz <= MAX_SIGNAL_LENGTH){
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	2b80      	cmp	r3, #128	@ 0x80
 800119e:	d827      	bhi.n	80011f0 <stSetChannelSignal+0x70>
			memcpy(stimulator.channels[ch].stimulus.intensity,values,sz* sizeof(uint32_t));
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	f240 424c 	movw	r2, #1100	@ 0x44c
 80011a6:	fb02 f303 	mul.w	r3, r2, r3
 80011aa:	4a22      	ldr	r2, [pc, #136]	@ (8001234 <stSetChannelSignal+0xb4>)
 80011ac:	1898      	adds	r0, r3, r2
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	461a      	mov	r2, r3
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	f009 fa7c 	bl	800a6b2 <memcpy>
			memcpy(stimulator.channels[ch].stimulus.sign,signs,sz* sizeof(uint32_t));
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	f240 424c 	movw	r2, #1100	@ 0x44c
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80011c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001234 <stSetChannelSignal+0xb4>)
 80011ca:	1898      	adds	r0, r3, r2
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	461a      	mov	r2, r3
 80011d2:	6839      	ldr	r1, [r7, #0]
 80011d4:	f009 fa6d 	bl	800a6b2 <memcpy>
			stimulator.channels[ch].stimulus.lastVal = sz;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	4a16      	ldr	r2, [pc, #88]	@ (8001234 <stSetChannelSignal+0xb4>)
 80011dc:	f240 414c 	movw	r1, #1100	@ 0x44c
 80011e0:	fb01 f303 	mul.w	r3, r1, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e01c      	b.n	800122a <stSetChannelSignal+0xaa>
		}
		else{
			res-=2;
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	3b02      	subs	r3, #2
 80011f4:	75fb      	strb	r3, [r7, #23]
			stimulator.channels[ch].stActiveState = st_undefined;
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001234 <stSetChannelSignal+0xb4>)
 80011fa:	f240 414c 	movw	r1, #1100	@ 0x44c
 80011fe:	fb01 f303 	mul.w	r3, r1, r3
 8001202:	4413      	add	r3, r2
 8001204:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8001208:	2202      	movs	r2, #2
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e00d      	b.n	800122a <stSetChannelSignal+0xaa>
		}
	}
	else{
		res--;
 800120e:	7dfb      	ldrb	r3, [r7, #23]
 8001210:	3b01      	subs	r3, #1
 8001212:	75fb      	strb	r3, [r7, #23]
		stimulator.channels[ch].stActiveState = st_undefined;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	4a07      	ldr	r2, [pc, #28]	@ (8001234 <stSetChannelSignal+0xb4>)
 8001218:	f240 414c 	movw	r1, #1100	@ 0x44c
 800121c:	fb01 f303 	mul.w	r3, r1, r3
 8001220:	4413      	add	r3, r2
 8001222:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8001226:	2202      	movs	r2, #2
 8001228:	701a      	strb	r2, [r3, #0]
	}
	return res;
 800122a:	7dfb      	ldrb	r3, [r7, #23]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200003f0 	.word	0x200003f0

08001238 <stConfigureDefault>:

uint8_t stConfigureDefault(st_signal_type type){
 8001238:	b580      	push	{r7, lr}
 800123a:	f5ad 6d8a 	sub.w	sp, sp, #1104	@ 0x450
 800123e:	af00      	add	r7, sp, #0
 8001240:	4602      	mov	r2, r0
 8001242:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001246:	f2a3 4349 	subw	r3, r3, #1097	@ 0x449
 800124a:	701a      	strb	r2, [r3, #0]
	uint8_t ch_it,res = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	f887 344e 	strb.w	r3, [r7, #1102]	@ 0x44e
	// uint32_t val = 1 ;
	uint32_t signal[MAX_SIGNAL_LENGTH];
	uint32_t sign[MAX_SIGNAL_LENGTH] = {[0 ... (MAX_SIGNAL_LENGTH-1)] = 1};
 8001252:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001256:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 800125a:	4a71      	ldr	r2, [pc, #452]	@ (8001420 <stConfigureDefault+0x1e8>)
 800125c:	4618      	mov	r0, r3
 800125e:	4611      	mov	r1, r2
 8001260:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001264:	461a      	mov	r2, r3
 8001266:	f009 fa24 	bl	800a6b2 <memcpy>
	char label[MAX_LABEL];

	// Trigger and direction pin
	stimulator.stTriggerPin = TRIGGER_Pin;
 800126a:	4b6e      	ldr	r3, [pc, #440]	@ (8001424 <stConfigureDefault+0x1ec>)
 800126c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001270:	461a      	mov	r2, r3
 8001272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001276:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274
	stimulator.stSignPin = DIR_Pin;
 800127a:	4b6a      	ldr	r3, [pc, #424]	@ (8001424 <stConfigureDefault+0x1ec>)
 800127c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001280:	461a      	mov	r2, r3
 8001282:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001286:	f8c2 3270 	str.w	r3, [r2, #624]	@ 0x270

	res += stSetPort(DEFAULT_PORT);
 800128a:	2004      	movs	r0, #4
 800128c:	f7ff ff12 	bl	80010b4 <stSetPort>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	f897 344e 	ldrb.w	r3, [r7, #1102]	@ 0x44e
 8001298:	4413      	add	r3, r2
 800129a:	f887 344e 	strb.w	r3, [r7, #1102]	@ 0x44e
	res += stSetPeriod(MAX_PERIOD-1);
 800129e:	f240 102b 	movw	r0, #299	@ 0x12b
 80012a2:	f7ff fedf 	bl	8001064 <stSetPeriod>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	f897 344e 	ldrb.w	r3, [r7, #1102]	@ 0x44e
 80012ae:	4413      	add	r3, r2
 80012b0:	f887 344e 	strb.w	r3, [r7, #1102]	@ 0x44e
	stSetGlobalState(st_disabled);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fe79 	bl	8000fac <stSetGlobalState>


	memset(sign, 0, MAX_SIGNAL_LENGTH* sizeof(uint32_t)/2);
 80012ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f009 f970 	bl	800a5aa <memset>
	memset(signal, 0, (uint32_t) MAX_SIGNAL_LENGTH* sizeof(uint32_t));
 80012ca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80012ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f009 f968 	bl	800a5aa <memset>



	switch (type) {
 80012da:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80012de:	f2a3 4349 	subw	r3, r3, #1097	@ 0x449
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <stConfigureDefault+0xb6>
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d011      	beq.n	8001310 <stConfigureDefault+0xd8>
		for(uint32_t it = 0; it < MAX_SIGNAL_LENGTH; it++){
			signal[it] = it*50;
			}
		break;
	default:
		break;
 80012ec:	e02b      	b.n	8001346 <stConfigureDefault+0x10e>
		memset(signal,0xFFAA,(uint32_t) MAX_SIGNAL_LENGTH* sizeof(uint32_t)/4);
 80012ee:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80012f2:	2280      	movs	r2, #128	@ 0x80
 80012f4:	f64f 71aa 	movw	r1, #65450	@ 0xffaa
 80012f8:	4618      	mov	r0, r3
 80012fa:	f009 f956 	bl	800a5aa <memset>
		memset(&signal[(uint32_t) MAX_SIGNAL_LENGTH/2],0xFFAA,(uint32_t) CHAN_LENGTH* sizeof(uint16_t)/4);
 80012fe:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001302:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001306:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800130a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		break;
 800130e:	e01a      	b.n	8001346 <stConfigureDefault+0x10e>
		for(uint32_t it = 0; it < MAX_SIGNAL_LENGTH; it++){
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 8001316:	e011      	b.n	800133c <stConfigureDefault+0x104>
			signal[it] = it*50;
 8001318:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800131c:	2232      	movs	r2, #50	@ 0x32
 800131e:	fb02 f103 	mul.w	r1, r2, r3
 8001322:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001326:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800132a:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 800132e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(uint32_t it = 0; it < MAX_SIGNAL_LENGTH; it++){
 8001332:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8001336:	3301      	adds	r3, #1
 8001338:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 800133c:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8001340:	2b7f      	cmp	r3, #127	@ 0x7f
 8001342:	d9e9      	bls.n	8001318 <stConfigureDefault+0xe0>
		break;
 8001344:	bf00      	nop
	}

	strcpy(label,"Channel ");
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	4a37      	ldr	r2, [pc, #220]	@ (8001428 <stConfigureDefault+0x1f0>)
 800134c:	ca07      	ldmia	r2, {r0, r1, r2}
 800134e:	c303      	stmia	r3!, {r0, r1}
 8001350:	701a      	strb	r2, [r3, #0]
	for (ch_it = 0; ch_it < CHAN_LENGTH; ch_it++){
 8001352:	2300      	movs	r3, #0
 8001354:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
 8001358:	e057      	b.n	800140a <stConfigureDefault+0x1d2>
		stimulator.stStimSequence[ch_it] = ch_it;
 800135a:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 800135e:	4a31      	ldr	r2, [pc, #196]	@ (8001424 <stConfigureDefault+0x1ec>)
 8001360:	4413      	add	r3, r2
 8001362:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 8001366:	3324      	adds	r3, #36	@ 0x24
 8001368:	f897 244f 	ldrb.w	r2, [r7, #1103]	@ 0x44f
 800136c:	701a      	strb	r2, [r3, #0]
		//memset(stimulator.channels[ch_it].stimulus.intensity,)
		res += stSetChannelSignal(ch_it, (MAX_SIGNAL_LENGTH), &signal, &sign);
 800136e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001372:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8001376:	f897 044f 	ldrb.w	r0, [r7, #1103]	@ 0x44f
 800137a:	2180      	movs	r1, #128	@ 0x80
 800137c:	f7ff ff00 	bl	8001180 <stSetChannelSignal>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	f897 344e 	ldrb.w	r3, [r7, #1102]	@ 0x44e
 8001388:	4413      	add	r3, r2
 800138a:	f887 344e 	strb.w	r3, [r7, #1102]	@ 0x44e
		label[8] = (ch_it+48);
 800138e:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001392:	3330      	adds	r3, #48	@ 0x30
 8001394:	b2da      	uxtb	r2, r3
 8001396:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800139a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800139e:	721a      	strb	r2, [r3, #8]
		strcpy(stimulator.channels[ch_it].stLabel , label); // possibly copying garbage
 80013a0:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 80013a4:	f240 424c 	movw	r2, #1100	@ 0x44c
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80013b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001424 <stConfigureDefault+0x1ec>)
 80013b2:	4413      	add	r3, r2
 80013b4:	3304      	adds	r3, #4
 80013b6:	f107 0208 	add.w	r2, r7, #8
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f009 f970 	bl	800a6a2 <strcpy>
		res += stSetChannelPin(ch_it,pins[ch_it]);
 80013c2:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 80013c6:	4a19      	ldr	r2, [pc, #100]	@ (800142c <stConfigureDefault+0x1f4>)
 80013c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013cc:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fe92 	bl	80010fc <stSetChannelPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	f897 344e 	ldrb.w	r3, [r7, #1102]	@ 0x44e
 80013e0:	4413      	add	r3, r2
 80013e2:	f887 344e 	strb.w	r3, [r7, #1102]	@ 0x44e
		res += stSetChannelState(ch_it, st_disabled);
 80013e6:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fe13 	bl	8001018 <stSetChannelState>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	f897 344e 	ldrb.w	r3, [r7, #1102]	@ 0x44e
 80013fa:	4413      	add	r3, r2
 80013fc:	f887 344e 	strb.w	r3, [r7, #1102]	@ 0x44e
	for (ch_it = 0; ch_it < CHAN_LENGTH; ch_it++){
 8001400:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001404:	3301      	adds	r3, #1
 8001406:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
 800140a:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 800140e:	2b07      	cmp	r3, #7
 8001410:	d9a3      	bls.n	800135a <stConfigureDefault+0x122>
	}
	return res;
 8001412:	f897 344e 	ldrb.w	r3, [r7, #1102]	@ 0x44e
}
 8001416:	4618      	mov	r0, r3
 8001418:	f507 678a 	add.w	r7, r7, #1104	@ 0x450
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	0800b27c 	.word	0x0800b27c
 8001424:	200003f0 	.word	0x200003f0
 8001428:	0800b270 	.word	0x0800b270
 800142c:	20000000 	.word	0x20000000

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_MspInit+0x34>)
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800143c:	4a09      	ldr	r2, [pc, #36]	@ (8001464 <HAL_MspInit+0x34>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001446:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <HAL_MspInit+0x34>)
 8001448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001454:	2004      	movs	r0, #4
 8001456:	f000 fe26 	bl	80020a6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	46020c00 	.word	0x46020c00

08001468 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b0ba      	sub	sp, #232	@ 0xe8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	22c0      	movs	r2, #192	@ 0xc0
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f009 f88e 	bl	800a5aa <memset>
  if(hdac->Instance==DAC1)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a29      	ldr	r2, [pc, #164]	@ (8001538 <HAL_DAC_MspInit+0xd0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d14b      	bne.n	8001530 <HAL_DAC_MspInit+0xc8>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC|RCC_PERIPHCLK_DAC1;
 8001498:	4a28      	ldr	r2, [pc, #160]	@ (800153c <HAL_DAC_MspInit+0xd4>)
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80014a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 80014aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	4618      	mov	r0, r3
 80014b8:	f004 fff8 	bl	80064ac <HAL_RCCEx_PeriphCLKConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_DAC_MspInit+0x5e>
    {
      Error_Handler();
 80014c2:	f7ff fa1d 	bl	8000900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80014c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <HAL_DAC_MspInit+0xd8>)
 80014c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001540 <HAL_DAC_MspInit+0xd8>)
 80014ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_DAC_MspInit+0xd8>)
 80014d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <HAL_DAC_MspInit+0xd8>)
 80014e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ea:	4a15      	ldr	r2, [pc, #84]	@ (8001540 <HAL_DAC_MspInit+0xd8>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_DAC_MspInit+0xd8>)
 80014f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001502:	2310      	movs	r3, #16
 8001504:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001508:	2303      	movs	r3, #3
 800150a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001518:	4619      	mov	r1, r3
 800151a:	480a      	ldr	r0, [pc, #40]	@ (8001544 <HAL_DAC_MspInit+0xdc>)
 800151c:	f003 f8ee 	bl	80046fc <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(DAC1_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	2026      	movs	r0, #38	@ 0x26
 8001526:	f000 fdc9 	bl	80020bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DAC1_IRQn);
 800152a:	2026      	movs	r0, #38	@ 0x26
 800152c:	f000 fde0 	bl	80020f0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001530:	bf00      	nop
 8001532:	37e8      	adds	r7, #232	@ 0xe8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	46021800 	.word	0x46021800
 800153c:	10008000 	.word	0x10008000
 8001540:	46020c00 	.word	0x46020c00
 8001544:	42020000 	.word	0x42020000

08001548 <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <HAL_DAC_MspDeInit+0x38>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d10e      	bne.n	8001578 <HAL_DAC_MspDeInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspDeInit 0 */

  /* USER CODE END DAC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC1_CLK_DISABLE();
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_DAC_MspDeInit+0x3c>)
 800155c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001560:	4a08      	ldr	r2, [pc, #32]	@ (8001584 <HAL_DAC_MspDeInit+0x3c>)
 8001562:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001566:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800156a:	2110      	movs	r1, #16
 800156c:	4806      	ldr	r0, [pc, #24]	@ (8001588 <HAL_DAC_MspDeInit+0x40>)
 800156e:	f003 fa9d 	bl	8004aac <HAL_GPIO_DeInit>

    /* DAC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(DAC1_IRQn);
 8001572:	2026      	movs	r0, #38	@ 0x26
 8001574:	f000 fdca 	bl	800210c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DAC1_MspDeInit 1 */

  /* USER CODE END DAC1_MspDeInit 1 */
  }

}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	46021800 	.word	0x46021800
 8001584:	46020c00 	.word	0x46020c00
 8001588:	42020000 	.word	0x42020000

0800158c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800159c:	d10e      	bne.n	80015bc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800159e:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <HAL_TIM_Base_MspInit+0x3c>)
 80015a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015a4:	4a08      	ldr	r2, [pc, #32]	@ (80015c8 <HAL_TIM_Base_MspInit+0x3c>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_TIM_Base_MspInit+0x3c>)
 80015b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	46020c00 	.word	0x46020c00

080015cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	@ 0x38
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80015dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001698 <HAL_InitTick+0xcc>)
 80015de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001698 <HAL_InitTick+0xcc>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80015ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001698 <HAL_InitTick+0xcc>)
 80015ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015fa:	f107 0210 	add.w	r2, r7, #16
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f004 fe93 	bl	8006330 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800160a:	f004 fe69 	bl	80062e0 <HAL_RCC_GetPCLK2Freq>
 800160e:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001612:	4a22      	ldr	r2, [pc, #136]	@ (800169c <HAL_InitTick+0xd0>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	0c9b      	lsrs	r3, r3, #18
 800161a:	3b01      	subs	r3, #1
 800161c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <HAL_InitTick+0xd4>)
 8001620:	4a20      	ldr	r2, [pc, #128]	@ (80016a4 <HAL_InitTick+0xd8>)
 8001622:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001624:	4b1e      	ldr	r3, [pc, #120]	@ (80016a0 <HAL_InitTick+0xd4>)
 8001626:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800162a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800162c:	4a1c      	ldr	r2, [pc, #112]	@ (80016a0 <HAL_InitTick+0xd4>)
 800162e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001630:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001632:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <HAL_InitTick+0xd4>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <HAL_InitTick+0xd4>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 800163e:	4818      	ldr	r0, [pc, #96]	@ (80016a0 <HAL_InitTick+0xd4>)
 8001640:	f007 fbcc 	bl	8008ddc <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800164a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800164e:	2b00      	cmp	r3, #0
 8001650:	d118      	bne.n	8001684 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001652:	4813      	ldr	r0, [pc, #76]	@ (80016a0 <HAL_InitTick+0xd4>)
 8001654:	f007 fc1a 	bl	8008e8c <HAL_TIM_Base_Start_IT>
 8001658:	4603      	mov	r3, r0
 800165a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800165e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10e      	bne.n	8001684 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d808      	bhi.n	800167e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	2047      	movs	r0, #71	@ 0x47
 8001672:	f000 fd23 	bl	80020bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001676:	4a0c      	ldr	r2, [pc, #48]	@ (80016a8 <HAL_InitTick+0xdc>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e002      	b.n	8001684 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001684:	2047      	movs	r0, #71	@ 0x47
 8001686:	f000 fd33 	bl	80020f0 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800168a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800168e:	4618      	mov	r0, r3
 8001690:	3738      	adds	r7, #56	@ 0x38
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	46020c00 	.word	0x46020c00
 800169c:	431bde83 	.word	0x431bde83
 80016a0:	20004a70 	.word	0x20004a70
 80016a4:	40014800 	.word	0x40014800
 80016a8:	20000040 	.word	0x20000040

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <NMI_Handler+0x4>

080016b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
	{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <MemManage_Handler+0x4>

080016c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001710:	2000      	movs	r0, #0
 8001712:	f000 fa8d 	bl	8001c30 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <DAC1_IRQHandler>:

/**
  * @brief This function handles DAC1 interrupt.
  */
void DAC1_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DAC1_IRQn 0 */

  /* USER CODE END DAC1_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001720:	4802      	ldr	r0, [pc, #8]	@ (800172c <DAC1_IRQHandler+0x10>)
 8001722:	f000 ffdc 	bl	80026de <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN DAC1_IRQn 1 */

  /* USER CODE END DAC1_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000014c 	.word	0x2000014c

08001730 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <TIM17_IRQHandler+0x10>)
 8001736:	f007 fc49 	bl	8008fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20004a70 	.word	0x20004a70

08001744 <GPDMA1_Channel10_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 10 global interrupt.
  */
void GPDMA1_Channel10_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 0 */

  /* USER CODE END GPDMA1_Channel10_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel10);
 8001748:	4802      	ldr	r0, [pc, #8]	@ (8001754 <GPDMA1_Channel10_IRQHandler+0x10>)
 800174a:	f001 fcc8 	bl	80030de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 1 */

  /* USER CODE END GPDMA1_Channel10_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000200 	.word	0x20000200

08001758 <GPDMA1_Channel11_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 11 global interrupt.
  */
void GPDMA1_Channel11_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 0 */

  /* USER CODE END GPDMA1_Channel11_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel11);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <GPDMA1_Channel11_IRQHandler+0x10>)
 800175e:	f001 fcbe 	bl	80030de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 1 */

  /* USER CODE END GPDMA1_Channel11_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000188 	.word	0x20000188

0800176c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	e00a      	b.n	8001794 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800177e:	f3af 8000 	nop.w
 8001782:	4601      	mov	r1, r0
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	60ba      	str	r2, [r7, #8]
 800178a:	b2ca      	uxtb	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	429a      	cmp	r2, r3
 800179a:	dbf0      	blt.n	800177e <_read+0x12>
  }

  return len;
 800179c:	687b      	ldr	r3, [r7, #4]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	e009      	b.n	80017cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	60ba      	str	r2, [r7, #8]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 faaf 	bl	8001d24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3301      	adds	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dbf1      	blt.n	80017b8 <_write+0x12>
  }
  return len;
 80017d4:	687b      	ldr	r3, [r7, #4]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <_close>:

int _close(int file)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001806:	605a      	str	r2, [r3, #4]
  return 0;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <_isatty>:

int _isatty(int file)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001850:	4a14      	ldr	r2, [pc, #80]	@ (80018a4 <_sbrk+0x5c>)
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <_sbrk+0x60>)
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800185c:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <_sbrk+0x64>)
 8001866:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <_sbrk+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186a:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001878:	f008 fee6 	bl	800a648 <__errno>
 800187c:	4603      	mov	r3, r0
 800187e:	220c      	movs	r2, #12
 8001880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	e009      	b.n	800189c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188e:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a05      	ldr	r2, [pc, #20]	@ (80018ac <_sbrk+0x64>)
 8001898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200c0000 	.word	0x200c0000
 80018a8:	00000400 	.word	0x00000400
 80018ac:	20004abc 	.word	0x20004abc
 80018b0:	20004cb8 	.word	0x20004cb8

080018b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018b8:	4b18      	ldr	r3, [pc, #96]	@ (800191c <SystemInit+0x68>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018be:	4a17      	ldr	r2, [pc, #92]	@ (800191c <SystemInit+0x68>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80018c8:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <SystemInit+0x6c>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80018ce:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <SystemInit+0x6c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <SystemInit+0x6c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <SystemInit+0x6c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80018e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <SystemInit+0x6c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001920 <SystemInit+0x6c>)
 80018e6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80018ea:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80018ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <SystemInit+0x6c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <SystemInit+0x6c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a09      	ldr	r2, [pc, #36]	@ (8001920 <SystemInit+0x6c>)
 80018fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001900:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <SystemInit+0x6c>)
 8001904:	2200      	movs	r2, #0
 8001906:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001908:	4b04      	ldr	r3, [pc, #16]	@ (800191c <SystemInit+0x68>)
 800190a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800190e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00
 8001920:	46020c00 	.word	0x46020c00

08001924 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001924:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800195c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001928:	f7ff ffc4 	bl	80018b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800192c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800192e:	e003      	b.n	8001938 <LoopCopyDataInit>

08001930 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001932:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001934:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001936:	3104      	adds	r1, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001938:	480a      	ldr	r0, [pc, #40]	@ (8001964 <LoopForever+0xa>)
	ldr	r3, =_edata
 800193a:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <LoopForever+0xe>)
	adds	r2, r0, r1
 800193c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800193e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001940:	d3f6      	bcc.n	8001930 <CopyDataInit>
	ldr	r2, =_sbss
 8001942:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001944:	e002      	b.n	800194c <LoopFillZerobss>

08001946 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001946:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001948:	f842 3b04 	str.w	r3, [r2], #4

0800194c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800194c:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <LoopForever+0x16>)
	cmp	r2, r3
 800194e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001950:	d3f9      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001952:	f008 fe7f 	bl	800a654 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001956:	f7fe fedb 	bl	8000710 <main>

0800195a <LoopForever>:

LoopForever:
    b LoopForever
 800195a:	e7fe      	b.n	800195a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800195c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001960:	0800b5bc 	.word	0x0800b5bc
	ldr	r0, =_sdata
 8001964:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001968:	200000a4 	.word	0x200000a4
	ldr	r2, =_sbss
 800196c:	200000a4 	.word	0x200000a4
	ldr	r3, = _ebss
 8001970:	20004cb4 	.word	0x20004cb4

08001974 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC1_IRQHandler>
	...

08001978 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08e      	sub	sp, #56	@ 0x38
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001982:	2300      	movs	r3, #0
 8001984:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d009      	beq.n	80019a4 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d006      	beq.n	80019a4 <BSP_LED_Init+0x2c>
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d003      	beq.n	80019a4 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800199c:	f06f 0301 	mvn.w	r3, #1
 80019a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019a2:	e06e      	b.n	8001a82 <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d10f      	bne.n	80019ca <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 80019aa:	4b38      	ldr	r3, [pc, #224]	@ (8001a8c <BSP_LED_Init+0x114>)
 80019ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019b0:	4a36      	ldr	r2, [pc, #216]	@ (8001a8c <BSP_LED_Init+0x114>)
 80019b2:	f043 0302 	orr.w	r3, r3, #2
 80019b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019ba:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <BSP_LED_Init+0x114>)
 80019bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	e046      	b.n	8001a58 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10f      	bne.n	80019f0 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 80019d0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a8c <BSP_LED_Init+0x114>)
 80019d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019d6:	4a2d      	ldr	r2, [pc, #180]	@ (8001a8c <BSP_LED_Init+0x114>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019e0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a8c <BSP_LED_Init+0x114>)
 80019e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	e033      	b.n	8001a58 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f0:	4b26      	ldr	r3, [pc, #152]	@ (8001a8c <BSP_LED_Init+0x114>)
 80019f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d110      	bne.n	8001a20 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	4b23      	ldr	r3, [pc, #140]	@ (8001a8c <BSP_LED_Init+0x114>)
 8001a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a04:	4a21      	ldr	r2, [pc, #132]	@ (8001a8c <BSP_LED_Init+0x114>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <BSP_LED_Init+0x114>)
 8001a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8001a20:	f003 fa40 	bl	8004ea4 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8001a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d107      	bne.n	8001a3a <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a2a:	4b18      	ldr	r3, [pc, #96]	@ (8001a8c <BSP_LED_Init+0x114>)
 8001a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a30:	4a16      	ldr	r2, [pc, #88]	@ (8001a8c <BSP_LED_Init+0x114>)
 8001a32:	f023 0304 	bic.w	r3, r3, #4
 8001a36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8001a3a:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <BSP_LED_Init+0x114>)
 8001a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a40:	4a12      	ldr	r2, [pc, #72]	@ (8001a8c <BSP_LED_Init+0x114>)
 8001a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <BSP_LED_Init+0x114>)
 8001a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a90 <BSP_LED_Init+0x118>)
 8001a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a60:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4a08      	ldr	r2, [pc, #32]	@ (8001a94 <BSP_LED_Init+0x11c>)
 8001a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a76:	f107 021c 	add.w	r2, r7, #28
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fe3d 	bl	80046fc <HAL_GPIO_Init>
  }

  return ret;
 8001a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3738      	adds	r7, #56	@ 0x38
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	46020c00 	.word	0x46020c00
 8001a90:	0800b4d4 	.word	0x0800b4d4
 8001a94:	20000028 	.word	0x20000028

08001a98 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d009      	beq.n	8001ac0 <BSP_LED_On+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <BSP_LED_On+0x28>
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d003      	beq.n	8001ac0 <BSP_LED_On+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ab8:	f06f 0301 	mvn.w	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	e00b      	b.n	8001ad8 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	4a08      	ldr	r2, [pc, #32]	@ (8001ae4 <BSP_LED_On+0x4c>)
 8001ac4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	4a07      	ldr	r2, [pc, #28]	@ (8001ae8 <BSP_LED_On+0x50>)
 8001acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f003 f8c8 	bl	8004c68 <HAL_GPIO_WritePin>
  }

  return ret;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000028 	.word	0x20000028
 8001ae8:	0800b4d4 	.word	0x0800b4d4

08001aec <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d009      	beq.n	8001b14 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <BSP_LED_Toggle+0x28>
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d003      	beq.n	8001b14 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b0c:	f06f 0301 	mvn.w	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	e00b      	b.n	8001b2c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	4a08      	ldr	r2, [pc, #32]	@ (8001b38 <BSP_LED_Toggle+0x4c>)
 8001b18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	4907      	ldr	r1, [pc, #28]	@ (8001b3c <BSP_LED_Toggle+0x50>)
 8001b20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b24:	4619      	mov	r1, r3
 8001b26:	4610      	mov	r0, r2
 8001b28:	f003 f8b6 	bl	8004c98 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000028 	.word	0x20000028
 8001b3c:	0800b4d4 	.word	0x0800b4d4

08001b40 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	460a      	mov	r2, r1
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001b50:	4b30      	ldr	r3, [pc, #192]	@ (8001c14 <BSP_PB_Init+0xd4>)
 8001b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b56:	4a2f      	ldr	r2, [pc, #188]	@ (8001c14 <BSP_PB_Init+0xd4>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b60:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <BSP_PB_Init+0xd4>)
 8001b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001b6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b72:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001b74:	2302      	movs	r3, #2
 8001b76:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001b7c:	79bb      	ldrb	r3, [r7, #6]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	4a23      	ldr	r2, [pc, #140]	@ (8001c18 <BSP_PB_Init+0xd8>)
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	f107 020c 	add.w	r2, r7, #12
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 fdb1 	bl	80046fc <HAL_GPIO_Init>
 8001b9a:	e036      	b.n	8001c0a <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c1c <BSP_PB_Init+0xdc>)
 8001b9e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c18 <BSP_PB_Init+0xd8>)
 8001ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba8:	f107 020c 	add.w	r2, r7, #12
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 fda4 	bl	80046fc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001bb4:	79fa      	ldrb	r2, [r7, #7]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4a18      	ldr	r2, [pc, #96]	@ (8001c20 <BSP_PB_Init+0xe0>)
 8001bc0:	441a      	add	r2, r3
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	4917      	ldr	r1, [pc, #92]	@ (8001c24 <BSP_PB_Init+0xe4>)
 8001bc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4610      	mov	r0, r2
 8001bce:	f002 fd38 	bl	8004642 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001bd2:	79fa      	ldrb	r2, [r7, #7]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4a10      	ldr	r2, [pc, #64]	@ (8001c20 <BSP_PB_Init+0xe0>)
 8001bde:	1898      	adds	r0, r3, r2
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	4a11      	ldr	r2, [pc, #68]	@ (8001c28 <BSP_PB_Init+0xe8>)
 8001be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be8:	461a      	mov	r2, r3
 8001bea:	2100      	movs	r1, #0
 8001bec:	f002 fcfd 	bl	80045ea <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001bf0:	2018      	movs	r0, #24
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <BSP_PB_Init+0xec>)
 8001bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f000 fa5d 	bl	80020bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001c02:	2318      	movs	r3, #24
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fa73 	bl	80020f0 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	46020c00 	.word	0x46020c00
 8001c18:	20000034 	.word	0x20000034
 8001c1c:	10110000 	.word	0x10110000
 8001c20:	20004ac0 	.word	0x20004ac0
 8001c24:	0800b4dc 	.word	0x0800b4dc
 8001c28:	20000038 	.word	0x20000038
 8001c2c:	2000003c 	.word	0x2000003c

08001c30 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001c3a:	79fa      	ldrb	r2, [r7, #7]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <BSP_PB_IRQHandler+0x28>)
 8001c46:	4413      	add	r3, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 fd0f 	bl	800466c <HAL_EXTI_IRQHandler>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20004ac0 	.word	0x20004ac0

08001c5c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c72:	f06f 0301 	mvn.w	r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	e018      	b.n	8001cac <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2294      	movs	r2, #148	@ 0x94
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb8 <BSP_COM_Init+0x5c>)
 8001c84:	4413      	add	r3, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f870 	bl	8001d6c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	2294      	movs	r2, #148	@ 0x94
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	4a08      	ldr	r2, [pc, #32]	@ (8001cb8 <BSP_COM_Init+0x5c>)
 8001c96:	4413      	add	r3, r2
 8001c98:	6839      	ldr	r1, [r7, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f80e 	bl	8001cbc <MX_USART1_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ca6:	f06f 0303 	mvn.w	r3, #3
 8001caa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20004acc 	.word	0x20004acc

08001cbc <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001cc6:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <MX_USART1_Init+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	220c      	movs	r2, #12
 8001cda:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	895b      	ldrh	r3, [r3, #10]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	891b      	ldrh	r3, [r3, #8]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	899b      	ldrh	r3, [r3, #12]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d08:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f007 fe79 	bl	8009a08 <HAL_UART_Init>
 8001d16:	4603      	mov	r3, r0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000024 	.word	0x20000024

08001d24 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001d2c:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <__io_putchar+0x30>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	2394      	movs	r3, #148	@ 0x94
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	4a07      	ldr	r2, [pc, #28]	@ (8001d58 <__io_putchar+0x34>)
 8001d3a:	1898      	adds	r0, r3, r2
 8001d3c:	1d39      	adds	r1, r7, #4
 8001d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d42:	2201      	movs	r2, #1
 8001d44:	f007 feba 	bl	8009abc <HAL_UART_Transmit>
  return ch;
 8001d48:	687b      	ldr	r3, [r7, #4]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20004b60 	.word	0x20004b60
 8001d58:	20004acc 	.word	0x20004acc

08001d5c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7fe fdb9 	bl	80008d8 <BSP_PB_Callback>
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	@ 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001d74:	4b27      	ldr	r3, [pc, #156]	@ (8001e14 <COM1_MspInit+0xa8>)
 8001d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d7a:	4a26      	ldr	r2, [pc, #152]	@ (8001e14 <COM1_MspInit+0xa8>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d84:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <COM1_MspInit+0xa8>)
 8001d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <COM1_MspInit+0xa8>)
 8001d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d98:	4a1e      	ldr	r2, [pc, #120]	@ (8001e14 <COM1_MspInit+0xa8>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001da2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e14 <COM1_MspInit+0xa8>)
 8001da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001db0:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <COM1_MspInit+0xa8>)
 8001db2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001db6:	4a17      	ldr	r2, [pc, #92]	@ (8001e14 <COM1_MspInit+0xa8>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dbc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001dc0:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <COM1_MspInit+0xa8>)
 8001dc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001dce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dd2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001de0:	2307      	movs	r3, #7
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	480b      	ldr	r0, [pc, #44]	@ (8001e18 <COM1_MspInit+0xac>)
 8001dec:	f002 fc86 	bl	80046fc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001df0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001df4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <COM1_MspInit+0xac>)
 8001e06:	f002 fc79 	bl	80046fc <HAL_GPIO_Init>
}
 8001e0a:	bf00      	nop
 8001e0c:	3728      	adds	r7, #40	@ 0x28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	46020c00 	.word	0x46020c00
 8001e18:	42020000 	.word	0x42020000

08001e1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e20:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_Init+0x50>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a11      	ldr	r2, [pc, #68]	@ (8001e6c <HAL_Init+0x50>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 f93a 	bl	80020a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001e32:	f004 f925 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b0d      	ldr	r3, [pc, #52]	@ (8001e70 <HAL_Init+0x54>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	490c      	ldr	r1, [pc, #48]	@ (8001e74 <HAL_Init+0x58>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
 8001e48:	4a0b      	ldr	r2, [pc, #44]	@ (8001e78 <HAL_Init+0x5c>)
 8001e4a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e4c:	2004      	movs	r0, #4
 8001e4e:	f000 f96b 	bl	8002128 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e52:	2007      	movs	r0, #7
 8001e54:	f7ff fbba 	bl	80015cc <HAL_InitTick>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e002      	b.n	8001e68 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e62:	f7ff fae5 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40022000 	.word	0x40022000
 8001e70:	46020c00 	.word	0x46020c00
 8001e74:	0800b47c 	.word	0x0800b47c
 8001e78:	20000020 	.word	0x20000020

08001e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_IncTick+0x20>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_IncTick+0x24>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <HAL_IncTick+0x24>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000044 	.word	0x20000044
 8001ea0:	20004b64 	.word	0x20004b64

08001ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_GetTick+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20004b64 	.word	0x20004b64

08001ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff ffee 	bl	8001ea4 <HAL_GetTick>
 8001ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d005      	beq.n	8001ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <HAL_Delay+0x44>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee2:	bf00      	nop
 8001ee4:	f7ff ffde 	bl	8001ea4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d8f7      	bhi.n	8001ee4 <HAL_Delay+0x28>
  {
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000044 	.word	0x20000044

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	@ (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	db12      	blt.n	8001fdc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	f003 021f 	and.w	r2, r3, #31
 8001fbc:	490a      	ldr	r1, [pc, #40]	@ (8001fe8 <__NVIC_DisableIRQ+0x44>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fca:	3320      	adds	r3, #32
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fd0:	f3bf 8f4f 	dsb	sy
}
 8001fd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fd6:	f3bf 8f6f 	isb	sy
}
 8001fda:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100

08001fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	6039      	str	r1, [r7, #0]
 8001ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	db0a      	blt.n	8002016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	b2da      	uxtb	r2, r3
 8002004:	490c      	ldr	r1, [pc, #48]	@ (8002038 <__NVIC_SetPriority+0x4c>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	0112      	lsls	r2, r2, #4
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	440b      	add	r3, r1
 8002010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002014:	e00a      	b.n	800202c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4908      	ldr	r1, [pc, #32]	@ (800203c <__NVIC_SetPriority+0x50>)
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	3b04      	subs	r3, #4
 8002024:	0112      	lsls	r2, r2, #4
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	440b      	add	r3, r1
 800202a:	761a      	strb	r2, [r3, #24]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000e100 	.word	0xe000e100
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	@ 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f1c3 0307 	rsb	r3, r3, #7
 800205a:	2b04      	cmp	r3, #4
 800205c:	bf28      	it	cs
 800205e:	2304      	movcs	r3, #4
 8002060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3304      	adds	r3, #4
 8002066:	2b06      	cmp	r3, #6
 8002068:	d902      	bls.n	8002070 <NVIC_EncodePriority+0x30>
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3b03      	subs	r3, #3
 800206e:	e000      	b.n	8002072 <NVIC_EncodePriority+0x32>
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	f04f 32ff 	mov.w	r2, #4294967295
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43da      	mvns	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	401a      	ands	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002088:	f04f 31ff 	mov.w	r1, #4294967295
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	43d9      	mvns	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	4313      	orrs	r3, r2
         );
}
 800209a:	4618      	mov	r0, r3
 800209c:	3724      	adds	r7, #36	@ 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ff28 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020ca:	f7ff ff3f 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 80020ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	6978      	ldr	r0, [r7, #20]
 80020d6:	f7ff ffb3 	bl	8002040 <NVIC_EncodePriority>
 80020da:	4602      	mov	r2, r0
 80020dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ff82 	bl	8001fec <__NVIC_SetPriority>
}
 80020e8:	bf00      	nop
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff32 	bl	8001f68 <__NVIC_EnableIRQ>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ff42 	bl	8001fa4 <__NVIC_DisableIRQ>
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b04      	cmp	r3, #4
 8002134:	d844      	bhi.n	80021c0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002136:	a201      	add	r2, pc, #4	@ (adr r2, 800213c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	0800215f 	.word	0x0800215f
 8002140:	0800217d 	.word	0x0800217d
 8002144:	0800219f 	.word	0x0800219f
 8002148:	080021c1 	.word	0x080021c1
 800214c:	08002151 	.word	0x08002151
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002150:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1e      	ldr	r2, [pc, #120]	@ (80021d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6013      	str	r3, [r2, #0]
      break;
 800215c:	e031      	b.n	80021c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800215e:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1b      	ldr	r2, [pc, #108]	@ (80021d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800216a:	4b1a      	ldr	r3, [pc, #104]	@ (80021d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002170:	4a18      	ldr	r2, [pc, #96]	@ (80021d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002172:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002176:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800217a:	e022      	b.n	80021c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800217c:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a13      	ldr	r2, [pc, #76]	@ (80021d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002182:	f023 0304 	bic.w	r3, r3, #4
 8002186:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002188:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800218e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002192:	4a10      	ldr	r2, [pc, #64]	@ (80021d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002194:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002198:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800219c:	e011      	b.n	80021c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800219e:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a0b      	ldr	r2, [pc, #44]	@ (80021d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80021aa:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80021b4:	4a07      	ldr	r2, [pc, #28]	@ (80021d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80021be:	e000      	b.n	80021c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80021c0:	bf00      	nop
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000e010 	.word	0xe000e010
 80021d4:	46020c00 	.word	0x46020c00

080021d8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e034      	b.n	8002254 <HAL_DAC_Init+0x7c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	791b      	ldrb	r3, [r3, #4]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d125      	bne.n	8002240 <HAL_DAC_Init+0x68>
  {
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the DAC Callback settings */
    hdac->ConvCpltCallbackCh1           = HAL_DAC_ConvCpltCallbackCh1;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a19      	ldr	r2, [pc, #100]	@ (800225c <HAL_DAC_Init+0x84>)
 80021f8:	615a      	str	r2, [r3, #20]
    hdac->ConvHalfCpltCallbackCh1       = HAL_DAC_ConvHalfCpltCallbackCh1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a18      	ldr	r2, [pc, #96]	@ (8002260 <HAL_DAC_Init+0x88>)
 80021fe:	619a      	str	r2, [r3, #24]
    hdac->ErrorCallbackCh1              = HAL_DAC_ErrorCallbackCh1;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a18      	ldr	r2, [pc, #96]	@ (8002264 <HAL_DAC_Init+0x8c>)
 8002204:	61da      	str	r2, [r3, #28]
    hdac->DMAUnderrunCallbackCh1        = HAL_DAC_DMAUnderrunCallbackCh1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a17      	ldr	r2, [pc, #92]	@ (8002268 <HAL_DAC_Init+0x90>)
 800220a:	621a      	str	r2, [r3, #32]

    hdac->ConvCpltCallbackCh2           = HAL_DACEx_ConvCpltCallbackCh2;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a17      	ldr	r2, [pc, #92]	@ (800226c <HAL_DAC_Init+0x94>)
 8002210:	625a      	str	r2, [r3, #36]	@ 0x24
    hdac->ConvHalfCpltCallbackCh2       = HAL_DACEx_ConvHalfCpltCallbackCh2;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a16      	ldr	r2, [pc, #88]	@ (8002270 <HAL_DAC_Init+0x98>)
 8002216:	629a      	str	r2, [r3, #40]	@ 0x28
    hdac->ErrorCallbackCh2              = HAL_DACEx_ErrorCallbackCh2;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a16      	ldr	r2, [pc, #88]	@ (8002274 <HAL_DAC_Init+0x9c>)
 800221c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdac->DMAUnderrunCallbackCh2        = HAL_DACEx_DMAUnderrunCallbackCh2;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a15      	ldr	r2, [pc, #84]	@ (8002278 <HAL_DAC_Init+0xa0>)
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30

    if (hdac->MspInitCallback == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <HAL_DAC_Init+0x5a>
    {
      hdac->MspInitCallback             = HAL_DAC_MspInit;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a13      	ldr	r2, [pc, #76]	@ (800227c <HAL_DAC_Init+0xa4>)
 8002230:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	715a      	strb	r2, [r3, #5]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	0800278f 	.word	0x0800278f
 8002260:	080027a3 	.word	0x080027a3
 8002264:	080027b7 	.word	0x080027b7
 8002268:	080027cb 	.word	0x080027cb
 800226c:	08002b93 	.word	0x08002b93
 8002270:	08002ba7 	.word	0x08002ba7
 8002274:	08002bbb 	.word	0x08002bbb
 8002278:	08002bcf 	.word	0x08002bcf
 800227c:	08001469 	.word	0x08001469

08002280 <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e017      	b.n	80022c2 <HAL_DAC_DeInit+0x42>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2202      	movs	r2, #2
 8002296:	711a      	strb	r2, [r3, #4]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  if (hdac->MspDeInitCallback == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <HAL_DAC_DeInit+0x26>
  {
    hdac->MspDeInitCallback = HAL_DAC_MspDeInit;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a0a      	ldr	r2, [pc, #40]	@ (80022cc <HAL_DAC_DeInit+0x4c>)
 80022a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	4798      	blx	r3
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	08001549 	.word	0x08001549

080022d0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0a4      	sub	sp, #144	@ 0x90
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e1a4      	b.n	8002632 <HAL_DAC_Start_DMA+0x362>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	795b      	ldrb	r3, [r3, #5]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_DAC_Start_DMA+0x24>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e19e      	b.n	8002632 <HAL_DAC_Start_DMA+0x362>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2202      	movs	r2, #2
 80022fe:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d12e      	bne.n	8002364 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	4a8b      	ldr	r2, [pc, #556]	@ (8002538 <HAL_DAC_Start_DMA+0x268>)
 800230c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	4a8a      	ldr	r2, [pc, #552]	@ (800253c <HAL_DAC_Start_DMA+0x26c>)
 8002314:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	4a89      	ldr	r2, [pc, #548]	@ (8002540 <HAL_DAC_Start_DMA+0x270>)
 800231c:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800232c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800232e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002332:	2b00      	cmp	r3, #0
 8002334:	d004      	beq.n	8002340 <HAL_DAC_Start_DMA+0x70>
 8002336:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800233a:	2b04      	cmp	r3, #4
 800233c:	d006      	beq.n	800234c <HAL_DAC_Start_DMA+0x7c>
 800233e:	e00b      	b.n	8002358 <HAL_DAC_Start_DMA+0x88>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3308      	adds	r3, #8
 8002346:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 800234a:	e03a      	b.n	80023c2 <HAL_DAC_Start_DMA+0xf2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	330c      	adds	r3, #12
 8002352:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 8002356:	e034      	b.n	80023c2 <HAL_DAC_Start_DMA+0xf2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3310      	adds	r3, #16
 800235e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 8002362:	e02e      	b.n	80023c2 <HAL_DAC_Start_DMA+0xf2>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4a76      	ldr	r2, [pc, #472]	@ (8002544 <HAL_DAC_Start_DMA+0x274>)
 800236a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4a75      	ldr	r2, [pc, #468]	@ (8002548 <HAL_DAC_Start_DMA+0x278>)
 8002372:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a74      	ldr	r2, [pc, #464]	@ (800254c <HAL_DAC_Start_DMA+0x27c>)
 800237a:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800238a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800238c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_DAC_Start_DMA+0xce>
 8002394:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002398:	2b04      	cmp	r3, #4
 800239a:	d006      	beq.n	80023aa <HAL_DAC_Start_DMA+0xda>
 800239c:	e00b      	b.n	80023b6 <HAL_DAC_Start_DMA+0xe6>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3314      	adds	r3, #20
 80023a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 80023a8:	e00b      	b.n	80023c2 <HAL_DAC_Start_DMA+0xf2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3318      	adds	r3, #24
 80023b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 80023b4:	e005      	b.n	80023c2 <HAL_DAC_Start_DMA+0xf2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	331c      	adds	r3, #28
 80023bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 80023c0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d17e      	bne.n	80024c6 <HAL_DAC_Start_DMA+0x1f6>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    /* Check linkedlist mode */
    if ((hdac->DMA_Handle1->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d04b      	beq.n	800247e <HAL_DAC_Start_DMA+0x1ae>
    {
      if ((hdac->DMA_Handle1->LinkedListQueue != NULL) && (hdac->DMA_Handle1->LinkedListQueue->Head != NULL))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d044      	beq.n	800247a <HAL_DAC_Start_DMA+0x1aa>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d03e      	beq.n	800247a <HAL_DAC_Start_DMA+0x1aa>
      {
        /* Length should be converted to number of bytes */
        if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hdac->DMA_Handle1->LinkedListQueue->Head) != HAL_OK)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	f107 0318 	add.w	r3, r7, #24
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f001 fa74 	bl	80038f8 <HAL_DMAEx_List_GetNodeConfig>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_DAC_Start_DMA+0x14a>
        {
          return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e10b      	b.n	8002632 <HAL_DAC_Start_DMA+0x362>
        }

        /* Length should be converted to number of bytes */
        if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800241a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241c:	2b02      	cmp	r3, #2
 800241e:	d104      	bne.n	800242a <HAL_DAC_Start_DMA+0x15a>
        {
          /* Word -> Bytes */
          LengthInBytes = Length * 4U;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002428:	e00a      	b.n	8002440 <HAL_DAC_Start_DMA+0x170>
        }
        else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242c:	2b01      	cmp	r3, #1
 800242e:	d104      	bne.n	800243a <HAL_DAC_Start_DMA+0x16a>
        {
          /* Halfword -> Bytes */
          LengthInBytes = Length * 2U;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002438:	e002      	b.n	8002440 <HAL_DAC_Start_DMA+0x170>
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          LengthInBytes = Length;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        }

        /* Set DMA data size */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = LengthInBytes;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800244c:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = tmpreg;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002466:	611a      	str	r2, [r3, #16]

        /* Enable the DMA channel */
        status = HAL_DMAEx_List_Start_IT(hdac->DMA_Handle1);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4618      	mov	r0, r3
 800246e:	f001 f999 	bl	80037a4 <HAL_DMAEx_List_Start_IT>
 8002472:	4603      	mov	r3, r0
 8002474:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002478:	e0af      	b.n	80025da <HAL_DAC_Start_DMA+0x30a>
      }
      else
      {
        /* Return error status */
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0d9      	b.n	8002632 <HAL_DAC_Start_DMA+0x362>
      }
    }
    else
    {
      /* Length should be converted to number of bytes */
      if (hdac->DMA_Handle1->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d104      	bne.n	8002492 <HAL_DAC_Start_DMA+0x1c2>
      {
        /* Word -> Bytes */
        LengthInBytes = Length * 4U;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002490:	e00c      	b.n	80024ac <HAL_DAC_Start_DMA+0x1dc>
      }
      else if (hdac->DMA_Handle1->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d104      	bne.n	80024a6 <HAL_DAC_Start_DMA+0x1d6>
      {
        /* Halfword -> Bytes */
        LengthInBytes = Length * 2U;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024a4:	e002      	b.n	80024ac <HAL_DAC_Start_DMA+0x1dc>
      }
      else /* Bytes */
      {
        /* Same size already expressed in Bytes */
        LengthInBytes = Length;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }

      /* Enable the DMA channel */
      status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, LengthInBytes);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6898      	ldr	r0, [r3, #8]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80024ba:	f000 fd34 	bl	8002f26 <HAL_DMA_Start_IT>
 80024be:	4603      	mov	r3, r0
 80024c0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80024c4:	e089      	b.n	80025da <HAL_DAC_Start_DMA+0x30a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80024d4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    /* Check linkedlist mode */
    if ((hdac->DMA_Handle2->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d057      	beq.n	8002594 <HAL_DAC_Start_DMA+0x2c4>
    {
      if ((hdac->DMA_Handle2->LinkedListQueue != NULL) && (hdac->DMA_Handle2->LinkedListQueue->Head != NULL))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d050      	beq.n	8002590 <HAL_DAC_Start_DMA+0x2c0>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d04a      	beq.n	8002590 <HAL_DAC_Start_DMA+0x2c0>
      {
        /* Length should be converted to number of bytes */
        if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hdac->DMA_Handle2->LinkedListQueue->Head) != HAL_OK)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	f107 0318 	add.w	r3, r7, #24
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f001 f9f5 	bl	80038f8 <HAL_DMAEx_List_GetNodeConfig>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_DAC_Start_DMA+0x248>
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e08c      	b.n	8002632 <HAL_DAC_Start_DMA+0x362>
        }

        /* Length should be converted to number of bytes */
        if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251a:	2b02      	cmp	r3, #2
 800251c:	d104      	bne.n	8002528 <HAL_DAC_Start_DMA+0x258>
        {
          /* Word -> Bytes */
          LengthInBytes = Length * 4U;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002526:	e016      	b.n	8002556 <HAL_DAC_Start_DMA+0x286>
        }
        else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8002528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252a:	2b01      	cmp	r3, #1
 800252c:	d110      	bne.n	8002550 <HAL_DAC_Start_DMA+0x280>
        {
          /* Halfword -> Bytes */
          LengthInBytes = Length * 2U;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002536:	e00e      	b.n	8002556 <HAL_DAC_Start_DMA+0x286>
 8002538:	08002b21 	.word	0x08002b21
 800253c:	08002b45 	.word	0x08002b45
 8002540:	08002b63 	.word	0x08002b63
 8002544:	08002eb5 	.word	0x08002eb5
 8002548:	08002ed9 	.word	0x08002ed9
 800254c:	08002ef7 	.word	0x08002ef7
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          LengthInBytes = Length;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        }

        /* Set DMA data size */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = LengthInBytes;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002562:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = tmpreg;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800257c:	611a      	str	r2, [r3, #16]

        /* Enable the DMA channel */
        status = HAL_DMAEx_List_Start_IT(hdac->DMA_Handle2);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	4618      	mov	r0, r3
 8002584:	f001 f90e 	bl	80037a4 <HAL_DMAEx_List_Start_IT>
 8002588:	4603      	mov	r3, r0
 800258a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800258e:	e024      	b.n	80025da <HAL_DAC_Start_DMA+0x30a>
      }
      else
      {
        /* Return error status */
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e04e      	b.n	8002632 <HAL_DAC_Start_DMA+0x362>
      }
    }
    else
    {
      /* Length should be converted to number of bytes */
      if (hdac->DMA_Handle2->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d104      	bne.n	80025a8 <HAL_DAC_Start_DMA+0x2d8>
      {
        /* Word -> Bytes */
        LengthInBytes = Length * 4U;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025a6:	e00c      	b.n	80025c2 <HAL_DAC_Start_DMA+0x2f2>
      }
      else if (hdac->DMA_Handle2->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d104      	bne.n	80025bc <HAL_DAC_Start_DMA+0x2ec>
      {
        /* Halfword -> Bytes */
        LengthInBytes = Length * 2U;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025ba:	e002      	b.n	80025c2 <HAL_DAC_Start_DMA+0x2f2>
      }
      else /* Bytes */
      {
        /* Same size already expressed in Bytes */
        LengthInBytes = Length;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }

      /* Enable the DMA channel */
      status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, LengthInBytes);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	68d8      	ldr	r0, [r3, #12]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80025d0:	f000 fca9 	bl	8002f26 <HAL_DMA_Start_IT>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80025e0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d11c      	bne.n	8002622 <HAL_DAC_Start_DMA+0x352>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2201      	movs	r2, #1
 80025f6:	409a      	lsls	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002600:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <HAL_DAC_Start_DMA+0x36c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	4a0e      	ldr	r2, [pc, #56]	@ (8002640 <HAL_DAC_Start_DMA+0x370>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	099b      	lsrs	r3, r3, #6
 800260e:	3301      	adds	r3, #1
 8002610:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002612:	e002      	b.n	800261a <HAL_DAC_Start_DMA+0x34a>
    {
      wait_loop_index--;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3b01      	subs	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f9      	bne.n	8002614 <HAL_DAC_Start_DMA+0x344>
 8002620:	e005      	b.n	800262e <HAL_DAC_Start_DMA+0x35e>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f043 0204 	orr.w	r2, r3, #4
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800262e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8002632:	4618      	mov	r0, r3
 8002634:	3790      	adds	r7, #144	@ 0x90
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000020 	.word	0x20000020
 8002640:	053e2d63 	.word	0x053e2d63

08002644 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e03e      	b.n	80026d6 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6819      	ldr	r1, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43da      	mvns	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	400a      	ands	r2, r1
 8002674:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6819      	ldr	r1, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2201      	movs	r2, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43da      	mvns	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	400a      	ands	r2, r1
 8002690:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10d      	bne.n	80026b4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fca2 	bl	8002fe6 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	e00c      	b.n	80026ce <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fc94 	bl	8002fe6 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80026cc:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026f4:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01e      	beq.n	800273e <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d019      	beq.n	800273e <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2204      	movs	r2, #4
 800270e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002724:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002734:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	4798      	blx	r3
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01e      	beq.n	8002786 <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d019      	beq.n	8002786 <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2204      	movs	r2, #4
 8002756:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f043 0202 	orr.w	r2, r3, #2
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800276c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800277c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4798      	blx	r3
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	@ 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_DAC_ConfigChannel+0x1c>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e187      	b.n	8002b10 <HAL_DAC_ConfigChannel+0x330>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	795b      	ldrb	r3, [r3, #5]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_DAC_ConfigChannel+0x32>
 800280e:	2302      	movs	r3, #2
 8002810:	e17e      	b.n	8002b10 <HAL_DAC_ConfigChannel+0x330>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2202      	movs	r2, #2
 800281c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b04      	cmp	r3, #4
 8002824:	d17a      	bne.n	800291c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002826:	f7ff fb3d 	bl	8001ea4 <HAL_GetTick>
 800282a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d13d      	bne.n	80028ae <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002832:	e018      	b.n	8002866 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002834:	f7ff fb36 	bl	8001ea4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d911      	bls.n	8002866 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f043 0208 	orr.w	r2, r3, #8
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2203      	movs	r2, #3
 8002860:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e154      	b.n	8002b10 <HAL_DAC_ConfigChannel+0x330>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1df      	bne.n	8002834 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800287c:	641a      	str	r2, [r3, #64]	@ 0x40
 800287e:	e020      	b.n	80028c2 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002880:	f7ff fb10 	bl	8001ea4 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d90f      	bls.n	80028ae <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002894:	2b00      	cmp	r3, #0
 8002896:	da0a      	bge.n	80028ae <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f043 0208 	orr.w	r2, r3, #8
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2203      	movs	r2, #3
 80028a8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e130      	b.n	8002b10 <HAL_DAC_ConfigChannel+0x330>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	dbe3      	blt.n	8002880 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	ea02 0103 	and.w	r1, r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	409a      	lsls	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	21ff      	movs	r1, #255	@ 0xff
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	ea02 0103 	and.w	r1, r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	409a      	lsls	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002922:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	655a      	str	r2, [r3, #84]	@ 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d11d      	bne.n	8002976 <HAL_DAC_ConfigChannel+0x196>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	221f      	movs	r2, #31
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002952:	4013      	ands	r3, r2
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296a:	4313      	orrs	r3, r2
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002974:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2207      	movs	r2, #7
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800298e:	4013      	ands	r3, r2
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d102      	bne.n	80029a0 <HAL_DAC_ConfigChannel+0x1c0>
  {
    connectOnChip = 0x00000000UL;
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	e00f      	b.n	80029c0 <HAL_DAC_ConfigChannel+0x1e0>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d102      	bne.n	80029ae <HAL_DAC_ConfigChannel+0x1ce>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80029a8:	2301      	movs	r3, #1
 80029aa:	623b      	str	r3, [r7, #32]
 80029ac:	e008      	b.n	80029c0 <HAL_DAC_ConfigChannel+0x1e0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_DAC_ConfigChannel+0x1dc>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80029b6:	2301      	movs	r3, #1
 80029b8:	623b      	str	r3, [r7, #32]
 80029ba:	e001      	b.n	80029c0 <HAL_DAC_ConfigChannel+0x1e0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80029bc:	2300      	movs	r3, #0
 80029be:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	6a3a      	ldr	r2, [r7, #32]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e2:	4013      	ands	r3, r2
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	7a1b      	ldrb	r3, [r3, #8]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d102      	bne.n	80029f4 <HAL_DAC_ConfigChannel+0x214>
 80029ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029f2:	e000      	b.n	80029f6 <HAL_DAC_ConfigChannel+0x216>
 80029f4:	2300      	movs	r3, #0
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a0e:	4013      	ands	r3, r2
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	7a5b      	ldrb	r3, [r3, #9]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d102      	bne.n	8002a20 <HAL_DAC_ConfigChannel+0x240>
 8002a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a1e:	e000      	b.n	8002a22 <HAL_DAC_ConfigChannel+0x242>
 8002a20:	2300      	movs	r3, #0
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d114      	bne.n	8002a62 <HAL_DAC_ConfigChannel+0x282>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002a38:	f003 fc24 	bl	8006284 <HAL_RCC_GetHCLKFreq>
 8002a3c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4a35      	ldr	r2, [pc, #212]	@ (8002b18 <HAL_DAC_ConfigChannel+0x338>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d904      	bls.n	8002a50 <HAL_DAC_ConfigChannel+0x270>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a4e:	e00f      	b.n	8002a70 <HAL_DAC_ConfigChannel+0x290>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4a32      	ldr	r2, [pc, #200]	@ (8002b1c <HAL_DAC_ConfigChannel+0x33c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d90a      	bls.n	8002a6e <HAL_DAC_ConfigChannel+0x28e>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a60:	e006      	b.n	8002a70 <HAL_DAC_ConfigChannel+0x290>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a6c:	e000      	b.n	8002a70 <HAL_DAC_ConfigChannel+0x290>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002a6e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6819      	ldr	r1, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	400a      	ands	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ada:	4313      	orrs	r3, r2
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6819      	ldr	r1, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	22c0      	movs	r2, #192	@ 0xc0
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43da      	mvns	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	400a      	ands	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3728      	adds	r7, #40	@ 0x28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	09896800 	.word	0x09896800
 8002b1c:	04c4b400 	.word	0x04c4b400

08002b20 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	4798      	blx	r3
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	711a      	strb	r2, [r3, #4]
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b50:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	4798      	blx	r3
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	4798      	blx	r3
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	711a      	strb	r2, [r3, #4]
}
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_DACEx_SelfCalibrate>:
  * @retval Updates DAC_TrimmingValue. , DAC_UserTrimming set to DAC_UserTrimming
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */
HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	@ 0x28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Check the DAC handle allocation */
  /* Check if DAC running */
  if ((hdac == NULL) || (sConfig == NULL))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_DACEx_SelfCalibrate+0x1e>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d103      	bne.n	8002c0a <HAL_DACEx_SelfCalibrate+0x26>
  {
    status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002c08:	e111      	b.n	8002e2e <HAL_DACEx_SelfCalibrate+0x24a>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	791b      	ldrb	r3, [r3, #4]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d103      	bne.n	8002c1c <HAL_DACEx_SelfCalibrate+0x38>
  {
    status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002c1a:	e108      	b.n	8002e2e <HAL_DACEx_SelfCalibrate+0x24a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	795b      	ldrb	r3, [r3, #5]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_DACEx_SelfCalibrate+0x44>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e104      	b.n	8002e32 <HAL_DACEx_SelfCalibrate+0x24e>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2107      	movs	r1, #7
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6819      	ldr	r1, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2201      	movs	r2, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
    /* Wait for ready bit to be de-asserted */
    HAL_Delay(1);
 8002c60:	2001      	movs	r0, #1
 8002c62:	f7ff f92b 	bl	8001ebc <HAL_Delay>

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2207      	movs	r2, #7
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43da      	mvns	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	400a      	ands	r2, r1
 8002c80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c92:	409a      	lsls	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 0x10UL;
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	623b      	str	r3, [r7, #32]
    delta = 0x08UL;
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 8002ca4:	e047      	b.n	8002d36 <HAL_DACEx_SelfCalibrate+0x152>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	211f      	movs	r1, #31
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	ea02 0103 	and.w	r1, r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	6a3a      	ldr	r2, [r7, #32]
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Wait minimum time needed between two calibration steps (OTRIM) */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed */
      /*       32 bits register capacity and handle low frequency. */
      wait_loop_index = ((DAC_DELAY_TRIM_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8002e3c <HAL_DACEx_SelfCalibrate+0x258>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	4a5a      	ldr	r2, [pc, #360]	@ (8002e40 <HAL_DACEx_SelfCalibrate+0x25c>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002ce8:	e002      	b.n	8002cf0 <HAL_DACEx_SelfCalibrate+0x10c>
      {
        wait_loop_index--;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f9      	bne.n	8002cea <HAL_DACEx_SelfCalibrate+0x106>
      }

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d104      	bne.n	8002d28 <HAL_DACEx_SelfCalibrate+0x144>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 8002d1e:	6a3a      	ldr	r2, [r7, #32]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	623b      	str	r3, [r7, #32]
 8002d26:	e003      	b.n	8002d30 <HAL_DACEx_SelfCalibrate+0x14c>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8002d28:	6a3a      	ldr	r2, [r7, #32]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1UL;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1b4      	bne.n	8002ca6 <HAL_DACEx_SelfCalibrate+0xc2>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	211f      	movs	r1, #31
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	ea02 0103 	and.w	r1, r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	6a3a      	ldr	r2, [r7, #32]
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Wait minimum time needed between two calibration steps (OTRIM) */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed */
    /*       32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_TRIM_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d66:	4b35      	ldr	r3, [pc, #212]	@ (8002e3c <HAL_DACEx_SelfCalibrate+0x258>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	099b      	lsrs	r3, r3, #6
 8002d6c:	4a34      	ldr	r2, [pc, #208]	@ (8002e40 <HAL_DACEx_SelfCalibrate+0x25c>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002d7e:	e002      	b.n	8002d86 <HAL_DACEx_SelfCalibrate+0x1a2>
    {
      wait_loop_index--;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f9      	bne.n	8002d80 <HAL_DACEx_SelfCalibrate+0x19c>
    }

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d11a      	bne.n	8002ddc <HAL_DACEx_SelfCalibrate+0x1f8>
    {
      /* Check trimming value below maximum */
      if (trimmingvalue < 0x1FU)
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	2b1e      	cmp	r3, #30
 8002daa:	d802      	bhi.n	8002db2 <HAL_DACEx_SelfCalibrate+0x1ce>
      {
        /* Trimming is actually one value more */
        trimmingvalue++;
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	3301      	adds	r3, #1
 8002db0:	623b      	str	r3, [r7, #32]
      }
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	211f      	movs	r1, #31
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	ea02 0103 	and.w	r1, r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6819      	ldr	r1, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43da      	mvns	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	400a      	ands	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	6a3a      	ldr	r2, [r7, #32]
 8002dfe:	621a      	str	r2, [r3, #32]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2201      	movs	r2, #1
 8002e04:	61da      	str	r2, [r3, #28]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2107      	movs	r1, #7
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	ea02 0103 	and.w	r1, r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	715a      	strb	r2, [r3, #5]
  }

  return status;
 8002e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3728      	adds	r7, #40	@ 0x28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000020 	.word	0x20000020
 8002e40:	053e2d63 	.word	0x053e2d63

08002e44 <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle and autonomous mode configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <HAL_DACEx_SetConfigAutonomousMode+0x16>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_DACEx_SetConfigAutonomousMode+0x1a>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e024      	b.n	8002ea8 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }

  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	791b      	ldrb	r3, [r3, #4]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d11e      	bne.n	8002ea6 <HAL_DACEx_SetConfigAutonomousMode+0x62>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	795b      	ldrb	r3, [r3, #5]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_DACEx_SetConfigAutonomousMode+0x30>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e019      	b.n	8002ea8 <HAL_DACEx_SetConfigAutonomousMode+0x64>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e86:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }
  else
  {
    return HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
  }
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	4798      	blx	r3
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	711a      	strb	r2, [r3, #4]
}
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	4798      	blx	r3
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f043 0204 	orr.w	r2, r3, #4
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	4798      	blx	r3
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	711a      	strb	r2, [r3, #4]
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e04f      	b.n	8002fde <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_DMA_Start_IT+0x26>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e048      	b.n	8002fde <HAL_DMA_Start_IT+0xb8>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d136      	bne.n	8002fce <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fa4f 	bl	8003418 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002f88:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fa0:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fb8:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0201 	orr.w	r2, r2, #1
 8002fc8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e007      	b.n	8002fde <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2240      	movs	r2, #64	@ 0x40
 8002fd2:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002fee:	f7fe ff59 	bl	8001ea4 <HAL_GetTick>
 8002ff2:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e06b      	b.n	80030d6 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d008      	beq.n	800301c <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e05c      	b.n	80030d6 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0204 	orr.w	r2, r2, #4
 800302a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2205      	movs	r2, #5
 8003030:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003034:	e020      	b.n	8003078 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003036:	f7fe ff35 	bl	8001ea4 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b05      	cmp	r3, #5
 8003042:	d919      	bls.n	8003078 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003048:	f043 0210 	orr.w	r2, r3, #16
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2203      	movs	r2, #3
 8003054:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800305c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003068:	2201      	movs	r2, #1
 800306a:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e02e      	b.n	80030d6 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0d7      	beq.n	8003036 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0202 	orr.w	r2, r2, #2
 8003094:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2204      	movs	r2, #4
 800309a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80030a6:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c0:	2201      	movs	r2, #1
 80030c2:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2200      	movs	r2, #0
 80030ca:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80030ee:	f023 030f 	bic.w	r3, r3, #15
 80030f2:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fc:	3b50      	subs	r3, #80	@ 0x50
 80030fe:	09db      	lsrs	r3, r3, #7
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	2201      	movs	r2, #1
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4013      	ands	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 813b 	beq.w	8003394 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003128:	2b00      	cmp	r3, #0
 800312a:	d011      	beq.n	8003150 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003142:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003148:	f043 0201 	orr.w	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800315a:	2b00      	cmp	r3, #0
 800315c:	d011      	beq.n	8003182 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003174:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317a:	f043 0202 	orr.w	r2, r3, #2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d011      	beq.n	80031b4 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031a6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	f043 0204 	orr.w	r2, r3, #4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d011      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031d8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031de:	f043 0208 	orr.w	r2, r3, #8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00c      	beq.n	800321c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800320a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d04c      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d045      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003240:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b04      	cmp	r3, #4
 800324c:	d12e      	bne.n	80032ac <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800325c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0202 	orr.w	r2, r2, #2
 800326c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800327a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003286:	2201      	movs	r2, #1
 8003288:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2200      	movs	r2, #0
 8003290:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d07a      	beq.n	8003398 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
        }

        return;
 80032aa:	e075      	b.n	8003398 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2205      	movs	r2, #5
 80032b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d039      	beq.n	8003346 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d032      	beq.n	8003346 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d012      	beq.n	8003312 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d111      	bne.n	8003324 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800330c:	2201      	movs	r2, #1
 800330e:	731a      	strb	r2, [r3, #12]
 8003310:	e008      	b.n	8003324 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003318:	2b00      	cmp	r3, #0
 800331a:	d103      	bne.n	8003324 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800332c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334a:	2b00      	cmp	r3, #0
 800334c:	d025      	beq.n	800339a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0202 	orr.w	r2, r2, #2
 800335c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800336a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003376:	2201      	movs	r2, #1
 8003378:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	4798      	blx	r3
 8003392:	e002      	b.n	800339a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003394:	bf00      	nop
 8003396:	e000      	b.n	800339a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003398:	bf00      	nop
    }
  }
}
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e02b      	b.n	800340c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80033bc:	f023 030f 	bic.w	r3, r3, #15
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ca:	3b50      	subs	r3, #80	@ 0x50
 80033cc:	09db      	lsrs	r3, r3, #7
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	2201      	movs	r2, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d012      	beq.n	800340a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f003 0311 	and.w	r3, r3, #17
 80033ea:	2b11      	cmp	r3, #17
 80033ec:	d106      	bne.n	80033fc <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	e006      	b.n	800340a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	43db      	mvns	r3, r3
 8003404:	401a      	ands	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800342c:	0c1b      	lsrs	r3, r3, #16
 800342e:	041b      	lsls	r3, r3, #16
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	b291      	uxth	r1, r2
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	430b      	orrs	r3, r1
 800343a:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003444:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800346c:	f7fe fd1a 	bl	8001ea4 <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0db      	b.n	8003634 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a6e      	ldr	r2, [pc, #440]	@ (800363c <HAL_DMAEx_List_Init+0x1d8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	f000 809f 	beq.w	80035c6 <HAL_DMAEx_List_Init+0x162>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a6c      	ldr	r2, [pc, #432]	@ (8003640 <HAL_DMAEx_List_Init+0x1dc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	f000 8099 	beq.w	80035c6 <HAL_DMAEx_List_Init+0x162>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a6a      	ldr	r2, [pc, #424]	@ (8003644 <HAL_DMAEx_List_Init+0x1e0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	f000 8093 	beq.w	80035c6 <HAL_DMAEx_List_Init+0x162>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a68      	ldr	r2, [pc, #416]	@ (8003648 <HAL_DMAEx_List_Init+0x1e4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	f000 808d 	beq.w	80035c6 <HAL_DMAEx_List_Init+0x162>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a66      	ldr	r2, [pc, #408]	@ (800364c <HAL_DMAEx_List_Init+0x1e8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	f000 8087 	beq.w	80035c6 <HAL_DMAEx_List_Init+0x162>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a64      	ldr	r2, [pc, #400]	@ (8003650 <HAL_DMAEx_List_Init+0x1ec>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	f000 8081 	beq.w	80035c6 <HAL_DMAEx_List_Init+0x162>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a62      	ldr	r2, [pc, #392]	@ (8003654 <HAL_DMAEx_List_Init+0x1f0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d07b      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a61      	ldr	r2, [pc, #388]	@ (8003658 <HAL_DMAEx_List_Init+0x1f4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d076      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a5f      	ldr	r2, [pc, #380]	@ (800365c <HAL_DMAEx_List_Init+0x1f8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d071      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003660 <HAL_DMAEx_List_Init+0x1fc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d06c      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a5c      	ldr	r2, [pc, #368]	@ (8003664 <HAL_DMAEx_List_Init+0x200>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d067      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003668 <HAL_DMAEx_List_Init+0x204>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d062      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a59      	ldr	r2, [pc, #356]	@ (800366c <HAL_DMAEx_List_Init+0x208>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d05d      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a58      	ldr	r2, [pc, #352]	@ (8003670 <HAL_DMAEx_List_Init+0x20c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d058      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a56      	ldr	r2, [pc, #344]	@ (8003674 <HAL_DMAEx_List_Init+0x210>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d053      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a55      	ldr	r2, [pc, #340]	@ (8003678 <HAL_DMAEx_List_Init+0x214>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d04e      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a53      	ldr	r2, [pc, #332]	@ (800367c <HAL_DMAEx_List_Init+0x218>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d049      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a52      	ldr	r2, [pc, #328]	@ (8003680 <HAL_DMAEx_List_Init+0x21c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d044      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a50      	ldr	r2, [pc, #320]	@ (8003684 <HAL_DMAEx_List_Init+0x220>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d03f      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a4f      	ldr	r2, [pc, #316]	@ (8003688 <HAL_DMAEx_List_Init+0x224>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d03a      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a4d      	ldr	r2, [pc, #308]	@ (800368c <HAL_DMAEx_List_Init+0x228>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d035      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a4c      	ldr	r2, [pc, #304]	@ (8003690 <HAL_DMAEx_List_Init+0x22c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d030      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a4a      	ldr	r2, [pc, #296]	@ (8003694 <HAL_DMAEx_List_Init+0x230>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d02b      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a49      	ldr	r2, [pc, #292]	@ (8003698 <HAL_DMAEx_List_Init+0x234>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d026      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a47      	ldr	r2, [pc, #284]	@ (800369c <HAL_DMAEx_List_Init+0x238>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d021      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a46      	ldr	r2, [pc, #280]	@ (80036a0 <HAL_DMAEx_List_Init+0x23c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d01c      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a44      	ldr	r2, [pc, #272]	@ (80036a4 <HAL_DMAEx_List_Init+0x240>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d017      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a43      	ldr	r2, [pc, #268]	@ (80036a8 <HAL_DMAEx_List_Init+0x244>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d012      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a41      	ldr	r2, [pc, #260]	@ (80036ac <HAL_DMAEx_List_Init+0x248>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00d      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a40      	ldr	r2, [pc, #256]	@ (80036b0 <HAL_DMAEx_List_Init+0x24c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d008      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3e      	ldr	r2, [pc, #248]	@ (80036b4 <HAL_DMAEx_List_Init+0x250>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <HAL_DMAEx_List_Init+0x162>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a3d      	ldr	r2, [pc, #244]	@ (80036b8 <HAL_DMAEx_List_Init+0x254>)
 80035c4:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0206 	orr.w	r2, r2, #6
 80035e4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80035e6:	e00f      	b.n	8003608 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80035e8:	f7fe fc5c 	bl	8001ea4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	d908      	bls.n	8003608 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2210      	movs	r2, #16
 80035fa:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2203      	movs	r2, #3
 8003600:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e015      	b.n	8003634 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e8      	bne.n	80035e8 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 faf2 	bl	8003c00 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40020050 	.word	0x40020050
 8003640:	50020050 	.word	0x50020050
 8003644:	400200d0 	.word	0x400200d0
 8003648:	500200d0 	.word	0x500200d0
 800364c:	40020150 	.word	0x40020150
 8003650:	50020150 	.word	0x50020150
 8003654:	400201d0 	.word	0x400201d0
 8003658:	500201d0 	.word	0x500201d0
 800365c:	40020250 	.word	0x40020250
 8003660:	50020250 	.word	0x50020250
 8003664:	400202d0 	.word	0x400202d0
 8003668:	500202d0 	.word	0x500202d0
 800366c:	40020350 	.word	0x40020350
 8003670:	50020350 	.word	0x50020350
 8003674:	400203d0 	.word	0x400203d0
 8003678:	500203d0 	.word	0x500203d0
 800367c:	40020450 	.word	0x40020450
 8003680:	50020450 	.word	0x50020450
 8003684:	400204d0 	.word	0x400204d0
 8003688:	500204d0 	.word	0x500204d0
 800368c:	40020550 	.word	0x40020550
 8003690:	50020550 	.word	0x50020550
 8003694:	400205d0 	.word	0x400205d0
 8003698:	500205d0 	.word	0x500205d0
 800369c:	40020650 	.word	0x40020650
 80036a0:	50020650 	.word	0x50020650
 80036a4:	400206d0 	.word	0x400206d0
 80036a8:	500206d0 	.word	0x500206d0
 80036ac:	40020750 	.word	0x40020750
 80036b0:	50020750 	.word	0x50020750
 80036b4:	400207d0 	.word	0x400207d0
 80036b8:	500207d0 	.word	0x500207d0

080036bc <HAL_DMAEx_List_Start>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start(DMA_HandleTypeDef *const hdma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_DMAEx_List_Start+0x16>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_DMAEx_List_Start+0x1a>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e062      	b.n	800379c <HAL_DMAEx_List_Start+0xe0>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80036dc:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e8:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d005      	beq.n	80036fc <HAL_DMAEx_List_Start+0x40>
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d14a      	bne.n	800378c <HAL_DMAEx_List_Start+0xd0>
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d047      	beq.n	800378c <HAL_DMAEx_List_Start+0xd0>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d137      	bne.n	8003778 <HAL_DMAEx_List_Start+0xbc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_DMAEx_List_Start+0x5a>
 8003712:	2302      	movs	r3, #2
 8003714:	e042      	b.n	800379c <HAL_DMAEx_List_Start+0xe0>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372a:	2202      	movs	r2, #2
 800372c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003738:	2200      	movs	r2, #0
 800373a:	611a      	str	r2, [r3, #16]

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f107 010c 	add.w	r1, r7, #12
 8003746:	2200      	movs	r2, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fe7f 	bl	800444c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4619      	mov	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	0c0b      	lsrs	r3, r1, #16
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800376c:	4013      	ands	r3, r2
 800376e:	68f9      	ldr	r1, [r7, #12]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	430b      	orrs	r3, r1
 8003776:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e007      	b.n	800379c <HAL_DMAEx_List_Start+0xe0>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2240      	movs	r2, #64	@ 0x40
 8003790:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_DMAEx_List_Start_IT+0x16>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e082      	b.n	80038c4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037c4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d005      	beq.n	80037e4 <HAL_DMAEx_List_Start_IT+0x40>
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d16a      	bne.n	80038b4 <HAL_DMAEx_List_Start_IT+0x110>
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d067      	beq.n	80038b4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d157      	bne.n	80038a0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_DMAEx_List_Start_IT+0x5a>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e062      	b.n	80038c4 <HAL_DMAEx_List_Start_IT+0x120>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003812:	2202      	movs	r2, #2
 8003814:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003820:	2200      	movs	r2, #0
 8003822:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695a      	ldr	r2, [r3, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003832:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003838:	2b00      	cmp	r3, #0
 800383a:	d007      	beq.n	800384c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800384a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003862:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f107 010c 	add.w	r1, r7, #12
 800386e:	2200      	movs	r2, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fdeb 	bl	800444c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4619      	mov	r1, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	0c0b      	lsrs	r3, r1, #16
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003894:	4013      	ands	r3, r2
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	430b      	orrs	r3, r1
 800389e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e007      	b.n	80038c4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2240      	movs	r2, #64	@ 0x40
 80038b8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_DMAEx_List_BuildNode+0x16>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e004      	b.n	80038f0 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80038e6:	6839      	ldr	r1, [r7, #0]
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fae1 	bl	8003eb0 <DMA_List_BuildNode>

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_DMAEx_List_GetNodeConfig+0x16>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e004      	b.n	800391c <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8003912:	6839      	ldr	r1, [r7, #0]
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fc23 	bl	8004160 <DMA_List_GetNodeConfig>

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	@ 0x28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e066      	b.n	8003a0c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d104      	bne.n	8003950 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2204      	movs	r2, #4
 800394a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e05d      	b.n	8003a0c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2200      	movs	r2, #0
 8003956:	6839      	ldr	r1, [r7, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f000 fd0b 	bl	8004374 <DMA_List_CheckNodesBaseAddresses>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d004      	beq.n	800396e <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2205      	movs	r2, #5
 8003968:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e04e      	b.n	8003a0c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	6839      	ldr	r1, [r7, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fd2c 	bl	80043d4 <DMA_List_CheckNodesTypes>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2204      	movs	r2, #4
 8003986:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e03f      	b.n	8003a0c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d103      	bne.n	800399c <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e02b      	b.n	80039f4 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800399c:	f107 0220 	add.w	r2, r7, #32
 80039a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039a4:	4619      	mov	r1, r3
 80039a6:	6838      	ldr	r0, [r7, #0]
 80039a8:	f000 fd50 	bl	800444c <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80039b0:	f107 030c 	add.w	r3, r7, #12
 80039b4:	461a      	mov	r2, r3
 80039b6:	2100      	movs	r1, #0
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fd77 	bl	80044ac <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80039d0:	4013      	ands	r3, r2
 80039d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039d4:	6a3a      	ldr	r2, [r7, #32]
 80039d6:	4319      	orrs	r1, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80039e4:	4013      	ands	r3, r2
 80039e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4610      	mov	r0, r2
 80039ec:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80039ee:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 80039f0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3728      	adds	r7, #40	@ 0x28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	@ 0x28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e052      	b.n	8003acc <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d104      	bne.n	8003a38 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2202      	movs	r2, #2
 8003a32:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e049      	b.n	8003acc <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00c      	beq.n	8003a5a <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d101      	bne.n	8003a50 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e03d      	b.n	8003acc <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2204      	movs	r2, #4
 8003a54:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e038      	b.n	8003acc <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d104      	bne.n	8003a6c <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2204      	movs	r2, #4
 8003a66:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e02f      	b.n	8003acc <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f107 0220 	add.w	r2, r7, #32
 8003a80:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fce1 	bl	800444c <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	461a      	mov	r2, r3
 8003a94:	2100      	movs	r1, #0
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fd08 	bl	80044ac <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4610      	mov	r0, r2
 8003aae:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003ab0:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003ab2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3728      	adds	r7, #40	@ 0x28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_DMAEx_List_LinkQ+0x16>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e072      	b.n	8003bd4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003af4:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d002      	beq.n	8003b08 <HAL_DMAEx_List_LinkQ+0x34>
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d108      	bne.n	8003b1a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2240      	movs	r2, #64	@ 0x40
 8003b0c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e05c      	b.n	8003bd4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	7b1b      	ldrb	r3, [r3, #12]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d104      	bne.n	8003b2e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2201      	movs	r2, #1
 8003b28:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e052      	b.n	8003bd4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2b      	ldr	r2, [pc, #172]	@ (8003be0 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d022      	beq.n	8003b7e <HAL_DMAEx_List_LinkQ+0xaa>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a29      	ldr	r2, [pc, #164]	@ (8003be4 <HAL_DMAEx_List_LinkQ+0x110>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d01d      	beq.n	8003b7e <HAL_DMAEx_List_LinkQ+0xaa>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a28      	ldr	r2, [pc, #160]	@ (8003be8 <HAL_DMAEx_List_LinkQ+0x114>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d018      	beq.n	8003b7e <HAL_DMAEx_List_LinkQ+0xaa>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a26      	ldr	r2, [pc, #152]	@ (8003bec <HAL_DMAEx_List_LinkQ+0x118>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <HAL_DMAEx_List_LinkQ+0xaa>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a25      	ldr	r2, [pc, #148]	@ (8003bf0 <HAL_DMAEx_List_LinkQ+0x11c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00e      	beq.n	8003b7e <HAL_DMAEx_List_LinkQ+0xaa>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a23      	ldr	r2, [pc, #140]	@ (8003bf4 <HAL_DMAEx_List_LinkQ+0x120>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d009      	beq.n	8003b7e <HAL_DMAEx_List_LinkQ+0xaa>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a22      	ldr	r2, [pc, #136]	@ (8003bf8 <HAL_DMAEx_List_LinkQ+0x124>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_DMAEx_List_LinkQ+0xaa>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a20      	ldr	r2, [pc, #128]	@ (8003bfc <HAL_DMAEx_List_LinkQ+0x128>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d101      	bne.n	8003b82 <HAL_DMAEx_List_LinkQ+0xae>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <HAL_DMAEx_List_LinkQ+0xb0>
 8003b82:	2300      	movs	r3, #0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10b      	bne.n	8003ba0 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e019      	b.n	8003bd4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba4:	2b81      	cmp	r3, #129	@ 0x81
 8003ba6:	d108      	bne.n	8003bba <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10d      	bne.n	8003bcc <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e00c      	b.n	8003bd4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e003      	b.n	8003bd4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40020650 	.word	0x40020650
 8003be4:	50020650 	.word	0x50020650
 8003be8:	400206d0 	.word	0x400206d0
 8003bec:	500206d0 	.word	0x500206d0
 8003bf0:	40020750 	.word	0x40020750
 8003bf4:	50020750 	.word	0x50020750
 8003bf8:	400207d0 	.word	0x400207d0
 8003bfc:	500207d0 	.word	0x500207d0

08003c00 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a85      	ldr	r2, [pc, #532]	@ (8003e30 <DMA_List_Init+0x230>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	f000 80a0 	beq.w	8003d60 <DMA_List_Init+0x160>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a83      	ldr	r2, [pc, #524]	@ (8003e34 <DMA_List_Init+0x234>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	f000 809a 	beq.w	8003d60 <DMA_List_Init+0x160>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a81      	ldr	r2, [pc, #516]	@ (8003e38 <DMA_List_Init+0x238>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	f000 8094 	beq.w	8003d60 <DMA_List_Init+0x160>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a7f      	ldr	r2, [pc, #508]	@ (8003e3c <DMA_List_Init+0x23c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	f000 808e 	beq.w	8003d60 <DMA_List_Init+0x160>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a7d      	ldr	r2, [pc, #500]	@ (8003e40 <DMA_List_Init+0x240>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	f000 8088 	beq.w	8003d60 <DMA_List_Init+0x160>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a7b      	ldr	r2, [pc, #492]	@ (8003e44 <DMA_List_Init+0x244>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	f000 8082 	beq.w	8003d60 <DMA_List_Init+0x160>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a79      	ldr	r2, [pc, #484]	@ (8003e48 <DMA_List_Init+0x248>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d07c      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a78      	ldr	r2, [pc, #480]	@ (8003e4c <DMA_List_Init+0x24c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d077      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a76      	ldr	r2, [pc, #472]	@ (8003e50 <DMA_List_Init+0x250>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d072      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a75      	ldr	r2, [pc, #468]	@ (8003e54 <DMA_List_Init+0x254>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d06d      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a73      	ldr	r2, [pc, #460]	@ (8003e58 <DMA_List_Init+0x258>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d068      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a72      	ldr	r2, [pc, #456]	@ (8003e5c <DMA_List_Init+0x25c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d063      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a70      	ldr	r2, [pc, #448]	@ (8003e60 <DMA_List_Init+0x260>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d05e      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a6f      	ldr	r2, [pc, #444]	@ (8003e64 <DMA_List_Init+0x264>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d059      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a6d      	ldr	r2, [pc, #436]	@ (8003e68 <DMA_List_Init+0x268>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d054      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a6c      	ldr	r2, [pc, #432]	@ (8003e6c <DMA_List_Init+0x26c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d04f      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8003e70 <DMA_List_Init+0x270>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d04a      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a69      	ldr	r2, [pc, #420]	@ (8003e74 <DMA_List_Init+0x274>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d045      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a67      	ldr	r2, [pc, #412]	@ (8003e78 <DMA_List_Init+0x278>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d040      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a66      	ldr	r2, [pc, #408]	@ (8003e7c <DMA_List_Init+0x27c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d03b      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a64      	ldr	r2, [pc, #400]	@ (8003e80 <DMA_List_Init+0x280>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d036      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a63      	ldr	r2, [pc, #396]	@ (8003e84 <DMA_List_Init+0x284>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d031      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a61      	ldr	r2, [pc, #388]	@ (8003e88 <DMA_List_Init+0x288>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d02c      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a60      	ldr	r2, [pc, #384]	@ (8003e8c <DMA_List_Init+0x28c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d027      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a5e      	ldr	r2, [pc, #376]	@ (8003e90 <DMA_List_Init+0x290>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d022      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a5d      	ldr	r2, [pc, #372]	@ (8003e94 <DMA_List_Init+0x294>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d01d      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a5b      	ldr	r2, [pc, #364]	@ (8003e98 <DMA_List_Init+0x298>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d018      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a5a      	ldr	r2, [pc, #360]	@ (8003e9c <DMA_List_Init+0x29c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d013      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a58      	ldr	r2, [pc, #352]	@ (8003ea0 <DMA_List_Init+0x2a0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00e      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a57      	ldr	r2, [pc, #348]	@ (8003ea4 <DMA_List_Init+0x2a4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d009      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a55      	ldr	r2, [pc, #340]	@ (8003ea8 <DMA_List_Init+0x2a8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d004      	beq.n	8003d60 <DMA_List_Init+0x160>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a54      	ldr	r2, [pc, #336]	@ (8003eac <DMA_List_Init+0x2ac>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <DMA_List_Init+0x164>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <DMA_List_Init+0x166>
 8003d64:	2300      	movs	r3, #0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d004      	beq.n	8003d74 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003d98:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2200      	movs	r2, #0
 8003da8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2200      	movs	r2, #0
 8003db0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a36      	ldr	r2, [pc, #216]	@ (8003e90 <DMA_List_Init+0x290>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d022      	beq.n	8003e02 <DMA_List_Init+0x202>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a34      	ldr	r2, [pc, #208]	@ (8003e94 <DMA_List_Init+0x294>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01d      	beq.n	8003e02 <DMA_List_Init+0x202>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a33      	ldr	r2, [pc, #204]	@ (8003e98 <DMA_List_Init+0x298>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d018      	beq.n	8003e02 <DMA_List_Init+0x202>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a31      	ldr	r2, [pc, #196]	@ (8003e9c <DMA_List_Init+0x29c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <DMA_List_Init+0x202>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a30      	ldr	r2, [pc, #192]	@ (8003ea0 <DMA_List_Init+0x2a0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00e      	beq.n	8003e02 <DMA_List_Init+0x202>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea4 <DMA_List_Init+0x2a4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d009      	beq.n	8003e02 <DMA_List_Init+0x202>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2d      	ldr	r2, [pc, #180]	@ (8003ea8 <DMA_List_Init+0x2a8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d004      	beq.n	8003e02 <DMA_List_Init+0x202>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8003eac <DMA_List_Init+0x2ac>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d101      	bne.n	8003e06 <DMA_List_Init+0x206>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <DMA_List_Init+0x208>
 8003e06:	2300      	movs	r3, #0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d007      	beq.n	8003e1c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2200      	movs	r2, #0
 8003e12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2200      	movs	r2, #0
 8003e22:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40020050 	.word	0x40020050
 8003e34:	50020050 	.word	0x50020050
 8003e38:	400200d0 	.word	0x400200d0
 8003e3c:	500200d0 	.word	0x500200d0
 8003e40:	40020150 	.word	0x40020150
 8003e44:	50020150 	.word	0x50020150
 8003e48:	400201d0 	.word	0x400201d0
 8003e4c:	500201d0 	.word	0x500201d0
 8003e50:	40020250 	.word	0x40020250
 8003e54:	50020250 	.word	0x50020250
 8003e58:	400202d0 	.word	0x400202d0
 8003e5c:	500202d0 	.word	0x500202d0
 8003e60:	40020350 	.word	0x40020350
 8003e64:	50020350 	.word	0x50020350
 8003e68:	400203d0 	.word	0x400203d0
 8003e6c:	500203d0 	.word	0x500203d0
 8003e70:	40020450 	.word	0x40020450
 8003e74:	50020450 	.word	0x50020450
 8003e78:	400204d0 	.word	0x400204d0
 8003e7c:	500204d0 	.word	0x500204d0
 8003e80:	40020550 	.word	0x40020550
 8003e84:	50020550 	.word	0x50020550
 8003e88:	400205d0 	.word	0x400205d0
 8003e8c:	500205d0 	.word	0x500205d0
 8003e90:	40020650 	.word	0x40020650
 8003e94:	50020650 	.word	0x50020650
 8003e98:	400206d0 	.word	0x400206d0
 8003e9c:	500206d0 	.word	0x500206d0
 8003ea0:	40020750 	.word	0x40020750
 8003ea4:	50020750 	.word	0x50020750
 8003ea8:	400207d0 	.word	0x400207d0
 8003eac:	500207d0 	.word	0x500207d0

08003eb0 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003ec2:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8003ec8:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003ece:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8003ed4:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d017      	beq.n	8003f16 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef2:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	051b      	lsls	r3, r3, #20
 8003efc:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003f00:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	3b01      	subs	r3, #1
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003f0e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003f10:	431a      	orrs	r2, r3
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	f240 237f 	movw	r3, #639	@ 0x27f
 8003f22:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003f24:	431a      	orrs	r2, r3
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f32:	d10c      	bne.n	8003f4e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d011      	beq.n	8003f64 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	e00a      	b.n	8003f64 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f56:	d105      	bne.n	8003f64 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00f      	beq.n	8003f8c <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f78:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7e:	041b      	lsls	r3, r3, #16
 8003f80:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003f84:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003f86:	431a      	orrs	r2, r3
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d04e      	beq.n	8004040 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003faa:	3b01      	subs	r3, #1
 8003fac:	0419      	lsls	r1, r3, #16
 8003fae:	4b6a      	ldr	r3, [pc, #424]	@ (8004158 <DMA_List_BuildNode+0x2a8>)
 8003fb0:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	da06      	bge.n	8003fce <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	609a      	str	r2, [r3, #8]
 8003fcc:	e005      	b.n	8003fda <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	da06      	bge.n	8003ff0 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	609a      	str	r2, [r3, #8]
 8003fee:	e005      	b.n	8003ffc <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004000:	2b00      	cmp	r3, #0
 8004002:	da06      	bge.n	8004012 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	e005      	b.n	800401e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004022:	2b00      	cmp	r3, #0
 8004024:	da06      	bge.n	8004034 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	609a      	str	r2, [r3, #8]
 8004032:	e005      	b.n	8004040 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d05d      	beq.n	8004118 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004060:	2b00      	cmp	r3, #0
 8004062:	da09      	bge.n	8004078 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004068:	425b      	negs	r3, r3
 800406a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	615a      	str	r2, [r3, #20]
 8004076:	e005      	b.n	8004084 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800407c:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004088:	2b00      	cmp	r3, #0
 800408a:	da0d      	bge.n	80040a8 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004090:	425b      	negs	r3, r3
 8004092:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	0419      	lsls	r1, r3, #16
 800409c:	4b2f      	ldr	r3, [pc, #188]	@ (800415c <DMA_List_BuildNode+0x2ac>)
 800409e:	400b      	ands	r3, r1
 80040a0:	431a      	orrs	r2, r3
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	615a      	str	r2, [r3, #20]
 80040a6:	e009      	b.n	80040bc <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b0:	0419      	lsls	r1, r3, #16
 80040b2:	4b2a      	ldr	r3, [pc, #168]	@ (800415c <DMA_List_BuildNode+0x2ac>)
 80040b4:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80040b6:	431a      	orrs	r2, r3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	da08      	bge.n	80040d6 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c8:	425b      	negs	r3, r3
 80040ca:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	619a      	str	r2, [r3, #24]
 80040d4:	e004      	b.n	80040e0 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040da:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	da0b      	bge.n	8004100 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ec:	425b      	negs	r3, r3
 80040ee:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80040f8:	431a      	orrs	r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	619a      	str	r2, [r3, #24]
 80040fe:	e007      	b.n	8004110 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004108:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800410a:	431a      	orrs	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2200      	movs	r2, #0
 8004114:	61da      	str	r2, [r3, #28]
 8004116:	e002      	b.n	800411e <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2200      	movs	r2, #0
 800411c:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d006      	beq.n	8004140 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800413e:	e005      	b.n	800414c <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	621a      	str	r2, [r3, #32]
}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	07ff0000 	.word	0x07ff0000
 800415c:	1fff0000 	.word	0x1fff0000

08004160 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0208 	and.w	r2, r3, #8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0203 	and.w	r2, r3, #3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041ae:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80041b8:	0d1b      	lsrs	r3, r3, #20
 80041ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041be:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b66      	ldr	r3, [pc, #408]	@ (8004370 <DMA_List_GetNodeConfig+0x210>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041fa:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004202:	60da      	str	r2, [r3, #12]
 8004204:	e013      	b.n	800422e <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800421a:	2b00      	cmp	r3, #0
 800421c:	d004      	beq.n	8004228 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004224:	60da      	str	r2, [r3, #12]
 8004226:	e002      	b.n	800422e <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	b29a      	uxth	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	0c1b      	lsrs	r3, r3, #16
 8004288:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800428c:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004292:	e002      	b.n	800429a <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d04a      	beq.n	800434c <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042c0:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80042c2:	89fa      	ldrh	r2, [r7, #14]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	0c1b      	lsrs	r3, r3, #16
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042d4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 80042d6:	89fa      	ldrh	r2, [r7, #14]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d004      	beq.n	80042f2 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ec:	425a      	negs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004302:	425a      	negs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 800430e:	89fa      	ldrh	r2, [r7, #14]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 800431c:	89fa      	ldrh	r2, [r7, #14]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004332:	425a      	negs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	da11      	bge.n	8004364 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004344:	425a      	negs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 800434a:	e00b      	b.n	8004364 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	0c002000 	.word	0x0c002000

08004374 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4313      	orrs	r3, r2
 800438a:	0c1b      	lsrs	r3, r3, #16
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	e00a      	b.n	80043b6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e004      	b.n	80043b6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	0c1b      	lsrs	r3, r3, #16
 80043ba:	041b      	lsls	r3, r3, #16
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d001      	beq.n	80043c6 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d004      	beq.n	80043f4 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	e00e      	b.n	8004412 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d004      	beq.n	8004404 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e006      	b.n	8004412 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8004424:	2302      	movs	r3, #2
 8004426:	e00b      	b.n	8004440 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	429a      	cmp	r2, r3
 8004438:	d001      	beq.n	800443e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800443a:	2303      	movs	r3, #3
 800443c:	e000      	b.n	8004440 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00c      	beq.n	800447e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4a0d      	ldr	r2, [pc, #52]	@ (80044a4 <DMA_List_GetCLLRNodeInfo+0x58>)
 800446e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00f      	beq.n	8004496 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2207      	movs	r2, #7
 800447a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800447c:	e00b      	b.n	8004496 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4a08      	ldr	r2, [pc, #32]	@ (80044a8 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004488:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2205      	movs	r2, #5
 8004494:	601a      	str	r2, [r3, #0]
}
 8004496:	bf00      	nop
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	fe010000 	.word	0xfe010000
 80044a8:	f8010000 	.word	0xf8010000

080044ac <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b089      	sub	sp, #36	@ 0x24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d142      	bne.n	8004556 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80044d0:	e01d      	b.n	800450e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d107      	bne.n	80044e8 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	e00f      	b.n	8004508 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	0c1b      	lsrs	r3, r3, #16
 80044f2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	4413      	add	r3, r2
 80044f8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004500:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004504:	4013      	ands	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	3301      	adds	r3, #1
 800450c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	429a      	cmp	r2, r3
 8004516:	d3dc      	bcc.n	80044d2 <DMA_List_FindNode+0x26>
 8004518:	e029      	b.n	800456e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d107      	bne.n	8004530 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e00f      	b.n	8004550 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	0c1b      	lsrs	r3, r3, #16
 800453a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4413      	add	r3, r2
 8004540:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004548:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800454c:	4013      	ands	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	3301      	adds	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	429a      	cmp	r2, r3
 800455e:	d206      	bcs.n	800456e <DMA_List_FindNode+0xc2>
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004566:	4013      	ands	r3, r2
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	429a      	cmp	r2, r3
 800456c:	d1d5      	bne.n	800451a <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800457a:	4013      	ands	r3, r2
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	429a      	cmp	r2, r3
 8004580:	d001      	beq.n	8004586 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8004582:	2301      	movs	r3, #1
 8004584:	e02b      	b.n	80045de <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0c1b      	lsrs	r3, r3, #16
 8004592:	041b      	lsls	r3, r3, #16
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	041b      	lsls	r3, r3, #16
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	461a      	mov	r2, r3
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00f      	beq.n	80045dc <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	461a      	mov	r2, r3
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80045cc:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	0c1b      	lsrs	r3, r3, #16
 80045d4:	041b      	lsls	r3, r3, #16
 80045d6:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3724      	adds	r7, #36	@ 0x24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80045ea:	b480      	push	{r7}
 80045ec:	b087      	sub	sp, #28
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	460b      	mov	r3, r1
 80045f4:	607a      	str	r2, [r7, #4]
 80045f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80045fc:	7afb      	ldrb	r3, [r7, #11]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d011      	beq.n	8004626 <HAL_EXTI_RegisterCallback+0x3c>
 8004602:	2b02      	cmp	r3, #2
 8004604:	dc13      	bgt.n	800462e <HAL_EXTI_RegisterCallback+0x44>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_EXTI_RegisterCallback+0x26>
 800460a:	2b01      	cmp	r3, #1
 800460c:	d007      	beq.n	800461e <HAL_EXTI_RegisterCallback+0x34>
 800460e:	e00e      	b.n	800462e <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	609a      	str	r2, [r3, #8]
      break;
 800461c:	e00a      	b.n	8004634 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	605a      	str	r2, [r3, #4]
      break;
 8004624:	e006      	b.n	8004634 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	609a      	str	r2, [r3, #8]
      break;
 800462c:	e002      	b.n	8004634 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	75fb      	strb	r3, [r7, #23]
      break;
 8004632:	bf00      	nop
  }

  return status;
 8004634:	7dfb      	ldrb	r3, [r7, #23]
}
 8004636:	4618      	mov	r0, r3
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e003      	b.n	800465e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800465c:	2300      	movs	r3, #0
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	0c1b      	lsrs	r3, r3, #16
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	2201      	movs	r2, #1
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	4b17      	ldr	r3, [pc, #92]	@ (80046f4 <HAL_EXTI_IRQHandler+0x88>)
 8004696:	4413      	add	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4013      	ands	r3, r2
 80046a2:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	4b0d      	ldr	r3, [pc, #52]	@ (80046f8 <HAL_EXTI_IRQHandler+0x8c>)
 80046c4:	4413      	add	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4013      	ands	r3, r2
 80046d0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d009      	beq.n	80046ec <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	4798      	blx	r3
    }
  }
}
 80046ec:	bf00      	nop
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	4602200c 	.word	0x4602200c
 80046f8:	46022010 	.word	0x46022010

080046fc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b089      	sub	sp, #36	@ 0x24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800470e:	e1ba      	b.n	8004a86 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	2101      	movs	r1, #1
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 81aa 	beq.w	8004a80 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a55      	ldr	r2, [pc, #340]	@ (8004884 <HAL_GPIO_Init+0x188>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d15d      	bne.n	80047f0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800473a:	2201      	movs	r2, #1
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	4013      	ands	r3, r2
 8004748:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 0201 	and.w	r2, r3, #1
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	4313      	orrs	r3, r2
 800475c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004764:	4a48      	ldr	r2, [pc, #288]	@ (8004888 <HAL_GPIO_Init+0x18c>)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800476c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800476e:	4a46      	ldr	r2, [pc, #280]	@ (8004888 <HAL_GPIO_Init+0x18c>)
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	08da      	lsrs	r2, r3, #3
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	3208      	adds	r2, #8
 8004782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004786:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	220f      	movs	r2, #15
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	4013      	ands	r3, r2
 800479c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	220b      	movs	r2, #11
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	69fa      	ldr	r2, [r7, #28]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	08da      	lsrs	r2, r3, #3
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3208      	adds	r2, #8
 80047ba:	69f9      	ldr	r1, [r7, #28]
 80047bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	2203      	movs	r2, #3
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	2202      	movs	r2, #2
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e067      	b.n	80048c0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d003      	beq.n	8004800 <HAL_GPIO_Init+0x104>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b12      	cmp	r3, #18
 80047fe:	d145      	bne.n	800488c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	08da      	lsrs	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3208      	adds	r2, #8
 8004808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800480c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	220f      	movs	r2, #15
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	4013      	ands	r3, r2
 8004822:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f003 020f 	and.w	r2, r3, #15
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	4313      	orrs	r3, r2
 800483c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	08da      	lsrs	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3208      	adds	r2, #8
 8004846:	69f9      	ldr	r1, [r7, #28]
 8004848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	2203      	movs	r2, #3
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	43db      	mvns	r3, r3
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	4013      	ands	r3, r2
 8004862:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 0203 	and.w	r2, r3, #3
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	4313      	orrs	r3, r2
 8004878:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	e01e      	b.n	80048c0 <HAL_GPIO_Init+0x1c4>
 8004882:	bf00      	nop
 8004884:	46020000 	.word	0x46020000
 8004888:	0800b4e0 	.word	0x0800b4e0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	2203      	movs	r2, #3
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0203 	and.w	r2, r3, #3
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d00b      	beq.n	80048e0 <HAL_GPIO_Init+0x1e4>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d007      	beq.n	80048e0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048d4:	2b11      	cmp	r3, #17
 80048d6:	d003      	beq.n	80048e0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b12      	cmp	r3, #18
 80048de:	d130      	bne.n	8004942 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	2203      	movs	r2, #3
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	4313      	orrs	r3, r2
 8004908:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004916:	2201      	movs	r2, #1
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	4013      	ands	r3, r2
 8004924:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	f003 0201 	and.w	r2, r3, #1
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	4313      	orrs	r3, r2
 800493a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d017      	beq.n	800497a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	2203      	movs	r2, #3
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43db      	mvns	r3, r3
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	4013      	ands	r3, r2
 8004960:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	4313      	orrs	r3, r2
 8004972:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d07c      	beq.n	8004a80 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004986:	4a47      	ldr	r2, [pc, #284]	@ (8004aa4 <HAL_GPIO_Init+0x3a8>)
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	089b      	lsrs	r3, r3, #2
 800498c:	3318      	adds	r3, #24
 800498e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004992:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	220f      	movs	r2, #15
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	4013      	ands	r3, r2
 80049a8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0a9a      	lsrs	r2, r3, #10
 80049ae:	4b3e      	ldr	r3, [pc, #248]	@ (8004aa8 <HAL_GPIO_Init+0x3ac>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	f002 0203 	and.w	r2, r2, #3
 80049b8:	00d2      	lsls	r2, r2, #3
 80049ba:	4093      	lsls	r3, r2
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	4313      	orrs	r3, r2
 80049c0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80049c2:	4938      	ldr	r1, [pc, #224]	@ (8004aa4 <HAL_GPIO_Init+0x3a8>)
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	089b      	lsrs	r3, r3, #2
 80049c8:	3318      	adds	r3, #24
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80049d0:	4b34      	ldr	r3, [pc, #208]	@ (8004aa4 <HAL_GPIO_Init+0x3a8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	43db      	mvns	r3, r3
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	4013      	ands	r3, r2
 80049de:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80049f4:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa4 <HAL_GPIO_Init+0x3a8>)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80049fa:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa4 <HAL_GPIO_Init+0x3a8>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	43db      	mvns	r3, r3
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	4013      	ands	r3, r2
 8004a08:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004a1e:	4a21      	ldr	r2, [pc, #132]	@ (8004aa4 <HAL_GPIO_Init+0x3a8>)
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004a24:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa4 <HAL_GPIO_Init+0x3a8>)
 8004a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a2a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	4013      	ands	r3, r2
 8004a34:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004a4a:	4a16      	ldr	r2, [pc, #88]	@ (8004aa4 <HAL_GPIO_Init+0x3a8>)
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004a52:	4b14      	ldr	r3, [pc, #80]	@ (8004aa4 <HAL_GPIO_Init+0x3a8>)
 8004a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a58:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	4013      	ands	r3, r2
 8004a62:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004a78:	4a0a      	ldr	r2, [pc, #40]	@ (8004aa4 <HAL_GPIO_Init+0x3a8>)
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	3301      	adds	r3, #1
 8004a84:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f47f ae3d 	bne.w	8004710 <HAL_GPIO_Init+0x14>
  }
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	3724      	adds	r7, #36	@ 0x24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	46022000 	.word	0x46022000
 8004aa8:	002f7f7f 	.word	0x002f7f7f

08004aac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b089      	sub	sp, #36	@ 0x24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004abe:	e0bc      	b.n	8004c3a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	4013      	ands	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80ad 	beq.w	8004c34 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a5e      	ldr	r2, [pc, #376]	@ (8004c58 <HAL_GPIO_DeInit+0x1ac>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d115      	bne.n	8004b0e <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8004ae2:	4a5e      	ldr	r2, [pc, #376]	@ (8004c5c <HAL_GPIO_DeInit+0x1b0>)
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004aea:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004aec:	4a5b      	ldr	r2, [pc, #364]	@ (8004c5c <HAL_GPIO_DeInit+0x1b0>)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	4413      	add	r3, r2
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8004af8:	4b57      	ldr	r3, [pc, #348]	@ (8004c58 <HAL_GPIO_DeInit+0x1ac>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	2101      	movs	r1, #1
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	fa01 f303 	lsl.w	r3, r1, r3
 8004b04:	43db      	mvns	r3, r3
 8004b06:	4954      	ldr	r1, [pc, #336]	@ (8004c58 <HAL_GPIO_DeInit+0x1ac>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	600b      	str	r3, [r1, #0]
 8004b0c:	e053      	b.n	8004bb6 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8004b0e:	4a54      	ldr	r2, [pc, #336]	@ (8004c60 <HAL_GPIO_DeInit+0x1b4>)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	3318      	adds	r3, #24
 8004b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1a:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	220f      	movs	r2, #15
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	0a9a      	lsrs	r2, r3, #10
 8004b34:	4b4b      	ldr	r3, [pc, #300]	@ (8004c64 <HAL_GPIO_DeInit+0x1b8>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	f002 0203 	and.w	r2, r2, #3
 8004b3e:	00d2      	lsls	r2, r2, #3
 8004b40:	4093      	lsls	r3, r2
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d136      	bne.n	8004bb6 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8004b48:	4b45      	ldr	r3, [pc, #276]	@ (8004c60 <HAL_GPIO_DeInit+0x1b4>)
 8004b4a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	43db      	mvns	r3, r3
 8004b52:	4943      	ldr	r1, [pc, #268]	@ (8004c60 <HAL_GPIO_DeInit+0x1b4>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8004b5a:	4b41      	ldr	r3, [pc, #260]	@ (8004c60 <HAL_GPIO_DeInit+0x1b4>)
 8004b5c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	43db      	mvns	r3, r3
 8004b64:	493e      	ldr	r1, [pc, #248]	@ (8004c60 <HAL_GPIO_DeInit+0x1b4>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8004b6c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c60 <HAL_GPIO_DeInit+0x1b4>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	43db      	mvns	r3, r3
 8004b74:	493a      	ldr	r1, [pc, #232]	@ (8004c60 <HAL_GPIO_DeInit+0x1b4>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8004b7a:	4b39      	ldr	r3, [pc, #228]	@ (8004c60 <HAL_GPIO_DeInit+0x1b4>)
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	43db      	mvns	r3, r3
 8004b82:	4937      	ldr	r1, [pc, #220]	@ (8004c60 <HAL_GPIO_DeInit+0x1b4>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	220f      	movs	r2, #15
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8004b98:	4a31      	ldr	r2, [pc, #196]	@ (8004c60 <HAL_GPIO_DeInit+0x1b4>)
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	089b      	lsrs	r3, r3, #2
 8004b9e:	3318      	adds	r3, #24
 8004ba0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	43da      	mvns	r2, r3
 8004ba8:	482d      	ldr	r0, [pc, #180]	@ (8004c60 <HAL_GPIO_DeInit+0x1b4>)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	089b      	lsrs	r3, r3, #2
 8004bae:	400a      	ands	r2, r1
 8004bb0:	3318      	adds	r3, #24
 8004bb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	2103      	movs	r1, #3
 8004bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	08da      	lsrs	r2, r3, #3
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	3208      	adds	r2, #8
 8004bd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	220f      	movs	r2, #15
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	43db      	mvns	r3, r3
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	08d2      	lsrs	r2, r2, #3
 8004bea:	4019      	ands	r1, r3
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	3208      	adds	r2, #8
 8004bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	2103      	movs	r1, #3
 8004bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004c02:	43db      	mvns	r3, r3
 8004c04:	401a      	ands	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	2101      	movs	r1, #1
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	fa01 f303 	lsl.w	r3, r1, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	401a      	ands	r2, r3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	2103      	movs	r1, #3
 8004c28:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	401a      	ands	r2, r3
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	3301      	adds	r3, #1
 8004c38:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f47f af3c 	bne.w	8004ac0 <HAL_GPIO_DeInit+0x14>
  }
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	3724      	adds	r7, #36	@ 0x24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	46020000 	.word	0x46020000
 8004c5c:	0800b4e0 	.word	0x0800b4e0
 8004c60:	46022000 	.word	0x46022000
 8004c64:	002f7f7f 	.word	0x002f7f7f

08004c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	807b      	strh	r3, [r7, #2]
 8004c74:	4613      	mov	r3, r2
 8004c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c78:	787b      	ldrb	r3, [r7, #1]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c7e:	887a      	ldrh	r2, [r7, #2]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004c84:	e002      	b.n	8004c8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004c86:	887a      	ldrh	r2, [r7, #2]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004caa:	887a      	ldrh	r2, [r7, #2]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	041a      	lsls	r2, r3, #16
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	43d9      	mvns	r1, r3
 8004cb6:	887b      	ldrh	r3, [r7, #2]
 8004cb8:	400b      	ands	r3, r1
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	619a      	str	r2, [r3, #24]
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004cd0:	4b05      	ldr	r3, [pc, #20]	@ (8004ce8 <HAL_ICACHE_Enable+0x1c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a04      	ldr	r2, [pc, #16]	@ (8004ce8 <HAL_ICACHE_Enable+0x1c>)
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40030400 	.word	0x40030400

08004cec <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004cf4:	4b39      	ldr	r3, [pc, #228]	@ (8004ddc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cfc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d10b      	bne.n	8004d1e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d0c:	d905      	bls.n	8004d1a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004d0e:	4b33      	ldr	r3, [pc, #204]	@ (8004ddc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	4a32      	ldr	r2, [pc, #200]	@ (8004ddc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d18:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e057      	b.n	8004dce <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d24:	d90a      	bls.n	8004d3c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004d26:	4b2d      	ldr	r3, [pc, #180]	@ (8004ddc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	4a2a      	ldr	r2, [pc, #168]	@ (8004ddc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d38:	60d3      	str	r3, [r2, #12]
 8004d3a:	e007      	b.n	8004d4c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004d3c:	4b27      	ldr	r3, [pc, #156]	@ (8004ddc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004d44:	4925      	ldr	r1, [pc, #148]	@ (8004ddc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004d4c:	4b24      	ldr	r3, [pc, #144]	@ (8004de0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a24      	ldr	r2, [pc, #144]	@ (8004de4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	099b      	lsrs	r3, r3, #6
 8004d58:	2232      	movs	r2, #50	@ 0x32
 8004d5a:	fb02 f303 	mul.w	r3, r2, r3
 8004d5e:	4a21      	ldr	r2, [pc, #132]	@ (8004de4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	099b      	lsrs	r3, r3, #6
 8004d66:	3301      	adds	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004d6a:	e002      	b.n	8004d72 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004d72:	4b1a      	ldr	r3, [pc, #104]	@ (8004ddc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d102      	bne.n	8004d84 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f3      	bne.n	8004d6c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01b      	beq.n	8004dc2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004d8a:	4b15      	ldr	r3, [pc, #84]	@ (8004de0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a15      	ldr	r2, [pc, #84]	@ (8004de4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	099b      	lsrs	r3, r3, #6
 8004d96:	2232      	movs	r2, #50	@ 0x32
 8004d98:	fb02 f303 	mul.w	r3, r2, r3
 8004d9c:	4a11      	ldr	r2, [pc, #68]	@ (8004de4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	099b      	lsrs	r3, r3, #6
 8004da4:	3301      	adds	r3, #1
 8004da6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004da8:	e002      	b.n	8004db0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004db0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ddc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f3      	bne.n	8004daa <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e000      	b.n	8004dce <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	46020800 	.word	0x46020800
 8004de0:	20000020 	.word	0x20000020
 8004de4:	10624dd3 	.word	0x10624dd3

08004de8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004dec:	4b04      	ldr	r3, [pc, #16]	@ (8004e00 <HAL_PWREx_GetVoltageRange+0x18>)
 8004dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	46020800 	.word	0x46020800

08004e04 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004e0c:	4b22      	ldr	r3, [pc, #136]	@ (8004e98 <HAL_PWREx_ConfigSupply+0x94>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a22      	ldr	r2, [pc, #136]	@ (8004e9c <HAL_PWREx_ConfigSupply+0x98>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	099b      	lsrs	r3, r3, #6
 8004e18:	2232      	movs	r2, #50	@ 0x32
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004e9c <HAL_PWREx_ConfigSupply+0x98>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	099b      	lsrs	r3, r3, #6
 8004e26:	3301      	adds	r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d113      	bne.n	8004e58 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004e30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	4a1a      	ldr	r2, [pc, #104]	@ (8004ea0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e36:	f023 0302 	bic.w	r3, r3, #2
 8004e3a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004e3c:	e002      	b.n	8004e44 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004e44:	4b16      	ldr	r3, [pc, #88]	@ (8004ea0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d116      	bne.n	8004e7e <HAL_PWREx_ConfigSupply+0x7a>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f3      	bne.n	8004e3e <HAL_PWREx_ConfigSupply+0x3a>
 8004e56:	e012      	b.n	8004e7e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004e58:	4b11      	ldr	r3, [pc, #68]	@ (8004ea0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4a10      	ldr	r2, [pc, #64]	@ (8004ea0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e5e:	f043 0302 	orr.w	r3, r3, #2
 8004e62:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004e64:	e002      	b.n	8004e6c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <HAL_PWREx_ConfigSupply+0x7a>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f3      	bne.n	8004e66 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e000      	b.n	8004e8a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	20000020 	.word	0x20000020
 8004e9c:	10624dd3 	.word	0x10624dd3
 8004ea0:	46020800 	.word	0x46020800

08004ea4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004ea8:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	4a04      	ldr	r2, [pc, #16]	@ (8004ec0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004eae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004eb2:	6113      	str	r3, [r2, #16]
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	46020800 	.word	0x46020800

08004ec4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004ec8:	4b05      	ldr	r3, [pc, #20]	@ (8004ee0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	4a04      	ldr	r2, [pc, #16]	@ (8004ee0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8004ed4:	bf00      	nop
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	46020800 	.word	0x46020800

08004ee4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08e      	sub	sp, #56	@ 0x38
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004eec:	2300      	movs	r3, #0
 8004eee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f000 bec8 	b.w	8005c8e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004efe:	4b99      	ldr	r3, [pc, #612]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f08:	4b96      	ldr	r3, [pc, #600]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 816c 	beq.w	80051f8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <HAL_RCC_OscConfig+0x52>
 8004f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f28:	2b0c      	cmp	r3, #12
 8004f2a:	f040 80de 	bne.w	80050ea <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	f040 80da 	bne.w	80050ea <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f000 bea5 	b.w	8005c8e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f48:	4b86      	ldr	r3, [pc, #536]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <HAL_RCC_OscConfig+0x7a>
 8004f54:	4b83      	ldr	r3, [pc, #524]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004f5c:	e005      	b.n	8004f6a <HAL_RCC_OscConfig+0x86>
 8004f5e:	4b81      	ldr	r3, [pc, #516]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f64:	041b      	lsls	r3, r3, #16
 8004f66:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d255      	bcs.n	800501a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f001 fa11 	bl	80063a0 <RCC_SetFlashLatencyFromMSIRange>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f000 be82 	b.w	8005c8e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004f8a:	4b76      	ldr	r3, [pc, #472]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	4a75      	ldr	r2, [pc, #468]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f94:	6093      	str	r3, [r2, #8]
 8004f96:	4b73      	ldr	r3, [pc, #460]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa2:	4970      	ldr	r1, [pc, #448]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004fb0:	d309      	bcc.n	8004fc6 <HAL_RCC_OscConfig+0xe2>
 8004fb2:	4b6c      	ldr	r3, [pc, #432]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f023 021f 	bic.w	r2, r3, #31
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	4969      	ldr	r1, [pc, #420]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60cb      	str	r3, [r1, #12]
 8004fc4:	e07e      	b.n	80050c4 <HAL_RCC_OscConfig+0x1e0>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	da0a      	bge.n	8004fe4 <HAL_RCC_OscConfig+0x100>
 8004fce:	4b65      	ldr	r3, [pc, #404]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	015b      	lsls	r3, r3, #5
 8004fdc:	4961      	ldr	r1, [pc, #388]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60cb      	str	r3, [r1, #12]
 8004fe2:	e06f      	b.n	80050c4 <HAL_RCC_OscConfig+0x1e0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fec:	d30a      	bcc.n	8005004 <HAL_RCC_OscConfig+0x120>
 8004fee:	4b5d      	ldr	r3, [pc, #372]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	029b      	lsls	r3, r3, #10
 8004ffc:	4959      	ldr	r1, [pc, #356]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60cb      	str	r3, [r1, #12]
 8005002:	e05f      	b.n	80050c4 <HAL_RCC_OscConfig+0x1e0>
 8005004:	4b57      	ldr	r3, [pc, #348]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	03db      	lsls	r3, r3, #15
 8005012:	4954      	ldr	r1, [pc, #336]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005014:	4313      	orrs	r3, r2
 8005016:	60cb      	str	r3, [r1, #12]
 8005018:	e054      	b.n	80050c4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800501a:	4b52      	ldr	r3, [pc, #328]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	4a51      	ldr	r2, [pc, #324]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005020:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005024:	6093      	str	r3, [r2, #8]
 8005026:	4b4f      	ldr	r3, [pc, #316]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005032:	494c      	ldr	r1, [pc, #304]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005034:	4313      	orrs	r3, r2
 8005036:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005040:	d309      	bcc.n	8005056 <HAL_RCC_OscConfig+0x172>
 8005042:	4b48      	ldr	r3, [pc, #288]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f023 021f 	bic.w	r2, r3, #31
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	4945      	ldr	r1, [pc, #276]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005050:	4313      	orrs	r3, r2
 8005052:	60cb      	str	r3, [r1, #12]
 8005054:	e028      	b.n	80050a8 <HAL_RCC_OscConfig+0x1c4>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505a:	2b00      	cmp	r3, #0
 800505c:	da0a      	bge.n	8005074 <HAL_RCC_OscConfig+0x190>
 800505e:	4b41      	ldr	r3, [pc, #260]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	015b      	lsls	r3, r3, #5
 800506c:	493d      	ldr	r1, [pc, #244]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 800506e:	4313      	orrs	r3, r2
 8005070:	60cb      	str	r3, [r1, #12]
 8005072:	e019      	b.n	80050a8 <HAL_RCC_OscConfig+0x1c4>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507c:	d30a      	bcc.n	8005094 <HAL_RCC_OscConfig+0x1b0>
 800507e:	4b39      	ldr	r3, [pc, #228]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	029b      	lsls	r3, r3, #10
 800508c:	4935      	ldr	r1, [pc, #212]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 800508e:	4313      	orrs	r3, r2
 8005090:	60cb      	str	r3, [r1, #12]
 8005092:	e009      	b.n	80050a8 <HAL_RCC_OscConfig+0x1c4>
 8005094:	4b33      	ldr	r3, [pc, #204]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	03db      	lsls	r3, r3, #15
 80050a2:	4930      	ldr	r1, [pc, #192]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80050a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 f974 	bl	80063a0 <RCC_SetFlashLatencyFromMSIRange>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f000 bde5 	b.w	8005c8e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80050c4:	f001 f8de 	bl	8006284 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80050c8:	4b27      	ldr	r3, [pc, #156]	@ (8005168 <HAL_RCC_OscConfig+0x284>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fc fa7d 	bl	80015cc <HAL_InitTick>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80050d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 808a 	beq.w	80051f6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80050e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050e6:	f000 bdd2 	b.w	8005c8e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d066      	beq.n	80051c0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80050f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80050fe:	f7fc fed1 	bl	8001ea4 <HAL_GetTick>
 8005102:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005104:	e009      	b.n	800511a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005106:	f7fc fecd 	bl	8001ea4 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d902      	bls.n	800511a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	f000 bdba 	b.w	8005c8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800511a:	4b12      	ldr	r3, [pc, #72]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0ef      	beq.n	8005106 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005126:	4b0f      	ldr	r3, [pc, #60]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	4a0e      	ldr	r2, [pc, #56]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 800512c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005130:	6093      	str	r3, [r2, #8]
 8005132:	4b0c      	ldr	r3, [pc, #48]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	4909      	ldr	r1, [pc, #36]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005140:	4313      	orrs	r3, r2
 8005142:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800514c:	d30e      	bcc.n	800516c <HAL_RCC_OscConfig+0x288>
 800514e:	4b05      	ldr	r3, [pc, #20]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f023 021f 	bic.w	r2, r3, #31
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	4902      	ldr	r1, [pc, #8]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 800515c:	4313      	orrs	r3, r2
 800515e:	60cb      	str	r3, [r1, #12]
 8005160:	e04a      	b.n	80051f8 <HAL_RCC_OscConfig+0x314>
 8005162:	bf00      	nop
 8005164:	46020c00 	.word	0x46020c00
 8005168:	20000040 	.word	0x20000040
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005170:	2b00      	cmp	r3, #0
 8005172:	da0a      	bge.n	800518a <HAL_RCC_OscConfig+0x2a6>
 8005174:	4b98      	ldr	r3, [pc, #608]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	015b      	lsls	r3, r3, #5
 8005182:	4995      	ldr	r1, [pc, #596]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005184:	4313      	orrs	r3, r2
 8005186:	60cb      	str	r3, [r1, #12]
 8005188:	e036      	b.n	80051f8 <HAL_RCC_OscConfig+0x314>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005192:	d30a      	bcc.n	80051aa <HAL_RCC_OscConfig+0x2c6>
 8005194:	4b90      	ldr	r3, [pc, #576]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	029b      	lsls	r3, r3, #10
 80051a2:	498d      	ldr	r1, [pc, #564]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60cb      	str	r3, [r1, #12]
 80051a8:	e026      	b.n	80051f8 <HAL_RCC_OscConfig+0x314>
 80051aa:	4b8b      	ldr	r3, [pc, #556]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	03db      	lsls	r3, r3, #15
 80051b8:	4987      	ldr	r1, [pc, #540]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60cb      	str	r3, [r1, #12]
 80051be:	e01b      	b.n	80051f8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80051c0:	4b85      	ldr	r3, [pc, #532]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a84      	ldr	r2, [pc, #528]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051cc:	f7fc fe6a 	bl	8001ea4 <HAL_GetTick>
 80051d0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80051d2:	e009      	b.n	80051e8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051d4:	f7fc fe66 	bl	8001ea4 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d902      	bls.n	80051e8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	f000 bd53 	b.w	8005c8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80051e8:	4b7b      	ldr	r3, [pc, #492]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1ef      	bne.n	80051d4 <HAL_RCC_OscConfig+0x2f0>
 80051f4:	e000      	b.n	80051f8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80051f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 808b 	beq.w	800531c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005208:	2b08      	cmp	r3, #8
 800520a:	d005      	beq.n	8005218 <HAL_RCC_OscConfig+0x334>
 800520c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520e:	2b0c      	cmp	r3, #12
 8005210:	d109      	bne.n	8005226 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005214:	2b03      	cmp	r3, #3
 8005216:	d106      	bne.n	8005226 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d17d      	bne.n	800531c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	f000 bd34 	b.w	8005c8e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800522e:	d106      	bne.n	800523e <HAL_RCC_OscConfig+0x35a>
 8005230:	4b69      	ldr	r3, [pc, #420]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a68      	ldr	r2, [pc, #416]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	e041      	b.n	80052c2 <HAL_RCC_OscConfig+0x3de>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005246:	d112      	bne.n	800526e <HAL_RCC_OscConfig+0x38a>
 8005248:	4b63      	ldr	r3, [pc, #396]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a62      	ldr	r2, [pc, #392]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 800524e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	4b60      	ldr	r3, [pc, #384]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a5f      	ldr	r2, [pc, #380]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 800525a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	4b5d      	ldr	r3, [pc, #372]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a5c      	ldr	r2, [pc, #368]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	e029      	b.n	80052c2 <HAL_RCC_OscConfig+0x3de>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005276:	d112      	bne.n	800529e <HAL_RCC_OscConfig+0x3ba>
 8005278:	4b57      	ldr	r3, [pc, #348]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a56      	ldr	r2, [pc, #344]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 800527e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	4b54      	ldr	r3, [pc, #336]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a53      	ldr	r2, [pc, #332]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 800528a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	4b51      	ldr	r3, [pc, #324]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a50      	ldr	r2, [pc, #320]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	e011      	b.n	80052c2 <HAL_RCC_OscConfig+0x3de>
 800529e:	4b4e      	ldr	r3, [pc, #312]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a4d      	ldr	r2, [pc, #308]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80052a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	4b4b      	ldr	r3, [pc, #300]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a4a      	ldr	r2, [pc, #296]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80052b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	4b48      	ldr	r3, [pc, #288]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a47      	ldr	r2, [pc, #284]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80052bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80052c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d014      	beq.n	80052f4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80052ca:	f7fc fdeb 	bl	8001ea4 <HAL_GetTick>
 80052ce:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052d0:	e009      	b.n	80052e6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d2:	f7fc fde7 	bl	8001ea4 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b64      	cmp	r3, #100	@ 0x64
 80052de:	d902      	bls.n	80052e6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	f000 bcd4 	b.w	8005c8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052e6:	4b3c      	ldr	r3, [pc, #240]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0ef      	beq.n	80052d2 <HAL_RCC_OscConfig+0x3ee>
 80052f2:	e013      	b.n	800531c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80052f4:	f7fc fdd6 	bl	8001ea4 <HAL_GetTick>
 80052f8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052fa:	e009      	b.n	8005310 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052fc:	f7fc fdd2 	bl	8001ea4 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b64      	cmp	r3, #100	@ 0x64
 8005308:	d902      	bls.n	8005310 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	f000 bcbf 	b.w	8005c8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005310:	4b31      	ldr	r3, [pc, #196]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1ef      	bne.n	80052fc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d05f      	beq.n	80053e8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532a:	2b04      	cmp	r3, #4
 800532c:	d005      	beq.n	800533a <HAL_RCC_OscConfig+0x456>
 800532e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005330:	2b0c      	cmp	r3, #12
 8005332:	d114      	bne.n	800535e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005336:	2b02      	cmp	r3, #2
 8005338:	d111      	bne.n	800535e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d102      	bne.n	8005348 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f000 bca3 	b.w	8005c8e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005348:	4b23      	ldr	r3, [pc, #140]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	041b      	lsls	r3, r3, #16
 8005356:	4920      	ldr	r1, [pc, #128]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005358:	4313      	orrs	r3, r2
 800535a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800535c:	e044      	b.n	80053e8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d024      	beq.n	80053b0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005366:	4b1c      	ldr	r3, [pc, #112]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1b      	ldr	r2, [pc, #108]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 800536c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005370:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005372:	f7fc fd97 	bl	8001ea4 <HAL_GetTick>
 8005376:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005378:	e009      	b.n	800538e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800537a:	f7fc fd93 	bl	8001ea4 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d902      	bls.n	800538e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	f000 bc80 	b.w	8005c8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800538e:	4b12      	ldr	r3, [pc, #72]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0ef      	beq.n	800537a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800539a:	4b0f      	ldr	r3, [pc, #60]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	041b      	lsls	r3, r3, #16
 80053a8:	490b      	ldr	r1, [pc, #44]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	610b      	str	r3, [r1, #16]
 80053ae:	e01b      	b.n	80053e8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80053b0:	4b09      	ldr	r3, [pc, #36]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a08      	ldr	r2, [pc, #32]	@ (80053d8 <HAL_RCC_OscConfig+0x4f4>)
 80053b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80053bc:	f7fc fd72 	bl	8001ea4 <HAL_GetTick>
 80053c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053c2:	e00b      	b.n	80053dc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053c4:	f7fc fd6e 	bl	8001ea4 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d904      	bls.n	80053dc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	f000 bc5b 	b.w	8005c8e <HAL_RCC_OscConfig+0xdaa>
 80053d8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053dc:	4baf      	ldr	r3, [pc, #700]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1ed      	bne.n	80053c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80c8 	beq.w	8005586 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80053f6:	2300      	movs	r3, #0
 80053f8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053fc:	4ba7      	ldr	r3, [pc, #668]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 80053fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d111      	bne.n	800542e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800540a:	4ba4      	ldr	r3, [pc, #656]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 800540c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005410:	4aa2      	ldr	r2, [pc, #648]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 8005412:	f043 0304 	orr.w	r3, r3, #4
 8005416:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800541a:	4ba0      	ldr	r3, [pc, #640]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 800541c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005428:	2301      	movs	r3, #1
 800542a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800542e:	4b9c      	ldr	r3, [pc, #624]	@ (80056a0 <HAL_RCC_OscConfig+0x7bc>)
 8005430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d119      	bne.n	800546e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800543a:	4b99      	ldr	r3, [pc, #612]	@ (80056a0 <HAL_RCC_OscConfig+0x7bc>)
 800543c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543e:	4a98      	ldr	r2, [pc, #608]	@ (80056a0 <HAL_RCC_OscConfig+0x7bc>)
 8005440:	f043 0301 	orr.w	r3, r3, #1
 8005444:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005446:	f7fc fd2d 	bl	8001ea4 <HAL_GetTick>
 800544a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800544c:	e009      	b.n	8005462 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800544e:	f7fc fd29 	bl	8001ea4 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d902      	bls.n	8005462 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	f000 bc16 	b.w	8005c8e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005462:	4b8f      	ldr	r3, [pc, #572]	@ (80056a0 <HAL_RCC_OscConfig+0x7bc>)
 8005464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0ef      	beq.n	800544e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d05f      	beq.n	8005536 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005476:	4b89      	ldr	r3, [pc, #548]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 8005478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800547c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005488:	429a      	cmp	r2, r3
 800548a:	d037      	beq.n	80054fc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d006      	beq.n	80054a4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e3f4      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01b      	beq.n	80054e6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80054ae:	4b7b      	ldr	r3, [pc, #492]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 80054b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054b4:	4a79      	ldr	r2, [pc, #484]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 80054b6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80054ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80054be:	f7fc fcf1 	bl	8001ea4 <HAL_GetTick>
 80054c2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054c6:	f7fc fced 	bl	8001ea4 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b05      	cmp	r3, #5
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e3da      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80054d8:	4b70      	ldr	r3, [pc, #448]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 80054da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1ef      	bne.n	80054c6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80054e6:	4b6d      	ldr	r3, [pc, #436]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 80054e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054ec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	4969      	ldr	r1, [pc, #420]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80054fc:	4b67      	ldr	r3, [pc, #412]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 80054fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005502:	4a66      	ldr	r2, [pc, #408]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 8005504:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005508:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800550c:	f7fc fcca 	bl	8001ea4 <HAL_GetTick>
 8005510:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005514:	f7fc fcc6 	bl	8001ea4 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b05      	cmp	r3, #5
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e3b3      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005526:	4b5d      	ldr	r3, [pc, #372]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 8005528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800552c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0ef      	beq.n	8005514 <HAL_RCC_OscConfig+0x630>
 8005534:	e01b      	b.n	800556e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005536:	4b59      	ldr	r3, [pc, #356]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 8005538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800553c:	4a57      	ldr	r2, [pc, #348]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 800553e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005542:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005546:	f7fc fcad 	bl	8001ea4 <HAL_GetTick>
 800554a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800554e:	f7fc fca9 	bl	8001ea4 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b05      	cmp	r3, #5
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e396      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005560:	4b4e      	ldr	r3, [pc, #312]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 8005562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005566:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1ef      	bne.n	800554e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800556e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005572:	2b01      	cmp	r3, #1
 8005574:	d107      	bne.n	8005586 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005576:	4b49      	ldr	r3, [pc, #292]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 8005578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800557c:	4a47      	ldr	r2, [pc, #284]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 800557e:	f023 0304 	bic.w	r3, r3, #4
 8005582:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 8111 	beq.w	80057b6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005594:	2300      	movs	r3, #0
 8005596:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800559a:	4b40      	ldr	r3, [pc, #256]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 800559c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d111      	bne.n	80055cc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055a8:	4b3c      	ldr	r3, [pc, #240]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 80055aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055ae:	4a3b      	ldr	r2, [pc, #236]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 80055b0:	f043 0304 	orr.w	r3, r3, #4
 80055b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80055b8:	4b38      	ldr	r3, [pc, #224]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 80055ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055cc:	4b34      	ldr	r3, [pc, #208]	@ (80056a0 <HAL_RCC_OscConfig+0x7bc>)
 80055ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d118      	bne.n	800560a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80055d8:	4b31      	ldr	r3, [pc, #196]	@ (80056a0 <HAL_RCC_OscConfig+0x7bc>)
 80055da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055dc:	4a30      	ldr	r2, [pc, #192]	@ (80056a0 <HAL_RCC_OscConfig+0x7bc>)
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055e4:	f7fc fc5e 	bl	8001ea4 <HAL_GetTick>
 80055e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ec:	f7fc fc5a 	bl	8001ea4 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e347      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055fe:	4b28      	ldr	r3, [pc, #160]	@ (80056a0 <HAL_RCC_OscConfig+0x7bc>)
 8005600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01f      	beq.n	8005656 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	d010      	beq.n	8005644 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005622:	4b1e      	ldr	r3, [pc, #120]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 8005624:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005628:	4a1c      	ldr	r2, [pc, #112]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 800562a:	f043 0304 	orr.w	r3, r3, #4
 800562e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005632:	4b1a      	ldr	r3, [pc, #104]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 8005634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005638:	4a18      	ldr	r2, [pc, #96]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005642:	e018      	b.n	8005676 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005644:	4b15      	ldr	r3, [pc, #84]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 8005646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800564a:	4a14      	ldr	r2, [pc, #80]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 800564c:	f043 0301 	orr.w	r3, r3, #1
 8005650:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005654:	e00f      	b.n	8005676 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005656:	4b11      	ldr	r3, [pc, #68]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 8005658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800565c:	4a0f      	ldr	r2, [pc, #60]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005666:	4b0d      	ldr	r3, [pc, #52]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 8005668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800566c:	4a0b      	ldr	r2, [pc, #44]	@ (800569c <HAL_RCC_OscConfig+0x7b8>)
 800566e:	f023 0304 	bic.w	r3, r3, #4
 8005672:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d057      	beq.n	800572e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800567e:	f7fc fc11 	bl	8001ea4 <HAL_GetTick>
 8005682:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005684:	e00e      	b.n	80056a4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005686:	f7fc fc0d 	bl	8001ea4 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005694:	4293      	cmp	r3, r2
 8005696:	d905      	bls.n	80056a4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e2f8      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
 800569c:	46020c00 	.word	0x46020c00
 80056a0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a4:	4b9c      	ldr	r3, [pc, #624]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80056a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0e9      	beq.n	8005686 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01b      	beq.n	80056f6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056be:	4b96      	ldr	r3, [pc, #600]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80056c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056c4:	4a94      	ldr	r2, [pc, #592]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80056c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056ce:	e00a      	b.n	80056e6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d0:	f7fc fbe8 	bl	8001ea4 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e2d3      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056e6:	4b8c      	ldr	r3, [pc, #560]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80056e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0ed      	beq.n	80056d0 <HAL_RCC_OscConfig+0x7ec>
 80056f4:	e053      	b.n	800579e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056f6:	4b88      	ldr	r3, [pc, #544]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80056f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056fc:	4a86      	ldr	r2, [pc, #536]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80056fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005702:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005706:	e00a      	b.n	800571e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005708:	f7fc fbcc 	bl	8001ea4 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e2b7      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800571e:	4b7e      	ldr	r3, [pc, #504]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 8005720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005724:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1ed      	bne.n	8005708 <HAL_RCC_OscConfig+0x824>
 800572c:	e037      	b.n	800579e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800572e:	f7fc fbb9 	bl	8001ea4 <HAL_GetTick>
 8005732:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005734:	e00a      	b.n	800574c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005736:	f7fc fbb5 	bl	8001ea4 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e2a0      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800574c:	4b72      	ldr	r3, [pc, #456]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 800574e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1ed      	bne.n	8005736 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800575a:	4b6f      	ldr	r3, [pc, #444]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 800575c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01a      	beq.n	800579e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005768:	4b6b      	ldr	r3, [pc, #428]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 800576a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800576e:	4a6a      	ldr	r2, [pc, #424]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 8005770:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005774:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005778:	e00a      	b.n	8005790 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577a:	f7fc fb93 	bl	8001ea4 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e27e      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005790:	4b61      	ldr	r3, [pc, #388]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 8005792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005796:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1ed      	bne.n	800577a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800579e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a6:	4b5c      	ldr	r3, [pc, #368]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80057a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057ac:	4a5a      	ldr	r2, [pc, #360]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80057ae:	f023 0304 	bic.w	r3, r3, #4
 80057b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d036      	beq.n	8005830 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d019      	beq.n	80057fe <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80057ca:	4b53      	ldr	r3, [pc, #332]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a52      	ldr	r2, [pc, #328]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80057d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80057d4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80057d6:	f7fc fb65 	bl	8001ea4 <HAL_GetTick>
 80057da:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057de:	f7fc fb61 	bl	8001ea4 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e24e      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80057f0:	4b49      	ldr	r3, [pc, #292]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0f0      	beq.n	80057de <HAL_RCC_OscConfig+0x8fa>
 80057fc:	e018      	b.n	8005830 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80057fe:	4b46      	ldr	r3, [pc, #280]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a45      	ldr	r2, [pc, #276]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 8005804:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005808:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800580a:	f7fc fb4b 	bl	8001ea4 <HAL_GetTick>
 800580e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005812:	f7fc fb47 	bl	8001ea4 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e234      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005824:	4b3c      	ldr	r3, [pc, #240]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f0      	bne.n	8005812 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005838:	2b00      	cmp	r3, #0
 800583a:	d036      	beq.n	80058aa <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005840:	2b00      	cmp	r3, #0
 8005842:	d019      	beq.n	8005878 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005844:	4b34      	ldr	r3, [pc, #208]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a33      	ldr	r2, [pc, #204]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 800584a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800584e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005850:	f7fc fb28 	bl	8001ea4 <HAL_GetTick>
 8005854:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005858:	f7fc fb24 	bl	8001ea4 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e211      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800586a:	4b2b      	ldr	r3, [pc, #172]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f0      	beq.n	8005858 <HAL_RCC_OscConfig+0x974>
 8005876:	e018      	b.n	80058aa <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005878:	4b27      	ldr	r3, [pc, #156]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a26      	ldr	r2, [pc, #152]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 800587e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005882:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005884:	f7fc fb0e 	bl	8001ea4 <HAL_GetTick>
 8005888:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800588c:	f7fc fb0a 	bl	8001ea4 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e1f7      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800589e:	4b1e      	ldr	r3, [pc, #120]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f0      	bne.n	800588c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d07f      	beq.n	80059b6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d062      	beq.n	8005984 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80058be:	4b16      	ldr	r3, [pc, #88]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	4a15      	ldr	r2, [pc, #84]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80058c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80058c8:	6093      	str	r3, [r2, #8]
 80058ca:	4b13      	ldr	r3, [pc, #76]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d6:	4910      	ldr	r1, [pc, #64]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80058e4:	d309      	bcc.n	80058fa <HAL_RCC_OscConfig+0xa16>
 80058e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f023 021f 	bic.w	r2, r3, #31
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	4909      	ldr	r1, [pc, #36]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60cb      	str	r3, [r1, #12]
 80058f8:	e02a      	b.n	8005950 <HAL_RCC_OscConfig+0xa6c>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fe:	2b00      	cmp	r3, #0
 8005900:	da0c      	bge.n	800591c <HAL_RCC_OscConfig+0xa38>
 8005902:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	015b      	lsls	r3, r3, #5
 8005910:	4901      	ldr	r1, [pc, #4]	@ (8005918 <HAL_RCC_OscConfig+0xa34>)
 8005912:	4313      	orrs	r3, r2
 8005914:	60cb      	str	r3, [r1, #12]
 8005916:	e01b      	b.n	8005950 <HAL_RCC_OscConfig+0xa6c>
 8005918:	46020c00 	.word	0x46020c00
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005924:	d30a      	bcc.n	800593c <HAL_RCC_OscConfig+0xa58>
 8005926:	4ba1      	ldr	r3, [pc, #644]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	029b      	lsls	r3, r3, #10
 8005934:	499d      	ldr	r1, [pc, #628]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005936:	4313      	orrs	r3, r2
 8005938:	60cb      	str	r3, [r1, #12]
 800593a:	e009      	b.n	8005950 <HAL_RCC_OscConfig+0xa6c>
 800593c:	4b9b      	ldr	r3, [pc, #620]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	03db      	lsls	r3, r3, #15
 800594a:	4998      	ldr	r1, [pc, #608]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 800594c:	4313      	orrs	r3, r2
 800594e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005950:	4b96      	ldr	r3, [pc, #600]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a95      	ldr	r2, [pc, #596]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005956:	f043 0310 	orr.w	r3, r3, #16
 800595a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800595c:	f7fc faa2 	bl	8001ea4 <HAL_GetTick>
 8005960:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005964:	f7fc fa9e 	bl	8001ea4 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e18b      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005976:	4b8d      	ldr	r3, [pc, #564]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0xa80>
 8005982:	e018      	b.n	80059b6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005984:	4b89      	ldr	r3, [pc, #548]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a88      	ldr	r2, [pc, #544]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 800598a:	f023 0310 	bic.w	r3, r3, #16
 800598e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005990:	f7fc fa88 	bl	8001ea4 <HAL_GetTick>
 8005994:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005998:	f7fc fa84 	bl	8001ea4 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e171      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80059aa:	4b80      	ldr	r3, [pc, #512]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 8166 	beq.w	8005c8c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80059c0:	2300      	movs	r3, #0
 80059c2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059c6:	4b79      	ldr	r3, [pc, #484]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	2b0c      	cmp	r3, #12
 80059d0:	f000 80f2 	beq.w	8005bb8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d8:	2b02      	cmp	r3, #2
 80059da:	f040 80c5 	bne.w	8005b68 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80059de:	4b73      	ldr	r3, [pc, #460]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a72      	ldr	r2, [pc, #456]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 80059e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80059ea:	f7fc fa5b 	bl	8001ea4 <HAL_GetTick>
 80059ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f2:	f7fc fa57 	bl	8001ea4 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e144      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a04:	4b69      	ldr	r3, [pc, #420]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1f0      	bne.n	80059f2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a10:	4b66      	ldr	r3, [pc, #408]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d111      	bne.n	8005a42 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005a1e:	4b63      	ldr	r3, [pc, #396]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a24:	4a61      	ldr	r2, [pc, #388]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005a26:	f043 0304 	orr.w	r3, r3, #4
 8005a2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005a2e:	4b5f      	ldr	r3, [pc, #380]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005a42:	4b5b      	ldr	r3, [pc, #364]	@ (8005bb0 <HAL_RCC_OscConfig+0xccc>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a4e:	d102      	bne.n	8005a56 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005a56:	4b56      	ldr	r3, [pc, #344]	@ (8005bb0 <HAL_RCC_OscConfig+0xccc>)
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	4a55      	ldr	r2, [pc, #340]	@ (8005bb0 <HAL_RCC_OscConfig+0xccc>)
 8005a5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a60:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005a62:	4b52      	ldr	r3, [pc, #328]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a76:	3a01      	subs	r2, #1
 8005a78:	0212      	lsls	r2, r2, #8
 8005a7a:	4311      	orrs	r1, r2
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005a80:	430a      	orrs	r2, r1
 8005a82:	494a      	ldr	r1, [pc, #296]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	628b      	str	r3, [r1, #40]	@ 0x28
 8005a88:	4b48      	ldr	r3, [pc, #288]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005a8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a8c:	4b49      	ldr	r3, [pc, #292]	@ (8005bb4 <HAL_RCC_OscConfig+0xcd0>)
 8005a8e:	4013      	ands	r3, r2
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a94:	3a01      	subs	r2, #1
 8005a96:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005a9e:	3a01      	subs	r2, #1
 8005aa0:	0252      	lsls	r2, r2, #9
 8005aa2:	b292      	uxth	r2, r2
 8005aa4:	4311      	orrs	r1, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005aaa:	3a01      	subs	r2, #1
 8005aac:	0412      	lsls	r2, r2, #16
 8005aae:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005ab2:	4311      	orrs	r1, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005ab8:	3a01      	subs	r2, #1
 8005aba:	0612      	lsls	r2, r2, #24
 8005abc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	493a      	ldr	r1, [pc, #232]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005ac8:	4b38      	ldr	r3, [pc, #224]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005acc:	4a37      	ldr	r2, [pc, #220]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005ace:	f023 0310 	bic.w	r3, r3, #16
 8005ad2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad8:	4a34      	ldr	r2, [pc, #208]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005ade:	4b33      	ldr	r3, [pc, #204]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae2:	4a32      	ldr	r2, [pc, #200]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005ae4:	f043 0310 	orr.w	r3, r3, #16
 8005ae8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005aea:	4b30      	ldr	r3, [pc, #192]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aee:	f023 020c 	bic.w	r2, r3, #12
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af6:	492d      	ldr	r1, [pc, #180]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005afc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d105      	bne.n	8005b10 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005b04:	4b2a      	ldr	r3, [pc, #168]	@ (8005bb0 <HAL_RCC_OscConfig+0xccc>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	4a29      	ldr	r2, [pc, #164]	@ (8005bb0 <HAL_RCC_OscConfig+0xccc>)
 8005b0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b0e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005b10:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d107      	bne.n	8005b28 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005b18:	4b24      	ldr	r3, [pc, #144]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b1e:	4a23      	ldr	r2, [pc, #140]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005b20:	f023 0304 	bic.w	r3, r3, #4
 8005b24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005b28:	4b20      	ldr	r3, [pc, #128]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005b2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b32:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b34:	f7fc f9b6 	bl	8001ea4 <HAL_GetTick>
 8005b38:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b3c:	f7fc f9b2 	bl	8001ea4 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e09f      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b4e:	4b17      	ldr	r3, [pc, #92]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0f0      	beq.n	8005b3c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b5a:	4b14      	ldr	r3, [pc, #80]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5e:	4a13      	ldr	r2, [pc, #76]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b64:	6293      	str	r3, [r2, #40]	@ 0x28
 8005b66:	e091      	b.n	8005c8c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005b68:	4b10      	ldr	r3, [pc, #64]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005b6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b72:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b74:	f7fc f996 	bl	8001ea4 <HAL_GetTick>
 8005b78:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b7c:	f7fc f992 	bl	8001ea4 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e07f      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b8e:	4b07      	ldr	r3, [pc, #28]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1f0      	bne.n	8005b7c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005b9a:	4b04      	ldr	r3, [pc, #16]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9e:	4a03      	ldr	r2, [pc, #12]	@ (8005bac <HAL_RCC_OscConfig+0xcc8>)
 8005ba0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005ba4:	f023 0303 	bic.w	r3, r3, #3
 8005ba8:	6293      	str	r3, [r2, #40]	@ 0x28
 8005baa:	e06f      	b.n	8005c8c <HAL_RCC_OscConfig+0xda8>
 8005bac:	46020c00 	.word	0x46020c00
 8005bb0:	46020800 	.word	0x46020800
 8005bb4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005bb8:	4b37      	ldr	r3, [pc, #220]	@ (8005c98 <HAL_RCC_OscConfig+0xdb4>)
 8005bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bbc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005bbe:	4b36      	ldr	r3, [pc, #216]	@ (8005c98 <HAL_RCC_OscConfig+0xdb4>)
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d039      	beq.n	8005c40 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f003 0203 	and.w	r2, r3, #3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d132      	bne.n	8005c40 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	0a1b      	lsrs	r3, r3, #8
 8005bde:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d129      	bne.n	8005c40 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d122      	bne.n	8005c40 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c04:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d11a      	bne.n	8005c40 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	0a5b      	lsrs	r3, r3, #9
 8005c0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c16:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d111      	bne.n	8005c40 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	0c1b      	lsrs	r3, r3, #16
 8005c20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c28:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d108      	bne.n	8005c40 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	0e1b      	lsrs	r3, r3, #24
 8005c32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d001      	beq.n	8005c44 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e024      	b.n	8005c8e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c44:	4b14      	ldr	r3, [pc, #80]	@ (8005c98 <HAL_RCC_OscConfig+0xdb4>)
 8005c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c48:	08db      	lsrs	r3, r3, #3
 8005c4a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d01a      	beq.n	8005c8c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005c56:	4b10      	ldr	r3, [pc, #64]	@ (8005c98 <HAL_RCC_OscConfig+0xdb4>)
 8005c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8005c98 <HAL_RCC_OscConfig+0xdb4>)
 8005c5c:	f023 0310 	bic.w	r3, r3, #16
 8005c60:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c62:	f7fc f91f 	bl	8001ea4 <HAL_GetTick>
 8005c66:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005c68:	bf00      	nop
 8005c6a:	f7fc f91b 	bl	8001ea4 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d0f9      	beq.n	8005c6a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c7a:	4a07      	ldr	r2, [pc, #28]	@ (8005c98 <HAL_RCC_OscConfig+0xdb4>)
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005c80:	4b05      	ldr	r3, [pc, #20]	@ (8005c98 <HAL_RCC_OscConfig+0xdb4>)
 8005c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c84:	4a04      	ldr	r2, [pc, #16]	@ (8005c98 <HAL_RCC_OscConfig+0xdb4>)
 8005c86:	f043 0310 	orr.w	r3, r3, #16
 8005c8a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3738      	adds	r7, #56	@ 0x38
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	46020c00 	.word	0x46020c00

08005c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e1d9      	b.n	8006064 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cb0:	4b9b      	ldr	r3, [pc, #620]	@ (8005f20 <HAL_RCC_ClockConfig+0x284>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 030f 	and.w	r3, r3, #15
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d910      	bls.n	8005ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cbe:	4b98      	ldr	r3, [pc, #608]	@ (8005f20 <HAL_RCC_ClockConfig+0x284>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f023 020f 	bic.w	r2, r3, #15
 8005cc6:	4996      	ldr	r1, [pc, #600]	@ (8005f20 <HAL_RCC_ClockConfig+0x284>)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cce:	4b94      	ldr	r3, [pc, #592]	@ (8005f20 <HAL_RCC_ClockConfig+0x284>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d001      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e1c1      	b.n	8006064 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d010      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	695a      	ldr	r2, [r3, #20]
 8005cf0:	4b8c      	ldr	r3, [pc, #560]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d908      	bls.n	8005d0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005cfc:	4b89      	ldr	r3, [pc, #548]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	4986      	ldr	r1, [pc, #536]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d012      	beq.n	8005d40 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691a      	ldr	r2, [r3, #16]
 8005d1e:	4b81      	ldr	r3, [pc, #516]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	091b      	lsrs	r3, r3, #4
 8005d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d909      	bls.n	8005d40 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005d2c:	4b7d      	ldr	r3, [pc, #500]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	497a      	ldr	r1, [pc, #488]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d010      	beq.n	8005d6e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	4b74      	ldr	r3, [pc, #464]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d908      	bls.n	8005d6e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005d5c:	4b71      	ldr	r3, [pc, #452]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	496e      	ldr	r1, [pc, #440]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d010      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	4b69      	ldr	r3, [pc, #420]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d908      	bls.n	8005d9c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005d8a:	4b66      	ldr	r3, [pc, #408]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f023 020f 	bic.w	r2, r3, #15
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	4963      	ldr	r1, [pc, #396]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80d2 	beq.w	8005f4e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005daa:	2300      	movs	r3, #0
 8005dac:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d143      	bne.n	8005e3e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005db6:	4b5b      	ldr	r3, [pc, #364]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d110      	bne.n	8005de6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005dc4:	4b57      	ldr	r3, [pc, #348]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dca:	4a56      	ldr	r2, [pc, #344]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005dcc:	f043 0304 	orr.w	r3, r3, #4
 8005dd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005dd4:	4b53      	ldr	r3, [pc, #332]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	60bb      	str	r3, [r7, #8]
 8005de0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005de2:	2301      	movs	r3, #1
 8005de4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005de6:	f7fc f85d 	bl	8001ea4 <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005dec:	4b4e      	ldr	r3, [pc, #312]	@ (8005f28 <HAL_RCC_ClockConfig+0x28c>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00f      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005df8:	e008      	b.n	8005e0c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005dfa:	f7fc f853 	bl	8001ea4 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e12b      	b.n	8006064 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005e0c:	4b46      	ldr	r3, [pc, #280]	@ (8005f28 <HAL_RCC_ClockConfig+0x28c>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0f0      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d107      	bne.n	8005e2e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005e1e:	4b41      	ldr	r3, [pc, #260]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e24:	4a3f      	ldr	r2, [pc, #252]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005e26:	f023 0304 	bic.w	r3, r3, #4
 8005e2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d121      	bne.n	8005e7e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e112      	b.n	8006064 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d107      	bne.n	8005e56 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e46:	4b37      	ldr	r3, [pc, #220]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d115      	bne.n	8005e7e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e106      	b.n	8006064 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d107      	bne.n	8005e6e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005e5e:	4b31      	ldr	r3, [pc, #196]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e0fa      	b.n	8006064 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e0f2      	b.n	8006064 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005e7e:	4b29      	ldr	r3, [pc, #164]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f023 0203 	bic.w	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	4926      	ldr	r1, [pc, #152]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005e90:	f7fc f808 	bl	8001ea4 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d112      	bne.n	8005ec4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e9e:	e00a      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea0:	f7fc f800 	bl	8001ea4 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e0d6      	b.n	8006064 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f003 030c 	and.w	r3, r3, #12
 8005ebe:	2b0c      	cmp	r3, #12
 8005ec0:	d1ee      	bne.n	8005ea0 <HAL_RCC_ClockConfig+0x204>
 8005ec2:	e044      	b.n	8005f4e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d112      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ecc:	e00a      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ece:	f7fb ffe9 	bl	8001ea4 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e0bf      	b.n	8006064 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	f003 030c 	and.w	r3, r3, #12
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d1ee      	bne.n	8005ece <HAL_RCC_ClockConfig+0x232>
 8005ef0:	e02d      	b.n	8005f4e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d123      	bne.n	8005f42 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005efa:	e00a      	b.n	8005f12 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005efc:	f7fb ffd2 	bl	8001ea4 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e0a8      	b.n	8006064 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f12:	4b04      	ldr	r3, [pc, #16]	@ (8005f24 <HAL_RCC_ClockConfig+0x288>)
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f003 030c 	and.w	r3, r3, #12
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1ee      	bne.n	8005efc <HAL_RCC_ClockConfig+0x260>
 8005f1e:	e016      	b.n	8005f4e <HAL_RCC_ClockConfig+0x2b2>
 8005f20:	40022000 	.word	0x40022000
 8005f24:	46020c00 	.word	0x46020c00
 8005f28:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f2c:	f7fb ffba 	bl	8001ea4 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e090      	b.n	8006064 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f42:	4b4a      	ldr	r3, [pc, #296]	@ (800606c <HAL_RCC_ClockConfig+0x3d0>)
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f003 030c 	and.w	r3, r3, #12
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d1ee      	bne.n	8005f2c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d010      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	4b43      	ldr	r3, [pc, #268]	@ (800606c <HAL_RCC_ClockConfig+0x3d0>)
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d208      	bcs.n	8005f7c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005f6a:	4b40      	ldr	r3, [pc, #256]	@ (800606c <HAL_RCC_ClockConfig+0x3d0>)
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f023 020f 	bic.w	r2, r3, #15
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	493d      	ldr	r1, [pc, #244]	@ (800606c <HAL_RCC_ClockConfig+0x3d0>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8006070 <HAL_RCC_ClockConfig+0x3d4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d210      	bcs.n	8005fac <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8a:	4b39      	ldr	r3, [pc, #228]	@ (8006070 <HAL_RCC_ClockConfig+0x3d4>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f023 020f 	bic.w	r2, r3, #15
 8005f92:	4937      	ldr	r1, [pc, #220]	@ (8006070 <HAL_RCC_ClockConfig+0x3d4>)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9a:	4b35      	ldr	r3, [pc, #212]	@ (8006070 <HAL_RCC_ClockConfig+0x3d4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d001      	beq.n	8005fac <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e05b      	b.n	8006064 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d010      	beq.n	8005fda <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800606c <HAL_RCC_ClockConfig+0x3d0>)
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d208      	bcs.n	8005fda <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005fc8:	4b28      	ldr	r3, [pc, #160]	@ (800606c <HAL_RCC_ClockConfig+0x3d0>)
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	4925      	ldr	r1, [pc, #148]	@ (800606c <HAL_RCC_ClockConfig+0x3d0>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d012      	beq.n	800600c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	4b20      	ldr	r3, [pc, #128]	@ (800606c <HAL_RCC_ClockConfig+0x3d0>)
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	091b      	lsrs	r3, r3, #4
 8005ff0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d209      	bcs.n	800600c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800606c <HAL_RCC_ClockConfig+0x3d0>)
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	4919      	ldr	r1, [pc, #100]	@ (800606c <HAL_RCC_ClockConfig+0x3d0>)
 8006008:	4313      	orrs	r3, r2
 800600a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b00      	cmp	r3, #0
 8006016:	d010      	beq.n	800603a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	4b13      	ldr	r3, [pc, #76]	@ (800606c <HAL_RCC_ClockConfig+0x3d0>)
 800601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006020:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006024:	429a      	cmp	r2, r3
 8006026:	d208      	bcs.n	800603a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006028:	4b10      	ldr	r3, [pc, #64]	@ (800606c <HAL_RCC_ClockConfig+0x3d0>)
 800602a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	490d      	ldr	r1, [pc, #52]	@ (800606c <HAL_RCC_ClockConfig+0x3d0>)
 8006036:	4313      	orrs	r3, r2
 8006038:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800603a:	f000 f821 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 800603e:	4602      	mov	r2, r0
 8006040:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <HAL_RCC_ClockConfig+0x3d0>)
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	490a      	ldr	r1, [pc, #40]	@ (8006074 <HAL_RCC_ClockConfig+0x3d8>)
 800604a:	5ccb      	ldrb	r3, [r1, r3]
 800604c:	fa22 f303 	lsr.w	r3, r2, r3
 8006050:	4a09      	ldr	r2, [pc, #36]	@ (8006078 <HAL_RCC_ClockConfig+0x3dc>)
 8006052:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006054:	4b09      	ldr	r3, [pc, #36]	@ (800607c <HAL_RCC_ClockConfig+0x3e0>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4618      	mov	r0, r3
 800605a:	f7fb fab7 	bl	80015cc <HAL_InitTick>
 800605e:	4603      	mov	r3, r0
 8006060:	73fb      	strb	r3, [r7, #15]

  return status;
 8006062:	7bfb      	ldrb	r3, [r7, #15]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	46020c00 	.word	0x46020c00
 8006070:	40022000 	.word	0x40022000
 8006074:	0800b47c 	.word	0x0800b47c
 8006078:	20000020 	.word	0x20000020
 800607c:	20000040 	.word	0x20000040

08006080 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006080:	b480      	push	{r7}
 8006082:	b08b      	sub	sp, #44	@ 0x2c
 8006084:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800608e:	4b78      	ldr	r3, [pc, #480]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f003 030c 	and.w	r3, r3, #12
 8006096:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006098:	4b75      	ldr	r3, [pc, #468]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800609a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <HAL_RCC_GetSysClockFreq+0x34>
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b0c      	cmp	r3, #12
 80060ac:	d121      	bne.n	80060f2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d11e      	bne.n	80060f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80060b4:	4b6e      	ldr	r3, [pc, #440]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d107      	bne.n	80060d0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80060c0:	4b6b      	ldr	r3, [pc, #428]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80060c6:	0b1b      	lsrs	r3, r3, #12
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ce:	e005      	b.n	80060dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80060d0:	4b67      	ldr	r3, [pc, #412]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	0f1b      	lsrs	r3, r3, #28
 80060d6:	f003 030f 	and.w	r3, r3, #15
 80060da:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80060dc:	4a65      	ldr	r2, [pc, #404]	@ (8006274 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d110      	bne.n	800610e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060f0:	e00d      	b.n	800610e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060f2:	4b5f      	ldr	r3, [pc, #380]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f003 030c 	and.w	r3, r3, #12
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d102      	bne.n	8006104 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060fe:	4b5e      	ldr	r3, [pc, #376]	@ (8006278 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006100:	623b      	str	r3, [r7, #32]
 8006102:	e004      	b.n	800610e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b08      	cmp	r3, #8
 8006108:	d101      	bne.n	800610e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800610a:	4b5b      	ldr	r3, [pc, #364]	@ (8006278 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800610c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b0c      	cmp	r3, #12
 8006112:	f040 80a5 	bne.w	8006260 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006116:	4b56      	ldr	r3, [pc, #344]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006120:	4b53      	ldr	r3, [pc, #332]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006124:	0a1b      	lsrs	r3, r3, #8
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	3301      	adds	r3, #1
 800612c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800612e:	4b50      	ldr	r3, [pc, #320]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006132:	091b      	lsrs	r3, r3, #4
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800613a:	4b4d      	ldr	r3, [pc, #308]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800613c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613e:	08db      	lsrs	r3, r3, #3
 8006140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	fb02 f303 	mul.w	r3, r2, r3
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006152:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	2b02      	cmp	r3, #2
 800615a:	d003      	beq.n	8006164 <HAL_RCC_GetSysClockFreq+0xe4>
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	2b03      	cmp	r3, #3
 8006160:	d022      	beq.n	80061a8 <HAL_RCC_GetSysClockFreq+0x128>
 8006162:	e043      	b.n	80061ec <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800627c <HAL_RCC_GetSysClockFreq+0x1fc>
 8006172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006176:	4b3e      	ldr	r3, [pc, #248]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800617a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006186:	ed97 6a01 	vldr	s12, [r7, #4]
 800618a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8006280 <HAL_RCC_GetSysClockFreq+0x200>
 800618e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006192:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800619a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800619e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061a6:	e046      	b.n	8006236 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800627c <HAL_RCC_GetSysClockFreq+0x1fc>
 80061b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ba:	4b2d      	ldr	r3, [pc, #180]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80061bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061ca:	ed97 6a01 	vldr	s12, [r7, #4]
 80061ce:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006280 <HAL_RCC_GetSysClockFreq+0x200>
 80061d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061de:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ea:	e024      	b.n	8006236 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	ee07 3a90 	vmov	s15, r3
 80061fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006204:	4b1a      	ldr	r3, [pc, #104]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620c:	ee07 3a90 	vmov	s15, r3
 8006210:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006214:	ed97 6a01 	vldr	s12, [r7, #4]
 8006218:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8006280 <HAL_RCC_GetSysClockFreq+0x200>
 800621c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006220:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006224:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006228:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800622c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006230:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006234:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006236:	4b0e      	ldr	r3, [pc, #56]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800623a:	0e1b      	lsrs	r3, r3, #24
 800623c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006240:	3301      	adds	r3, #1
 8006242:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800624e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800625a:	ee17 3a90 	vmov	r3, s15
 800625e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006260:	6a3b      	ldr	r3, [r7, #32]
}
 8006262:	4618      	mov	r0, r3
 8006264:	372c      	adds	r7, #44	@ 0x2c
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	46020c00 	.word	0x46020c00
 8006274:	0800b494 	.word	0x0800b494
 8006278:	00f42400 	.word	0x00f42400
 800627c:	4b742400 	.word	0x4b742400
 8006280:	46000000 	.word	0x46000000

08006284 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006288:	f7ff fefa 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 800628c:	4602      	mov	r2, r0
 800628e:	4b07      	ldr	r3, [pc, #28]	@ (80062ac <HAL_RCC_GetHCLKFreq+0x28>)
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	4906      	ldr	r1, [pc, #24]	@ (80062b0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006298:	5ccb      	ldrb	r3, [r1, r3]
 800629a:	fa22 f303 	lsr.w	r3, r2, r3
 800629e:	4a05      	ldr	r2, [pc, #20]	@ (80062b4 <HAL_RCC_GetHCLKFreq+0x30>)
 80062a0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80062a2:	4b04      	ldr	r3, [pc, #16]	@ (80062b4 <HAL_RCC_GetHCLKFreq+0x30>)
 80062a4:	681b      	ldr	r3, [r3, #0]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	46020c00 	.word	0x46020c00
 80062b0:	0800b47c 	.word	0x0800b47c
 80062b4:	20000020 	.word	0x20000020

080062b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80062bc:	f7ff ffe2 	bl	8006284 <HAL_RCC_GetHCLKFreq>
 80062c0:	4602      	mov	r2, r0
 80062c2:	4b05      	ldr	r3, [pc, #20]	@ (80062d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	091b      	lsrs	r3, r3, #4
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	4903      	ldr	r1, [pc, #12]	@ (80062dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ce:	5ccb      	ldrb	r3, [r1, r3]
 80062d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	46020c00 	.word	0x46020c00
 80062dc:	0800b48c 	.word	0x0800b48c

080062e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80062e4:	f7ff ffce 	bl	8006284 <HAL_RCC_GetHCLKFreq>
 80062e8:	4602      	mov	r2, r0
 80062ea:	4b05      	ldr	r3, [pc, #20]	@ (8006300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	0a1b      	lsrs	r3, r3, #8
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	4903      	ldr	r1, [pc, #12]	@ (8006304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062f6:	5ccb      	ldrb	r3, [r1, r3]
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	46020c00 	.word	0x46020c00
 8006304:	0800b48c 	.word	0x0800b48c

08006308 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800630c:	f7ff ffba 	bl	8006284 <HAL_RCC_GetHCLKFreq>
 8006310:	4602      	mov	r2, r0
 8006312:	4b05      	ldr	r3, [pc, #20]	@ (8006328 <HAL_RCC_GetPCLK3Freq+0x20>)
 8006314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006316:	091b      	lsrs	r3, r3, #4
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	4903      	ldr	r1, [pc, #12]	@ (800632c <HAL_RCC_GetPCLK3Freq+0x24>)
 800631e:	5ccb      	ldrb	r3, [r1, r3]
 8006320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006324:	4618      	mov	r0, r3
 8006326:	bd80      	pop	{r7, pc}
 8006328:	46020c00 	.word	0x46020c00
 800632c:	0800b48c 	.word	0x0800b48c

08006330 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	221f      	movs	r2, #31
 800633e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006340:	4b15      	ldr	r3, [pc, #84]	@ (8006398 <HAL_RCC_GetClockConfig+0x68>)
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f003 0203 	and.w	r2, r3, #3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800634c:	4b12      	ldr	r3, [pc, #72]	@ (8006398 <HAL_RCC_GetClockConfig+0x68>)
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	f003 020f 	and.w	r2, r3, #15
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8006358:	4b0f      	ldr	r3, [pc, #60]	@ (8006398 <HAL_RCC_GetClockConfig+0x68>)
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8006364:	4b0c      	ldr	r3, [pc, #48]	@ (8006398 <HAL_RCC_GetClockConfig+0x68>)
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	091b      	lsrs	r3, r3, #4
 800636a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8006372:	4b09      	ldr	r3, [pc, #36]	@ (8006398 <HAL_RCC_GetClockConfig+0x68>)
 8006374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006376:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800637e:	4b07      	ldr	r3, [pc, #28]	@ (800639c <HAL_RCC_GetClockConfig+0x6c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 020f 	and.w	r2, r3, #15
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	601a      	str	r2, [r3, #0]
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	46020c00 	.word	0x46020c00
 800639c:	40022000 	.word	0x40022000

080063a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80063a8:	4b3e      	ldr	r3, [pc, #248]	@ (80064a4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063b6:	f7fe fd17 	bl	8004de8 <HAL_PWREx_GetVoltageRange>
 80063ba:	6178      	str	r0, [r7, #20]
 80063bc:	e019      	b.n	80063f2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063be:	4b39      	ldr	r3, [pc, #228]	@ (80064a4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063c4:	4a37      	ldr	r2, [pc, #220]	@ (80064a4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063c6:	f043 0304 	orr.w	r3, r3, #4
 80063ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80063ce:	4b35      	ldr	r3, [pc, #212]	@ (80064a4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063dc:	f7fe fd04 	bl	8004de8 <HAL_PWREx_GetVoltageRange>
 80063e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063e2:	4b30      	ldr	r3, [pc, #192]	@ (80064a4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063e8:	4a2e      	ldr	r2, [pc, #184]	@ (80064a4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063ea:	f023 0304 	bic.w	r3, r3, #4
 80063ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063f8:	d003      	beq.n	8006402 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006400:	d109      	bne.n	8006416 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006408:	d202      	bcs.n	8006410 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800640a:	2301      	movs	r3, #1
 800640c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800640e:	e033      	b.n	8006478 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006410:	2300      	movs	r3, #0
 8006412:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006414:	e030      	b.n	8006478 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800641c:	d208      	bcs.n	8006430 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006424:	d102      	bne.n	800642c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8006426:	2303      	movs	r3, #3
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	e025      	b.n	8006478 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e035      	b.n	800649c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006436:	d90f      	bls.n	8006458 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d109      	bne.n	8006452 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006444:	d902      	bls.n	800644c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006446:	2300      	movs	r3, #0
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	e015      	b.n	8006478 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800644c:	2301      	movs	r3, #1
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	e012      	b.n	8006478 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006452:	2300      	movs	r3, #0
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	e00f      	b.n	8006478 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800645e:	d109      	bne.n	8006474 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006466:	d102      	bne.n	800646e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006468:	2301      	movs	r3, #1
 800646a:	613b      	str	r3, [r7, #16]
 800646c:	e004      	b.n	8006478 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800646e:	2302      	movs	r3, #2
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	e001      	b.n	8006478 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006474:	2301      	movs	r3, #1
 8006476:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006478:	4b0b      	ldr	r3, [pc, #44]	@ (80064a8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f023 020f 	bic.w	r2, r3, #15
 8006480:	4909      	ldr	r1, [pc, #36]	@ (80064a8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006488:	4b07      	ldr	r3, [pc, #28]	@ (80064a8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 030f 	and.w	r3, r3, #15
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	429a      	cmp	r2, r3
 8006494:	d001      	beq.n	800649a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	46020c00 	.word	0x46020c00
 80064a8:	40022000 	.word	0x40022000

080064ac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80064ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064b0:	b0b8      	sub	sp, #224	@ 0xe0
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064b8:	2300      	movs	r3, #0
 80064ba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064be:	2300      	movs	r3, #0
 80064c0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f002 0401 	and.w	r4, r2, #1
 80064d0:	2500      	movs	r5, #0
 80064d2:	ea54 0305 	orrs.w	r3, r4, r5
 80064d6:	d00b      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80064d8:	4bca      	ldr	r3, [pc, #808]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064de:	f023 0103 	bic.w	r1, r3, #3
 80064e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e8:	4ac6      	ldr	r2, [pc, #792]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064ea:	430b      	orrs	r3, r1
 80064ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	f002 0802 	and.w	r8, r2, #2
 80064fc:	f04f 0900 	mov.w	r9, #0
 8006500:	ea58 0309 	orrs.w	r3, r8, r9
 8006504:	d00b      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006506:	4bbf      	ldr	r3, [pc, #764]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800650c:	f023 010c 	bic.w	r1, r3, #12
 8006510:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006516:	4abb      	ldr	r2, [pc, #748]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006518:	430b      	orrs	r3, r1
 800651a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800651e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	f002 0a04 	and.w	sl, r2, #4
 800652a:	f04f 0b00 	mov.w	fp, #0
 800652e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006532:	d00b      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006534:	4bb3      	ldr	r3, [pc, #716]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800653a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800653e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006544:	4aaf      	ldr	r2, [pc, #700]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006546:	430b      	orrs	r3, r1
 8006548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800654c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f002 0308 	and.w	r3, r2, #8
 8006558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800655c:	2300      	movs	r3, #0
 800655e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006562:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006566:	460b      	mov	r3, r1
 8006568:	4313      	orrs	r3, r2
 800656a:	d00b      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800656c:	4ba5      	ldr	r3, [pc, #660]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800656e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006572:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006576:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800657a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800657c:	4aa1      	ldr	r2, [pc, #644]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800657e:	430b      	orrs	r3, r1
 8006580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	f002 0310 	and.w	r3, r2, #16
 8006590:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006594:	2300      	movs	r3, #0
 8006596:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800659a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800659e:	460b      	mov	r3, r1
 80065a0:	4313      	orrs	r3, r2
 80065a2:	d00b      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80065a4:	4b97      	ldr	r3, [pc, #604]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065b4:	4a93      	ldr	r2, [pc, #588]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065b6:	430b      	orrs	r3, r1
 80065b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	f002 0320 	and.w	r3, r2, #32
 80065c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065cc:	2300      	movs	r3, #0
 80065ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4313      	orrs	r3, r2
 80065da:	d00b      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80065dc:	4b89      	ldr	r3, [pc, #548]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065e2:	f023 0107 	bic.w	r1, r3, #7
 80065e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065ec:	4a85      	ldr	r2, [pc, #532]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065ee:	430b      	orrs	r3, r1
 80065f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006600:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006604:	2300      	movs	r3, #0
 8006606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800660a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800660e:	460b      	mov	r3, r1
 8006610:	4313      	orrs	r3, r2
 8006612:	d00b      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006614:	4b7b      	ldr	r3, [pc, #492]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800661a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800661e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006622:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006624:	4a77      	ldr	r2, [pc, #476]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006626:	430b      	orrs	r3, r1
 8006628:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800662c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006638:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800663c:	2300      	movs	r3, #0
 800663e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006642:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006646:	460b      	mov	r3, r1
 8006648:	4313      	orrs	r3, r2
 800664a:	d00b      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800664c:	4b6d      	ldr	r3, [pc, #436]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800664e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006652:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006656:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800665a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800665c:	4a69      	ldr	r2, [pc, #420]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800665e:	430b      	orrs	r3, r1
 8006660:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006664:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006674:	2300      	movs	r3, #0
 8006676:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800667a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800667e:	460b      	mov	r3, r1
 8006680:	4313      	orrs	r3, r2
 8006682:	d00b      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006684:	4b5f      	ldr	r3, [pc, #380]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800668a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800668e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006694:	4a5b      	ldr	r2, [pc, #364]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006696:	430b      	orrs	r3, r1
 8006698:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800669c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80066a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066ac:	2300      	movs	r3, #0
 80066ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80066b6:	460b      	mov	r3, r1
 80066b8:	4313      	orrs	r3, r2
 80066ba:	d00b      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80066bc:	4b51      	ldr	r3, [pc, #324]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066c2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80066c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066cc:	4a4d      	ldr	r2, [pc, #308]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066ce:	430b      	orrs	r3, r1
 80066d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066dc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80066e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066e4:	2300      	movs	r3, #0
 80066e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80066ee:	460b      	mov	r3, r1
 80066f0:	4313      	orrs	r3, r2
 80066f2:	d00b      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80066f4:	4b43      	ldr	r3, [pc, #268]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066fa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80066fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006702:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006704:	4a3f      	ldr	r2, [pc, #252]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006706:	430b      	orrs	r3, r1
 8006708:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800670c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006718:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800671c:	2300      	movs	r3, #0
 800671e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006722:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006726:	460b      	mov	r3, r1
 8006728:	4313      	orrs	r3, r2
 800672a:	d00b      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800672c:	4b35      	ldr	r3, [pc, #212]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800672e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006732:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006736:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800673a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800673c:	4a31      	ldr	r2, [pc, #196]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800673e:	430b      	orrs	r3, r1
 8006740:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006744:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006750:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006752:	2300      	movs	r3, #0
 8006754:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006756:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800675a:	460b      	mov	r3, r1
 800675c:	4313      	orrs	r3, r2
 800675e:	d00c      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006760:	4b28      	ldr	r3, [pc, #160]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006766:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800676a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800676e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006772:	4a24      	ldr	r2, [pc, #144]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006774:	430b      	orrs	r3, r1
 8006776:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800677a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006786:	673b      	str	r3, [r7, #112]	@ 0x70
 8006788:	2300      	movs	r3, #0
 800678a:	677b      	str	r3, [r7, #116]	@ 0x74
 800678c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006790:	460b      	mov	r3, r1
 8006792:	4313      	orrs	r3, r2
 8006794:	d04f      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006796:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800679e:	2b80      	cmp	r3, #128	@ 0x80
 80067a0:	d02d      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x352>
 80067a2:	2b80      	cmp	r3, #128	@ 0x80
 80067a4:	d827      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80067a6:	2b60      	cmp	r3, #96	@ 0x60
 80067a8:	d02e      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80067aa:	2b60      	cmp	r3, #96	@ 0x60
 80067ac:	d823      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80067ae:	2b40      	cmp	r3, #64	@ 0x40
 80067b0:	d006      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80067b2:	2b40      	cmp	r3, #64	@ 0x40
 80067b4:	d81f      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x322>
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	d011      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80067be:	e01a      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067c0:	4b10      	ldr	r3, [pc, #64]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80067c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c4:	4a0f      	ldr	r2, [pc, #60]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80067c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067ca:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067cc:	e01d      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067d2:	3308      	adds	r3, #8
 80067d4:	4618      	mov	r0, r3
 80067d6:	f002 f9d1 	bl	8008b7c <RCCEx_PLL2_Config>
 80067da:	4603      	mov	r3, r0
 80067dc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067e0:	e013      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067e6:	332c      	adds	r3, #44	@ 0x2c
 80067e8:	4618      	mov	r0, r3
 80067ea:	f002 fa5f 	bl	8008cac <RCCEx_PLL3_Config>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067f4:	e009      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80067fc:	e005      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80067fe:	bf00      	nop
 8006800:	e003      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006802:	bf00      	nop
 8006804:	46020c00 	.word	0x46020c00
        break;
 8006808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800680a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10d      	bne.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006812:	4bb6      	ldr	r3, [pc, #728]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006814:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006818:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800681c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006824:	4ab1      	ldr	r2, [pc, #708]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006826:	430b      	orrs	r3, r1
 8006828:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800682c:	e003      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006832:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006836:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006842:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006844:	2300      	movs	r3, #0
 8006846:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006848:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800684c:	460b      	mov	r3, r1
 800684e:	4313      	orrs	r3, r2
 8006850:	d053      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006852:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800685a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800685e:	d033      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006864:	d82c      	bhi.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006866:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800686a:	d02f      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 800686c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006870:	d826      	bhi.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006876:	d008      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800687c:	d820      	bhi.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006886:	d011      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006888:	e01a      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800688a:	4b98      	ldr	r3, [pc, #608]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800688c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688e:	4a97      	ldr	r2, [pc, #604]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006894:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006896:	e01a      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800689c:	3308      	adds	r3, #8
 800689e:	4618      	mov	r0, r3
 80068a0:	f002 f96c 	bl	8008b7c <RCCEx_PLL2_Config>
 80068a4:	4603      	mov	r3, r0
 80068a6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80068aa:	e010      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068b0:	332c      	adds	r3, #44	@ 0x2c
 80068b2:	4618      	mov	r0, r3
 80068b4:	f002 f9fa 	bl	8008cac <RCCEx_PLL3_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80068be:	e006      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80068c6:	e002      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80068c8:	bf00      	nop
 80068ca:	e000      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80068cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ce:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10d      	bne.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80068d6:	4b85      	ldr	r3, [pc, #532]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80068d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068dc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80068e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068e8:	4a80      	ldr	r2, [pc, #512]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80068ea:	430b      	orrs	r3, r1
 80068ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80068f0:	e003      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80068f6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80068fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006906:	663b      	str	r3, [r7, #96]	@ 0x60
 8006908:	2300      	movs	r3, #0
 800690a:	667b      	str	r3, [r7, #100]	@ 0x64
 800690c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006910:	460b      	mov	r3, r1
 8006912:	4313      	orrs	r3, r2
 8006914:	d046      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006916:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800691a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800691e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006922:	d028      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006924:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006928:	d821      	bhi.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800692a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800692e:	d022      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006934:	d81b      	bhi.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006936:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800693a:	d01c      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800693c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006940:	d815      	bhi.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006946:	d008      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800694c:	d80f      	bhi.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d011      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006956:	d00e      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006958:	e009      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800695a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800695e:	3308      	adds	r3, #8
 8006960:	4618      	mov	r0, r3
 8006962:	f002 f90b 	bl	8008b7c <RCCEx_PLL2_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800696c:	e004      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006974:	e000      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8006976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006978:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10d      	bne.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006980:	4b5a      	ldr	r3, [pc, #360]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006982:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006986:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800698a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800698e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006992:	4a56      	ldr	r2, [pc, #344]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006994:	430b      	orrs	r3, r1
 8006996:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800699a:	e003      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800699c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80069a0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80069a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069b2:	2300      	movs	r3, #0
 80069b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80069ba:	460b      	mov	r3, r1
 80069bc:	4313      	orrs	r3, r2
 80069be:	d03f      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80069c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d81e      	bhi.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80069cc:	a201      	add	r2, pc, #4	@ (adr r2, 80069d4 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	08006a13 	.word	0x08006a13
 80069d8:	080069e9 	.word	0x080069e9
 80069dc:	080069f7 	.word	0x080069f7
 80069e0:	08006a13 	.word	0x08006a13
 80069e4:	08006a13 	.word	0x08006a13
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069e8:	4b40      	ldr	r3, [pc, #256]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	4a3f      	ldr	r2, [pc, #252]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80069ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069f2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80069f4:	e00e      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069fa:	332c      	adds	r3, #44	@ 0x2c
 80069fc:	4618      	mov	r0, r3
 80069fe:	f002 f955 	bl	8008cac <RCCEx_PLL3_Config>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006a08:	e004      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006a10:	e000      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8006a12:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a14:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10d      	bne.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006a1c:	4b33      	ldr	r3, [pc, #204]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a22:	f023 0107 	bic.w	r1, r3, #7
 8006a26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a30:	430b      	orrs	r3, r1
 8006a32:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006a36:	e003      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a38:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a3c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006a40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a4e:	2300      	movs	r3, #0
 8006a50:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006a56:	460b      	mov	r3, r1
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	d04d      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006a5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a68:	d028      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x610>
 8006a6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a6e:	d821      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006a70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a74:	d024      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006a76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a7a:	d81b      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006a7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a80:	d00e      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8006a82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a86:	d815      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01b      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a90:	d110      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a92:	4b16      	ldr	r3, [pc, #88]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a96:	4a15      	ldr	r2, [pc, #84]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a9c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006a9e:	e012      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006aa4:	332c      	adds	r3, #44	@ 0x2c
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f002 f900 	bl	8008cac <RCCEx_PLL3_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006aba:	e004      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006abc:	bf00      	nop
 8006abe:	e002      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006ac0:	bf00      	nop
 8006ac2:	e000      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006ac4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ac6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d110      	bne.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006ace:	4b07      	ldr	r3, [pc, #28]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ad4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006ad8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ae0:	4a02      	ldr	r2, [pc, #8]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006ae2:	430b      	orrs	r3, r1
 8006ae4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006ae8:	e006      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006aea:	bf00      	nop
 8006aec:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006af4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006af8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b06:	2300      	movs	r3, #0
 8006b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b0a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4313      	orrs	r3, r2
 8006b12:	f000 80b5 	beq.w	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b16:	2300      	movs	r3, #0
 8006b18:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b1c:	4b9d      	ldr	r3, [pc, #628]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d113      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b2a:	4b9a      	ldr	r3, [pc, #616]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b30:	4a98      	ldr	r2, [pc, #608]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b32:	f043 0304 	orr.w	r3, r3, #4
 8006b36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006b3a:	4b96      	ldr	r3, [pc, #600]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006b52:	4b91      	ldr	r3, [pc, #580]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b56:	4a90      	ldr	r2, [pc, #576]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b5e:	f7fb f9a1 	bl	8001ea4 <HAL_GetTick>
 8006b62:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b66:	e00b      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b68:	f7fb f99c 	bl	8001ea4 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d903      	bls.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006b7e:	e005      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b80:	4b85      	ldr	r3, [pc, #532]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0ed      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8006b8c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d165      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b94:	4b7f      	ldr	r3, [pc, #508]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d023      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8006baa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bae:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d01b      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006bba:	4b76      	ldr	r3, [pc, #472]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bc8:	4b72      	ldr	r3, [pc, #456]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bce:	4a71      	ldr	r2, [pc, #452]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bd4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bd8:	4b6e      	ldr	r3, [pc, #440]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bde:	4a6d      	ldr	r2, [pc, #436]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006be0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006be4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006be8:	4a6a      	ldr	r2, [pc, #424]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d019      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfe:	f7fb f951 	bl	8001ea4 <HAL_GetTick>
 8006c02:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c06:	e00d      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c08:	f7fb f94c 	bl	8001ea4 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c12:	1ad2      	subs	r2, r2, r3
 8006c14:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d903      	bls.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8006c22:	e006      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c24:	4b5b      	ldr	r3, [pc, #364]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0ea      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8006c32:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10d      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006c3a:	4b56      	ldr	r3, [pc, #344]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c40:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c4c:	4a51      	ldr	r2, [pc, #324]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006c54:	e008      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c56:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c5a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8006c5e:	e003      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c60:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c64:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c68:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d107      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c70:	4b48      	ldr	r3, [pc, #288]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c76:	4a47      	ldr	r2, [pc, #284]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c78:	f023 0304 	bic.w	r3, r3, #4
 8006c7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006c80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c88:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006c8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c8e:	2300      	movs	r3, #0
 8006c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c92:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c96:	460b      	mov	r3, r1
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	d042      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ca0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ca4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006ca8:	d022      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8006caa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006cae:	d81b      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006cb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cb4:	d011      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8006cb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cba:	d815      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d019      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006cc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cc4:	d110      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006cca:	3308      	adds	r3, #8
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f001 ff55 	bl	8008b7c <RCCEx_PLL2_Config>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006cd8:	e00d      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cda:	4b2e      	ldr	r3, [pc, #184]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cde:	4a2d      	ldr	r2, [pc, #180]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ce4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006ce6:	e006      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006cee:	e002      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006cf0:	bf00      	nop
 8006cf2:	e000      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006cf4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006cf6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10d      	bne.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006cfe:	4b25      	ldr	r3, [pc, #148]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d04:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006d08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d10:	4a20      	ldr	r2, [pc, #128]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d12:	430b      	orrs	r3, r1
 8006d14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006d18:	e003      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006d1e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d30:	2300      	movs	r3, #0
 8006d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d34:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	d032      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006d3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d4a:	d00b      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d50:	d804      	bhi.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d008      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d5a:	d007      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006d62:	e004      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006d64:	bf00      	nop
 8006d66:	e002      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006d68:	bf00      	nop
 8006d6a:	e000      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006d6c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d6e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d112      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006d76:	4b07      	ldr	r3, [pc, #28]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d7c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d88:	4a02      	ldr	r2, [pc, #8]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006d90:	e008      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006d92:	bf00      	nop
 8006d94:	46020c00 	.word	0x46020c00
 8006d98:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006da0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006da4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006db2:	2300      	movs	r3, #0
 8006db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	d019      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006dc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006dc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dcc:	d105      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006dce:	4b88      	ldr	r3, [pc, #544]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd2:	4a87      	ldr	r2, [pc, #540]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dd8:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006dda:	4b85      	ldr	r3, [pc, #532]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ddc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006de0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006de4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006de8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006dec:	4a80      	ldr	r2, [pc, #512]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006dee:	430b      	orrs	r3, r1
 8006df0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006df4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006e00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e02:	2300      	movs	r3, #0
 8006e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e06:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	d00c      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006e10:	4b77      	ldr	r3, [pc, #476]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e22:	4973      	ldr	r1, [pc, #460]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006e2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006e36:	623b      	str	r3, [r7, #32]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e40:	460b      	mov	r3, r1
 8006e42:	4313      	orrs	r3, r2
 8006e44:	d00c      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006e46:	4b6a      	ldr	r3, [pc, #424]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e58:	4965      	ldr	r1, [pc, #404]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006e60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61fb      	str	r3, [r7, #28]
 8006e72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e76:	460b      	mov	r3, r1
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	d00c      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006e7c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e82:	f023 0218 	bic.w	r2, r3, #24
 8006e86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e8a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e8e:	4958      	ldr	r1, [pc, #352]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006e96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006eac:	460b      	mov	r3, r1
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	d032      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006eb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006eb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006eba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ebe:	d105      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec0:	4b4b      	ldr	r3, [pc, #300]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec4:	4a4a      	ldr	r2, [pc, #296]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eca:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006ecc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ed0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ed4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ed8:	d108      	bne.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006eda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ede:	3308      	adds	r3, #8
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f001 fe4b 	bl	8008b7c <RCCEx_PLL2_Config>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8006eec:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10d      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ef6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006efa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006efe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f06:	493a      	ldr	r1, [pc, #232]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006f0e:	e003      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f10:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006f14:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006f18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006f24:	60bb      	str	r3, [r7, #8]
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4313      	orrs	r3, r2
 8006f32:	d03a      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f40:	d00e      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006f42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f46:	d815      	bhi.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d017      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8006f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f50:	d110      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f52:	4b27      	ldr	r3, [pc, #156]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f56:	4a26      	ldr	r2, [pc, #152]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f5c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006f5e:	e00e      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f64:	3308      	adds	r3, #8
 8006f66:	4618      	mov	r0, r3
 8006f68:	f001 fe08 	bl	8008b7c <RCCEx_PLL2_Config>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006f72:	e004      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006f7a:	e000      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8006f7c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006f7e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10d      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006f86:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f8c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f98:	4915      	ldr	r1, [pc, #84]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006fa0:	e003      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006fa6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006faa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	607b      	str	r3, [r7, #4]
 8006fbc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	d00c      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fcc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006fd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006fd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006fd8:	4905      	ldr	r1, [pc, #20]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006fe0:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	37e0      	adds	r7, #224	@ 0xe0
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fee:	bf00      	nop
 8006ff0:	46020c00 	.word	0x46020c00

08006ff4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b089      	sub	sp, #36	@ 0x24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006ffc:	4ba6      	ldr	r3, [pc, #664]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007004:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007006:	4ba4      	ldr	r3, [pc, #656]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007010:	4ba1      	ldr	r3, [pc, #644]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	0a1b      	lsrs	r3, r3, #8
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	3301      	adds	r3, #1
 800701c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800701e:	4b9e      	ldr	r3, [pc, #632]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007022:	091b      	lsrs	r3, r3, #4
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800702a:	4b9b      	ldr	r3, [pc, #620]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800702c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702e:	08db      	lsrs	r3, r3, #3
 8007030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	fb02 f303 	mul.w	r3, r2, r3
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007042:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b03      	cmp	r3, #3
 800704a:	d062      	beq.n	8007112 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2b03      	cmp	r3, #3
 8007050:	f200 8081 	bhi.w	8007156 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d024      	beq.n	80070a4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2b02      	cmp	r3, #2
 800705e:	d17a      	bne.n	8007156 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800729c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800706e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007072:	4b89      	ldr	r3, [pc, #548]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007082:	ed97 6a02 	vldr	s12, [r7, #8]
 8007086:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80072a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800708a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800708e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007096:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800709a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800709e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070a2:	e08f      	b.n	80071c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80070a4:	4b7c      	ldr	r3, [pc, #496]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80070b0:	4b79      	ldr	r3, [pc, #484]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	0f1b      	lsrs	r3, r3, #28
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	e006      	b.n	80070ca <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80070bc:	4b76      	ldr	r3, [pc, #472]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070c2:	041b      	lsls	r3, r3, #16
 80070c4:	0f1b      	lsrs	r3, r3, #28
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	4a76      	ldr	r2, [pc, #472]	@ (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80070cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d0:	ee07 3a90 	vmov	s15, r3
 80070d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	ee07 3a90 	vmov	s15, r3
 80070ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80070f4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80072a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80070f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007100:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007104:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007110:	e058      	b.n	80071c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	ee07 3a90 	vmov	s15, r3
 8007118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800729c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007120:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007124:	4b5c      	ldr	r3, [pc, #368]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712c:	ee07 3a90 	vmov	s15, r3
 8007130:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007134:	ed97 6a02 	vldr	s12, [r7, #8]
 8007138:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80072a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800713c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007140:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007144:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007148:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800714c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007150:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007154:	e036      	b.n	80071c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007156:	4b50      	ldr	r3, [pc, #320]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8007162:	4b4d      	ldr	r3, [pc, #308]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	0f1b      	lsrs	r3, r3, #28
 8007168:	f003 030f 	and.w	r3, r3, #15
 800716c:	e006      	b.n	800717c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800716e:	4b4a      	ldr	r3, [pc, #296]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007170:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007174:	041b      	lsls	r3, r3, #16
 8007176:	0f1b      	lsrs	r3, r3, #28
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	4a49      	ldr	r2, [pc, #292]	@ (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800717e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	ee07 3a90 	vmov	s15, r3
 8007190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071a6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80072a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80071aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80071ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071c2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80071c4:	4b34      	ldr	r3, [pc, #208]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80071c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d017      	beq.n	8007200 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80071d0:	4b31      	ldr	r3, [pc, #196]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80071d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071d4:	0a5b      	lsrs	r3, r3, #9
 80071d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80071e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80071ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f6:	ee17 2a90 	vmov	r2, s15
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	e002      	b.n	8007206 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007206:	4b24      	ldr	r3, [pc, #144]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d017      	beq.n	8007242 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007212:	4b21      	ldr	r3, [pc, #132]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007216:	0c1b      	lsrs	r3, r3, #16
 8007218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800721c:	ee07 3a90 	vmov	s15, r3
 8007220:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007224:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007228:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800722c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007238:	ee17 2a90 	vmov	r2, s15
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	605a      	str	r2, [r3, #4]
 8007240:	e002      	b.n	8007248 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007248:	4b13      	ldr	r3, [pc, #76]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800724a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d017      	beq.n	8007284 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007254:	4b10      	ldr	r3, [pc, #64]	@ (8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007258:	0e1b      	lsrs	r3, r3, #24
 800725a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8007266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800726a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800726e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800727a:	ee17 2a90 	vmov	r2, s15
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007282:	e002      	b.n	800728a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	609a      	str	r2, [r3, #8]
}
 800728a:	bf00      	nop
 800728c:	3724      	adds	r7, #36	@ 0x24
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	46020c00 	.word	0x46020c00
 800729c:	4b742400 	.word	0x4b742400
 80072a0:	46000000 	.word	0x46000000
 80072a4:	0800b494 	.word	0x0800b494

080072a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b089      	sub	sp, #36	@ 0x24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80072b0:	4ba6      	ldr	r3, [pc, #664]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80072ba:	4ba4      	ldr	r3, [pc, #656]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80072c4:	4ba1      	ldr	r3, [pc, #644]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c8:	0a1b      	lsrs	r3, r3, #8
 80072ca:	f003 030f 	and.w	r3, r3, #15
 80072ce:	3301      	adds	r3, #1
 80072d0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80072d2:	4b9e      	ldr	r3, [pc, #632]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d6:	091b      	lsrs	r3, r3, #4
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80072de:	4b9b      	ldr	r3, [pc, #620]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e2:	08db      	lsrs	r3, r3, #3
 80072e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	fb02 f303 	mul.w	r3, r2, r3
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	d062      	beq.n	80073c6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2b03      	cmp	r3, #3
 8007304:	f200 8081 	bhi.w	800740a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d024      	beq.n	8007358 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2b02      	cmp	r3, #2
 8007312:	d17a      	bne.n	800740a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8007322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007326:	4b89      	ldr	r3, [pc, #548]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007336:	ed97 6a02 	vldr	s12, [r7, #8]
 800733a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800733e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007342:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800734a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800734e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007352:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007356:	e08f      	b.n	8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007358:	4b7c      	ldr	r3, [pc, #496]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007364:	4b79      	ldr	r3, [pc, #484]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	0f1b      	lsrs	r3, r3, #28
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	e006      	b.n	800737e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8007370:	4b76      	ldr	r3, [pc, #472]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007372:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007376:	041b      	lsls	r3, r3, #16
 8007378:	0f1b      	lsrs	r3, r3, #28
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	4a76      	ldr	r2, [pc, #472]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007384:	ee07 3a90 	vmov	s15, r3
 8007388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	ee07 3a90 	vmov	s15, r3
 80073a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80073a8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80073ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80073bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073c4:	e058      	b.n	8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	ee07 3a90 	vmov	s15, r3
 80073cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80073d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073d8:	4b5c      	ldr	r3, [pc, #368]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e0:	ee07 3a90 	vmov	s15, r3
 80073e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80073e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80073ec:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80073f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80073f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80073f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007404:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007408:	e036      	b.n	8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800740a:	4b50      	ldr	r3, [pc, #320]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d005      	beq.n	8007422 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8007416:	4b4d      	ldr	r3, [pc, #308]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	0f1b      	lsrs	r3, r3, #28
 800741c:	f003 030f 	and.w	r3, r3, #15
 8007420:	e006      	b.n	8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8007422:	4b4a      	ldr	r3, [pc, #296]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007424:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007428:	041b      	lsls	r3, r3, #16
 800742a:	0f1b      	lsrs	r3, r3, #28
 800742c:	f003 030f 	and.w	r3, r3, #15
 8007430:	4a49      	ldr	r2, [pc, #292]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	ee07 3a90 	vmov	s15, r3
 8007444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007456:	ed97 6a02 	vldr	s12, [r7, #8]
 800745a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800745e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800746a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800746e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007476:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007478:	4b34      	ldr	r3, [pc, #208]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800747a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d017      	beq.n	80074b4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007484:	4b31      	ldr	r3, [pc, #196]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007488:	0a5b      	lsrs	r3, r3, #9
 800748a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8007496:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800749a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800749e:	edd7 6a07 	vldr	s13, [r7, #28]
 80074a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074aa:	ee17 2a90 	vmov	r2, s15
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e002      	b.n	80074ba <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80074ba:	4b24      	ldr	r3, [pc, #144]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d017      	beq.n	80074f6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80074c6:	4b21      	ldr	r3, [pc, #132]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ca:	0c1b      	lsrs	r3, r3, #16
 80074cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074d0:	ee07 3a90 	vmov	s15, r3
 80074d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80074d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074dc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80074e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80074e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ec:	ee17 2a90 	vmov	r2, s15
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	605a      	str	r2, [r3, #4]
 80074f4:	e002      	b.n	80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80074fc:	4b13      	ldr	r3, [pc, #76]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007500:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d017      	beq.n	8007538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007508:	4b10      	ldr	r3, [pc, #64]	@ (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800750a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800750c:	0e1b      	lsrs	r3, r3, #24
 800750e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800751a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800751e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007522:	edd7 6a07 	vldr	s13, [r7, #28]
 8007526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800752a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800752e:	ee17 2a90 	vmov	r2, s15
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007536:	e002      	b.n	800753e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	609a      	str	r2, [r3, #8]
}
 800753e:	bf00      	nop
 8007540:	3724      	adds	r7, #36	@ 0x24
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	46020c00 	.word	0x46020c00
 8007550:	4b742400 	.word	0x4b742400
 8007554:	46000000 	.word	0x46000000
 8007558:	0800b494 	.word	0x0800b494

0800755c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800755c:	b480      	push	{r7}
 800755e:	b089      	sub	sp, #36	@ 0x24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007564:	4ba6      	ldr	r3, [pc, #664]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800756e:	4ba4      	ldr	r3, [pc, #656]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007572:	f003 0303 	and.w	r3, r3, #3
 8007576:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007578:	4ba1      	ldr	r3, [pc, #644]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800757a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757c:	0a1b      	lsrs	r3, r3, #8
 800757e:	f003 030f 	and.w	r3, r3, #15
 8007582:	3301      	adds	r3, #1
 8007584:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007586:	4b9e      	ldr	r3, [pc, #632]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758a:	091b      	lsrs	r3, r3, #4
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007592:	4b9b      	ldr	r3, [pc, #620]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007596:	08db      	lsrs	r3, r3, #3
 8007598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	fb02 f303 	mul.w	r3, r2, r3
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075aa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d062      	beq.n	800767a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	f200 8081 	bhi.w	80076be <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d024      	beq.n	800760c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d17a      	bne.n	80076be <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007804 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80075d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075da:	4b89      	ldr	r3, [pc, #548]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80075dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80075ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80075ee:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80075f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80075f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80075fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007606:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800760a:	e08f      	b.n	800772c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800760c:	4b7c      	ldr	r3, [pc, #496]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d005      	beq.n	8007624 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007618:	4b79      	ldr	r3, [pc, #484]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	0f1b      	lsrs	r3, r3, #28
 800761e:	f003 030f 	and.w	r3, r3, #15
 8007622:	e006      	b.n	8007632 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8007624:	4b76      	ldr	r3, [pc, #472]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007626:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800762a:	041b      	lsls	r3, r3, #16
 800762c:	0f1b      	lsrs	r3, r3, #28
 800762e:	f003 030f 	and.w	r3, r3, #15
 8007632:	4a76      	ldr	r2, [pc, #472]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8007634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007638:	ee07 3a90 	vmov	s15, r3
 800763c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	ee07 3a90 	vmov	s15, r3
 8007654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007658:	ed97 6a02 	vldr	s12, [r7, #8]
 800765c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007668:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800766c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007674:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007678:	e058      	b.n	800772c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	ee07 3a90 	vmov	s15, r3
 8007680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007684:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007804 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800768c:	4b5c      	ldr	r3, [pc, #368]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800768e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007694:	ee07 3a90 	vmov	s15, r3
 8007698:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800769c:	ed97 6a02 	vldr	s12, [r7, #8]
 80076a0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80076a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80076a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80076ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80076b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076bc:	e036      	b.n	800772c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80076be:	4b50      	ldr	r3, [pc, #320]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80076ca:	4b4d      	ldr	r3, [pc, #308]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	0f1b      	lsrs	r3, r3, #28
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	e006      	b.n	80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80076d6:	4b4a      	ldr	r3, [pc, #296]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076dc:	041b      	lsls	r3, r3, #16
 80076de:	0f1b      	lsrs	r3, r3, #28
 80076e0:	f003 030f 	and.w	r3, r3, #15
 80076e4:	4a49      	ldr	r2, [pc, #292]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80076e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ea:	ee07 3a90 	vmov	s15, r3
 80076ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	ee07 3a90 	vmov	s15, r3
 80076f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770a:	ed97 6a02 	vldr	s12, [r7, #8]
 800770e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800771e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007726:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800772a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800772c:	4b34      	ldr	r3, [pc, #208]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800772e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d017      	beq.n	8007768 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007738:	4b31      	ldr	r3, [pc, #196]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800773a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800773c:	0a5b      	lsrs	r3, r3, #9
 800773e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800774a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800774e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007752:	edd7 6a07 	vldr	s13, [r7, #28]
 8007756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800775a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800775e:	ee17 2a90 	vmov	r2, s15
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	e002      	b.n	800776e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800776e:	4b24      	ldr	r3, [pc, #144]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d017      	beq.n	80077aa <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800777a:	4b21      	ldr	r3, [pc, #132]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800777c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800777e:	0c1b      	lsrs	r3, r3, #16
 8007780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800778c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007790:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007794:	edd7 6a07 	vldr	s13, [r7, #28]
 8007798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a0:	ee17 2a90 	vmov	r2, s15
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	605a      	str	r2, [r3, #4]
 80077a8:	e002      	b.n	80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80077b0:	4b13      	ldr	r3, [pc, #76]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80077b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d017      	beq.n	80077ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077bc:	4b10      	ldr	r3, [pc, #64]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80077be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c0:	0e1b      	lsrs	r3, r3, #24
 80077c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80077ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077d2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077e2:	ee17 2a90 	vmov	r2, s15
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80077ea:	e002      	b.n	80077f2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	609a      	str	r2, [r3, #8]
}
 80077f2:	bf00      	nop
 80077f4:	3724      	adds	r7, #36	@ 0x24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	46020c00 	.word	0x46020c00
 8007804:	4b742400 	.word	0x4b742400
 8007808:	46000000 	.word	0x46000000
 800780c:	0800b494 	.word	0x0800b494

08007810 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08e      	sub	sp, #56	@ 0x38
 8007814:	af00      	add	r7, sp, #0
 8007816:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800781a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800781e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8007822:	430b      	orrs	r3, r1
 8007824:	d145      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007826:	4baa      	ldr	r3, [pc, #680]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800782c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007830:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007832:	4ba7      	ldr	r3, [pc, #668]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b02      	cmp	r3, #2
 800783e:	d108      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007846:	d104      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007848:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800784c:	637b      	str	r3, [r7, #52]	@ 0x34
 800784e:	f001 b987 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007852:	4b9f      	ldr	r3, [pc, #636]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800785c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007860:	d114      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007868:	d110      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800786a:	4b99      	ldr	r3, [pc, #612]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800786c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007878:	d103      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800787a:	23fa      	movs	r3, #250	@ 0xfa
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800787e:	f001 b96f 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007882:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007886:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007888:	f001 b96a 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800788c:	4b90      	ldr	r3, [pc, #576]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007898:	d107      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800789a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078a0:	d103      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80078a2:	4b8c      	ldr	r3, [pc, #560]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80078a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078a6:	f001 b95b 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ae:	f001 b957 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80078b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078b6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80078ba:	430b      	orrs	r3, r1
 80078bc:	d151      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80078be:	4b84      	ldr	r3, [pc, #528]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80078c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078c4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80078c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	2b80      	cmp	r3, #128	@ 0x80
 80078ce:	d035      	beq.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80078d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d2:	2b80      	cmp	r3, #128	@ 0x80
 80078d4:	d841      	bhi.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	2b60      	cmp	r3, #96	@ 0x60
 80078da:	d02a      	beq.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078de:	2b60      	cmp	r3, #96	@ 0x60
 80078e0:	d83b      	bhi.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80078e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e4:	2b40      	cmp	r3, #64	@ 0x40
 80078e6:	d009      	beq.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80078e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ea:	2b40      	cmp	r3, #64	@ 0x40
 80078ec:	d835      	bhi.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00c      	beq.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d012      	beq.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80078fa:	e02e      	b.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff fb77 	bl	8006ff4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007908:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800790a:	f001 b929 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800790e:	f107 0318 	add.w	r3, r7, #24
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff fcc8 	bl	80072a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800791c:	f001 b920 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007920:	f107 030c 	add.w	r3, r7, #12
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff fe19 	bl	800755c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800792e:	f001 b917 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007932:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007936:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007938:	f001 b912 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800793c:	4b64      	ldr	r3, [pc, #400]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007948:	d103      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800794a:	4b63      	ldr	r3, [pc, #396]	@ (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800794c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800794e:	f001 b907 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007956:	f001 b903 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800795e:	f001 b8ff 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007966:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800796a:	430b      	orrs	r3, r1
 800796c:	d158      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800796e:	4b58      	ldr	r3, [pc, #352]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007970:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007974:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007978:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007980:	d03b      	beq.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007988:	d846      	bhi.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007990:	d02e      	beq.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007994:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007998:	d83e      	bhi.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800799a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079a0:	d00b      	beq.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80079a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079a8:	d836      	bhi.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80079aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00d      	beq.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079b6:	d012      	beq.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80079b8:	e02e      	b.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff fb18 	bl	8006ff4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80079c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079c8:	f001 b8ca 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079cc:	f107 0318 	add.w	r3, r7, #24
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7ff fc69 	bl	80072a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079da:	f001 b8c1 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079de:	f107 030c 	add.w	r3, r7, #12
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff fdba 	bl	800755c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079ec:	f001 b8b8 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80079f0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80079f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079f6:	f001 b8b3 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079fa:	4b35      	ldr	r3, [pc, #212]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a06:	d103      	bne.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007a08:	4b33      	ldr	r3, [pc, #204]	@ (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007a0a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a0c:	f001 b8a8 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a14:	f001 b8a4 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a1c:	f001 b8a0 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a24:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	d16e      	bne.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007a2c:	4b28      	ldr	r3, [pc, #160]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a32:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007a36:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007a3e:	d034      	beq.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8007a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a42:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007a46:	d85c      	bhi.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8007a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a4e:	d00b      	beq.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a56:	d854      	bhi.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8007a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d016      	beq.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a64:	d009      	beq.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007a66:	e04c      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7ff fac1 	bl	8006ff4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a76:	f001 b873 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a7a:	f107 0318 	add.w	r3, r7, #24
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff fc12 	bl	80072a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a88:	f001 b86a 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007a8c:	4b10      	ldr	r3, [pc, #64]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a98:	d103      	bne.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8007a9a:	4b10      	ldr	r3, [pc, #64]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007a9c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a9e:	f001 b85f 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007aa6:	f001 b85b 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007aaa:	4b09      	ldr	r3, [pc, #36]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d121      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ab6:	4b06      	ldr	r3, [pc, #24]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00e      	beq.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8007ac2:	4b03      	ldr	r3, [pc, #12]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	0e1b      	lsrs	r3, r3, #24
 8007ac8:	f003 030f 	and.w	r3, r3, #15
 8007acc:	e00f      	b.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007ace:	bf00      	nop
 8007ad0:	46020c00 	.word	0x46020c00
 8007ad4:	0007a120 	.word	0x0007a120
 8007ad8:	00f42400 	.word	0x00f42400
 8007adc:	02dc6c00 	.word	0x02dc6c00
 8007ae0:	4ba7      	ldr	r3, [pc, #668]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ae6:	041b      	lsls	r3, r3, #16
 8007ae8:	0e1b      	lsrs	r3, r3, #24
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	4aa5      	ldr	r2, [pc, #660]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007af4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007af6:	f001 b833 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007afe:	f001 b82f 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b06:	f001 b82b 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b0e:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007b12:	430b      	orrs	r3, r1
 8007b14:	d17f      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007b16:	4b9a      	ldr	r3, [pc, #616]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007b18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b20:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d165      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007b28:	4b95      	ldr	r3, [pc, #596]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b2e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007b32:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8007b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b36:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007b3a:	d034      	beq.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007b42:	d853      	bhi.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b4a:	d00b      	beq.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b52:	d84b      	bhi.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d016      	beq.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b60:	d009      	beq.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007b62:	e043      	b.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7ff fa43 	bl	8006ff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b70:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007b72:	f000 bff5 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b76:	f107 0318 	add.w	r3, r7, #24
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff fb94 	bl	80072a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007b84:	f000 bfec 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007b88:	4b7d      	ldr	r3, [pc, #500]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b94:	d103      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8007b96:	4b7c      	ldr	r3, [pc, #496]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007b98:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007b9a:	f000 bfe1 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007ba2:	f000 bfdd 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007ba6:	4b76      	ldr	r3, [pc, #472]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d118      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bb2:	4b73      	ldr	r3, [pc, #460]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d005      	beq.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007bbe:	4b70      	ldr	r3, [pc, #448]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	0e1b      	lsrs	r3, r3, #24
 8007bc4:	f003 030f 	and.w	r3, r3, #15
 8007bc8:	e006      	b.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8007bca:	4b6d      	ldr	r3, [pc, #436]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007bcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007bd0:	041b      	lsls	r3, r3, #16
 8007bd2:	0e1b      	lsrs	r3, r3, #24
 8007bd4:	f003 030f 	and.w	r3, r3, #15
 8007bd8:	4a6a      	ldr	r2, [pc, #424]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bde:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007be0:	f000 bfbe 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007be8:	f000 bfba 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007bf0:	f000 bfb6 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bfa:	d108      	bne.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7ff f9f7 	bl	8006ff4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c0a:	f000 bfa9 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c12:	f000 bfa5 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c1a:	1e51      	subs	r1, r2, #1
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	d136      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007c20:	4b57      	ldr	r3, [pc, #348]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d104      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007c32:	f7fe fb55 	bl	80062e0 <HAL_RCC_GetPCLK2Freq>
 8007c36:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c38:	f000 bf92 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d104      	bne.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c42:	f7fe fa1d 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8007c46:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c48:	f000 bf8a 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007c4c:	4b4c      	ldr	r3, [pc, #304]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c58:	d106      	bne.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d103      	bne.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8007c60:	4b4a      	ldr	r3, [pc, #296]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c64:	f000 bf7c 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007c68:	4b45      	ldr	r3, [pc, #276]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d107      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d104      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8007c7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c82:	f000 bf6d 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c8a:	f000 bf69 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c92:	1e91      	subs	r1, r2, #2
 8007c94:	430b      	orrs	r3, r1
 8007c96:	d136      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007c98:	4b39      	ldr	r3, [pc, #228]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c9e:	f003 030c 	and.w	r3, r3, #12
 8007ca2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d104      	bne.n	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007caa:	f7fe fb05 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8007cae:	6378      	str	r0, [r7, #52]	@ 0x34
 8007cb0:	f000 bf56 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d104      	bne.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007cba:	f7fe f9e1 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8007cbe:	6378      	str	r0, [r7, #52]	@ 0x34
 8007cc0:	f000 bf4e 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cd0:	d106      	bne.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	d103      	bne.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8007cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cdc:	f000 bf40 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007ce0:	4b27      	ldr	r3, [pc, #156]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d107      	bne.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8007cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf0:	2b0c      	cmp	r3, #12
 8007cf2:	d104      	bne.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8007cf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cfa:	f000 bf31 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d02:	f000 bf2d 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007d06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d0a:	1f11      	subs	r1, r2, #4
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	d13f      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007d10:	4b1b      	ldr	r3, [pc, #108]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d16:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007d1a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d104      	bne.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d22:	f7fe fac9 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8007d26:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d28:	f000 bf1a 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2e:	2b10      	cmp	r3, #16
 8007d30:	d104      	bne.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d32:	f7fe f9a5 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8007d36:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d38:	f000 bf12 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007d3c:	4b10      	ldr	r3, [pc, #64]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d48:	d106      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4c:	2b20      	cmp	r3, #32
 8007d4e:	d103      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8007d50:	4b0e      	ldr	r3, [pc, #56]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d54:	f000 bf04 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007d58:	4b09      	ldr	r3, [pc, #36]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d107      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d68:	2b30      	cmp	r3, #48	@ 0x30
 8007d6a:	d104      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8007d6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d72:	f000 bef5 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d7a:	f000 bef1 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007d7e:	bf00      	nop
 8007d80:	46020c00 	.word	0x46020c00
 8007d84:	0800b494 	.word	0x0800b494
 8007d88:	02dc6c00 	.word	0x02dc6c00
 8007d8c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d94:	f1a2 0108 	sub.w	r1, r2, #8
 8007d98:	430b      	orrs	r3, r1
 8007d9a:	d136      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007d9c:	4ba4      	ldr	r3, [pc, #656]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007da2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007da6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d104      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007dae:	f7fe fa83 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8007db2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007db4:	f000 bed4 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dba:	2b40      	cmp	r3, #64	@ 0x40
 8007dbc:	d104      	bne.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007dbe:	f7fe f95f 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8007dc2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007dc4:	f000 becc 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007dc8:	4b99      	ldr	r3, [pc, #612]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dd4:	d106      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd8:	2b80      	cmp	r3, #128	@ 0x80
 8007dda:	d103      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8007ddc:	4b95      	ldr	r3, [pc, #596]	@ (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de0:	f000 bebe 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007de4:	4b92      	ldr	r3, [pc, #584]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007de6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d107      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8007df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df4:	2bc0      	cmp	r3, #192	@ 0xc0
 8007df6:	d104      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8007df8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dfe:	f000 beaf 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e06:	f000 beab 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e0e:	f1a2 0110 	sub.w	r1, r2, #16
 8007e12:	430b      	orrs	r3, r1
 8007e14:	d139      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007e16:	4b86      	ldr	r3, [pc, #536]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e20:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d104      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e28:	f7fe fa46 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8007e2c:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e2e:	f000 be97 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e38:	d104      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e3a:	f7fe f921 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8007e3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e40:	f000 be8e 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007e44:	4b7a      	ldr	r3, [pc, #488]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e50:	d107      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8007e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e58:	d103      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8007e5a:	4b76      	ldr	r3, [pc, #472]	@ (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e5e:	f000 be7f 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007e62:	4b73      	ldr	r3, [pc, #460]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d108      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8007e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e76:	d104      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8007e78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e7e:	f000 be6f 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e86:	f000 be6b 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e8e:	f1a2 0120 	sub.w	r1, r2, #32
 8007e92:	430b      	orrs	r3, r1
 8007e94:	d158      	bne.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007e96:	4b66      	ldr	r3, [pc, #408]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e9c:	f003 0307 	and.w	r3, r3, #7
 8007ea0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d104      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007ea8:	f7fe fa2e 	bl	8006308 <HAL_RCC_GetPCLK3Freq>
 8007eac:	6378      	str	r0, [r7, #52]	@ 0x34
 8007eae:	f000 be57 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d104      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007eb8:	f7fe f8e2 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8007ebc:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ebe:	f000 be4f 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007ec2:	4b5b      	ldr	r3, [pc, #364]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ece:	d106      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d103      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8007ed6:	4b57      	ldr	r3, [pc, #348]	@ (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eda:	f000 be41 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007ede:	4b54      	ldr	r3, [pc, #336]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ee4:	f003 0302 	and.w	r3, r3, #2
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d107      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8007eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d104      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8007ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef8:	f000 be32 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007efc:	4b4c      	ldr	r3, [pc, #304]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0320 	and.w	r3, r3, #32
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d11b      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8007f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d118      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f0e:	4b48      	ldr	r3, [pc, #288]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d005      	beq.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8007f1a:	4b45      	ldr	r3, [pc, #276]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	0e1b      	lsrs	r3, r3, #24
 8007f20:	f003 030f 	and.w	r3, r3, #15
 8007f24:	e006      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007f26:	4b42      	ldr	r3, [pc, #264]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f2c:	041b      	lsls	r3, r3, #16
 8007f2e:	0e1b      	lsrs	r3, r3, #24
 8007f30:	f003 030f 	and.w	r3, r3, #15
 8007f34:	4a40      	ldr	r2, [pc, #256]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f3c:	f000 be10 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f44:	f000 be0c 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f4c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007f50:	430b      	orrs	r3, r1
 8007f52:	d173      	bne.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007f54:	4b36      	ldr	r3, [pc, #216]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f5a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007f5e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f66:	d104      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f68:	f7fe f88a 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8007f6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f6e:	f000 bdf7 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f78:	d108      	bne.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f7a:	f107 0318 	add.w	r3, r7, #24
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff f992 	bl	80072a8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f88:	f000 bdea 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d104      	bne.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007f92:	f7fe f977 	bl	8006284 <HAL_RCC_GetHCLKFreq>
 8007f96:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f98:	f000 bde2 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007fa2:	d122      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007fa4:	4b22      	ldr	r3, [pc, #136]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0320 	and.w	r3, r3, #32
 8007fac:	2b20      	cmp	r3, #32
 8007fae:	d118      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d005      	beq.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8007fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	0e1b      	lsrs	r3, r3, #24
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	e006      	b.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007fc8:	4b19      	ldr	r3, [pc, #100]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007fce:	041b      	lsls	r3, r3, #16
 8007fd0:	0e1b      	lsrs	r3, r3, #24
 8007fd2:	f003 030f 	and.w	r3, r3, #15
 8007fd6:	4a18      	ldr	r2, [pc, #96]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fde:	f000 bdbf 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fe6:	f000 bdbb 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007fea:	4b11      	ldr	r3, [pc, #68]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ff2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ff6:	d107      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ffe:	d103      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8008000:	4b0c      	ldr	r3, [pc, #48]	@ (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8008002:	637b      	str	r3, [r7, #52]	@ 0x34
 8008004:	f000 bdac 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008008:	4b09      	ldr	r3, [pc, #36]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008014:	d107      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008018:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800801c:	d103      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800801e:	4b05      	ldr	r3, [pc, #20]	@ (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8008020:	637b      	str	r3, [r7, #52]	@ 0x34
 8008022:	f000 bd9d 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	637b      	str	r3, [r7, #52]	@ 0x34
 800802a:	f000 bd99 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800802e:	bf00      	nop
 8008030:	46020c00 	.word	0x46020c00
 8008034:	00f42400 	.word	0x00f42400
 8008038:	0800b494 	.word	0x0800b494
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800803c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008040:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008044:	430b      	orrs	r3, r1
 8008046:	d158      	bne.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008048:	4bad      	ldr	r3, [pc, #692]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800804a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008056:	2b04      	cmp	r3, #4
 8008058:	d84b      	bhi.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800805a:	a201      	add	r2, pc, #4	@ (adr r2, 8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	08008099 	.word	0x08008099
 8008064:	08008075 	.word	0x08008075
 8008068:	08008087 	.word	0x08008087
 800806c:	080080a3 	.word	0x080080a3
 8008070:	080080ad 	.word	0x080080ad
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe ffbb 	bl	8006ff4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800807e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008080:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008082:	f000 bd6d 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008086:	f107 030c 	add.w	r3, r7, #12
 800808a:	4618      	mov	r0, r3
 800808c:	f7ff fa66 	bl	800755c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008094:	f000 bd64 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008098:	f7fe f8f4 	bl	8006284 <HAL_RCC_GetHCLKFreq>
 800809c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800809e:	f000 bd5f 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80080a2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80080a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080a8:	f000 bd5a 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80080ac:	4b94      	ldr	r3, [pc, #592]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0320 	and.w	r3, r3, #32
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d118      	bne.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080b8:	4b91      	ldr	r3, [pc, #580]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 80080c4:	4b8e      	ldr	r3, [pc, #568]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	0e1b      	lsrs	r3, r3, #24
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	e006      	b.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80080d0:	4b8b      	ldr	r3, [pc, #556]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80080d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080d6:	041b      	lsls	r3, r3, #16
 80080d8:	0e1b      	lsrs	r3, r3, #24
 80080da:	f003 030f 	and.w	r3, r3, #15
 80080de:	4a89      	ldr	r2, [pc, #548]	@ (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80080e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80080e6:	f000 bd3b 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080ee:	f000 bd37 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080f6:	f000 bd33 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80080fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080fe:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8008102:	430b      	orrs	r3, r1
 8008104:	d167      	bne.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8008106:	4b7e      	ldr	r3, [pc, #504]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800810c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008110:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008114:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008118:	d036      	beq.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008120:	d855      	bhi.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8008122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008124:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008128:	d029      	beq.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008130:	d84d      	bhi.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008138:	d013      	beq.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008140:	d845      	bhi.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	2b00      	cmp	r3, #0
 8008146:	d015      	beq.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800814e:	d13e      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008154:	4618      	mov	r0, r3
 8008156:	f7fe ff4d 	bl	8006ff4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800815e:	f000 bcff 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008162:	f107 030c 	add.w	r3, r7, #12
 8008166:	4618      	mov	r0, r3
 8008168:	f7ff f9f8 	bl	800755c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008170:	f000 bcf6 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008174:	f7fe f886 	bl	8006284 <HAL_RCC_GetHCLKFreq>
 8008178:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800817a:	f000 bcf1 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800817e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008182:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008184:	f000 bcec 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008188:	4b5d      	ldr	r3, [pc, #372]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0320 	and.w	r3, r3, #32
 8008190:	2b20      	cmp	r3, #32
 8008192:	d118      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008194:	4b5a      	ldr	r3, [pc, #360]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80081a0:	4b57      	ldr	r3, [pc, #348]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	0e1b      	lsrs	r3, r3, #24
 80081a6:	f003 030f 	and.w	r3, r3, #15
 80081aa:	e006      	b.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80081ac:	4b54      	ldr	r3, [pc, #336]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081b2:	041b      	lsls	r3, r3, #16
 80081b4:	0e1b      	lsrs	r3, r3, #24
 80081b6:	f003 030f 	and.w	r3, r3, #15
 80081ba:	4a52      	ldr	r2, [pc, #328]	@ (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80081bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80081c2:	f000 bccd 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081ca:	f000 bcc9 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081d2:	f000 bcc5 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80081d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081da:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80081de:	430b      	orrs	r3, r1
 80081e0:	d14c      	bne.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80081e2:	4b47      	ldr	r3, [pc, #284]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80081ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d104      	bne.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80081f4:	f7fe f860 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 80081f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80081fa:	f000 bcb1 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008204:	d104      	bne.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008206:	f7fd ff3b 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 800820a:	6378      	str	r0, [r7, #52]	@ 0x34
 800820c:	f000 bca8 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008210:	4b3b      	ldr	r3, [pc, #236]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800821c:	d107      	bne.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800821e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008224:	d103      	bne.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8008226:	4b38      	ldr	r3, [pc, #224]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008228:	637b      	str	r3, [r7, #52]	@ 0x34
 800822a:	f000 bc99 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800822e:	4b34      	ldr	r3, [pc, #208]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b20      	cmp	r3, #32
 8008238:	d11c      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800823a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008240:	d118      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008242:	4b2f      	ldr	r3, [pc, #188]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d005      	beq.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800824e:	4b2c      	ldr	r3, [pc, #176]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	0e1b      	lsrs	r3, r3, #24
 8008254:	f003 030f 	and.w	r3, r3, #15
 8008258:	e006      	b.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800825a:	4b29      	ldr	r3, [pc, #164]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800825c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008260:	041b      	lsls	r3, r3, #16
 8008262:	0e1b      	lsrs	r3, r3, #24
 8008264:	f003 030f 	and.w	r3, r3, #15
 8008268:	4a26      	ldr	r2, [pc, #152]	@ (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800826a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800826e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008270:	f000 bc76 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	637b      	str	r3, [r7, #52]	@ 0x34
 8008278:	f000 bc72 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800827c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008280:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8008284:	430b      	orrs	r3, r1
 8008286:	d152      	bne.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008288:	4b1d      	ldr	r3, [pc, #116]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800828a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800828e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008292:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008296:	2b00      	cmp	r3, #0
 8008298:	d104      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800829a:	f7fe f80d 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 800829e:	6378      	str	r0, [r7, #52]	@ 0x34
 80082a0:	f000 bc5e 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80082a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082aa:	d104      	bne.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80082ac:	f7fd fee8 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 80082b0:	6378      	str	r0, [r7, #52]	@ 0x34
 80082b2:	f000 bc55 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80082b6:	4b12      	ldr	r3, [pc, #72]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082c2:	d107      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 80082c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082ca:	d103      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 80082cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80082ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d0:	f000 bc46 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80082d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0320 	and.w	r3, r3, #32
 80082dc:	2b20      	cmp	r3, #32
 80082de:	d122      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 80082e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082e6:	d11e      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082e8:	4b05      	ldr	r3, [pc, #20]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 80082f4:	4b02      	ldr	r3, [pc, #8]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	0e1b      	lsrs	r3, r3, #24
 80082fa:	f003 030f 	and.w	r3, r3, #15
 80082fe:	e00c      	b.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8008300:	46020c00 	.word	0x46020c00
 8008304:	0800b494 	.word	0x0800b494
 8008308:	00f42400 	.word	0x00f42400
 800830c:	4ba1      	ldr	r3, [pc, #644]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800830e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008312:	041b      	lsls	r3, r3, #16
 8008314:	0e1b      	lsrs	r3, r3, #24
 8008316:	f003 030f 	and.w	r3, r3, #15
 800831a:	4a9f      	ldr	r2, [pc, #636]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800831c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008320:	637b      	str	r3, [r7, #52]	@ 0x34
 8008322:	f000 bc1d 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8008326:	2300      	movs	r3, #0
 8008328:	637b      	str	r3, [r7, #52]	@ 0x34
 800832a:	f000 bc19 	b.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800832e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008332:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008336:	430b      	orrs	r3, r1
 8008338:	d151      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800833a:	4b96      	ldr	r3, [pc, #600]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800833c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008340:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008344:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008348:	2bc0      	cmp	r3, #192	@ 0xc0
 800834a:	d024      	beq.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800834c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008350:	d842      	bhi.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8008352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008354:	2b80      	cmp	r3, #128	@ 0x80
 8008356:	d00d      	beq.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8008358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835a:	2b80      	cmp	r3, #128	@ 0x80
 800835c:	d83c      	bhi.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8008364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008366:	2b40      	cmp	r3, #64	@ 0x40
 8008368:	d011      	beq.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800836a:	e035      	b.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800836c:	f7fd ffcc 	bl	8006308 <HAL_RCC_GetPCLK3Freq>
 8008370:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008372:	e3f5      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008374:	4b87      	ldr	r3, [pc, #540]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800837c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008380:	d102      	bne.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8008382:	4b86      	ldr	r3, [pc, #536]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008384:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008386:	e3eb      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008388:	2300      	movs	r3, #0
 800838a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800838c:	e3e8      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800838e:	f7fd fe77 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8008392:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008394:	e3e4      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008396:	4b7f      	ldr	r3, [pc, #508]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0320 	and.w	r3, r3, #32
 800839e:	2b20      	cmp	r3, #32
 80083a0:	d117      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083a2:	4b7c      	ldr	r3, [pc, #496]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d005      	beq.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 80083ae:	4b79      	ldr	r3, [pc, #484]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	0e1b      	lsrs	r3, r3, #24
 80083b4:	f003 030f 	and.w	r3, r3, #15
 80083b8:	e006      	b.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80083ba:	4b76      	ldr	r3, [pc, #472]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80083c0:	041b      	lsls	r3, r3, #16
 80083c2:	0e1b      	lsrs	r3, r3, #24
 80083c4:	f003 030f 	and.w	r3, r3, #15
 80083c8:	4a73      	ldr	r2, [pc, #460]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80083ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80083d0:	e3c6      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083d6:	e3c3      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 80083d8:	2300      	movs	r3, #0
 80083da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083dc:	e3c0      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80083de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083e2:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80083e6:	430b      	orrs	r3, r1
 80083e8:	d147      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80083ea:	4b6a      	ldr	r3, [pc, #424]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80083f4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80083f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d103      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80083fc:	f7fd ff5c 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8008400:	6378      	str	r0, [r7, #52]	@ 0x34
 8008402:	e3ad      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8008404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008406:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800840a:	d103      	bne.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800840c:	f7fd fe38 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8008410:	6378      	str	r0, [r7, #52]	@ 0x34
 8008412:	e3a5      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008414:	4b5f      	ldr	r3, [pc, #380]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800841c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008420:	d106      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8008422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008428:	d102      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800842a:	4b5c      	ldr	r3, [pc, #368]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800842c:	637b      	str	r3, [r7, #52]	@ 0x34
 800842e:	e397      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8008430:	4b58      	ldr	r3, [pc, #352]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0320 	and.w	r3, r3, #32
 8008438:	2b20      	cmp	r3, #32
 800843a:	d11b      	bne.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 800843c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008442:	d117      	bne.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008444:	4b53      	ldr	r3, [pc, #332]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d005      	beq.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8008450:	4b50      	ldr	r3, [pc, #320]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	0e1b      	lsrs	r3, r3, #24
 8008456:	f003 030f 	and.w	r3, r3, #15
 800845a:	e006      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 800845c:	4b4d      	ldr	r3, [pc, #308]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800845e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008462:	041b      	lsls	r3, r3, #16
 8008464:	0e1b      	lsrs	r3, r3, #24
 8008466:	f003 030f 	and.w	r3, r3, #15
 800846a:	4a4b      	ldr	r2, [pc, #300]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800846c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008470:	637b      	str	r3, [r7, #52]	@ 0x34
 8008472:	e375      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8008474:	2300      	movs	r3, #0
 8008476:	637b      	str	r3, [r7, #52]	@ 0x34
 8008478:	e372      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800847a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800847e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008482:	430b      	orrs	r3, r1
 8008484:	d164      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008486:	4b43      	ldr	r3, [pc, #268]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800848c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008490:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8008492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008494:	2b00      	cmp	r3, #0
 8008496:	d120      	bne.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008498:	4b3e      	ldr	r3, [pc, #248]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d117      	bne.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084a4:	4b3b      	ldr	r3, [pc, #236]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80084b0:	4b38      	ldr	r3, [pc, #224]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	0e1b      	lsrs	r3, r3, #24
 80084b6:	f003 030f 	and.w	r3, r3, #15
 80084ba:	e006      	b.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80084bc:	4b35      	ldr	r3, [pc, #212]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084c2:	041b      	lsls	r3, r3, #16
 80084c4:	0e1b      	lsrs	r3, r3, #24
 80084c6:	f003 030f 	and.w	r3, r3, #15
 80084ca:	4a33      	ldr	r2, [pc, #204]	@ (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80084cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d2:	e345      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d8:	e342      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80084da:	4b2e      	ldr	r3, [pc, #184]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084e8:	d112      	bne.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084f0:	d10e      	bne.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084f2:	4b28      	ldr	r3, [pc, #160]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008500:	d102      	bne.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8008502:	23fa      	movs	r3, #250	@ 0xfa
 8008504:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008506:	e32b      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008508:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800850c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800850e:	e327      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008510:	4b20      	ldr	r3, [pc, #128]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800851c:	d106      	bne.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800851e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008524:	d102      	bne.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8008526:	4b1d      	ldr	r3, [pc, #116]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008528:	637b      	str	r3, [r7, #52]	@ 0x34
 800852a:	e319      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800852c:	4b19      	ldr	r3, [pc, #100]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800852e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b02      	cmp	r3, #2
 8008538:	d107      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008540:	d103      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8008542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008546:	637b      	str	r3, [r7, #52]	@ 0x34
 8008548:	e30a      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	637b      	str	r3, [r7, #52]	@ 0x34
 800854e:	e307      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008554:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008558:	430b      	orrs	r3, r1
 800855a:	d16b      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800855c:	4b0d      	ldr	r3, [pc, #52]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800855e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008562:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008566:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8008568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856a:	2b00      	cmp	r3, #0
 800856c:	d127      	bne.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800856e:	4b09      	ldr	r3, [pc, #36]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0320 	and.w	r3, r3, #32
 8008576:	2b20      	cmp	r3, #32
 8008578:	d11e      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800857a:	4b06      	ldr	r3, [pc, #24]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00c      	beq.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8008586:	4b03      	ldr	r3, [pc, #12]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	0e1b      	lsrs	r3, r3, #24
 800858c:	f003 030f 	and.w	r3, r3, #15
 8008590:	e00d      	b.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8008592:	bf00      	nop
 8008594:	46020c00 	.word	0x46020c00
 8008598:	0800b494 	.word	0x0800b494
 800859c:	00f42400 	.word	0x00f42400
 80085a0:	4b94      	ldr	r3, [pc, #592]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80085a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085a6:	041b      	lsls	r3, r3, #16
 80085a8:	0e1b      	lsrs	r3, r3, #24
 80085aa:	f003 030f 	and.w	r3, r3, #15
 80085ae:	4a92      	ldr	r2, [pc, #584]	@ (80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80085b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085b6:	e2d3      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80085bc:	e2d0      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80085be:	4b8d      	ldr	r3, [pc, #564]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80085c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085cc:	d112      	bne.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085d4:	d10e      	bne.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085d6:	4b87      	ldr	r3, [pc, #540]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80085d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085e4:	d102      	bne.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 80085e6:	23fa      	movs	r3, #250	@ 0xfa
 80085e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085ea:	e2b9      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80085ec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80085f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085f2:	e2b5      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80085f4:	4b7f      	ldr	r3, [pc, #508]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008600:	d106      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8008602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008608:	d102      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 800860a:	4b7c      	ldr	r3, [pc, #496]	@ (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800860c:	637b      	str	r3, [r7, #52]	@ 0x34
 800860e:	e2a7      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008610:	4b78      	ldr	r3, [pc, #480]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008616:	f003 0302 	and.w	r3, r3, #2
 800861a:	2b02      	cmp	r3, #2
 800861c:	d107      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 800861e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008620:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008624:	d103      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8008626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800862a:	637b      	str	r3, [r7, #52]	@ 0x34
 800862c:	e298      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	637b      	str	r3, [r7, #52]	@ 0x34
 8008632:	e295      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008638:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800863c:	430b      	orrs	r3, r1
 800863e:	d147      	bne.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008640:	4b6c      	ldr	r3, [pc, #432]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008646:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800864a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800864c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864e:	2b00      	cmp	r3, #0
 8008650:	d103      	bne.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008652:	f7fd fe31 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8008656:	6378      	str	r0, [r7, #52]	@ 0x34
 8008658:	e282      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800865a:	4b66      	ldr	r3, [pc, #408]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800865c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008660:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008664:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008668:	d112      	bne.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 800866a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008670:	d10e      	bne.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008672:	4b60      	ldr	r3, [pc, #384]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800867c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008680:	d102      	bne.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8008682:	23fa      	movs	r3, #250	@ 0xfa
 8008684:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008686:	e26b      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008688:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800868c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800868e:	e267      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008690:	4b58      	ldr	r3, [pc, #352]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800869c:	d106      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 800869e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80086a4:	d102      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 80086a6:	4b55      	ldr	r3, [pc, #340]	@ (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086aa:	e259      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80086ac:	4b51      	ldr	r3, [pc, #324]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d107      	bne.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80086c0:	d103      	bne.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 80086c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086c8:	e24a      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ce:	e247      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80086d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086d4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80086d8:	430b      	orrs	r3, r1
 80086da:	d12d      	bne.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80086dc:	4b45      	ldr	r3, [pc, #276]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086e2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80086e6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80086e8:	4b42      	ldr	r3, [pc, #264]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086f4:	d105      	bne.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80086f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d102      	bne.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 80086fc:	4b3f      	ldr	r3, [pc, #252]	@ (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008700:	e22e      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008708:	d107      	bne.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800870a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe fc70 	bl	8006ff4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008716:	637b      	str	r3, [r7, #52]	@ 0x34
 8008718:	e222      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800871a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008720:	d107      	bne.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008722:	f107 0318 	add.w	r3, r7, #24
 8008726:	4618      	mov	r0, r3
 8008728:	f7fe fdbe 	bl	80072a8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008730:	e216      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	637b      	str	r3, [r7, #52]	@ 0x34
 8008736:	e213      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800873c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8008740:	430b      	orrs	r3, r1
 8008742:	d15d      	bne.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008744:	4b2b      	ldr	r3, [pc, #172]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800874a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800874e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008752:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008756:	d028      	beq.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8008758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800875e:	d845      	bhi.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008762:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008766:	d013      	beq.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8008768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800876e:	d83d      	bhi.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008772:	2b00      	cmp	r3, #0
 8008774:	d004      	beq.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800877c:	d004      	beq.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 800877e:	e035      	b.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008780:	f7fd fdae 	bl	80062e0 <HAL_RCC_GetPCLK2Freq>
 8008784:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008786:	e1eb      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008788:	f7fd fc7a 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 800878c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800878e:	e1e7      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008790:	4b18      	ldr	r3, [pc, #96]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800879c:	d102      	bne.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 800879e:	4b17      	ldr	r3, [pc, #92]	@ (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80087a0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087a2:	e1dd      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80087a4:	2300      	movs	r3, #0
 80087a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087a8:	e1da      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80087aa:	4b12      	ldr	r3, [pc, #72]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0320 	and.w	r3, r3, #32
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	d117      	bne.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80087b6:	4b0f      	ldr	r3, [pc, #60]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d005      	beq.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80087c2:	4b0c      	ldr	r3, [pc, #48]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	0e1b      	lsrs	r3, r3, #24
 80087c8:	f003 030f 	and.w	r3, r3, #15
 80087cc:	e006      	b.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 80087ce:	4b09      	ldr	r3, [pc, #36]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80087d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087d4:	041b      	lsls	r3, r3, #16
 80087d6:	0e1b      	lsrs	r3, r3, #24
 80087d8:	f003 030f 	and.w	r3, r3, #15
 80087dc:	4a06      	ldr	r2, [pc, #24]	@ (80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80087de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087e4:	e1bc      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087ea:	e1b9      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087f0:	e1b6      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80087f2:	bf00      	nop
 80087f4:	46020c00 	.word	0x46020c00
 80087f8:	0800b494 	.word	0x0800b494
 80087fc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008804:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8008808:	430b      	orrs	r3, r1
 800880a:	d156      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800880c:	4ba5      	ldr	r3, [pc, #660]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800880e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008812:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008816:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800881e:	d028      	beq.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8008820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008822:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008826:	d845      	bhi.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8008828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800882e:	d013      	beq.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8008830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008832:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008836:	d83d      	bhi.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8008838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883a:	2b00      	cmp	r3, #0
 800883c:	d004      	beq.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800883e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008844:	d004      	beq.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8008846:	e035      	b.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008848:	f7fd fd36 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 800884c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800884e:	e187      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008850:	f7fd fc16 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8008854:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008856:	e183      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008858:	4b92      	ldr	r3, [pc, #584]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008864:	d102      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8008866:	4b90      	ldr	r3, [pc, #576]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8008868:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800886a:	e179      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800886c:	2300      	movs	r3, #0
 800886e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008870:	e176      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008872:	4b8c      	ldr	r3, [pc, #560]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	2b20      	cmp	r3, #32
 800887c:	d117      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800887e:	4b89      	ldr	r3, [pc, #548]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d005      	beq.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800888a:	4b86      	ldr	r3, [pc, #536]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	0e1b      	lsrs	r3, r3, #24
 8008890:	f003 030f 	and.w	r3, r3, #15
 8008894:	e006      	b.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8008896:	4b83      	ldr	r3, [pc, #524]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800889c:	041b      	lsls	r3, r3, #16
 800889e:	0e1b      	lsrs	r3, r3, #24
 80088a0:	f003 030f 	and.w	r3, r3, #15
 80088a4:	4a81      	ldr	r2, [pc, #516]	@ (8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80088a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088ac:	e158      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088b2:	e155      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088b8:	e152      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80088ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088be:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80088c2:	430b      	orrs	r3, r1
 80088c4:	d177      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80088c6:	4b77      	ldr	r3, [pc, #476]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80088c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088cc:	f003 0318 	and.w	r3, r3, #24
 80088d0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80088d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d4:	2b18      	cmp	r3, #24
 80088d6:	d86b      	bhi.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80088d8:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80088da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088de:	bf00      	nop
 80088e0:	08008945 	.word	0x08008945
 80088e4:	080089b1 	.word	0x080089b1
 80088e8:	080089b1 	.word	0x080089b1
 80088ec:	080089b1 	.word	0x080089b1
 80088f0:	080089b1 	.word	0x080089b1
 80088f4:	080089b1 	.word	0x080089b1
 80088f8:	080089b1 	.word	0x080089b1
 80088fc:	080089b1 	.word	0x080089b1
 8008900:	0800894d 	.word	0x0800894d
 8008904:	080089b1 	.word	0x080089b1
 8008908:	080089b1 	.word	0x080089b1
 800890c:	080089b1 	.word	0x080089b1
 8008910:	080089b1 	.word	0x080089b1
 8008914:	080089b1 	.word	0x080089b1
 8008918:	080089b1 	.word	0x080089b1
 800891c:	080089b1 	.word	0x080089b1
 8008920:	08008955 	.word	0x08008955
 8008924:	080089b1 	.word	0x080089b1
 8008928:	080089b1 	.word	0x080089b1
 800892c:	080089b1 	.word	0x080089b1
 8008930:	080089b1 	.word	0x080089b1
 8008934:	080089b1 	.word	0x080089b1
 8008938:	080089b1 	.word	0x080089b1
 800893c:	080089b1 	.word	0x080089b1
 8008940:	0800896f 	.word	0x0800896f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008944:	f7fd fce0 	bl	8006308 <HAL_RCC_GetPCLK3Freq>
 8008948:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800894a:	e109      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800894c:	f7fd fb98 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8008950:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008952:	e105      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008954:	4b53      	ldr	r3, [pc, #332]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800895c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008960:	d102      	bne.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8008962:	4b51      	ldr	r3, [pc, #324]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8008964:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008966:	e0fb      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008968:	2300      	movs	r3, #0
 800896a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800896c:	e0f8      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800896e:	4b4d      	ldr	r3, [pc, #308]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0320 	and.w	r3, r3, #32
 8008976:	2b20      	cmp	r3, #32
 8008978:	d117      	bne.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800897a:	4b4a      	ldr	r3, [pc, #296]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d005      	beq.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8008986:	4b47      	ldr	r3, [pc, #284]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	0e1b      	lsrs	r3, r3, #24
 800898c:	f003 030f 	and.w	r3, r3, #15
 8008990:	e006      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8008992:	4b44      	ldr	r3, [pc, #272]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008994:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008998:	041b      	lsls	r3, r3, #16
 800899a:	0e1b      	lsrs	r3, r3, #24
 800899c:	f003 030f 	and.w	r3, r3, #15
 80089a0:	4a42      	ldr	r2, [pc, #264]	@ (8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80089a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80089a8:	e0da      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089ae:	e0d7      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089b4:	e0d4      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80089b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ba:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80089be:	430b      	orrs	r3, r1
 80089c0:	d155      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80089c2:	4b38      	ldr	r3, [pc, #224]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80089c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089c8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80089cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80089ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80089d4:	d013      	beq.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80089d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80089dc:	d844      	bhi.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80089de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089e4:	d013      	beq.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089ec:	d83c      	bhi.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80089ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d014      	beq.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 80089f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089fa:	d014      	beq.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 80089fc:	e034      	b.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089fe:	f107 0318 	add.w	r3, r7, #24
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fe fc50 	bl	80072a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a0c:	e0a8      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe faee 	bl	8006ff4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a1c:	e0a0      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008a1e:	f7fd fb2f 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8008a22:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008a24:	e09c      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008a26:	4b1f      	ldr	r3, [pc, #124]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0320 	and.w	r3, r3, #32
 8008a2e:	2b20      	cmp	r3, #32
 8008a30:	d117      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a32:	4b1c      	ldr	r3, [pc, #112]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d005      	beq.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8008a3e:	4b19      	ldr	r3, [pc, #100]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	0e1b      	lsrs	r3, r3, #24
 8008a44:	f003 030f 	and.w	r3, r3, #15
 8008a48:	e006      	b.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8008a4a:	4b16      	ldr	r3, [pc, #88]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a50:	041b      	lsls	r3, r3, #16
 8008a52:	0e1b      	lsrs	r3, r3, #24
 8008a54:	f003 030f 	and.w	r3, r3, #15
 8008a58:	4a14      	ldr	r2, [pc, #80]	@ (8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a5e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a60:	e07e      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a66:	e07b      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a6c:	e078      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a72:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8008a76:	430b      	orrs	r3, r1
 8008a78:	d138      	bne.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a84:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008a86:	4b07      	ldr	r3, [pc, #28]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a8c:	f003 0302 	and.w	r3, r3, #2
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d10d      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10a      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8008a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aa0:	e05e      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008aa2:	bf00      	nop
 8008aa4:	46020c00 	.word	0x46020c00
 8008aa8:	00f42400 	.word	0x00f42400
 8008aac:	0800b494 	.word	0x0800b494
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ab6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008aba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008abe:	d112      	bne.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ac6:	d10e      	bne.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ac8:	4b28      	ldr	r3, [pc, #160]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ad6:	d102      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8008ad8:	23fa      	movs	r3, #250	@ 0xfa
 8008ada:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008adc:	e040      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008ade:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008ae2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ae4:	e03c      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aea:	e039      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008af0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008af4:	430b      	orrs	r3, r1
 8008af6:	d131      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008af8:	4b1c      	ldr	r3, [pc, #112]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008afa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008afe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008b02:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008b04:	4b19      	ldr	r3, [pc, #100]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b10:	d105      	bne.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d102      	bne.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8008b18:	4b15      	ldr	r3, [pc, #84]	@ (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8008b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b1c:	e020      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008b1e:	4b13      	ldr	r3, [pc, #76]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b2a:	d106      	bne.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b32:	d102      	bne.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008b34:	4b0f      	ldr	r3, [pc, #60]	@ (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8008b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b38:	e012      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b46:	d106      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8008b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b4e:	d102      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8008b50:	4b09      	ldr	r3, [pc, #36]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b54:	e004      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b5a:	e001      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8008b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3738      	adds	r7, #56	@ 0x38
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	46020c00 	.word	0x46020c00
 8008b70:	02dc6c00 	.word	0x02dc6c00
 8008b74:	016e3600 	.word	0x016e3600
 8008b78:	00f42400 	.word	0x00f42400

08008b7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008b84:	4b47      	ldr	r3, [pc, #284]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a46      	ldr	r2, [pc, #280]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008b8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b8e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b90:	f7f9 f988 	bl	8001ea4 <HAL_GetTick>
 8008b94:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b96:	e008      	b.n	8008baa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b98:	f7f9 f984 	bl	8001ea4 <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d901      	bls.n	8008baa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e077      	b.n	8008c9a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008baa:	4b3e      	ldr	r3, [pc, #248]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1f0      	bne.n	8008b98 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008bbe:	f023 0303 	bic.w	r3, r3, #3
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6811      	ldr	r1, [r2, #0]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	6852      	ldr	r2, [r2, #4]
 8008bca:	3a01      	subs	r2, #1
 8008bcc:	0212      	lsls	r2, r2, #8
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	4934      	ldr	r1, [pc, #208]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008bd6:	4b33      	ldr	r3, [pc, #204]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008bd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bda:	4b33      	ldr	r3, [pc, #204]	@ (8008ca8 <RCCEx_PLL2_Config+0x12c>)
 8008bdc:	4013      	ands	r3, r2
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	6892      	ldr	r2, [r2, #8]
 8008be2:	3a01      	subs	r2, #1
 8008be4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	68d2      	ldr	r2, [r2, #12]
 8008bec:	3a01      	subs	r2, #1
 8008bee:	0252      	lsls	r2, r2, #9
 8008bf0:	b292      	uxth	r2, r2
 8008bf2:	4311      	orrs	r1, r2
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	6912      	ldr	r2, [r2, #16]
 8008bf8:	3a01      	subs	r2, #1
 8008bfa:	0412      	lsls	r2, r2, #16
 8008bfc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008c00:	4311      	orrs	r1, r2
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	6952      	ldr	r2, [r2, #20]
 8008c06:	3a01      	subs	r2, #1
 8008c08:	0612      	lsls	r2, r2, #24
 8008c0a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	4924      	ldr	r1, [pc, #144]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008c16:	4b23      	ldr	r3, [pc, #140]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1a:	f023 020c 	bic.w	r2, r3, #12
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	4920      	ldr	r1, [pc, #128]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008c28:	4b1e      	ldr	r3, [pc, #120]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	491c      	ldr	r1, [pc, #112]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008c36:	4b1b      	ldr	r3, [pc, #108]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008c3c:	f023 0310 	bic.w	r3, r3, #16
 8008c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c42:	4b18      	ldr	r3, [pc, #96]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c4a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	69d2      	ldr	r2, [r2, #28]
 8008c52:	00d2      	lsls	r2, r2, #3
 8008c54:	4913      	ldr	r1, [pc, #76]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008c56:	4313      	orrs	r3, r2
 8008c58:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008c5a:	4b12      	ldr	r3, [pc, #72]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5e:	4a11      	ldr	r2, [pc, #68]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008c60:	f043 0310 	orr.w	r3, r3, #16
 8008c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008c66:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008c6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c70:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c72:	f7f9 f917 	bl	8001ea4 <HAL_GetTick>
 8008c76:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c78:	e008      	b.n	8008c8c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c7a:	f7f9 f913 	bl	8001ea4 <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d901      	bls.n	8008c8c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e006      	b.n	8008c9a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ca4 <RCCEx_PLL2_Config+0x128>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d0f0      	beq.n	8008c7a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008c98:	2300      	movs	r3, #0

}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	46020c00 	.word	0x46020c00
 8008ca8:	80800000 	.word	0x80800000

08008cac <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008cb4:	4b47      	ldr	r3, [pc, #284]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a46      	ldr	r2, [pc, #280]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cbe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008cc0:	f7f9 f8f0 	bl	8001ea4 <HAL_GetTick>
 8008cc4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cc6:	e008      	b.n	8008cda <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cc8:	f7f9 f8ec 	bl	8001ea4 <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d901      	bls.n	8008cda <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e077      	b.n	8008dca <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cda:	4b3e      	ldr	r3, [pc, #248]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1f0      	bne.n	8008cc8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008cee:	f023 0303 	bic.w	r3, r3, #3
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	6811      	ldr	r1, [r2, #0]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	6852      	ldr	r2, [r2, #4]
 8008cfa:	3a01      	subs	r2, #1
 8008cfc:	0212      	lsls	r2, r2, #8
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	4934      	ldr	r1, [pc, #208]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	630b      	str	r3, [r1, #48]	@ 0x30
 8008d06:	4b33      	ldr	r3, [pc, #204]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d0a:	4b33      	ldr	r3, [pc, #204]	@ (8008dd8 <RCCEx_PLL3_Config+0x12c>)
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6892      	ldr	r2, [r2, #8]
 8008d12:	3a01      	subs	r2, #1
 8008d14:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	68d2      	ldr	r2, [r2, #12]
 8008d1c:	3a01      	subs	r2, #1
 8008d1e:	0252      	lsls	r2, r2, #9
 8008d20:	b292      	uxth	r2, r2
 8008d22:	4311      	orrs	r1, r2
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	6912      	ldr	r2, [r2, #16]
 8008d28:	3a01      	subs	r2, #1
 8008d2a:	0412      	lsls	r2, r2, #16
 8008d2c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008d30:	4311      	orrs	r1, r2
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	6952      	ldr	r2, [r2, #20]
 8008d36:	3a01      	subs	r2, #1
 8008d38:	0612      	lsls	r2, r2, #24
 8008d3a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	4924      	ldr	r1, [pc, #144]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008d46:	4b23      	ldr	r3, [pc, #140]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d4a:	f023 020c 	bic.w	r2, r3, #12
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	4920      	ldr	r1, [pc, #128]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d54:	4313      	orrs	r3, r2
 8008d56:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008d58:	4b1e      	ldr	r3, [pc, #120]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a1b      	ldr	r3, [r3, #32]
 8008d60:	491c      	ldr	r1, [pc, #112]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008d66:	4b1b      	ldr	r3, [pc, #108]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d6c:	f023 0310 	bic.w	r3, r3, #16
 8008d70:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d72:	4b18      	ldr	r3, [pc, #96]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d7a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	69d2      	ldr	r2, [r2, #28]
 8008d82:	00d2      	lsls	r2, r2, #3
 8008d84:	4913      	ldr	r1, [pc, #76]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008d8a:	4b12      	ldr	r3, [pc, #72]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d8e:	4a11      	ldr	r2, [pc, #68]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d90:	f043 0310 	orr.w	r3, r3, #16
 8008d94:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008d96:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008da0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008da2:	f7f9 f87f 	bl	8001ea4 <HAL_GetTick>
 8008da6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008da8:	e008      	b.n	8008dbc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008daa:	f7f9 f87b 	bl	8001ea4 <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d901      	bls.n	8008dbc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e006      	b.n	8008dca <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008dbc:	4b05      	ldr	r3, [pc, #20]	@ (8008dd4 <RCCEx_PLL3_Config+0x128>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0f0      	beq.n	8008daa <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	46020c00 	.word	0x46020c00
 8008dd8:	80800000 	.word	0x80800000

08008ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e049      	b.n	8008e82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d106      	bne.n	8008e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7f8 fbc2 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	3304      	adds	r3, #4
 8008e18:	4619      	mov	r1, r3
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	f000 fb50 	bl	80094c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d001      	beq.n	8008ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e072      	b.n	8008f8a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68da      	ldr	r2, [r3, #12]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f042 0201 	orr.w	r2, r2, #1
 8008eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a35      	ldr	r2, [pc, #212]	@ (8008f98 <HAL_TIM_Base_Start_IT+0x10c>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d040      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0xbc>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a34      	ldr	r2, [pc, #208]	@ (8008f9c <HAL_TIM_Base_Start_IT+0x110>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d03b      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0xbc>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ed8:	d036      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0xbc>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ee2:	d031      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0xbc>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8008fa0 <HAL_TIM_Base_Start_IT+0x114>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d02c      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0xbc>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a2c      	ldr	r2, [pc, #176]	@ (8008fa4 <HAL_TIM_Base_Start_IT+0x118>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d027      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0xbc>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a2a      	ldr	r2, [pc, #168]	@ (8008fa8 <HAL_TIM_Base_Start_IT+0x11c>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d022      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0xbc>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a29      	ldr	r2, [pc, #164]	@ (8008fac <HAL_TIM_Base_Start_IT+0x120>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d01d      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0xbc>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a27      	ldr	r2, [pc, #156]	@ (8008fb0 <HAL_TIM_Base_Start_IT+0x124>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d018      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0xbc>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a26      	ldr	r2, [pc, #152]	@ (8008fb4 <HAL_TIM_Base_Start_IT+0x128>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d013      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0xbc>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a24      	ldr	r2, [pc, #144]	@ (8008fb8 <HAL_TIM_Base_Start_IT+0x12c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00e      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0xbc>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a23      	ldr	r2, [pc, #140]	@ (8008fbc <HAL_TIM_Base_Start_IT+0x130>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d009      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0xbc>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a21      	ldr	r2, [pc, #132]	@ (8008fc0 <HAL_TIM_Base_Start_IT+0x134>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0xbc>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a20      	ldr	r2, [pc, #128]	@ (8008fc4 <HAL_TIM_Base_Start_IT+0x138>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d115      	bne.n	8008f74 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8008fc8 <HAL_TIM_Base_Start_IT+0x13c>)
 8008f50:	4013      	ands	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b06      	cmp	r3, #6
 8008f58:	d015      	beq.n	8008f86 <HAL_TIM_Base_Start_IT+0xfa>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f60:	d011      	beq.n	8008f86 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f042 0201 	orr.w	r2, r2, #1
 8008f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f72:	e008      	b.n	8008f86 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f042 0201 	orr.w	r2, r2, #1
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	e000      	b.n	8008f88 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	40012c00 	.word	0x40012c00
 8008f9c:	50012c00 	.word	0x50012c00
 8008fa0:	40000400 	.word	0x40000400
 8008fa4:	50000400 	.word	0x50000400
 8008fa8:	40000800 	.word	0x40000800
 8008fac:	50000800 	.word	0x50000800
 8008fb0:	40000c00 	.word	0x40000c00
 8008fb4:	50000c00 	.word	0x50000c00
 8008fb8:	40013400 	.word	0x40013400
 8008fbc:	50013400 	.word	0x50013400
 8008fc0:	40014000 	.word	0x40014000
 8008fc4:	50014000 	.word	0x50014000
 8008fc8:	00010007 	.word	0x00010007

08008fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f003 0302 	and.w	r3, r3, #2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d020      	beq.n	8009030 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01b      	beq.n	8009030 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f06f 0202 	mvn.w	r2, #2
 8009000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	f003 0303 	and.w	r3, r3, #3
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fa34 	bl	8009484 <HAL_TIM_IC_CaptureCallback>
 800901c:	e005      	b.n	800902a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa26 	bl	8009470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fa37 	bl	8009498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f003 0304 	and.w	r3, r3, #4
 8009036:	2b00      	cmp	r3, #0
 8009038:	d020      	beq.n	800907c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b00      	cmp	r3, #0
 8009042:	d01b      	beq.n	800907c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f06f 0204 	mvn.w	r2, #4
 800904c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2202      	movs	r2, #2
 8009052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa0e 	bl	8009484 <HAL_TIM_IC_CaptureCallback>
 8009068:	e005      	b.n	8009076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fa00 	bl	8009470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fa11 	bl	8009498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	f003 0308 	and.w	r3, r3, #8
 8009082:	2b00      	cmp	r3, #0
 8009084:	d020      	beq.n	80090c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f003 0308 	and.w	r3, r3, #8
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01b      	beq.n	80090c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f06f 0208 	mvn.w	r2, #8
 8009098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2204      	movs	r2, #4
 800909e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	f003 0303 	and.w	r3, r3, #3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f9e8 	bl	8009484 <HAL_TIM_IC_CaptureCallback>
 80090b4:	e005      	b.n	80090c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f9da 	bl	8009470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f9eb 	bl	8009498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	f003 0310 	and.w	r3, r3, #16
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d020      	beq.n	8009114 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f003 0310 	and.w	r3, r3, #16
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d01b      	beq.n	8009114 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f06f 0210 	mvn.w	r2, #16
 80090e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2208      	movs	r2, #8
 80090ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f9c2 	bl	8009484 <HAL_TIM_IC_CaptureCallback>
 8009100:	e005      	b.n	800910e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f9b4 	bl	8009470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f9c5 	bl	8009498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00c      	beq.n	8009138 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	2b00      	cmp	r3, #0
 8009126:	d007      	beq.n	8009138 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f06f 0201 	mvn.w	r2, #1
 8009130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7f7 fbb6 	bl	80008a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800913e:	2b00      	cmp	r3, #0
 8009140:	d104      	bne.n	800914c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00c      	beq.n	8009166 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009152:	2b00      	cmp	r3, #0
 8009154:	d007      	beq.n	8009166 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800915e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fc15 	bl	8009990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00c      	beq.n	800918a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009176:	2b00      	cmp	r3, #0
 8009178:	d007      	beq.n	800918a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fc0d 	bl	80099a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00c      	beq.n	80091ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800919a:	2b00      	cmp	r3, #0
 800919c:	d007      	beq.n	80091ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80091a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f97f 	bl	80094ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	f003 0320 	and.w	r3, r3, #32
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00c      	beq.n	80091d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f003 0320 	and.w	r3, r3, #32
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d007      	beq.n	80091d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f06f 0220 	mvn.w	r2, #32
 80091ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fbd5 	bl	800997c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00c      	beq.n	80091f6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d007      	beq.n	80091f6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80091ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fbe1 	bl	80099b8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00c      	beq.n	800921a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d007      	beq.n	800921a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fbd9 	bl	80099cc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00c      	beq.n	800923e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d007      	beq.n	800923e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fbd1 	bl	80099e0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00c      	beq.n	8009262 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d007      	beq.n	8009262 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800925a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fbc9 	bl	80099f4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009262:	bf00      	nop
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009280:	2b01      	cmp	r3, #1
 8009282:	d101      	bne.n	8009288 <HAL_TIM_ConfigClockSource+0x1c>
 8009284:	2302      	movs	r3, #2
 8009286:	e0e6      	b.n	8009456 <HAL_TIM_ConfigClockSource+0x1ea>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2202      	movs	r2, #2
 8009294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80092a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80092aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a67      	ldr	r2, [pc, #412]	@ (8009460 <HAL_TIM_ConfigClockSource+0x1f4>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	f000 80b1 	beq.w	800942a <HAL_TIM_ConfigClockSource+0x1be>
 80092c8:	4a65      	ldr	r2, [pc, #404]	@ (8009460 <HAL_TIM_ConfigClockSource+0x1f4>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	f200 80b6 	bhi.w	800943c <HAL_TIM_ConfigClockSource+0x1d0>
 80092d0:	4a64      	ldr	r2, [pc, #400]	@ (8009464 <HAL_TIM_ConfigClockSource+0x1f8>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	f000 80a9 	beq.w	800942a <HAL_TIM_ConfigClockSource+0x1be>
 80092d8:	4a62      	ldr	r2, [pc, #392]	@ (8009464 <HAL_TIM_ConfigClockSource+0x1f8>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	f200 80ae 	bhi.w	800943c <HAL_TIM_ConfigClockSource+0x1d0>
 80092e0:	4a61      	ldr	r2, [pc, #388]	@ (8009468 <HAL_TIM_ConfigClockSource+0x1fc>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	f000 80a1 	beq.w	800942a <HAL_TIM_ConfigClockSource+0x1be>
 80092e8:	4a5f      	ldr	r2, [pc, #380]	@ (8009468 <HAL_TIM_ConfigClockSource+0x1fc>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	f200 80a6 	bhi.w	800943c <HAL_TIM_ConfigClockSource+0x1d0>
 80092f0:	4a5e      	ldr	r2, [pc, #376]	@ (800946c <HAL_TIM_ConfigClockSource+0x200>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	f000 8099 	beq.w	800942a <HAL_TIM_ConfigClockSource+0x1be>
 80092f8:	4a5c      	ldr	r2, [pc, #368]	@ (800946c <HAL_TIM_ConfigClockSource+0x200>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	f200 809e 	bhi.w	800943c <HAL_TIM_ConfigClockSource+0x1d0>
 8009300:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009304:	f000 8091 	beq.w	800942a <HAL_TIM_ConfigClockSource+0x1be>
 8009308:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800930c:	f200 8096 	bhi.w	800943c <HAL_TIM_ConfigClockSource+0x1d0>
 8009310:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009314:	f000 8089 	beq.w	800942a <HAL_TIM_ConfigClockSource+0x1be>
 8009318:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800931c:	f200 808e 	bhi.w	800943c <HAL_TIM_ConfigClockSource+0x1d0>
 8009320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009324:	d03e      	beq.n	80093a4 <HAL_TIM_ConfigClockSource+0x138>
 8009326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800932a:	f200 8087 	bhi.w	800943c <HAL_TIM_ConfigClockSource+0x1d0>
 800932e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009332:	f000 8086 	beq.w	8009442 <HAL_TIM_ConfigClockSource+0x1d6>
 8009336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800933a:	d87f      	bhi.n	800943c <HAL_TIM_ConfigClockSource+0x1d0>
 800933c:	2b70      	cmp	r3, #112	@ 0x70
 800933e:	d01a      	beq.n	8009376 <HAL_TIM_ConfigClockSource+0x10a>
 8009340:	2b70      	cmp	r3, #112	@ 0x70
 8009342:	d87b      	bhi.n	800943c <HAL_TIM_ConfigClockSource+0x1d0>
 8009344:	2b60      	cmp	r3, #96	@ 0x60
 8009346:	d050      	beq.n	80093ea <HAL_TIM_ConfigClockSource+0x17e>
 8009348:	2b60      	cmp	r3, #96	@ 0x60
 800934a:	d877      	bhi.n	800943c <HAL_TIM_ConfigClockSource+0x1d0>
 800934c:	2b50      	cmp	r3, #80	@ 0x50
 800934e:	d03c      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x15e>
 8009350:	2b50      	cmp	r3, #80	@ 0x50
 8009352:	d873      	bhi.n	800943c <HAL_TIM_ConfigClockSource+0x1d0>
 8009354:	2b40      	cmp	r3, #64	@ 0x40
 8009356:	d058      	beq.n	800940a <HAL_TIM_ConfigClockSource+0x19e>
 8009358:	2b40      	cmp	r3, #64	@ 0x40
 800935a:	d86f      	bhi.n	800943c <HAL_TIM_ConfigClockSource+0x1d0>
 800935c:	2b30      	cmp	r3, #48	@ 0x30
 800935e:	d064      	beq.n	800942a <HAL_TIM_ConfigClockSource+0x1be>
 8009360:	2b30      	cmp	r3, #48	@ 0x30
 8009362:	d86b      	bhi.n	800943c <HAL_TIM_ConfigClockSource+0x1d0>
 8009364:	2b20      	cmp	r3, #32
 8009366:	d060      	beq.n	800942a <HAL_TIM_ConfigClockSource+0x1be>
 8009368:	2b20      	cmp	r3, #32
 800936a:	d867      	bhi.n	800943c <HAL_TIM_ConfigClockSource+0x1d0>
 800936c:	2b00      	cmp	r3, #0
 800936e:	d05c      	beq.n	800942a <HAL_TIM_ConfigClockSource+0x1be>
 8009370:	2b10      	cmp	r3, #16
 8009372:	d05a      	beq.n	800942a <HAL_TIM_ConfigClockSource+0x1be>
 8009374:	e062      	b.n	800943c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009386:	f000 fa17 	bl	80097b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	609a      	str	r2, [r3, #8]
      break;
 80093a2:	e04f      	b.n	8009444 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80093b4:	f000 fa00 	bl	80097b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689a      	ldr	r2, [r3, #8]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80093c6:	609a      	str	r2, [r3, #8]
      break;
 80093c8:	e03c      	b.n	8009444 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093d6:	461a      	mov	r2, r3
 80093d8:	f000 f972 	bl	80096c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2150      	movs	r1, #80	@ 0x50
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 f9cb 	bl	800977e <TIM_ITRx_SetConfig>
      break;
 80093e8:	e02c      	b.n	8009444 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093f6:	461a      	mov	r2, r3
 80093f8:	f000 f991 	bl	800971e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2160      	movs	r1, #96	@ 0x60
 8009402:	4618      	mov	r0, r3
 8009404:	f000 f9bb 	bl	800977e <TIM_ITRx_SetConfig>
      break;
 8009408:	e01c      	b.n	8009444 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009416:	461a      	mov	r2, r3
 8009418:	f000 f952 	bl	80096c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2140      	movs	r1, #64	@ 0x40
 8009422:	4618      	mov	r0, r3
 8009424:	f000 f9ab 	bl	800977e <TIM_ITRx_SetConfig>
      break;
 8009428:	e00c      	b.n	8009444 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4619      	mov	r1, r3
 8009434:	4610      	mov	r0, r2
 8009436:	f000 f9a2 	bl	800977e <TIM_ITRx_SetConfig>
      break;
 800943a:	e003      	b.n	8009444 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	73fb      	strb	r3, [r7, #15]
      break;
 8009440:	e000      	b.n	8009444 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8009442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009454:	7bfb      	ldrb	r3, [r7, #15]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	00100070 	.word	0x00100070
 8009464:	00100040 	.word	0x00100040
 8009468:	00100030 	.word	0x00100030
 800946c:	00100020 	.word	0x00100020

08009470 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a6b      	ldr	r2, [pc, #428]	@ (8009680 <TIM_Base_SetConfig+0x1c0>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d02b      	beq.n	8009530 <TIM_Base_SetConfig+0x70>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a6a      	ldr	r2, [pc, #424]	@ (8009684 <TIM_Base_SetConfig+0x1c4>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d027      	beq.n	8009530 <TIM_Base_SetConfig+0x70>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094e6:	d023      	beq.n	8009530 <TIM_Base_SetConfig+0x70>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094ee:	d01f      	beq.n	8009530 <TIM_Base_SetConfig+0x70>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a65      	ldr	r2, [pc, #404]	@ (8009688 <TIM_Base_SetConfig+0x1c8>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d01b      	beq.n	8009530 <TIM_Base_SetConfig+0x70>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a64      	ldr	r2, [pc, #400]	@ (800968c <TIM_Base_SetConfig+0x1cc>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d017      	beq.n	8009530 <TIM_Base_SetConfig+0x70>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a63      	ldr	r2, [pc, #396]	@ (8009690 <TIM_Base_SetConfig+0x1d0>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d013      	beq.n	8009530 <TIM_Base_SetConfig+0x70>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a62      	ldr	r2, [pc, #392]	@ (8009694 <TIM_Base_SetConfig+0x1d4>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d00f      	beq.n	8009530 <TIM_Base_SetConfig+0x70>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a61      	ldr	r2, [pc, #388]	@ (8009698 <TIM_Base_SetConfig+0x1d8>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d00b      	beq.n	8009530 <TIM_Base_SetConfig+0x70>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a60      	ldr	r2, [pc, #384]	@ (800969c <TIM_Base_SetConfig+0x1dc>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d007      	beq.n	8009530 <TIM_Base_SetConfig+0x70>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a5f      	ldr	r2, [pc, #380]	@ (80096a0 <TIM_Base_SetConfig+0x1e0>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d003      	beq.n	8009530 <TIM_Base_SetConfig+0x70>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a5e      	ldr	r2, [pc, #376]	@ (80096a4 <TIM_Base_SetConfig+0x1e4>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d108      	bne.n	8009542 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	4313      	orrs	r3, r2
 8009540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a4e      	ldr	r2, [pc, #312]	@ (8009680 <TIM_Base_SetConfig+0x1c0>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d043      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a4d      	ldr	r2, [pc, #308]	@ (8009684 <TIM_Base_SetConfig+0x1c4>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d03f      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009558:	d03b      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009560:	d037      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a48      	ldr	r2, [pc, #288]	@ (8009688 <TIM_Base_SetConfig+0x1c8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d033      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a47      	ldr	r2, [pc, #284]	@ (800968c <TIM_Base_SetConfig+0x1cc>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d02f      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a46      	ldr	r2, [pc, #280]	@ (8009690 <TIM_Base_SetConfig+0x1d0>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d02b      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a45      	ldr	r2, [pc, #276]	@ (8009694 <TIM_Base_SetConfig+0x1d4>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d027      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a44      	ldr	r2, [pc, #272]	@ (8009698 <TIM_Base_SetConfig+0x1d8>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d023      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a43      	ldr	r2, [pc, #268]	@ (800969c <TIM_Base_SetConfig+0x1dc>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d01f      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a42      	ldr	r2, [pc, #264]	@ (80096a0 <TIM_Base_SetConfig+0x1e0>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d01b      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a41      	ldr	r2, [pc, #260]	@ (80096a4 <TIM_Base_SetConfig+0x1e4>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d017      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a40      	ldr	r2, [pc, #256]	@ (80096a8 <TIM_Base_SetConfig+0x1e8>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d013      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a3f      	ldr	r2, [pc, #252]	@ (80096ac <TIM_Base_SetConfig+0x1ec>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00f      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a3e      	ldr	r2, [pc, #248]	@ (80096b0 <TIM_Base_SetConfig+0x1f0>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00b      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a3d      	ldr	r2, [pc, #244]	@ (80096b4 <TIM_Base_SetConfig+0x1f4>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d007      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a3c      	ldr	r2, [pc, #240]	@ (80096b8 <TIM_Base_SetConfig+0x1f8>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d003      	beq.n	80095d2 <TIM_Base_SetConfig+0x112>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a3b      	ldr	r2, [pc, #236]	@ (80096bc <TIM_Base_SetConfig+0x1fc>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d108      	bne.n	80095e4 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	689a      	ldr	r2, [r3, #8]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a1e      	ldr	r2, [pc, #120]	@ (8009680 <TIM_Base_SetConfig+0x1c0>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d023      	beq.n	8009652 <TIM_Base_SetConfig+0x192>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a1d      	ldr	r2, [pc, #116]	@ (8009684 <TIM_Base_SetConfig+0x1c4>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d01f      	beq.n	8009652 <TIM_Base_SetConfig+0x192>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a22      	ldr	r2, [pc, #136]	@ (80096a0 <TIM_Base_SetConfig+0x1e0>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d01b      	beq.n	8009652 <TIM_Base_SetConfig+0x192>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a21      	ldr	r2, [pc, #132]	@ (80096a4 <TIM_Base_SetConfig+0x1e4>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d017      	beq.n	8009652 <TIM_Base_SetConfig+0x192>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a20      	ldr	r2, [pc, #128]	@ (80096a8 <TIM_Base_SetConfig+0x1e8>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d013      	beq.n	8009652 <TIM_Base_SetConfig+0x192>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a1f      	ldr	r2, [pc, #124]	@ (80096ac <TIM_Base_SetConfig+0x1ec>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d00f      	beq.n	8009652 <TIM_Base_SetConfig+0x192>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a1e      	ldr	r2, [pc, #120]	@ (80096b0 <TIM_Base_SetConfig+0x1f0>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d00b      	beq.n	8009652 <TIM_Base_SetConfig+0x192>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a1d      	ldr	r2, [pc, #116]	@ (80096b4 <TIM_Base_SetConfig+0x1f4>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d007      	beq.n	8009652 <TIM_Base_SetConfig+0x192>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a1c      	ldr	r2, [pc, #112]	@ (80096b8 <TIM_Base_SetConfig+0x1f8>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d003      	beq.n	8009652 <TIM_Base_SetConfig+0x192>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a1b      	ldr	r2, [pc, #108]	@ (80096bc <TIM_Base_SetConfig+0x1fc>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d103      	bne.n	800965a <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	691a      	ldr	r2, [r3, #16]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f043 0204 	orr.w	r2, r3, #4
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	601a      	str	r2, [r3, #0]
}
 8009672:	bf00      	nop
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	40012c00 	.word	0x40012c00
 8009684:	50012c00 	.word	0x50012c00
 8009688:	40000400 	.word	0x40000400
 800968c:	50000400 	.word	0x50000400
 8009690:	40000800 	.word	0x40000800
 8009694:	50000800 	.word	0x50000800
 8009698:	40000c00 	.word	0x40000c00
 800969c:	50000c00 	.word	0x50000c00
 80096a0:	40013400 	.word	0x40013400
 80096a4:	50013400 	.word	0x50013400
 80096a8:	40014000 	.word	0x40014000
 80096ac:	50014000 	.word	0x50014000
 80096b0:	40014400 	.word	0x40014400
 80096b4:	50014400 	.word	0x50014400
 80096b8:	40014800 	.word	0x40014800
 80096bc:	50014800 	.word	0x50014800

080096c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6a1b      	ldr	r3, [r3, #32]
 80096d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	f023 0201 	bic.w	r2, r3, #1
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	699b      	ldr	r3, [r3, #24]
 80096e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	011b      	lsls	r3, r3, #4
 80096f0:	693a      	ldr	r2, [r7, #16]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f023 030a 	bic.w	r3, r3, #10
 80096fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	4313      	orrs	r3, r2
 8009704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	621a      	str	r2, [r3, #32]
}
 8009712:	bf00      	nop
 8009714:	371c      	adds	r7, #28
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800971e:	b480      	push	{r7}
 8009720:	b087      	sub	sp, #28
 8009722:	af00      	add	r7, sp, #0
 8009724:	60f8      	str	r0, [r7, #12]
 8009726:	60b9      	str	r1, [r7, #8]
 8009728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	f023 0210 	bic.w	r2, r3, #16
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	031b      	lsls	r3, r3, #12
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	4313      	orrs	r3, r2
 8009752:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800975a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	011b      	lsls	r3, r3, #4
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	4313      	orrs	r3, r2
 8009764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	621a      	str	r2, [r3, #32]
}
 8009772:	bf00      	nop
 8009774:	371c      	adds	r7, #28
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800977e:	b480      	push	{r7}
 8009780:	b085      	sub	sp, #20
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009794:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4313      	orrs	r3, r2
 80097a0:	f043 0307 	orr.w	r3, r3, #7
 80097a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	609a      	str	r2, [r3, #8]
}
 80097ac:	bf00      	nop
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	021a      	lsls	r2, r3, #8
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	431a      	orrs	r2, r3
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	4313      	orrs	r3, r2
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	609a      	str	r2, [r3, #8]
}
 80097ec:	bf00      	nop
 80097ee:	371c      	adds	r7, #28
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009808:	2b01      	cmp	r3, #1
 800980a:	d101      	bne.n	8009810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800980c:	2302      	movs	r3, #2
 800980e:	e097      	b.n	8009940 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2202      	movs	r2, #2
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a45      	ldr	r2, [pc, #276]	@ (800994c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d00e      	beq.n	8009858 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a44      	ldr	r2, [pc, #272]	@ (8009950 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d009      	beq.n	8009858 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a42      	ldr	r2, [pc, #264]	@ (8009954 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d004      	beq.n	8009858 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a41      	ldr	r2, [pc, #260]	@ (8009958 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d108      	bne.n	800986a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800985e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	4313      	orrs	r3, r2
 8009868:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009874:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	4313      	orrs	r3, r2
 800987e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a2f      	ldr	r2, [pc, #188]	@ (800994c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d040      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a2e      	ldr	r2, [pc, #184]	@ (8009950 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d03b      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098a4:	d036      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098ae:	d031      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a29      	ldr	r2, [pc, #164]	@ (800995c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d02c      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a28      	ldr	r2, [pc, #160]	@ (8009960 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d027      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a26      	ldr	r2, [pc, #152]	@ (8009964 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d022      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a25      	ldr	r2, [pc, #148]	@ (8009968 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d01d      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a23      	ldr	r2, [pc, #140]	@ (800996c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d018      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a22      	ldr	r2, [pc, #136]	@ (8009970 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d013      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a18      	ldr	r2, [pc, #96]	@ (8009954 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d00e      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a17      	ldr	r2, [pc, #92]	@ (8009958 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d009      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a1b      	ldr	r2, [pc, #108]	@ (8009974 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d004      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a1a      	ldr	r2, [pc, #104]	@ (8009978 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d10c      	bne.n	800992e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800991a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	4313      	orrs	r3, r2
 8009924:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3714      	adds	r7, #20
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	40012c00 	.word	0x40012c00
 8009950:	50012c00 	.word	0x50012c00
 8009954:	40013400 	.word	0x40013400
 8009958:	50013400 	.word	0x50013400
 800995c:	40000400 	.word	0x40000400
 8009960:	50000400 	.word	0x50000400
 8009964:	40000800 	.word	0x40000800
 8009968:	50000800 	.word	0x50000800
 800996c:	40000c00 	.word	0x40000c00
 8009970:	50000c00 	.word	0x50000c00
 8009974:	40014000 	.word	0x40014000
 8009978:	50014000 	.word	0x50014000

0800997c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e042      	b.n	8009aa0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d106      	bne.n	8009a32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f83b 	bl	8009aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2224      	movs	r2, #36	@ 0x24
 8009a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f022 0201 	bic.w	r2, r2, #1
 8009a48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fa72 	bl	8009f3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f8cd 	bl	8009bf8 <UART_SetConfig>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d101      	bne.n	8009a68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e01b      	b.n	8009aa0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	689a      	ldr	r2, [r3, #8]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f042 0201 	orr.w	r2, r2, #1
 8009a96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 faf1 	bl	800a080 <UART_CheckIdleState>
 8009a9e:	4603      	mov	r3, r0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08a      	sub	sp, #40	@ 0x28
 8009ac0:	af02      	add	r7, sp, #8
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	603b      	str	r3, [r7, #0]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ad2:	2b20      	cmp	r3, #32
 8009ad4:	f040 808b 	bne.w	8009bee <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d002      	beq.n	8009ae4 <HAL_UART_Transmit+0x28>
 8009ade:	88fb      	ldrh	r3, [r7, #6]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d101      	bne.n	8009ae8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e083      	b.n	8009bf0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009af2:	2b80      	cmp	r3, #128	@ 0x80
 8009af4:	d107      	bne.n	8009b06 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	689a      	ldr	r2, [r3, #8]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009b04:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2221      	movs	r2, #33	@ 0x21
 8009b12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b16:	f7f8 f9c5 	bl	8001ea4 <HAL_GetTick>
 8009b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	88fa      	ldrh	r2, [r7, #6]
 8009b20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	88fa      	ldrh	r2, [r7, #6]
 8009b28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b34:	d108      	bne.n	8009b48 <HAL_UART_Transmit+0x8c>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d104      	bne.n	8009b48 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	61bb      	str	r3, [r7, #24]
 8009b46:	e003      	b.n	8009b50 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b50:	e030      	b.n	8009bb4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2180      	movs	r1, #128	@ 0x80
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 fb39 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d005      	beq.n	8009b74 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e03d      	b.n	8009bf0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10b      	bne.n	8009b92 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	3302      	adds	r3, #2
 8009b8e:	61bb      	str	r3, [r7, #24]
 8009b90:	e007      	b.n	8009ba2 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	781a      	ldrb	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	3b01      	subs	r3, #1
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1c8      	bne.n	8009b52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2140      	movs	r1, #64	@ 0x40
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 fb02 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d005      	beq.n	8009be2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2220      	movs	r2, #32
 8009bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e006      	b.n	8009bf0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2220      	movs	r2, #32
 8009be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	e000      	b.n	8009bf0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009bee:	2302      	movs	r3, #2
  }
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3720      	adds	r7, #32
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bfc:	b094      	sub	sp, #80	@ 0x50
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	4b7e      	ldr	r3, [pc, #504]	@ (8009e08 <UART_SetConfig+0x210>)
 8009c0e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c12:	689a      	ldr	r2, [r3, #8]
 8009c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4977      	ldr	r1, [pc, #476]	@ (8009e0c <UART_SetConfig+0x214>)
 8009c30:	4019      	ands	r1, r3
 8009c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c38:	430b      	orrs	r3, r1
 8009c3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c48:	68d9      	ldr	r1, [r3, #12]
 8009c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	ea40 0301 	orr.w	r3, r0, r1
 8009c52:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8009e08 <UART_SetConfig+0x210>)
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d009      	beq.n	8009c78 <UART_SetConfig+0x80>
 8009c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	4b69      	ldr	r3, [pc, #420]	@ (8009e10 <UART_SetConfig+0x218>)
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d004      	beq.n	8009c78 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c70:	6a1a      	ldr	r2, [r3, #32]
 8009c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c74:	4313      	orrs	r3, r2
 8009c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009c82:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c8c:	430b      	orrs	r3, r1
 8009c8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c96:	f023 000f 	bic.w	r0, r3, #15
 8009c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	ea40 0301 	orr.w	r3, r0, r1
 8009ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	4b59      	ldr	r3, [pc, #356]	@ (8009e14 <UART_SetConfig+0x21c>)
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d102      	bne.n	8009cb8 <UART_SetConfig+0xc0>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cb6:	e029      	b.n	8009d0c <UART_SetConfig+0x114>
 8009cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	4b56      	ldr	r3, [pc, #344]	@ (8009e18 <UART_SetConfig+0x220>)
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d102      	bne.n	8009cc8 <UART_SetConfig+0xd0>
 8009cc2:	2302      	movs	r3, #2
 8009cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cc6:	e021      	b.n	8009d0c <UART_SetConfig+0x114>
 8009cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	4b53      	ldr	r3, [pc, #332]	@ (8009e1c <UART_SetConfig+0x224>)
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d102      	bne.n	8009cd8 <UART_SetConfig+0xe0>
 8009cd2:	2304      	movs	r3, #4
 8009cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cd6:	e019      	b.n	8009d0c <UART_SetConfig+0x114>
 8009cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	4b50      	ldr	r3, [pc, #320]	@ (8009e20 <UART_SetConfig+0x228>)
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d102      	bne.n	8009ce8 <UART_SetConfig+0xf0>
 8009ce2:	2308      	movs	r3, #8
 8009ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ce6:	e011      	b.n	8009d0c <UART_SetConfig+0x114>
 8009ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	4b4d      	ldr	r3, [pc, #308]	@ (8009e24 <UART_SetConfig+0x22c>)
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d102      	bne.n	8009cf8 <UART_SetConfig+0x100>
 8009cf2:	2310      	movs	r3, #16
 8009cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cf6:	e009      	b.n	8009d0c <UART_SetConfig+0x114>
 8009cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	4b42      	ldr	r3, [pc, #264]	@ (8009e08 <UART_SetConfig+0x210>)
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d102      	bne.n	8009d08 <UART_SetConfig+0x110>
 8009d02:	2320      	movs	r3, #32
 8009d04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d06:	e001      	b.n	8009d0c <UART_SetConfig+0x114>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	4b3d      	ldr	r3, [pc, #244]	@ (8009e08 <UART_SetConfig+0x210>)
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d005      	beq.n	8009d22 <UART_SetConfig+0x12a>
 8009d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8009e10 <UART_SetConfig+0x218>)
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	f040 8085 	bne.w	8009e2c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d24:	2200      	movs	r2, #0
 8009d26:	623b      	str	r3, [r7, #32]
 8009d28:	627a      	str	r2, [r7, #36]	@ 0x24
 8009d2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009d2e:	f7fd fd6f 	bl	8007810 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d32:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f000 80e8 	beq.w	8009f0c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d40:	4a39      	ldr	r2, [pc, #228]	@ (8009e28 <UART_SetConfig+0x230>)
 8009d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d46:	461a      	mov	r2, r3
 8009d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d4e:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d52:	685a      	ldr	r2, [r3, #4]
 8009d54:	4613      	mov	r3, r2
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	4413      	add	r3, r2
 8009d5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d305      	bcc.n	8009d6c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d903      	bls.n	8009d74 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009d72:	e048      	b.n	8009e06 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d76:	2200      	movs	r2, #0
 8009d78:	61bb      	str	r3, [r7, #24]
 8009d7a:	61fa      	str	r2, [r7, #28]
 8009d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d80:	4a29      	ldr	r2, [pc, #164]	@ (8009e28 <UART_SetConfig+0x230>)
 8009d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	2200      	movs	r2, #0
 8009d8a:	613b      	str	r3, [r7, #16]
 8009d8c:	617a      	str	r2, [r7, #20]
 8009d8e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009d92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d96:	f7f6 fa6f 	bl	8000278 <__aeabi_uldivmod>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4610      	mov	r0, r2
 8009da0:	4619      	mov	r1, r3
 8009da2:	f04f 0200 	mov.w	r2, #0
 8009da6:	f04f 0300 	mov.w	r3, #0
 8009daa:	020b      	lsls	r3, r1, #8
 8009dac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009db0:	0202      	lsls	r2, r0, #8
 8009db2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009db4:	6849      	ldr	r1, [r1, #4]
 8009db6:	0849      	lsrs	r1, r1, #1
 8009db8:	2000      	movs	r0, #0
 8009dba:	460c      	mov	r4, r1
 8009dbc:	4605      	mov	r5, r0
 8009dbe:	eb12 0804 	adds.w	r8, r2, r4
 8009dc2:	eb43 0905 	adc.w	r9, r3, r5
 8009dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	60bb      	str	r3, [r7, #8]
 8009dce:	60fa      	str	r2, [r7, #12]
 8009dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009dd4:	4640      	mov	r0, r8
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	f7f6 fa4e 	bl	8000278 <__aeabi_uldivmod>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	4613      	mov	r3, r2
 8009de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009de6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dea:	d308      	bcc.n	8009dfe <UART_SetConfig+0x206>
 8009dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009df2:	d204      	bcs.n	8009dfe <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8009df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009dfa:	60da      	str	r2, [r3, #12]
 8009dfc:	e003      	b.n	8009e06 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009e04:	e082      	b.n	8009f0c <UART_SetConfig+0x314>
 8009e06:	e081      	b.n	8009f0c <UART_SetConfig+0x314>
 8009e08:	46002400 	.word	0x46002400
 8009e0c:	cfff69f3 	.word	0xcfff69f3
 8009e10:	56002400 	.word	0x56002400
 8009e14:	40013800 	.word	0x40013800
 8009e18:	40004400 	.word	0x40004400
 8009e1c:	40004800 	.word	0x40004800
 8009e20:	40004c00 	.word	0x40004c00
 8009e24:	40005000 	.word	0x40005000
 8009e28:	0800b560 	.word	0x0800b560
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e34:	d13c      	bne.n	8009eb0 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e38:	2200      	movs	r2, #0
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	607a      	str	r2, [r7, #4]
 8009e3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e42:	f7fd fce5 	bl	8007810 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e46:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d05e      	beq.n	8009f0c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e52:	4a39      	ldr	r2, [pc, #228]	@ (8009f38 <UART_SetConfig+0x340>)
 8009e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e58:	461a      	mov	r2, r3
 8009e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e60:	005a      	lsls	r2, r3, #1
 8009e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	085b      	lsrs	r3, r3, #1
 8009e68:	441a      	add	r2, r3
 8009e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e76:	2b0f      	cmp	r3, #15
 8009e78:	d916      	bls.n	8009ea8 <UART_SetConfig+0x2b0>
 8009e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e80:	d212      	bcs.n	8009ea8 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	f023 030f 	bic.w	r3, r3, #15
 8009e8a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e8e:	085b      	lsrs	r3, r3, #1
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	f003 0307 	and.w	r3, r3, #7
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009ea4:	60da      	str	r2, [r3, #12]
 8009ea6:	e031      	b.n	8009f0c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009eae:	e02d      	b.n	8009f0c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009eb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	469a      	mov	sl, r3
 8009eb6:	4693      	mov	fp, r2
 8009eb8:	4650      	mov	r0, sl
 8009eba:	4659      	mov	r1, fp
 8009ebc:	f7fd fca8 	bl	8007810 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ec0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d021      	beq.n	8009f0c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8009f38 <UART_SetConfig+0x340>)
 8009ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ed6:	fbb3 f2f2 	udiv	r2, r3, r2
 8009eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	085b      	lsrs	r3, r3, #1
 8009ee0:	441a      	add	r2, r3
 8009ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eee:	2b0f      	cmp	r3, #15
 8009ef0:	d909      	bls.n	8009f06 <UART_SetConfig+0x30e>
 8009ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ef8:	d205      	bcs.n	8009f06 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	60da      	str	r2, [r3, #12]
 8009f04:	e002      	b.n	8009f0c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f16:	2201      	movs	r2, #1
 8009f18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f1e:	2200      	movs	r2, #0
 8009f20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f24:	2200      	movs	r2, #0
 8009f26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f28:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3750      	adds	r7, #80	@ 0x50
 8009f30:	46bd      	mov	sp, r7
 8009f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f36:	bf00      	nop
 8009f38:	0800b560 	.word	0x0800b560

08009f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f48:	f003 0308 	and.w	r3, r3, #8
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00a      	beq.n	8009f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00a      	beq.n	8009f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	430a      	orrs	r2, r1
 8009f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f8c:	f003 0302 	and.w	r3, r3, #2
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00a      	beq.n	8009faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fae:	f003 0304 	and.w	r3, r3, #4
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00a      	beq.n	8009fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	430a      	orrs	r2, r1
 8009fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd0:	f003 0310 	and.w	r3, r3, #16
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00a      	beq.n	8009fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	430a      	orrs	r2, r1
 8009fec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff2:	f003 0320 	and.w	r3, r3, #32
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00a      	beq.n	800a010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	430a      	orrs	r2, r1
 800a00e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01a      	beq.n	800a052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	430a      	orrs	r2, r1
 800a030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a03a:	d10a      	bne.n	800a052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00a      	beq.n	800a074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	430a      	orrs	r2, r1
 800a072:	605a      	str	r2, [r3, #4]
  }
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b098      	sub	sp, #96	@ 0x60
 800a084:	af02      	add	r7, sp, #8
 800a086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a090:	f7f7 ff08 	bl	8001ea4 <HAL_GetTick>
 800a094:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 0308 	and.w	r3, r3, #8
 800a0a0:	2b08      	cmp	r3, #8
 800a0a2:	d12f      	bne.n	800a104 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f88e 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d022      	beq.n	800a104 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c6:	e853 3f00 	ldrex	r3, [r3]
 800a0ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0e4:	e841 2300 	strex	r3, r2, [r1]
 800a0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1e6      	bne.n	800a0be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2220      	movs	r2, #32
 800a0f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a100:	2303      	movs	r3, #3
 800a102:	e063      	b.n	800a1cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 0304 	and.w	r3, r3, #4
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d149      	bne.n	800a1a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a112:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a11a:	2200      	movs	r2, #0
 800a11c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f857 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d03c      	beq.n	800a1a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a134:	e853 3f00 	ldrex	r3, [r3]
 800a138:	623b      	str	r3, [r7, #32]
   return(result);
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a14a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a14c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a152:	e841 2300 	strex	r3, r2, [r1]
 800a156:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1e6      	bne.n	800a12c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3308      	adds	r3, #8
 800a164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f023 0301 	bic.w	r3, r3, #1
 800a174:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3308      	adds	r3, #8
 800a17c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a17e:	61fa      	str	r2, [r7, #28]
 800a180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a182:	69b9      	ldr	r1, [r7, #24]
 800a184:	69fa      	ldr	r2, [r7, #28]
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	617b      	str	r3, [r7, #20]
   return(result);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1e5      	bne.n	800a15e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2220      	movs	r2, #32
 800a196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e012      	b.n	800a1cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2220      	movs	r2, #32
 800a1aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3758      	adds	r7, #88	@ 0x58
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e4:	e04f      	b.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ec:	d04b      	beq.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1ee:	f7f7 fe59 	bl	8001ea4 <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d302      	bcc.n	800a204 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e04e      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 0304 	and.w	r3, r3, #4
 800a212:	2b00      	cmp	r3, #0
 800a214:	d037      	beq.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b80      	cmp	r3, #128	@ 0x80
 800a21a:	d034      	beq.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2b40      	cmp	r3, #64	@ 0x40
 800a220:	d031      	beq.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	f003 0308 	and.w	r3, r3, #8
 800a22c:	2b08      	cmp	r3, #8
 800a22e:	d110      	bne.n	800a252 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2208      	movs	r2, #8
 800a236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 f838 	bl	800a2ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2208      	movs	r2, #8
 800a242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e029      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a25c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a260:	d111      	bne.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a26a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f000 f81e 	bl	800a2ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2220      	movs	r2, #32
 800a276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e00f      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	69da      	ldr	r2, [r3, #28]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	4013      	ands	r3, r2
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	429a      	cmp	r2, r3
 800a294:	bf0c      	ite	eq
 800a296:	2301      	moveq	r3, #1
 800a298:	2300      	movne	r3, #0
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	461a      	mov	r2, r3
 800a29e:	79fb      	ldrb	r3, [r7, #7]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d0a0      	beq.n	800a1e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b095      	sub	sp, #84	@ 0x54
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2be:	e853 3f00 	ldrex	r3, [r3]
 800a2c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2dc:	e841 2300 	strex	r3, r2, [r1]
 800a2e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1e6      	bne.n	800a2b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3308      	adds	r3, #8
 800a2ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	e853 3f00 	ldrex	r3, [r3]
 800a2f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2fe:	f023 0301 	bic.w	r3, r3, #1
 800a302:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	3308      	adds	r3, #8
 800a30a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a30c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a30e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a310:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a314:	e841 2300 	strex	r3, r2, [r1]
 800a318:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1e3      	bne.n	800a2e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a324:	2b01      	cmp	r3, #1
 800a326:	d118      	bne.n	800a35a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	e853 3f00 	ldrex	r3, [r3]
 800a334:	60bb      	str	r3, [r7, #8]
   return(result);
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	f023 0310 	bic.w	r3, r3, #16
 800a33c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	461a      	mov	r2, r3
 800a344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a346:	61bb      	str	r3, [r7, #24]
 800a348:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	6979      	ldr	r1, [r7, #20]
 800a34c:	69ba      	ldr	r2, [r7, #24]
 800a34e:	e841 2300 	strex	r3, r2, [r1]
 800a352:	613b      	str	r3, [r7, #16]
   return(result);
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1e6      	bne.n	800a328 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2220      	movs	r2, #32
 800a35e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a36e:	bf00      	nop
 800a370:	3754      	adds	r7, #84	@ 0x54
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
	...

0800a37c <std>:
 800a37c:	2300      	movs	r3, #0
 800a37e:	b510      	push	{r4, lr}
 800a380:	4604      	mov	r4, r0
 800a382:	6083      	str	r3, [r0, #8]
 800a384:	8181      	strh	r1, [r0, #12]
 800a386:	4619      	mov	r1, r3
 800a388:	6643      	str	r3, [r0, #100]	@ 0x64
 800a38a:	81c2      	strh	r2, [r0, #14]
 800a38c:	2208      	movs	r2, #8
 800a38e:	6183      	str	r3, [r0, #24]
 800a390:	e9c0 3300 	strd	r3, r3, [r0]
 800a394:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a398:	305c      	adds	r0, #92	@ 0x5c
 800a39a:	f000 f906 	bl	800a5aa <memset>
 800a39e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d4 <std+0x58>)
 800a3a0:	6224      	str	r4, [r4, #32]
 800a3a2:	6263      	str	r3, [r4, #36]	@ 0x24
 800a3a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d8 <std+0x5c>)
 800a3a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a3a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a3dc <std+0x60>)
 800a3aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a3ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e0 <std+0x64>)
 800a3ae:	6323      	str	r3, [r4, #48]	@ 0x30
 800a3b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e4 <std+0x68>)
 800a3b2:	429c      	cmp	r4, r3
 800a3b4:	d006      	beq.n	800a3c4 <std+0x48>
 800a3b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a3ba:	4294      	cmp	r4, r2
 800a3bc:	d002      	beq.n	800a3c4 <std+0x48>
 800a3be:	33d0      	adds	r3, #208	@ 0xd0
 800a3c0:	429c      	cmp	r4, r3
 800a3c2:	d105      	bne.n	800a3d0 <std+0x54>
 800a3c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3cc:	f000 b966 	b.w	800a69c <__retarget_lock_init_recursive>
 800a3d0:	bd10      	pop	{r4, pc}
 800a3d2:	bf00      	nop
 800a3d4:	0800a525 	.word	0x0800a525
 800a3d8:	0800a547 	.word	0x0800a547
 800a3dc:	0800a57f 	.word	0x0800a57f
 800a3e0:	0800a5a3 	.word	0x0800a5a3
 800a3e4:	20004b68 	.word	0x20004b68

0800a3e8 <stdio_exit_handler>:
 800a3e8:	4a02      	ldr	r2, [pc, #8]	@ (800a3f4 <stdio_exit_handler+0xc>)
 800a3ea:	4903      	ldr	r1, [pc, #12]	@ (800a3f8 <stdio_exit_handler+0x10>)
 800a3ec:	4803      	ldr	r0, [pc, #12]	@ (800a3fc <stdio_exit_handler+0x14>)
 800a3ee:	f000 b869 	b.w	800a4c4 <_fwalk_sglue>
 800a3f2:	bf00      	nop
 800a3f4:	20000048 	.word	0x20000048
 800a3f8:	0800af6d 	.word	0x0800af6d
 800a3fc:	20000058 	.word	0x20000058

0800a400 <cleanup_stdio>:
 800a400:	6841      	ldr	r1, [r0, #4]
 800a402:	4b0c      	ldr	r3, [pc, #48]	@ (800a434 <cleanup_stdio+0x34>)
 800a404:	4299      	cmp	r1, r3
 800a406:	b510      	push	{r4, lr}
 800a408:	4604      	mov	r4, r0
 800a40a:	d001      	beq.n	800a410 <cleanup_stdio+0x10>
 800a40c:	f000 fdae 	bl	800af6c <_fflush_r>
 800a410:	68a1      	ldr	r1, [r4, #8]
 800a412:	4b09      	ldr	r3, [pc, #36]	@ (800a438 <cleanup_stdio+0x38>)
 800a414:	4299      	cmp	r1, r3
 800a416:	d002      	beq.n	800a41e <cleanup_stdio+0x1e>
 800a418:	4620      	mov	r0, r4
 800a41a:	f000 fda7 	bl	800af6c <_fflush_r>
 800a41e:	68e1      	ldr	r1, [r4, #12]
 800a420:	4b06      	ldr	r3, [pc, #24]	@ (800a43c <cleanup_stdio+0x3c>)
 800a422:	4299      	cmp	r1, r3
 800a424:	d004      	beq.n	800a430 <cleanup_stdio+0x30>
 800a426:	4620      	mov	r0, r4
 800a428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a42c:	f000 bd9e 	b.w	800af6c <_fflush_r>
 800a430:	bd10      	pop	{r4, pc}
 800a432:	bf00      	nop
 800a434:	20004b68 	.word	0x20004b68
 800a438:	20004bd0 	.word	0x20004bd0
 800a43c:	20004c38 	.word	0x20004c38

0800a440 <global_stdio_init.part.0>:
 800a440:	b510      	push	{r4, lr}
 800a442:	4b0b      	ldr	r3, [pc, #44]	@ (800a470 <global_stdio_init.part.0+0x30>)
 800a444:	2104      	movs	r1, #4
 800a446:	4c0b      	ldr	r4, [pc, #44]	@ (800a474 <global_stdio_init.part.0+0x34>)
 800a448:	4a0b      	ldr	r2, [pc, #44]	@ (800a478 <global_stdio_init.part.0+0x38>)
 800a44a:	4620      	mov	r0, r4
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	2200      	movs	r2, #0
 800a450:	f7ff ff94 	bl	800a37c <std>
 800a454:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a458:	2201      	movs	r2, #1
 800a45a:	2109      	movs	r1, #9
 800a45c:	f7ff ff8e 	bl	800a37c <std>
 800a460:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a464:	2202      	movs	r2, #2
 800a466:	2112      	movs	r1, #18
 800a468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a46c:	f7ff bf86 	b.w	800a37c <std>
 800a470:	20004ca0 	.word	0x20004ca0
 800a474:	20004b68 	.word	0x20004b68
 800a478:	0800a3e9 	.word	0x0800a3e9

0800a47c <__sfp_lock_acquire>:
 800a47c:	4801      	ldr	r0, [pc, #4]	@ (800a484 <__sfp_lock_acquire+0x8>)
 800a47e:	f000 b90e 	b.w	800a69e <__retarget_lock_acquire_recursive>
 800a482:	bf00      	nop
 800a484:	20004ca9 	.word	0x20004ca9

0800a488 <__sfp_lock_release>:
 800a488:	4801      	ldr	r0, [pc, #4]	@ (800a490 <__sfp_lock_release+0x8>)
 800a48a:	f000 b909 	b.w	800a6a0 <__retarget_lock_release_recursive>
 800a48e:	bf00      	nop
 800a490:	20004ca9 	.word	0x20004ca9

0800a494 <__sinit>:
 800a494:	b510      	push	{r4, lr}
 800a496:	4604      	mov	r4, r0
 800a498:	f7ff fff0 	bl	800a47c <__sfp_lock_acquire>
 800a49c:	6a23      	ldr	r3, [r4, #32]
 800a49e:	b11b      	cbz	r3, 800a4a8 <__sinit+0x14>
 800a4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4a4:	f7ff bff0 	b.w	800a488 <__sfp_lock_release>
 800a4a8:	4b04      	ldr	r3, [pc, #16]	@ (800a4bc <__sinit+0x28>)
 800a4aa:	6223      	str	r3, [r4, #32]
 800a4ac:	4b04      	ldr	r3, [pc, #16]	@ (800a4c0 <__sinit+0x2c>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1f5      	bne.n	800a4a0 <__sinit+0xc>
 800a4b4:	f7ff ffc4 	bl	800a440 <global_stdio_init.part.0>
 800a4b8:	e7f2      	b.n	800a4a0 <__sinit+0xc>
 800a4ba:	bf00      	nop
 800a4bc:	0800a401 	.word	0x0800a401
 800a4c0:	20004ca0 	.word	0x20004ca0

0800a4c4 <_fwalk_sglue>:
 800a4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c8:	4607      	mov	r7, r0
 800a4ca:	4688      	mov	r8, r1
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	2600      	movs	r6, #0
 800a4d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4d4:	f1b9 0901 	subs.w	r9, r9, #1
 800a4d8:	d505      	bpl.n	800a4e6 <_fwalk_sglue+0x22>
 800a4da:	6824      	ldr	r4, [r4, #0]
 800a4dc:	2c00      	cmp	r4, #0
 800a4de:	d1f7      	bne.n	800a4d0 <_fwalk_sglue+0xc>
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4e6:	89ab      	ldrh	r3, [r5, #12]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d907      	bls.n	800a4fc <_fwalk_sglue+0x38>
 800a4ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	d003      	beq.n	800a4fc <_fwalk_sglue+0x38>
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	47c0      	blx	r8
 800a4fa:	4306      	orrs	r6, r0
 800a4fc:	3568      	adds	r5, #104	@ 0x68
 800a4fe:	e7e9      	b.n	800a4d4 <_fwalk_sglue+0x10>

0800a500 <iprintf>:
 800a500:	b40f      	push	{r0, r1, r2, r3}
 800a502:	b507      	push	{r0, r1, r2, lr}
 800a504:	4906      	ldr	r1, [pc, #24]	@ (800a520 <iprintf+0x20>)
 800a506:	ab04      	add	r3, sp, #16
 800a508:	6808      	ldr	r0, [r1, #0]
 800a50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a50e:	6881      	ldr	r1, [r0, #8]
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	f000 f9fd 	bl	800a910 <_vfiprintf_r>
 800a516:	b003      	add	sp, #12
 800a518:	f85d eb04 	ldr.w	lr, [sp], #4
 800a51c:	b004      	add	sp, #16
 800a51e:	4770      	bx	lr
 800a520:	20000054 	.word	0x20000054

0800a524 <__sread>:
 800a524:	b510      	push	{r4, lr}
 800a526:	460c      	mov	r4, r1
 800a528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a52c:	f000 f868 	bl	800a600 <_read_r>
 800a530:	2800      	cmp	r0, #0
 800a532:	bfab      	itete	ge
 800a534:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a536:	89a3      	ldrhlt	r3, [r4, #12]
 800a538:	181b      	addge	r3, r3, r0
 800a53a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a53e:	bfac      	ite	ge
 800a540:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a542:	81a3      	strhlt	r3, [r4, #12]
 800a544:	bd10      	pop	{r4, pc}

0800a546 <__swrite>:
 800a546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a54a:	461f      	mov	r7, r3
 800a54c:	898b      	ldrh	r3, [r1, #12]
 800a54e:	4605      	mov	r5, r0
 800a550:	460c      	mov	r4, r1
 800a552:	05db      	lsls	r3, r3, #23
 800a554:	4616      	mov	r6, r2
 800a556:	d505      	bpl.n	800a564 <__swrite+0x1e>
 800a558:	2302      	movs	r3, #2
 800a55a:	2200      	movs	r2, #0
 800a55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a560:	f000 f83c 	bl	800a5dc <_lseek_r>
 800a564:	89a3      	ldrh	r3, [r4, #12]
 800a566:	4632      	mov	r2, r6
 800a568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a56c:	4628      	mov	r0, r5
 800a56e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a572:	81a3      	strh	r3, [r4, #12]
 800a574:	463b      	mov	r3, r7
 800a576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a57a:	f000 b853 	b.w	800a624 <_write_r>

0800a57e <__sseek>:
 800a57e:	b510      	push	{r4, lr}
 800a580:	460c      	mov	r4, r1
 800a582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a586:	f000 f829 	bl	800a5dc <_lseek_r>
 800a58a:	1c43      	adds	r3, r0, #1
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	bf15      	itete	ne
 800a590:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a592:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a596:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a59a:	81a3      	strheq	r3, [r4, #12]
 800a59c:	bf18      	it	ne
 800a59e:	81a3      	strhne	r3, [r4, #12]
 800a5a0:	bd10      	pop	{r4, pc}

0800a5a2 <__sclose>:
 800a5a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a6:	f000 b809 	b.w	800a5bc <_close_r>

0800a5aa <memset>:
 800a5aa:	4402      	add	r2, r0
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d100      	bne.n	800a5b4 <memset+0xa>
 800a5b2:	4770      	bx	lr
 800a5b4:	f803 1b01 	strb.w	r1, [r3], #1
 800a5b8:	e7f9      	b.n	800a5ae <memset+0x4>
	...

0800a5bc <_close_r>:
 800a5bc:	b538      	push	{r3, r4, r5, lr}
 800a5be:	2300      	movs	r3, #0
 800a5c0:	4d05      	ldr	r5, [pc, #20]	@ (800a5d8 <_close_r+0x1c>)
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	4608      	mov	r0, r1
 800a5c6:	602b      	str	r3, [r5, #0]
 800a5c8:	f7f7 f909 	bl	80017de <_close>
 800a5cc:	1c43      	adds	r3, r0, #1
 800a5ce:	d102      	bne.n	800a5d6 <_close_r+0x1a>
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	b103      	cbz	r3, 800a5d6 <_close_r+0x1a>
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	bd38      	pop	{r3, r4, r5, pc}
 800a5d8:	20004ca4 	.word	0x20004ca4

0800a5dc <_lseek_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	4604      	mov	r4, r0
 800a5e0:	4d06      	ldr	r5, [pc, #24]	@ (800a5fc <_lseek_r+0x20>)
 800a5e2:	4608      	mov	r0, r1
 800a5e4:	4611      	mov	r1, r2
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	602a      	str	r2, [r5, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	f7f7 f91e 	bl	800182c <_lseek>
 800a5f0:	1c43      	adds	r3, r0, #1
 800a5f2:	d102      	bne.n	800a5fa <_lseek_r+0x1e>
 800a5f4:	682b      	ldr	r3, [r5, #0]
 800a5f6:	b103      	cbz	r3, 800a5fa <_lseek_r+0x1e>
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	bd38      	pop	{r3, r4, r5, pc}
 800a5fc:	20004ca4 	.word	0x20004ca4

0800a600 <_read_r>:
 800a600:	b538      	push	{r3, r4, r5, lr}
 800a602:	4604      	mov	r4, r0
 800a604:	4d06      	ldr	r5, [pc, #24]	@ (800a620 <_read_r+0x20>)
 800a606:	4608      	mov	r0, r1
 800a608:	4611      	mov	r1, r2
 800a60a:	2200      	movs	r2, #0
 800a60c:	602a      	str	r2, [r5, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	f7f7 f8ac 	bl	800176c <_read>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d102      	bne.n	800a61e <_read_r+0x1e>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	b103      	cbz	r3, 800a61e <_read_r+0x1e>
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	20004ca4 	.word	0x20004ca4

0800a624 <_write_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4604      	mov	r4, r0
 800a628:	4d06      	ldr	r5, [pc, #24]	@ (800a644 <_write_r+0x20>)
 800a62a:	4608      	mov	r0, r1
 800a62c:	4611      	mov	r1, r2
 800a62e:	2200      	movs	r2, #0
 800a630:	602a      	str	r2, [r5, #0]
 800a632:	461a      	mov	r2, r3
 800a634:	f7f7 f8b7 	bl	80017a6 <_write>
 800a638:	1c43      	adds	r3, r0, #1
 800a63a:	d102      	bne.n	800a642 <_write_r+0x1e>
 800a63c:	682b      	ldr	r3, [r5, #0]
 800a63e:	b103      	cbz	r3, 800a642 <_write_r+0x1e>
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	bd38      	pop	{r3, r4, r5, pc}
 800a644:	20004ca4 	.word	0x20004ca4

0800a648 <__errno>:
 800a648:	4b01      	ldr	r3, [pc, #4]	@ (800a650 <__errno+0x8>)
 800a64a:	6818      	ldr	r0, [r3, #0]
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	20000054 	.word	0x20000054

0800a654 <__libc_init_array>:
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	4d0d      	ldr	r5, [pc, #52]	@ (800a68c <__libc_init_array+0x38>)
 800a658:	2600      	movs	r6, #0
 800a65a:	4c0d      	ldr	r4, [pc, #52]	@ (800a690 <__libc_init_array+0x3c>)
 800a65c:	1b64      	subs	r4, r4, r5
 800a65e:	10a4      	asrs	r4, r4, #2
 800a660:	42a6      	cmp	r6, r4
 800a662:	d109      	bne.n	800a678 <__libc_init_array+0x24>
 800a664:	4d0b      	ldr	r5, [pc, #44]	@ (800a694 <__libc_init_array+0x40>)
 800a666:	2600      	movs	r6, #0
 800a668:	4c0b      	ldr	r4, [pc, #44]	@ (800a698 <__libc_init_array+0x44>)
 800a66a:	f000 fddd 	bl	800b228 <_init>
 800a66e:	1b64      	subs	r4, r4, r5
 800a670:	10a4      	asrs	r4, r4, #2
 800a672:	42a6      	cmp	r6, r4
 800a674:	d105      	bne.n	800a682 <__libc_init_array+0x2e>
 800a676:	bd70      	pop	{r4, r5, r6, pc}
 800a678:	f855 3b04 	ldr.w	r3, [r5], #4
 800a67c:	3601      	adds	r6, #1
 800a67e:	4798      	blx	r3
 800a680:	e7ee      	b.n	800a660 <__libc_init_array+0xc>
 800a682:	f855 3b04 	ldr.w	r3, [r5], #4
 800a686:	3601      	adds	r6, #1
 800a688:	4798      	blx	r3
 800a68a:	e7f2      	b.n	800a672 <__libc_init_array+0x1e>
 800a68c:	0800b5b4 	.word	0x0800b5b4
 800a690:	0800b5b4 	.word	0x0800b5b4
 800a694:	0800b5b4 	.word	0x0800b5b4
 800a698:	0800b5b8 	.word	0x0800b5b8

0800a69c <__retarget_lock_init_recursive>:
 800a69c:	4770      	bx	lr

0800a69e <__retarget_lock_acquire_recursive>:
 800a69e:	4770      	bx	lr

0800a6a0 <__retarget_lock_release_recursive>:
 800a6a0:	4770      	bx	lr

0800a6a2 <strcpy>:
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6a8:	f803 2b01 	strb.w	r2, [r3], #1
 800a6ac:	2a00      	cmp	r2, #0
 800a6ae:	d1f9      	bne.n	800a6a4 <strcpy+0x2>
 800a6b0:	4770      	bx	lr

0800a6b2 <memcpy>:
 800a6b2:	440a      	add	r2, r1
 800a6b4:	1e43      	subs	r3, r0, #1
 800a6b6:	4291      	cmp	r1, r2
 800a6b8:	d100      	bne.n	800a6bc <memcpy+0xa>
 800a6ba:	4770      	bx	lr
 800a6bc:	b510      	push	{r4, lr}
 800a6be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6c2:	4291      	cmp	r1, r2
 800a6c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6c8:	d1f9      	bne.n	800a6be <memcpy+0xc>
 800a6ca:	bd10      	pop	{r4, pc}

0800a6cc <_free_r>:
 800a6cc:	b538      	push	{r3, r4, r5, lr}
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	2900      	cmp	r1, #0
 800a6d2:	d041      	beq.n	800a758 <_free_r+0x8c>
 800a6d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6d8:	1f0c      	subs	r4, r1, #4
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	bfb8      	it	lt
 800a6de:	18e4      	addlt	r4, r4, r3
 800a6e0:	f000 f8e0 	bl	800a8a4 <__malloc_lock>
 800a6e4:	4a1d      	ldr	r2, [pc, #116]	@ (800a75c <_free_r+0x90>)
 800a6e6:	6813      	ldr	r3, [r2, #0]
 800a6e8:	b933      	cbnz	r3, 800a6f8 <_free_r+0x2c>
 800a6ea:	6063      	str	r3, [r4, #4]
 800a6ec:	6014      	str	r4, [r2, #0]
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6f4:	f000 b8dc 	b.w	800a8b0 <__malloc_unlock>
 800a6f8:	42a3      	cmp	r3, r4
 800a6fa:	d908      	bls.n	800a70e <_free_r+0x42>
 800a6fc:	6820      	ldr	r0, [r4, #0]
 800a6fe:	1821      	adds	r1, r4, r0
 800a700:	428b      	cmp	r3, r1
 800a702:	bf01      	itttt	eq
 800a704:	6819      	ldreq	r1, [r3, #0]
 800a706:	685b      	ldreq	r3, [r3, #4]
 800a708:	1809      	addeq	r1, r1, r0
 800a70a:	6021      	streq	r1, [r4, #0]
 800a70c:	e7ed      	b.n	800a6ea <_free_r+0x1e>
 800a70e:	461a      	mov	r2, r3
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	b10b      	cbz	r3, 800a718 <_free_r+0x4c>
 800a714:	42a3      	cmp	r3, r4
 800a716:	d9fa      	bls.n	800a70e <_free_r+0x42>
 800a718:	6811      	ldr	r1, [r2, #0]
 800a71a:	1850      	adds	r0, r2, r1
 800a71c:	42a0      	cmp	r0, r4
 800a71e:	d10b      	bne.n	800a738 <_free_r+0x6c>
 800a720:	6820      	ldr	r0, [r4, #0]
 800a722:	4401      	add	r1, r0
 800a724:	1850      	adds	r0, r2, r1
 800a726:	6011      	str	r1, [r2, #0]
 800a728:	4283      	cmp	r3, r0
 800a72a:	d1e0      	bne.n	800a6ee <_free_r+0x22>
 800a72c:	6818      	ldr	r0, [r3, #0]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	4408      	add	r0, r1
 800a732:	6053      	str	r3, [r2, #4]
 800a734:	6010      	str	r0, [r2, #0]
 800a736:	e7da      	b.n	800a6ee <_free_r+0x22>
 800a738:	d902      	bls.n	800a740 <_free_r+0x74>
 800a73a:	230c      	movs	r3, #12
 800a73c:	602b      	str	r3, [r5, #0]
 800a73e:	e7d6      	b.n	800a6ee <_free_r+0x22>
 800a740:	6820      	ldr	r0, [r4, #0]
 800a742:	1821      	adds	r1, r4, r0
 800a744:	428b      	cmp	r3, r1
 800a746:	bf02      	ittt	eq
 800a748:	6819      	ldreq	r1, [r3, #0]
 800a74a:	685b      	ldreq	r3, [r3, #4]
 800a74c:	1809      	addeq	r1, r1, r0
 800a74e:	6063      	str	r3, [r4, #4]
 800a750:	bf08      	it	eq
 800a752:	6021      	streq	r1, [r4, #0]
 800a754:	6054      	str	r4, [r2, #4]
 800a756:	e7ca      	b.n	800a6ee <_free_r+0x22>
 800a758:	bd38      	pop	{r3, r4, r5, pc}
 800a75a:	bf00      	nop
 800a75c:	20004cb0 	.word	0x20004cb0

0800a760 <sbrk_aligned>:
 800a760:	b570      	push	{r4, r5, r6, lr}
 800a762:	4e0f      	ldr	r6, [pc, #60]	@ (800a7a0 <sbrk_aligned+0x40>)
 800a764:	460c      	mov	r4, r1
 800a766:	4605      	mov	r5, r0
 800a768:	6831      	ldr	r1, [r6, #0]
 800a76a:	b911      	cbnz	r1, 800a772 <sbrk_aligned+0x12>
 800a76c:	f000 fcba 	bl	800b0e4 <_sbrk_r>
 800a770:	6030      	str	r0, [r6, #0]
 800a772:	4621      	mov	r1, r4
 800a774:	4628      	mov	r0, r5
 800a776:	f000 fcb5 	bl	800b0e4 <_sbrk_r>
 800a77a:	1c43      	adds	r3, r0, #1
 800a77c:	d103      	bne.n	800a786 <sbrk_aligned+0x26>
 800a77e:	f04f 34ff 	mov.w	r4, #4294967295
 800a782:	4620      	mov	r0, r4
 800a784:	bd70      	pop	{r4, r5, r6, pc}
 800a786:	1cc4      	adds	r4, r0, #3
 800a788:	f024 0403 	bic.w	r4, r4, #3
 800a78c:	42a0      	cmp	r0, r4
 800a78e:	d0f8      	beq.n	800a782 <sbrk_aligned+0x22>
 800a790:	1a21      	subs	r1, r4, r0
 800a792:	4628      	mov	r0, r5
 800a794:	f000 fca6 	bl	800b0e4 <_sbrk_r>
 800a798:	3001      	adds	r0, #1
 800a79a:	d1f2      	bne.n	800a782 <sbrk_aligned+0x22>
 800a79c:	e7ef      	b.n	800a77e <sbrk_aligned+0x1e>
 800a79e:	bf00      	nop
 800a7a0:	20004cac 	.word	0x20004cac

0800a7a4 <_malloc_r>:
 800a7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a8:	1ccd      	adds	r5, r1, #3
 800a7aa:	4606      	mov	r6, r0
 800a7ac:	f025 0503 	bic.w	r5, r5, #3
 800a7b0:	3508      	adds	r5, #8
 800a7b2:	2d0c      	cmp	r5, #12
 800a7b4:	bf38      	it	cc
 800a7b6:	250c      	movcc	r5, #12
 800a7b8:	2d00      	cmp	r5, #0
 800a7ba:	db01      	blt.n	800a7c0 <_malloc_r+0x1c>
 800a7bc:	42a9      	cmp	r1, r5
 800a7be:	d904      	bls.n	800a7ca <_malloc_r+0x26>
 800a7c0:	230c      	movs	r3, #12
 800a7c2:	6033      	str	r3, [r6, #0]
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8a0 <_malloc_r+0xfc>
 800a7ce:	f000 f869 	bl	800a8a4 <__malloc_lock>
 800a7d2:	f8d8 3000 	ldr.w	r3, [r8]
 800a7d6:	461c      	mov	r4, r3
 800a7d8:	bb44      	cbnz	r4, 800a82c <_malloc_r+0x88>
 800a7da:	4629      	mov	r1, r5
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f7ff ffbf 	bl	800a760 <sbrk_aligned>
 800a7e2:	1c43      	adds	r3, r0, #1
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	d158      	bne.n	800a89a <_malloc_r+0xf6>
 800a7e8:	f8d8 4000 	ldr.w	r4, [r8]
 800a7ec:	4627      	mov	r7, r4
 800a7ee:	2f00      	cmp	r7, #0
 800a7f0:	d143      	bne.n	800a87a <_malloc_r+0xd6>
 800a7f2:	2c00      	cmp	r4, #0
 800a7f4:	d04b      	beq.n	800a88e <_malloc_r+0xea>
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	4639      	mov	r1, r7
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	eb04 0903 	add.w	r9, r4, r3
 800a800:	f000 fc70 	bl	800b0e4 <_sbrk_r>
 800a804:	4581      	cmp	r9, r0
 800a806:	d142      	bne.n	800a88e <_malloc_r+0xea>
 800a808:	6821      	ldr	r1, [r4, #0]
 800a80a:	4630      	mov	r0, r6
 800a80c:	1a6d      	subs	r5, r5, r1
 800a80e:	4629      	mov	r1, r5
 800a810:	f7ff ffa6 	bl	800a760 <sbrk_aligned>
 800a814:	3001      	adds	r0, #1
 800a816:	d03a      	beq.n	800a88e <_malloc_r+0xea>
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	442b      	add	r3, r5
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	f8d8 3000 	ldr.w	r3, [r8]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	bb62      	cbnz	r2, 800a880 <_malloc_r+0xdc>
 800a826:	f8c8 7000 	str.w	r7, [r8]
 800a82a:	e00f      	b.n	800a84c <_malloc_r+0xa8>
 800a82c:	6822      	ldr	r2, [r4, #0]
 800a82e:	1b52      	subs	r2, r2, r5
 800a830:	d420      	bmi.n	800a874 <_malloc_r+0xd0>
 800a832:	2a0b      	cmp	r2, #11
 800a834:	d917      	bls.n	800a866 <_malloc_r+0xc2>
 800a836:	1961      	adds	r1, r4, r5
 800a838:	42a3      	cmp	r3, r4
 800a83a:	6025      	str	r5, [r4, #0]
 800a83c:	bf18      	it	ne
 800a83e:	6059      	strne	r1, [r3, #4]
 800a840:	6863      	ldr	r3, [r4, #4]
 800a842:	bf08      	it	eq
 800a844:	f8c8 1000 	streq.w	r1, [r8]
 800a848:	5162      	str	r2, [r4, r5]
 800a84a:	604b      	str	r3, [r1, #4]
 800a84c:	4630      	mov	r0, r6
 800a84e:	f000 f82f 	bl	800a8b0 <__malloc_unlock>
 800a852:	f104 000b 	add.w	r0, r4, #11
 800a856:	1d23      	adds	r3, r4, #4
 800a858:	f020 0007 	bic.w	r0, r0, #7
 800a85c:	1ac2      	subs	r2, r0, r3
 800a85e:	bf1c      	itt	ne
 800a860:	1a1b      	subne	r3, r3, r0
 800a862:	50a3      	strne	r3, [r4, r2]
 800a864:	e7af      	b.n	800a7c6 <_malloc_r+0x22>
 800a866:	6862      	ldr	r2, [r4, #4]
 800a868:	42a3      	cmp	r3, r4
 800a86a:	bf0c      	ite	eq
 800a86c:	f8c8 2000 	streq.w	r2, [r8]
 800a870:	605a      	strne	r2, [r3, #4]
 800a872:	e7eb      	b.n	800a84c <_malloc_r+0xa8>
 800a874:	4623      	mov	r3, r4
 800a876:	6864      	ldr	r4, [r4, #4]
 800a878:	e7ae      	b.n	800a7d8 <_malloc_r+0x34>
 800a87a:	463c      	mov	r4, r7
 800a87c:	687f      	ldr	r7, [r7, #4]
 800a87e:	e7b6      	b.n	800a7ee <_malloc_r+0x4a>
 800a880:	461a      	mov	r2, r3
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	42a3      	cmp	r3, r4
 800a886:	d1fb      	bne.n	800a880 <_malloc_r+0xdc>
 800a888:	2300      	movs	r3, #0
 800a88a:	6053      	str	r3, [r2, #4]
 800a88c:	e7de      	b.n	800a84c <_malloc_r+0xa8>
 800a88e:	230c      	movs	r3, #12
 800a890:	4630      	mov	r0, r6
 800a892:	6033      	str	r3, [r6, #0]
 800a894:	f000 f80c 	bl	800a8b0 <__malloc_unlock>
 800a898:	e794      	b.n	800a7c4 <_malloc_r+0x20>
 800a89a:	6005      	str	r5, [r0, #0]
 800a89c:	e7d6      	b.n	800a84c <_malloc_r+0xa8>
 800a89e:	bf00      	nop
 800a8a0:	20004cb0 	.word	0x20004cb0

0800a8a4 <__malloc_lock>:
 800a8a4:	4801      	ldr	r0, [pc, #4]	@ (800a8ac <__malloc_lock+0x8>)
 800a8a6:	f7ff befa 	b.w	800a69e <__retarget_lock_acquire_recursive>
 800a8aa:	bf00      	nop
 800a8ac:	20004ca8 	.word	0x20004ca8

0800a8b0 <__malloc_unlock>:
 800a8b0:	4801      	ldr	r0, [pc, #4]	@ (800a8b8 <__malloc_unlock+0x8>)
 800a8b2:	f7ff bef5 	b.w	800a6a0 <__retarget_lock_release_recursive>
 800a8b6:	bf00      	nop
 800a8b8:	20004ca8 	.word	0x20004ca8

0800a8bc <__sfputc_r>:
 800a8bc:	6893      	ldr	r3, [r2, #8]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	6093      	str	r3, [r2, #8]
 800a8c4:	b410      	push	{r4}
 800a8c6:	da08      	bge.n	800a8da <__sfputc_r+0x1e>
 800a8c8:	6994      	ldr	r4, [r2, #24]
 800a8ca:	42a3      	cmp	r3, r4
 800a8cc:	db01      	blt.n	800a8d2 <__sfputc_r+0x16>
 800a8ce:	290a      	cmp	r1, #10
 800a8d0:	d103      	bne.n	800a8da <__sfputc_r+0x1e>
 800a8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8d6:	f000 bb71 	b.w	800afbc <__swbuf_r>
 800a8da:	6813      	ldr	r3, [r2, #0]
 800a8dc:	1c58      	adds	r0, r3, #1
 800a8de:	6010      	str	r0, [r2, #0]
 800a8e0:	4608      	mov	r0, r1
 800a8e2:	7019      	strb	r1, [r3, #0]
 800a8e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <__sfputs_r>:
 800a8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	460f      	mov	r7, r1
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	18d5      	adds	r5, r2, r3
 800a8f4:	42ac      	cmp	r4, r5
 800a8f6:	d101      	bne.n	800a8fc <__sfputs_r+0x12>
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	e007      	b.n	800a90c <__sfputs_r+0x22>
 800a8fc:	463a      	mov	r2, r7
 800a8fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a902:	4630      	mov	r0, r6
 800a904:	f7ff ffda 	bl	800a8bc <__sfputc_r>
 800a908:	1c43      	adds	r3, r0, #1
 800a90a:	d1f3      	bne.n	800a8f4 <__sfputs_r+0xa>
 800a90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a910 <_vfiprintf_r>:
 800a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	460d      	mov	r5, r1
 800a916:	b09d      	sub	sp, #116	@ 0x74
 800a918:	4614      	mov	r4, r2
 800a91a:	4698      	mov	r8, r3
 800a91c:	4606      	mov	r6, r0
 800a91e:	b118      	cbz	r0, 800a928 <_vfiprintf_r+0x18>
 800a920:	6a03      	ldr	r3, [r0, #32]
 800a922:	b90b      	cbnz	r3, 800a928 <_vfiprintf_r+0x18>
 800a924:	f7ff fdb6 	bl	800a494 <__sinit>
 800a928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a92a:	07d9      	lsls	r1, r3, #31
 800a92c:	d405      	bmi.n	800a93a <_vfiprintf_r+0x2a>
 800a92e:	89ab      	ldrh	r3, [r5, #12]
 800a930:	059a      	lsls	r2, r3, #22
 800a932:	d402      	bmi.n	800a93a <_vfiprintf_r+0x2a>
 800a934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a936:	f7ff feb2 	bl	800a69e <__retarget_lock_acquire_recursive>
 800a93a:	89ab      	ldrh	r3, [r5, #12]
 800a93c:	071b      	lsls	r3, r3, #28
 800a93e:	d501      	bpl.n	800a944 <_vfiprintf_r+0x34>
 800a940:	692b      	ldr	r3, [r5, #16]
 800a942:	b99b      	cbnz	r3, 800a96c <_vfiprintf_r+0x5c>
 800a944:	4629      	mov	r1, r5
 800a946:	4630      	mov	r0, r6
 800a948:	f000 fb76 	bl	800b038 <__swsetup_r>
 800a94c:	b170      	cbz	r0, 800a96c <_vfiprintf_r+0x5c>
 800a94e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a950:	07dc      	lsls	r4, r3, #31
 800a952:	d504      	bpl.n	800a95e <_vfiprintf_r+0x4e>
 800a954:	f04f 30ff 	mov.w	r0, #4294967295
 800a958:	b01d      	add	sp, #116	@ 0x74
 800a95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95e:	89ab      	ldrh	r3, [r5, #12]
 800a960:	0598      	lsls	r0, r3, #22
 800a962:	d4f7      	bmi.n	800a954 <_vfiprintf_r+0x44>
 800a964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a966:	f7ff fe9b 	bl	800a6a0 <__retarget_lock_release_recursive>
 800a96a:	e7f3      	b.n	800a954 <_vfiprintf_r+0x44>
 800a96c:	2300      	movs	r3, #0
 800a96e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a972:	f04f 0901 	mov.w	r9, #1
 800a976:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800ab2c <_vfiprintf_r+0x21c>
 800a97a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a97c:	2320      	movs	r3, #32
 800a97e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a982:	2330      	movs	r3, #48	@ 0x30
 800a984:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a988:	4623      	mov	r3, r4
 800a98a:	469a      	mov	sl, r3
 800a98c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a990:	b10a      	cbz	r2, 800a996 <_vfiprintf_r+0x86>
 800a992:	2a25      	cmp	r2, #37	@ 0x25
 800a994:	d1f9      	bne.n	800a98a <_vfiprintf_r+0x7a>
 800a996:	ebba 0b04 	subs.w	fp, sl, r4
 800a99a:	d00b      	beq.n	800a9b4 <_vfiprintf_r+0xa4>
 800a99c:	465b      	mov	r3, fp
 800a99e:	4622      	mov	r2, r4
 800a9a0:	4629      	mov	r1, r5
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f7ff ffa1 	bl	800a8ea <__sfputs_r>
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	f000 80a7 	beq.w	800aafc <_vfiprintf_r+0x1ec>
 800a9ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9b0:	445a      	add	r2, fp
 800a9b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 809f 	beq.w	800aafc <_vfiprintf_r+0x1ec>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c4:	f10a 0a01 	add.w	sl, sl, #1
 800a9c8:	9304      	str	r3, [sp, #16]
 800a9ca:	9307      	str	r3, [sp, #28]
 800a9cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9d6:	4654      	mov	r4, sl
 800a9d8:	2205      	movs	r2, #5
 800a9da:	4854      	ldr	r0, [pc, #336]	@ (800ab2c <_vfiprintf_r+0x21c>)
 800a9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e0:	f000 fb90 	bl	800b104 <memchr>
 800a9e4:	9a04      	ldr	r2, [sp, #16]
 800a9e6:	b9d8      	cbnz	r0, 800aa20 <_vfiprintf_r+0x110>
 800a9e8:	06d1      	lsls	r1, r2, #27
 800a9ea:	bf44      	itt	mi
 800a9ec:	2320      	movmi	r3, #32
 800a9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9f2:	0713      	lsls	r3, r2, #28
 800a9f4:	bf44      	itt	mi
 800a9f6:	232b      	movmi	r3, #43	@ 0x2b
 800a9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800aa00:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa02:	d015      	beq.n	800aa30 <_vfiprintf_r+0x120>
 800aa04:	9a07      	ldr	r2, [sp, #28]
 800aa06:	4654      	mov	r4, sl
 800aa08:	2000      	movs	r0, #0
 800aa0a:	f04f 0c0a 	mov.w	ip, #10
 800aa0e:	4621      	mov	r1, r4
 800aa10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa14:	3b30      	subs	r3, #48	@ 0x30
 800aa16:	2b09      	cmp	r3, #9
 800aa18:	d94b      	bls.n	800aab2 <_vfiprintf_r+0x1a2>
 800aa1a:	b1b0      	cbz	r0, 800aa4a <_vfiprintf_r+0x13a>
 800aa1c:	9207      	str	r2, [sp, #28]
 800aa1e:	e014      	b.n	800aa4a <_vfiprintf_r+0x13a>
 800aa20:	eba0 0308 	sub.w	r3, r0, r8
 800aa24:	46a2      	mov	sl, r4
 800aa26:	fa09 f303 	lsl.w	r3, r9, r3
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	9304      	str	r3, [sp, #16]
 800aa2e:	e7d2      	b.n	800a9d6 <_vfiprintf_r+0xc6>
 800aa30:	9b03      	ldr	r3, [sp, #12]
 800aa32:	1d19      	adds	r1, r3, #4
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	9103      	str	r1, [sp, #12]
 800aa3a:	bfbb      	ittet	lt
 800aa3c:	425b      	neglt	r3, r3
 800aa3e:	f042 0202 	orrlt.w	r2, r2, #2
 800aa42:	9307      	strge	r3, [sp, #28]
 800aa44:	9307      	strlt	r3, [sp, #28]
 800aa46:	bfb8      	it	lt
 800aa48:	9204      	strlt	r2, [sp, #16]
 800aa4a:	7823      	ldrb	r3, [r4, #0]
 800aa4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa4e:	d10a      	bne.n	800aa66 <_vfiprintf_r+0x156>
 800aa50:	7863      	ldrb	r3, [r4, #1]
 800aa52:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa54:	d132      	bne.n	800aabc <_vfiprintf_r+0x1ac>
 800aa56:	9b03      	ldr	r3, [sp, #12]
 800aa58:	3402      	adds	r4, #2
 800aa5a:	1d1a      	adds	r2, r3, #4
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa62:	9203      	str	r2, [sp, #12]
 800aa64:	9305      	str	r3, [sp, #20]
 800aa66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab3c <_vfiprintf_r+0x22c>
 800aa6a:	2203      	movs	r2, #3
 800aa6c:	7821      	ldrb	r1, [r4, #0]
 800aa6e:	4650      	mov	r0, sl
 800aa70:	f000 fb48 	bl	800b104 <memchr>
 800aa74:	b138      	cbz	r0, 800aa86 <_vfiprintf_r+0x176>
 800aa76:	eba0 000a 	sub.w	r0, r0, sl
 800aa7a:	2240      	movs	r2, #64	@ 0x40
 800aa7c:	9b04      	ldr	r3, [sp, #16]
 800aa7e:	3401      	adds	r4, #1
 800aa80:	4082      	lsls	r2, r0
 800aa82:	4313      	orrs	r3, r2
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa8a:	2206      	movs	r2, #6
 800aa8c:	4828      	ldr	r0, [pc, #160]	@ (800ab30 <_vfiprintf_r+0x220>)
 800aa8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa92:	f000 fb37 	bl	800b104 <memchr>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d03f      	beq.n	800ab1a <_vfiprintf_r+0x20a>
 800aa9a:	4b26      	ldr	r3, [pc, #152]	@ (800ab34 <_vfiprintf_r+0x224>)
 800aa9c:	bb1b      	cbnz	r3, 800aae6 <_vfiprintf_r+0x1d6>
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	3307      	adds	r3, #7
 800aaa2:	f023 0307 	bic.w	r3, r3, #7
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	9303      	str	r3, [sp, #12]
 800aaaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaac:	443b      	add	r3, r7
 800aaae:	9309      	str	r3, [sp, #36]	@ 0x24
 800aab0:	e76a      	b.n	800a988 <_vfiprintf_r+0x78>
 800aab2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aab6:	460c      	mov	r4, r1
 800aab8:	2001      	movs	r0, #1
 800aaba:	e7a8      	b.n	800aa0e <_vfiprintf_r+0xfe>
 800aabc:	2300      	movs	r3, #0
 800aabe:	3401      	adds	r4, #1
 800aac0:	f04f 0c0a 	mov.w	ip, #10
 800aac4:	4619      	mov	r1, r3
 800aac6:	9305      	str	r3, [sp, #20]
 800aac8:	4620      	mov	r0, r4
 800aaca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aace:	3a30      	subs	r2, #48	@ 0x30
 800aad0:	2a09      	cmp	r2, #9
 800aad2:	d903      	bls.n	800aadc <_vfiprintf_r+0x1cc>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d0c6      	beq.n	800aa66 <_vfiprintf_r+0x156>
 800aad8:	9105      	str	r1, [sp, #20]
 800aada:	e7c4      	b.n	800aa66 <_vfiprintf_r+0x156>
 800aadc:	fb0c 2101 	mla	r1, ip, r1, r2
 800aae0:	4604      	mov	r4, r0
 800aae2:	2301      	movs	r3, #1
 800aae4:	e7f0      	b.n	800aac8 <_vfiprintf_r+0x1b8>
 800aae6:	ab03      	add	r3, sp, #12
 800aae8:	462a      	mov	r2, r5
 800aaea:	a904      	add	r1, sp, #16
 800aaec:	4630      	mov	r0, r6
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	4b11      	ldr	r3, [pc, #68]	@ (800ab38 <_vfiprintf_r+0x228>)
 800aaf2:	f3af 8000 	nop.w
 800aaf6:	4607      	mov	r7, r0
 800aaf8:	1c78      	adds	r0, r7, #1
 800aafa:	d1d6      	bne.n	800aaaa <_vfiprintf_r+0x19a>
 800aafc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aafe:	07d9      	lsls	r1, r3, #31
 800ab00:	d405      	bmi.n	800ab0e <_vfiprintf_r+0x1fe>
 800ab02:	89ab      	ldrh	r3, [r5, #12]
 800ab04:	059a      	lsls	r2, r3, #22
 800ab06:	d402      	bmi.n	800ab0e <_vfiprintf_r+0x1fe>
 800ab08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab0a:	f7ff fdc9 	bl	800a6a0 <__retarget_lock_release_recursive>
 800ab0e:	89ab      	ldrh	r3, [r5, #12]
 800ab10:	065b      	lsls	r3, r3, #25
 800ab12:	f53f af1f 	bmi.w	800a954 <_vfiprintf_r+0x44>
 800ab16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab18:	e71e      	b.n	800a958 <_vfiprintf_r+0x48>
 800ab1a:	ab03      	add	r3, sp, #12
 800ab1c:	462a      	mov	r2, r5
 800ab1e:	a904      	add	r1, sp, #16
 800ab20:	4630      	mov	r0, r6
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	4b04      	ldr	r3, [pc, #16]	@ (800ab38 <_vfiprintf_r+0x228>)
 800ab26:	f000 f87d 	bl	800ac24 <_printf_i>
 800ab2a:	e7e4      	b.n	800aaf6 <_vfiprintf_r+0x1e6>
 800ab2c:	0800b578 	.word	0x0800b578
 800ab30:	0800b582 	.word	0x0800b582
 800ab34:	00000000 	.word	0x00000000
 800ab38:	0800a8eb 	.word	0x0800a8eb
 800ab3c:	0800b57e 	.word	0x0800b57e

0800ab40 <_printf_common>:
 800ab40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab44:	4616      	mov	r6, r2
 800ab46:	4698      	mov	r8, r3
 800ab48:	688a      	ldr	r2, [r1, #8]
 800ab4a:	4607      	mov	r7, r0
 800ab4c:	690b      	ldr	r3, [r1, #16]
 800ab4e:	460c      	mov	r4, r1
 800ab50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab54:	4293      	cmp	r3, r2
 800ab56:	bfb8      	it	lt
 800ab58:	4613      	movlt	r3, r2
 800ab5a:	6033      	str	r3, [r6, #0]
 800ab5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab60:	b10a      	cbz	r2, 800ab66 <_printf_common+0x26>
 800ab62:	3301      	adds	r3, #1
 800ab64:	6033      	str	r3, [r6, #0]
 800ab66:	6823      	ldr	r3, [r4, #0]
 800ab68:	0699      	lsls	r1, r3, #26
 800ab6a:	bf42      	ittt	mi
 800ab6c:	6833      	ldrmi	r3, [r6, #0]
 800ab6e:	3302      	addmi	r3, #2
 800ab70:	6033      	strmi	r3, [r6, #0]
 800ab72:	6825      	ldr	r5, [r4, #0]
 800ab74:	f015 0506 	ands.w	r5, r5, #6
 800ab78:	d106      	bne.n	800ab88 <_printf_common+0x48>
 800ab7a:	f104 0a19 	add.w	sl, r4, #25
 800ab7e:	68e3      	ldr	r3, [r4, #12]
 800ab80:	6832      	ldr	r2, [r6, #0]
 800ab82:	1a9b      	subs	r3, r3, r2
 800ab84:	42ab      	cmp	r3, r5
 800ab86:	dc2b      	bgt.n	800abe0 <_printf_common+0xa0>
 800ab88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab8c:	6822      	ldr	r2, [r4, #0]
 800ab8e:	3b00      	subs	r3, #0
 800ab90:	bf18      	it	ne
 800ab92:	2301      	movne	r3, #1
 800ab94:	0692      	lsls	r2, r2, #26
 800ab96:	d430      	bmi.n	800abfa <_printf_common+0xba>
 800ab98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab9c:	4641      	mov	r1, r8
 800ab9e:	4638      	mov	r0, r7
 800aba0:	47c8      	blx	r9
 800aba2:	3001      	adds	r0, #1
 800aba4:	d023      	beq.n	800abee <_printf_common+0xae>
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	341a      	adds	r4, #26
 800abaa:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800abae:	f003 0306 	and.w	r3, r3, #6
 800abb2:	2b04      	cmp	r3, #4
 800abb4:	bf0a      	itet	eq
 800abb6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800abba:	2500      	movne	r5, #0
 800abbc:	6833      	ldreq	r3, [r6, #0]
 800abbe:	f04f 0600 	mov.w	r6, #0
 800abc2:	bf08      	it	eq
 800abc4:	1aed      	subeq	r5, r5, r3
 800abc6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800abca:	bf08      	it	eq
 800abcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abd0:	4293      	cmp	r3, r2
 800abd2:	bfc4      	itt	gt
 800abd4:	1a9b      	subgt	r3, r3, r2
 800abd6:	18ed      	addgt	r5, r5, r3
 800abd8:	42b5      	cmp	r5, r6
 800abda:	d11a      	bne.n	800ac12 <_printf_common+0xd2>
 800abdc:	2000      	movs	r0, #0
 800abde:	e008      	b.n	800abf2 <_printf_common+0xb2>
 800abe0:	2301      	movs	r3, #1
 800abe2:	4652      	mov	r2, sl
 800abe4:	4641      	mov	r1, r8
 800abe6:	4638      	mov	r0, r7
 800abe8:	47c8      	blx	r9
 800abea:	3001      	adds	r0, #1
 800abec:	d103      	bne.n	800abf6 <_printf_common+0xb6>
 800abee:	f04f 30ff 	mov.w	r0, #4294967295
 800abf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf6:	3501      	adds	r5, #1
 800abf8:	e7c1      	b.n	800ab7e <_printf_common+0x3e>
 800abfa:	18e1      	adds	r1, r4, r3
 800abfc:	1c5a      	adds	r2, r3, #1
 800abfe:	2030      	movs	r0, #48	@ 0x30
 800ac00:	3302      	adds	r3, #2
 800ac02:	4422      	add	r2, r4
 800ac04:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac10:	e7c2      	b.n	800ab98 <_printf_common+0x58>
 800ac12:	2301      	movs	r3, #1
 800ac14:	4622      	mov	r2, r4
 800ac16:	4641      	mov	r1, r8
 800ac18:	4638      	mov	r0, r7
 800ac1a:	47c8      	blx	r9
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	d0e6      	beq.n	800abee <_printf_common+0xae>
 800ac20:	3601      	adds	r6, #1
 800ac22:	e7d9      	b.n	800abd8 <_printf_common+0x98>

0800ac24 <_printf_i>:
 800ac24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac28:	7e0f      	ldrb	r7, [r1, #24]
 800ac2a:	4691      	mov	r9, r2
 800ac2c:	4680      	mov	r8, r0
 800ac2e:	460c      	mov	r4, r1
 800ac30:	2f78      	cmp	r7, #120	@ 0x78
 800ac32:	469a      	mov	sl, r3
 800ac34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac3a:	d807      	bhi.n	800ac4c <_printf_i+0x28>
 800ac3c:	2f62      	cmp	r7, #98	@ 0x62
 800ac3e:	d80a      	bhi.n	800ac56 <_printf_i+0x32>
 800ac40:	2f00      	cmp	r7, #0
 800ac42:	f000 80d2 	beq.w	800adea <_printf_i+0x1c6>
 800ac46:	2f58      	cmp	r7, #88	@ 0x58
 800ac48:	f000 80b9 	beq.w	800adbe <_printf_i+0x19a>
 800ac4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac54:	e03a      	b.n	800accc <_printf_i+0xa8>
 800ac56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac5a:	2b15      	cmp	r3, #21
 800ac5c:	d8f6      	bhi.n	800ac4c <_printf_i+0x28>
 800ac5e:	a101      	add	r1, pc, #4	@ (adr r1, 800ac64 <_printf_i+0x40>)
 800ac60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac64:	0800acbd 	.word	0x0800acbd
 800ac68:	0800acd1 	.word	0x0800acd1
 800ac6c:	0800ac4d 	.word	0x0800ac4d
 800ac70:	0800ac4d 	.word	0x0800ac4d
 800ac74:	0800ac4d 	.word	0x0800ac4d
 800ac78:	0800ac4d 	.word	0x0800ac4d
 800ac7c:	0800acd1 	.word	0x0800acd1
 800ac80:	0800ac4d 	.word	0x0800ac4d
 800ac84:	0800ac4d 	.word	0x0800ac4d
 800ac88:	0800ac4d 	.word	0x0800ac4d
 800ac8c:	0800ac4d 	.word	0x0800ac4d
 800ac90:	0800add1 	.word	0x0800add1
 800ac94:	0800acfb 	.word	0x0800acfb
 800ac98:	0800ad8b 	.word	0x0800ad8b
 800ac9c:	0800ac4d 	.word	0x0800ac4d
 800aca0:	0800ac4d 	.word	0x0800ac4d
 800aca4:	0800adf3 	.word	0x0800adf3
 800aca8:	0800ac4d 	.word	0x0800ac4d
 800acac:	0800acfb 	.word	0x0800acfb
 800acb0:	0800ac4d 	.word	0x0800ac4d
 800acb4:	0800ac4d 	.word	0x0800ac4d
 800acb8:	0800ad93 	.word	0x0800ad93
 800acbc:	6833      	ldr	r3, [r6, #0]
 800acbe:	1d1a      	adds	r2, r3, #4
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6032      	str	r2, [r6, #0]
 800acc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800accc:	2301      	movs	r3, #1
 800acce:	e09d      	b.n	800ae0c <_printf_i+0x1e8>
 800acd0:	6833      	ldr	r3, [r6, #0]
 800acd2:	6820      	ldr	r0, [r4, #0]
 800acd4:	1d19      	adds	r1, r3, #4
 800acd6:	6031      	str	r1, [r6, #0]
 800acd8:	0606      	lsls	r6, r0, #24
 800acda:	d501      	bpl.n	800ace0 <_printf_i+0xbc>
 800acdc:	681d      	ldr	r5, [r3, #0]
 800acde:	e003      	b.n	800ace8 <_printf_i+0xc4>
 800ace0:	0645      	lsls	r5, r0, #25
 800ace2:	d5fb      	bpl.n	800acdc <_printf_i+0xb8>
 800ace4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ace8:	2d00      	cmp	r5, #0
 800acea:	da03      	bge.n	800acf4 <_printf_i+0xd0>
 800acec:	232d      	movs	r3, #45	@ 0x2d
 800acee:	426d      	negs	r5, r5
 800acf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acf4:	4859      	ldr	r0, [pc, #356]	@ (800ae5c <_printf_i+0x238>)
 800acf6:	230a      	movs	r3, #10
 800acf8:	e011      	b.n	800ad1e <_printf_i+0xfa>
 800acfa:	6821      	ldr	r1, [r4, #0]
 800acfc:	6833      	ldr	r3, [r6, #0]
 800acfe:	0608      	lsls	r0, r1, #24
 800ad00:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad04:	d402      	bmi.n	800ad0c <_printf_i+0xe8>
 800ad06:	0649      	lsls	r1, r1, #25
 800ad08:	bf48      	it	mi
 800ad0a:	b2ad      	uxthmi	r5, r5
 800ad0c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad0e:	6033      	str	r3, [r6, #0]
 800ad10:	4852      	ldr	r0, [pc, #328]	@ (800ae5c <_printf_i+0x238>)
 800ad12:	bf14      	ite	ne
 800ad14:	230a      	movne	r3, #10
 800ad16:	2308      	moveq	r3, #8
 800ad18:	2100      	movs	r1, #0
 800ad1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad1e:	6866      	ldr	r6, [r4, #4]
 800ad20:	2e00      	cmp	r6, #0
 800ad22:	60a6      	str	r6, [r4, #8]
 800ad24:	bfa2      	ittt	ge
 800ad26:	6821      	ldrge	r1, [r4, #0]
 800ad28:	f021 0104 	bicge.w	r1, r1, #4
 800ad2c:	6021      	strge	r1, [r4, #0]
 800ad2e:	b90d      	cbnz	r5, 800ad34 <_printf_i+0x110>
 800ad30:	2e00      	cmp	r6, #0
 800ad32:	d04b      	beq.n	800adcc <_printf_i+0x1a8>
 800ad34:	4616      	mov	r6, r2
 800ad36:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad3a:	fb03 5711 	mls	r7, r3, r1, r5
 800ad3e:	5dc7      	ldrb	r7, [r0, r7]
 800ad40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad44:	462f      	mov	r7, r5
 800ad46:	460d      	mov	r5, r1
 800ad48:	42bb      	cmp	r3, r7
 800ad4a:	d9f4      	bls.n	800ad36 <_printf_i+0x112>
 800ad4c:	2b08      	cmp	r3, #8
 800ad4e:	d10b      	bne.n	800ad68 <_printf_i+0x144>
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	07df      	lsls	r7, r3, #31
 800ad54:	d508      	bpl.n	800ad68 <_printf_i+0x144>
 800ad56:	6923      	ldr	r3, [r4, #16]
 800ad58:	6861      	ldr	r1, [r4, #4]
 800ad5a:	4299      	cmp	r1, r3
 800ad5c:	bfde      	ittt	le
 800ad5e:	2330      	movle	r3, #48	@ 0x30
 800ad60:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad64:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad68:	1b92      	subs	r2, r2, r6
 800ad6a:	6122      	str	r2, [r4, #16]
 800ad6c:	464b      	mov	r3, r9
 800ad6e:	aa03      	add	r2, sp, #12
 800ad70:	4621      	mov	r1, r4
 800ad72:	4640      	mov	r0, r8
 800ad74:	f8cd a000 	str.w	sl, [sp]
 800ad78:	f7ff fee2 	bl	800ab40 <_printf_common>
 800ad7c:	3001      	adds	r0, #1
 800ad7e:	d14a      	bne.n	800ae16 <_printf_i+0x1f2>
 800ad80:	f04f 30ff 	mov.w	r0, #4294967295
 800ad84:	b004      	add	sp, #16
 800ad86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad8a:	6823      	ldr	r3, [r4, #0]
 800ad8c:	f043 0320 	orr.w	r3, r3, #32
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	2778      	movs	r7, #120	@ 0x78
 800ad94:	4832      	ldr	r0, [pc, #200]	@ (800ae60 <_printf_i+0x23c>)
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad9c:	061f      	lsls	r7, r3, #24
 800ad9e:	6831      	ldr	r1, [r6, #0]
 800ada0:	f851 5b04 	ldr.w	r5, [r1], #4
 800ada4:	d402      	bmi.n	800adac <_printf_i+0x188>
 800ada6:	065f      	lsls	r7, r3, #25
 800ada8:	bf48      	it	mi
 800adaa:	b2ad      	uxthmi	r5, r5
 800adac:	6031      	str	r1, [r6, #0]
 800adae:	07d9      	lsls	r1, r3, #31
 800adb0:	bf44      	itt	mi
 800adb2:	f043 0320 	orrmi.w	r3, r3, #32
 800adb6:	6023      	strmi	r3, [r4, #0]
 800adb8:	b11d      	cbz	r5, 800adc2 <_printf_i+0x19e>
 800adba:	2310      	movs	r3, #16
 800adbc:	e7ac      	b.n	800ad18 <_printf_i+0xf4>
 800adbe:	4827      	ldr	r0, [pc, #156]	@ (800ae5c <_printf_i+0x238>)
 800adc0:	e7e9      	b.n	800ad96 <_printf_i+0x172>
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	f023 0320 	bic.w	r3, r3, #32
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	e7f6      	b.n	800adba <_printf_i+0x196>
 800adcc:	4616      	mov	r6, r2
 800adce:	e7bd      	b.n	800ad4c <_printf_i+0x128>
 800add0:	6833      	ldr	r3, [r6, #0]
 800add2:	6825      	ldr	r5, [r4, #0]
 800add4:	1d18      	adds	r0, r3, #4
 800add6:	6961      	ldr	r1, [r4, #20]
 800add8:	6030      	str	r0, [r6, #0]
 800adda:	062e      	lsls	r6, r5, #24
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	d501      	bpl.n	800ade4 <_printf_i+0x1c0>
 800ade0:	6019      	str	r1, [r3, #0]
 800ade2:	e002      	b.n	800adea <_printf_i+0x1c6>
 800ade4:	0668      	lsls	r0, r5, #25
 800ade6:	d5fb      	bpl.n	800ade0 <_printf_i+0x1bc>
 800ade8:	8019      	strh	r1, [r3, #0]
 800adea:	2300      	movs	r3, #0
 800adec:	4616      	mov	r6, r2
 800adee:	6123      	str	r3, [r4, #16]
 800adf0:	e7bc      	b.n	800ad6c <_printf_i+0x148>
 800adf2:	6833      	ldr	r3, [r6, #0]
 800adf4:	2100      	movs	r1, #0
 800adf6:	1d1a      	adds	r2, r3, #4
 800adf8:	6032      	str	r2, [r6, #0]
 800adfa:	681e      	ldr	r6, [r3, #0]
 800adfc:	6862      	ldr	r2, [r4, #4]
 800adfe:	4630      	mov	r0, r6
 800ae00:	f000 f980 	bl	800b104 <memchr>
 800ae04:	b108      	cbz	r0, 800ae0a <_printf_i+0x1e6>
 800ae06:	1b80      	subs	r0, r0, r6
 800ae08:	6060      	str	r0, [r4, #4]
 800ae0a:	6863      	ldr	r3, [r4, #4]
 800ae0c:	6123      	str	r3, [r4, #16]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae14:	e7aa      	b.n	800ad6c <_printf_i+0x148>
 800ae16:	6923      	ldr	r3, [r4, #16]
 800ae18:	4632      	mov	r2, r6
 800ae1a:	4649      	mov	r1, r9
 800ae1c:	4640      	mov	r0, r8
 800ae1e:	47d0      	blx	sl
 800ae20:	3001      	adds	r0, #1
 800ae22:	d0ad      	beq.n	800ad80 <_printf_i+0x15c>
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	079b      	lsls	r3, r3, #30
 800ae28:	d413      	bmi.n	800ae52 <_printf_i+0x22e>
 800ae2a:	68e0      	ldr	r0, [r4, #12]
 800ae2c:	9b03      	ldr	r3, [sp, #12]
 800ae2e:	4298      	cmp	r0, r3
 800ae30:	bfb8      	it	lt
 800ae32:	4618      	movlt	r0, r3
 800ae34:	e7a6      	b.n	800ad84 <_printf_i+0x160>
 800ae36:	2301      	movs	r3, #1
 800ae38:	4632      	mov	r2, r6
 800ae3a:	4649      	mov	r1, r9
 800ae3c:	4640      	mov	r0, r8
 800ae3e:	47d0      	blx	sl
 800ae40:	3001      	adds	r0, #1
 800ae42:	d09d      	beq.n	800ad80 <_printf_i+0x15c>
 800ae44:	3501      	adds	r5, #1
 800ae46:	68e3      	ldr	r3, [r4, #12]
 800ae48:	9903      	ldr	r1, [sp, #12]
 800ae4a:	1a5b      	subs	r3, r3, r1
 800ae4c:	42ab      	cmp	r3, r5
 800ae4e:	dcf2      	bgt.n	800ae36 <_printf_i+0x212>
 800ae50:	e7eb      	b.n	800ae2a <_printf_i+0x206>
 800ae52:	2500      	movs	r5, #0
 800ae54:	f104 0619 	add.w	r6, r4, #25
 800ae58:	e7f5      	b.n	800ae46 <_printf_i+0x222>
 800ae5a:	bf00      	nop
 800ae5c:	0800b589 	.word	0x0800b589
 800ae60:	0800b59a 	.word	0x0800b59a

0800ae64 <__sflush_r>:
 800ae64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae6c:	0716      	lsls	r6, r2, #28
 800ae6e:	4605      	mov	r5, r0
 800ae70:	460c      	mov	r4, r1
 800ae72:	d454      	bmi.n	800af1e <__sflush_r+0xba>
 800ae74:	684b      	ldr	r3, [r1, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	dc02      	bgt.n	800ae80 <__sflush_r+0x1c>
 800ae7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	dd48      	ble.n	800af12 <__sflush_r+0xae>
 800ae80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae82:	2e00      	cmp	r6, #0
 800ae84:	d045      	beq.n	800af12 <__sflush_r+0xae>
 800ae86:	2300      	movs	r3, #0
 800ae88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae8c:	682f      	ldr	r7, [r5, #0]
 800ae8e:	6a21      	ldr	r1, [r4, #32]
 800ae90:	602b      	str	r3, [r5, #0]
 800ae92:	d030      	beq.n	800aef6 <__sflush_r+0x92>
 800ae94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	0759      	lsls	r1, r3, #29
 800ae9a:	d505      	bpl.n	800aea8 <__sflush_r+0x44>
 800ae9c:	6863      	ldr	r3, [r4, #4]
 800ae9e:	1ad2      	subs	r2, r2, r3
 800aea0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aea2:	b10b      	cbz	r3, 800aea8 <__sflush_r+0x44>
 800aea4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aea6:	1ad2      	subs	r2, r2, r3
 800aea8:	2300      	movs	r3, #0
 800aeaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aeac:	6a21      	ldr	r1, [r4, #32]
 800aeae:	4628      	mov	r0, r5
 800aeb0:	47b0      	blx	r6
 800aeb2:	1c43      	adds	r3, r0, #1
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	d106      	bne.n	800aec6 <__sflush_r+0x62>
 800aeb8:	6829      	ldr	r1, [r5, #0]
 800aeba:	291d      	cmp	r1, #29
 800aebc:	d82b      	bhi.n	800af16 <__sflush_r+0xb2>
 800aebe:	4a2a      	ldr	r2, [pc, #168]	@ (800af68 <__sflush_r+0x104>)
 800aec0:	410a      	asrs	r2, r1
 800aec2:	07d6      	lsls	r6, r2, #31
 800aec4:	d427      	bmi.n	800af16 <__sflush_r+0xb2>
 800aec6:	2200      	movs	r2, #0
 800aec8:	04d9      	lsls	r1, r3, #19
 800aeca:	6062      	str	r2, [r4, #4]
 800aecc:	6922      	ldr	r2, [r4, #16]
 800aece:	6022      	str	r2, [r4, #0]
 800aed0:	d504      	bpl.n	800aedc <__sflush_r+0x78>
 800aed2:	1c42      	adds	r2, r0, #1
 800aed4:	d101      	bne.n	800aeda <__sflush_r+0x76>
 800aed6:	682b      	ldr	r3, [r5, #0]
 800aed8:	b903      	cbnz	r3, 800aedc <__sflush_r+0x78>
 800aeda:	6560      	str	r0, [r4, #84]	@ 0x54
 800aedc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aede:	602f      	str	r7, [r5, #0]
 800aee0:	b1b9      	cbz	r1, 800af12 <__sflush_r+0xae>
 800aee2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aee6:	4299      	cmp	r1, r3
 800aee8:	d002      	beq.n	800aef0 <__sflush_r+0x8c>
 800aeea:	4628      	mov	r0, r5
 800aeec:	f7ff fbee 	bl	800a6cc <_free_r>
 800aef0:	2300      	movs	r3, #0
 800aef2:	6363      	str	r3, [r4, #52]	@ 0x34
 800aef4:	e00d      	b.n	800af12 <__sflush_r+0xae>
 800aef6:	2301      	movs	r3, #1
 800aef8:	4628      	mov	r0, r5
 800aefa:	47b0      	blx	r6
 800aefc:	4602      	mov	r2, r0
 800aefe:	1c50      	adds	r0, r2, #1
 800af00:	d1c9      	bne.n	800ae96 <__sflush_r+0x32>
 800af02:	682b      	ldr	r3, [r5, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d0c6      	beq.n	800ae96 <__sflush_r+0x32>
 800af08:	2b1d      	cmp	r3, #29
 800af0a:	d001      	beq.n	800af10 <__sflush_r+0xac>
 800af0c:	2b16      	cmp	r3, #22
 800af0e:	d11d      	bne.n	800af4c <__sflush_r+0xe8>
 800af10:	602f      	str	r7, [r5, #0]
 800af12:	2000      	movs	r0, #0
 800af14:	e021      	b.n	800af5a <__sflush_r+0xf6>
 800af16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af1a:	b21b      	sxth	r3, r3
 800af1c:	e01a      	b.n	800af54 <__sflush_r+0xf0>
 800af1e:	690f      	ldr	r7, [r1, #16]
 800af20:	2f00      	cmp	r7, #0
 800af22:	d0f6      	beq.n	800af12 <__sflush_r+0xae>
 800af24:	0793      	lsls	r3, r2, #30
 800af26:	680e      	ldr	r6, [r1, #0]
 800af28:	600f      	str	r7, [r1, #0]
 800af2a:	bf0c      	ite	eq
 800af2c:	694b      	ldreq	r3, [r1, #20]
 800af2e:	2300      	movne	r3, #0
 800af30:	eba6 0807 	sub.w	r8, r6, r7
 800af34:	608b      	str	r3, [r1, #8]
 800af36:	f1b8 0f00 	cmp.w	r8, #0
 800af3a:	ddea      	ble.n	800af12 <__sflush_r+0xae>
 800af3c:	4643      	mov	r3, r8
 800af3e:	463a      	mov	r2, r7
 800af40:	6a21      	ldr	r1, [r4, #32]
 800af42:	4628      	mov	r0, r5
 800af44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af46:	47b0      	blx	r6
 800af48:	2800      	cmp	r0, #0
 800af4a:	dc08      	bgt.n	800af5e <__sflush_r+0xfa>
 800af4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af54:	f04f 30ff 	mov.w	r0, #4294967295
 800af58:	81a3      	strh	r3, [r4, #12]
 800af5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af5e:	4407      	add	r7, r0
 800af60:	eba8 0800 	sub.w	r8, r8, r0
 800af64:	e7e7      	b.n	800af36 <__sflush_r+0xd2>
 800af66:	bf00      	nop
 800af68:	dfbffffe 	.word	0xdfbffffe

0800af6c <_fflush_r>:
 800af6c:	b538      	push	{r3, r4, r5, lr}
 800af6e:	690b      	ldr	r3, [r1, #16]
 800af70:	4605      	mov	r5, r0
 800af72:	460c      	mov	r4, r1
 800af74:	b913      	cbnz	r3, 800af7c <_fflush_r+0x10>
 800af76:	2500      	movs	r5, #0
 800af78:	4628      	mov	r0, r5
 800af7a:	bd38      	pop	{r3, r4, r5, pc}
 800af7c:	b118      	cbz	r0, 800af86 <_fflush_r+0x1a>
 800af7e:	6a03      	ldr	r3, [r0, #32]
 800af80:	b90b      	cbnz	r3, 800af86 <_fflush_r+0x1a>
 800af82:	f7ff fa87 	bl	800a494 <__sinit>
 800af86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0f3      	beq.n	800af76 <_fflush_r+0xa>
 800af8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af90:	07d0      	lsls	r0, r2, #31
 800af92:	d404      	bmi.n	800af9e <_fflush_r+0x32>
 800af94:	0599      	lsls	r1, r3, #22
 800af96:	d402      	bmi.n	800af9e <_fflush_r+0x32>
 800af98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af9a:	f7ff fb80 	bl	800a69e <__retarget_lock_acquire_recursive>
 800af9e:	4628      	mov	r0, r5
 800afa0:	4621      	mov	r1, r4
 800afa2:	f7ff ff5f 	bl	800ae64 <__sflush_r>
 800afa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800afa8:	4605      	mov	r5, r0
 800afaa:	07da      	lsls	r2, r3, #31
 800afac:	d4e4      	bmi.n	800af78 <_fflush_r+0xc>
 800afae:	89a3      	ldrh	r3, [r4, #12]
 800afb0:	059b      	lsls	r3, r3, #22
 800afb2:	d4e1      	bmi.n	800af78 <_fflush_r+0xc>
 800afb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afb6:	f7ff fb73 	bl	800a6a0 <__retarget_lock_release_recursive>
 800afba:	e7dd      	b.n	800af78 <_fflush_r+0xc>

0800afbc <__swbuf_r>:
 800afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afbe:	460e      	mov	r6, r1
 800afc0:	4614      	mov	r4, r2
 800afc2:	4605      	mov	r5, r0
 800afc4:	b118      	cbz	r0, 800afce <__swbuf_r+0x12>
 800afc6:	6a03      	ldr	r3, [r0, #32]
 800afc8:	b90b      	cbnz	r3, 800afce <__swbuf_r+0x12>
 800afca:	f7ff fa63 	bl	800a494 <__sinit>
 800afce:	69a3      	ldr	r3, [r4, #24]
 800afd0:	60a3      	str	r3, [r4, #8]
 800afd2:	89a3      	ldrh	r3, [r4, #12]
 800afd4:	071a      	lsls	r2, r3, #28
 800afd6:	d501      	bpl.n	800afdc <__swbuf_r+0x20>
 800afd8:	6923      	ldr	r3, [r4, #16]
 800afda:	b943      	cbnz	r3, 800afee <__swbuf_r+0x32>
 800afdc:	4621      	mov	r1, r4
 800afde:	4628      	mov	r0, r5
 800afe0:	f000 f82a 	bl	800b038 <__swsetup_r>
 800afe4:	b118      	cbz	r0, 800afee <__swbuf_r+0x32>
 800afe6:	f04f 37ff 	mov.w	r7, #4294967295
 800afea:	4638      	mov	r0, r7
 800afec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	b2f6      	uxtb	r6, r6
 800aff2:	6922      	ldr	r2, [r4, #16]
 800aff4:	4637      	mov	r7, r6
 800aff6:	1a98      	subs	r0, r3, r2
 800aff8:	6963      	ldr	r3, [r4, #20]
 800affa:	4283      	cmp	r3, r0
 800affc:	dc05      	bgt.n	800b00a <__swbuf_r+0x4e>
 800affe:	4621      	mov	r1, r4
 800b000:	4628      	mov	r0, r5
 800b002:	f7ff ffb3 	bl	800af6c <_fflush_r>
 800b006:	2800      	cmp	r0, #0
 800b008:	d1ed      	bne.n	800afe6 <__swbuf_r+0x2a>
 800b00a:	68a3      	ldr	r3, [r4, #8]
 800b00c:	3b01      	subs	r3, #1
 800b00e:	60a3      	str	r3, [r4, #8]
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	1c5a      	adds	r2, r3, #1
 800b014:	6022      	str	r2, [r4, #0]
 800b016:	701e      	strb	r6, [r3, #0]
 800b018:	1c43      	adds	r3, r0, #1
 800b01a:	6962      	ldr	r2, [r4, #20]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d004      	beq.n	800b02a <__swbuf_r+0x6e>
 800b020:	89a3      	ldrh	r3, [r4, #12]
 800b022:	07db      	lsls	r3, r3, #31
 800b024:	d5e1      	bpl.n	800afea <__swbuf_r+0x2e>
 800b026:	2e0a      	cmp	r6, #10
 800b028:	d1df      	bne.n	800afea <__swbuf_r+0x2e>
 800b02a:	4621      	mov	r1, r4
 800b02c:	4628      	mov	r0, r5
 800b02e:	f7ff ff9d 	bl	800af6c <_fflush_r>
 800b032:	2800      	cmp	r0, #0
 800b034:	d0d9      	beq.n	800afea <__swbuf_r+0x2e>
 800b036:	e7d6      	b.n	800afe6 <__swbuf_r+0x2a>

0800b038 <__swsetup_r>:
 800b038:	b538      	push	{r3, r4, r5, lr}
 800b03a:	4b29      	ldr	r3, [pc, #164]	@ (800b0e0 <__swsetup_r+0xa8>)
 800b03c:	4605      	mov	r5, r0
 800b03e:	460c      	mov	r4, r1
 800b040:	6818      	ldr	r0, [r3, #0]
 800b042:	b118      	cbz	r0, 800b04c <__swsetup_r+0x14>
 800b044:	6a03      	ldr	r3, [r0, #32]
 800b046:	b90b      	cbnz	r3, 800b04c <__swsetup_r+0x14>
 800b048:	f7ff fa24 	bl	800a494 <__sinit>
 800b04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b050:	0719      	lsls	r1, r3, #28
 800b052:	d422      	bmi.n	800b09a <__swsetup_r+0x62>
 800b054:	06da      	lsls	r2, r3, #27
 800b056:	d407      	bmi.n	800b068 <__swsetup_r+0x30>
 800b058:	2209      	movs	r2, #9
 800b05a:	602a      	str	r2, [r5, #0]
 800b05c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b060:	f04f 30ff 	mov.w	r0, #4294967295
 800b064:	81a3      	strh	r3, [r4, #12]
 800b066:	e033      	b.n	800b0d0 <__swsetup_r+0x98>
 800b068:	0758      	lsls	r0, r3, #29
 800b06a:	d512      	bpl.n	800b092 <__swsetup_r+0x5a>
 800b06c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b06e:	b141      	cbz	r1, 800b082 <__swsetup_r+0x4a>
 800b070:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b074:	4299      	cmp	r1, r3
 800b076:	d002      	beq.n	800b07e <__swsetup_r+0x46>
 800b078:	4628      	mov	r0, r5
 800b07a:	f7ff fb27 	bl	800a6cc <_free_r>
 800b07e:	2300      	movs	r3, #0
 800b080:	6363      	str	r3, [r4, #52]	@ 0x34
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b088:	81a3      	strh	r3, [r4, #12]
 800b08a:	2300      	movs	r3, #0
 800b08c:	6063      	str	r3, [r4, #4]
 800b08e:	6923      	ldr	r3, [r4, #16]
 800b090:	6023      	str	r3, [r4, #0]
 800b092:	89a3      	ldrh	r3, [r4, #12]
 800b094:	f043 0308 	orr.w	r3, r3, #8
 800b098:	81a3      	strh	r3, [r4, #12]
 800b09a:	6923      	ldr	r3, [r4, #16]
 800b09c:	b94b      	cbnz	r3, 800b0b2 <__swsetup_r+0x7a>
 800b09e:	89a3      	ldrh	r3, [r4, #12]
 800b0a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b0a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0a8:	d003      	beq.n	800b0b2 <__swsetup_r+0x7a>
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	f000 f85c 	bl	800b16a <__smakebuf_r>
 800b0b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0b6:	f013 0201 	ands.w	r2, r3, #1
 800b0ba:	d00a      	beq.n	800b0d2 <__swsetup_r+0x9a>
 800b0bc:	2200      	movs	r2, #0
 800b0be:	60a2      	str	r2, [r4, #8]
 800b0c0:	6962      	ldr	r2, [r4, #20]
 800b0c2:	4252      	negs	r2, r2
 800b0c4:	61a2      	str	r2, [r4, #24]
 800b0c6:	6922      	ldr	r2, [r4, #16]
 800b0c8:	b942      	cbnz	r2, 800b0dc <__swsetup_r+0xa4>
 800b0ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b0ce:	d1c5      	bne.n	800b05c <__swsetup_r+0x24>
 800b0d0:	bd38      	pop	{r3, r4, r5, pc}
 800b0d2:	0799      	lsls	r1, r3, #30
 800b0d4:	bf58      	it	pl
 800b0d6:	6962      	ldrpl	r2, [r4, #20]
 800b0d8:	60a2      	str	r2, [r4, #8]
 800b0da:	e7f4      	b.n	800b0c6 <__swsetup_r+0x8e>
 800b0dc:	2000      	movs	r0, #0
 800b0de:	e7f7      	b.n	800b0d0 <__swsetup_r+0x98>
 800b0e0:	20000054 	.word	0x20000054

0800b0e4 <_sbrk_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	4d05      	ldr	r5, [pc, #20]	@ (800b100 <_sbrk_r+0x1c>)
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	4608      	mov	r0, r1
 800b0ee:	602b      	str	r3, [r5, #0]
 800b0f0:	f7f6 fbaa 	bl	8001848 <_sbrk>
 800b0f4:	1c43      	adds	r3, r0, #1
 800b0f6:	d102      	bne.n	800b0fe <_sbrk_r+0x1a>
 800b0f8:	682b      	ldr	r3, [r5, #0]
 800b0fa:	b103      	cbz	r3, 800b0fe <_sbrk_r+0x1a>
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	bd38      	pop	{r3, r4, r5, pc}
 800b100:	20004ca4 	.word	0x20004ca4

0800b104 <memchr>:
 800b104:	b2c9      	uxtb	r1, r1
 800b106:	4603      	mov	r3, r0
 800b108:	4402      	add	r2, r0
 800b10a:	b510      	push	{r4, lr}
 800b10c:	4293      	cmp	r3, r2
 800b10e:	4618      	mov	r0, r3
 800b110:	d101      	bne.n	800b116 <memchr+0x12>
 800b112:	2000      	movs	r0, #0
 800b114:	e003      	b.n	800b11e <memchr+0x1a>
 800b116:	7804      	ldrb	r4, [r0, #0]
 800b118:	3301      	adds	r3, #1
 800b11a:	428c      	cmp	r4, r1
 800b11c:	d1f6      	bne.n	800b10c <memchr+0x8>
 800b11e:	bd10      	pop	{r4, pc}

0800b120 <__swhatbuf_r>:
 800b120:	b570      	push	{r4, r5, r6, lr}
 800b122:	460c      	mov	r4, r1
 800b124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b128:	b096      	sub	sp, #88	@ 0x58
 800b12a:	4615      	mov	r5, r2
 800b12c:	2900      	cmp	r1, #0
 800b12e:	461e      	mov	r6, r3
 800b130:	da0c      	bge.n	800b14c <__swhatbuf_r+0x2c>
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	2100      	movs	r1, #0
 800b136:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b13a:	bf14      	ite	ne
 800b13c:	2340      	movne	r3, #64	@ 0x40
 800b13e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b142:	2000      	movs	r0, #0
 800b144:	6031      	str	r1, [r6, #0]
 800b146:	602b      	str	r3, [r5, #0]
 800b148:	b016      	add	sp, #88	@ 0x58
 800b14a:	bd70      	pop	{r4, r5, r6, pc}
 800b14c:	466a      	mov	r2, sp
 800b14e:	f000 f849 	bl	800b1e4 <_fstat_r>
 800b152:	2800      	cmp	r0, #0
 800b154:	dbed      	blt.n	800b132 <__swhatbuf_r+0x12>
 800b156:	9901      	ldr	r1, [sp, #4]
 800b158:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b15c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b160:	4259      	negs	r1, r3
 800b162:	4159      	adcs	r1, r3
 800b164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b168:	e7eb      	b.n	800b142 <__swhatbuf_r+0x22>

0800b16a <__smakebuf_r>:
 800b16a:	898b      	ldrh	r3, [r1, #12]
 800b16c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b16e:	079d      	lsls	r5, r3, #30
 800b170:	4606      	mov	r6, r0
 800b172:	460c      	mov	r4, r1
 800b174:	d507      	bpl.n	800b186 <__smakebuf_r+0x1c>
 800b176:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b17a:	6023      	str	r3, [r4, #0]
 800b17c:	6123      	str	r3, [r4, #16]
 800b17e:	2301      	movs	r3, #1
 800b180:	6163      	str	r3, [r4, #20]
 800b182:	b003      	add	sp, #12
 800b184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b186:	ab01      	add	r3, sp, #4
 800b188:	466a      	mov	r2, sp
 800b18a:	f7ff ffc9 	bl	800b120 <__swhatbuf_r>
 800b18e:	9f00      	ldr	r7, [sp, #0]
 800b190:	4605      	mov	r5, r0
 800b192:	4630      	mov	r0, r6
 800b194:	4639      	mov	r1, r7
 800b196:	f7ff fb05 	bl	800a7a4 <_malloc_r>
 800b19a:	b948      	cbnz	r0, 800b1b0 <__smakebuf_r+0x46>
 800b19c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a0:	059a      	lsls	r2, r3, #22
 800b1a2:	d4ee      	bmi.n	800b182 <__smakebuf_r+0x18>
 800b1a4:	f023 0303 	bic.w	r3, r3, #3
 800b1a8:	f043 0302 	orr.w	r3, r3, #2
 800b1ac:	81a3      	strh	r3, [r4, #12]
 800b1ae:	e7e2      	b.n	800b176 <__smakebuf_r+0xc>
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	6020      	str	r0, [r4, #0]
 800b1b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1b8:	81a3      	strh	r3, [r4, #12]
 800b1ba:	9b01      	ldr	r3, [sp, #4]
 800b1bc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1c0:	b15b      	cbz	r3, 800b1da <__smakebuf_r+0x70>
 800b1c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f000 f81e 	bl	800b208 <_isatty_r>
 800b1cc:	b128      	cbz	r0, 800b1da <__smakebuf_r+0x70>
 800b1ce:	89a3      	ldrh	r3, [r4, #12]
 800b1d0:	f023 0303 	bic.w	r3, r3, #3
 800b1d4:	f043 0301 	orr.w	r3, r3, #1
 800b1d8:	81a3      	strh	r3, [r4, #12]
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	431d      	orrs	r5, r3
 800b1de:	81a5      	strh	r5, [r4, #12]
 800b1e0:	e7cf      	b.n	800b182 <__smakebuf_r+0x18>
	...

0800b1e4 <_fstat_r>:
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	4d06      	ldr	r5, [pc, #24]	@ (800b204 <_fstat_r+0x20>)
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	4608      	mov	r0, r1
 800b1ee:	4611      	mov	r1, r2
 800b1f0:	602b      	str	r3, [r5, #0]
 800b1f2:	f7f6 fb00 	bl	80017f6 <_fstat>
 800b1f6:	1c43      	adds	r3, r0, #1
 800b1f8:	d102      	bne.n	800b200 <_fstat_r+0x1c>
 800b1fa:	682b      	ldr	r3, [r5, #0]
 800b1fc:	b103      	cbz	r3, 800b200 <_fstat_r+0x1c>
 800b1fe:	6023      	str	r3, [r4, #0]
 800b200:	bd38      	pop	{r3, r4, r5, pc}
 800b202:	bf00      	nop
 800b204:	20004ca4 	.word	0x20004ca4

0800b208 <_isatty_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	2300      	movs	r3, #0
 800b20c:	4d05      	ldr	r5, [pc, #20]	@ (800b224 <_isatty_r+0x1c>)
 800b20e:	4604      	mov	r4, r0
 800b210:	4608      	mov	r0, r1
 800b212:	602b      	str	r3, [r5, #0]
 800b214:	f7f6 faff 	bl	8001816 <_isatty>
 800b218:	1c43      	adds	r3, r0, #1
 800b21a:	d102      	bne.n	800b222 <_isatty_r+0x1a>
 800b21c:	682b      	ldr	r3, [r5, #0]
 800b21e:	b103      	cbz	r3, 800b222 <_isatty_r+0x1a>
 800b220:	6023      	str	r3, [r4, #0]
 800b222:	bd38      	pop	{r3, r4, r5, pc}
 800b224:	20004ca4 	.word	0x20004ca4

0800b228 <_init>:
 800b228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22a:	bf00      	nop
 800b22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22e:	bc08      	pop	{r3}
 800b230:	469e      	mov	lr, r3
 800b232:	4770      	bx	lr

0800b234 <_fini>:
 800b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b236:	bf00      	nop
 800b238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b23a:	bc08      	pop	{r3}
 800b23c:	469e      	mov	lr, r3
 800b23e:	4770      	bx	lr
